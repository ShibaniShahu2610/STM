
12_I2C_SHT21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006c94  08006c94  00016c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dac  08006dac  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006dac  08006dac  00016dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006db4  08006db4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006db4  08006db4  00016db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006db8  08006db8  00016db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000088  08006e44  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08006e44  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b8f5  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bd4  00000000  00000000  0002b9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0002d5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007f3  00000000  00000000  0002dff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013ea9  00000000  00000000  0002e7eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df22  00000000  00000000  00042694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078a29  00000000  00000000  000505b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c68  00000000  00000000  000c8fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000cbc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006c7c 	.word	0x08006c7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08006c7c 	.word	0x08006c7c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f84c 	bl	8000310 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__aeabi_f2uiz>:
 80002e0:	219e      	movs	r1, #158	; 0x9e
 80002e2:	b510      	push	{r4, lr}
 80002e4:	05c9      	lsls	r1, r1, #23
 80002e6:	1c04      	adds	r4, r0, #0
 80002e8:	f002 fbe6 	bl	8002ab8 <__aeabi_fcmpge>
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d103      	bne.n	80002f8 <__aeabi_f2uiz+0x18>
 80002f0:	1c20      	adds	r0, r4, #0
 80002f2:	f000 fd67 	bl	8000dc4 <__aeabi_f2iz>
 80002f6:	bd10      	pop	{r4, pc}
 80002f8:	219e      	movs	r1, #158	; 0x9e
 80002fa:	1c20      	adds	r0, r4, #0
 80002fc:	05c9      	lsls	r1, r1, #23
 80002fe:	f000 fbc1 	bl	8000a84 <__aeabi_fsub>
 8000302:	f000 fd5f 	bl	8000dc4 <__aeabi_f2iz>
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	061b      	lsls	r3, r3, #24
 800030a:	469c      	mov	ip, r3
 800030c:	4460      	add	r0, ip
 800030e:	e7f2      	b.n	80002f6 <__aeabi_f2uiz+0x16>

08000310 <__udivmoddi4>:
 8000310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000312:	4657      	mov	r7, sl
 8000314:	464e      	mov	r6, r9
 8000316:	4645      	mov	r5, r8
 8000318:	46de      	mov	lr, fp
 800031a:	b5e0      	push	{r5, r6, r7, lr}
 800031c:	0004      	movs	r4, r0
 800031e:	000d      	movs	r5, r1
 8000320:	4692      	mov	sl, r2
 8000322:	4699      	mov	r9, r3
 8000324:	b083      	sub	sp, #12
 8000326:	428b      	cmp	r3, r1
 8000328:	d830      	bhi.n	800038c <__udivmoddi4+0x7c>
 800032a:	d02d      	beq.n	8000388 <__udivmoddi4+0x78>
 800032c:	4649      	mov	r1, r9
 800032e:	4650      	mov	r0, sl
 8000330:	f002 fbea 	bl	8002b08 <__clzdi2>
 8000334:	0029      	movs	r1, r5
 8000336:	0006      	movs	r6, r0
 8000338:	0020      	movs	r0, r4
 800033a:	f002 fbe5 	bl	8002b08 <__clzdi2>
 800033e:	1a33      	subs	r3, r6, r0
 8000340:	4698      	mov	r8, r3
 8000342:	3b20      	subs	r3, #32
 8000344:	d434      	bmi.n	80003b0 <__udivmoddi4+0xa0>
 8000346:	469b      	mov	fp, r3
 8000348:	4653      	mov	r3, sl
 800034a:	465a      	mov	r2, fp
 800034c:	4093      	lsls	r3, r2
 800034e:	4642      	mov	r2, r8
 8000350:	001f      	movs	r7, r3
 8000352:	4653      	mov	r3, sl
 8000354:	4093      	lsls	r3, r2
 8000356:	001e      	movs	r6, r3
 8000358:	42af      	cmp	r7, r5
 800035a:	d83b      	bhi.n	80003d4 <__udivmoddi4+0xc4>
 800035c:	42af      	cmp	r7, r5
 800035e:	d100      	bne.n	8000362 <__udivmoddi4+0x52>
 8000360:	e079      	b.n	8000456 <__udivmoddi4+0x146>
 8000362:	465b      	mov	r3, fp
 8000364:	1ba4      	subs	r4, r4, r6
 8000366:	41bd      	sbcs	r5, r7
 8000368:	2b00      	cmp	r3, #0
 800036a:	da00      	bge.n	800036e <__udivmoddi4+0x5e>
 800036c:	e076      	b.n	800045c <__udivmoddi4+0x14c>
 800036e:	2200      	movs	r2, #0
 8000370:	2300      	movs	r3, #0
 8000372:	9200      	str	r2, [sp, #0]
 8000374:	9301      	str	r3, [sp, #4]
 8000376:	2301      	movs	r3, #1
 8000378:	465a      	mov	r2, fp
 800037a:	4093      	lsls	r3, r2
 800037c:	9301      	str	r3, [sp, #4]
 800037e:	2301      	movs	r3, #1
 8000380:	4642      	mov	r2, r8
 8000382:	4093      	lsls	r3, r2
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	e029      	b.n	80003dc <__udivmoddi4+0xcc>
 8000388:	4282      	cmp	r2, r0
 800038a:	d9cf      	bls.n	800032c <__udivmoddi4+0x1c>
 800038c:	2200      	movs	r2, #0
 800038e:	2300      	movs	r3, #0
 8000390:	9200      	str	r2, [sp, #0]
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <__udivmoddi4+0x8e>
 800039a:	601c      	str	r4, [r3, #0]
 800039c:	605d      	str	r5, [r3, #4]
 800039e:	9800      	ldr	r0, [sp, #0]
 80003a0:	9901      	ldr	r1, [sp, #4]
 80003a2:	b003      	add	sp, #12
 80003a4:	bcf0      	pop	{r4, r5, r6, r7}
 80003a6:	46bb      	mov	fp, r7
 80003a8:	46b2      	mov	sl, r6
 80003aa:	46a9      	mov	r9, r5
 80003ac:	46a0      	mov	r8, r4
 80003ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b0:	4642      	mov	r2, r8
 80003b2:	469b      	mov	fp, r3
 80003b4:	2320      	movs	r3, #32
 80003b6:	1a9b      	subs	r3, r3, r2
 80003b8:	4652      	mov	r2, sl
 80003ba:	40da      	lsrs	r2, r3
 80003bc:	4641      	mov	r1, r8
 80003be:	0013      	movs	r3, r2
 80003c0:	464a      	mov	r2, r9
 80003c2:	408a      	lsls	r2, r1
 80003c4:	0017      	movs	r7, r2
 80003c6:	4642      	mov	r2, r8
 80003c8:	431f      	orrs	r7, r3
 80003ca:	4653      	mov	r3, sl
 80003cc:	4093      	lsls	r3, r2
 80003ce:	001e      	movs	r6, r3
 80003d0:	42af      	cmp	r7, r5
 80003d2:	d9c3      	bls.n	800035c <__udivmoddi4+0x4c>
 80003d4:	2200      	movs	r2, #0
 80003d6:	2300      	movs	r3, #0
 80003d8:	9200      	str	r2, [sp, #0]
 80003da:	9301      	str	r3, [sp, #4]
 80003dc:	4643      	mov	r3, r8
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d0d8      	beq.n	8000394 <__udivmoddi4+0x84>
 80003e2:	07fb      	lsls	r3, r7, #31
 80003e4:	0872      	lsrs	r2, r6, #1
 80003e6:	431a      	orrs	r2, r3
 80003e8:	4646      	mov	r6, r8
 80003ea:	087b      	lsrs	r3, r7, #1
 80003ec:	e00e      	b.n	800040c <__udivmoddi4+0xfc>
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d101      	bne.n	80003f6 <__udivmoddi4+0xe6>
 80003f2:	42a2      	cmp	r2, r4
 80003f4:	d80c      	bhi.n	8000410 <__udivmoddi4+0x100>
 80003f6:	1aa4      	subs	r4, r4, r2
 80003f8:	419d      	sbcs	r5, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	1924      	adds	r4, r4, r4
 80003fe:	416d      	adcs	r5, r5
 8000400:	2100      	movs	r1, #0
 8000402:	3e01      	subs	r6, #1
 8000404:	1824      	adds	r4, r4, r0
 8000406:	414d      	adcs	r5, r1
 8000408:	2e00      	cmp	r6, #0
 800040a:	d006      	beq.n	800041a <__udivmoddi4+0x10a>
 800040c:	42ab      	cmp	r3, r5
 800040e:	d9ee      	bls.n	80003ee <__udivmoddi4+0xde>
 8000410:	3e01      	subs	r6, #1
 8000412:	1924      	adds	r4, r4, r4
 8000414:	416d      	adcs	r5, r5
 8000416:	2e00      	cmp	r6, #0
 8000418:	d1f8      	bne.n	800040c <__udivmoddi4+0xfc>
 800041a:	9800      	ldr	r0, [sp, #0]
 800041c:	9901      	ldr	r1, [sp, #4]
 800041e:	465b      	mov	r3, fp
 8000420:	1900      	adds	r0, r0, r4
 8000422:	4169      	adcs	r1, r5
 8000424:	2b00      	cmp	r3, #0
 8000426:	db24      	blt.n	8000472 <__udivmoddi4+0x162>
 8000428:	002b      	movs	r3, r5
 800042a:	465a      	mov	r2, fp
 800042c:	4644      	mov	r4, r8
 800042e:	40d3      	lsrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	db2a      	blt.n	8000494 <__udivmoddi4+0x184>
 800043e:	0026      	movs	r6, r4
 8000440:	409e      	lsls	r6, r3
 8000442:	0033      	movs	r3, r6
 8000444:	0026      	movs	r6, r4
 8000446:	4647      	mov	r7, r8
 8000448:	40be      	lsls	r6, r7
 800044a:	0032      	movs	r2, r6
 800044c:	1a80      	subs	r0, r0, r2
 800044e:	4199      	sbcs	r1, r3
 8000450:	9000      	str	r0, [sp, #0]
 8000452:	9101      	str	r1, [sp, #4]
 8000454:	e79e      	b.n	8000394 <__udivmoddi4+0x84>
 8000456:	42a3      	cmp	r3, r4
 8000458:	d8bc      	bhi.n	80003d4 <__udivmoddi4+0xc4>
 800045a:	e782      	b.n	8000362 <__udivmoddi4+0x52>
 800045c:	4642      	mov	r2, r8
 800045e:	2320      	movs	r3, #32
 8000460:	2100      	movs	r1, #0
 8000462:	1a9b      	subs	r3, r3, r2
 8000464:	2200      	movs	r2, #0
 8000466:	9100      	str	r1, [sp, #0]
 8000468:	9201      	str	r2, [sp, #4]
 800046a:	2201      	movs	r2, #1
 800046c:	40da      	lsrs	r2, r3
 800046e:	9201      	str	r2, [sp, #4]
 8000470:	e785      	b.n	800037e <__udivmoddi4+0x6e>
 8000472:	4642      	mov	r2, r8
 8000474:	2320      	movs	r3, #32
 8000476:	1a9b      	subs	r3, r3, r2
 8000478:	002a      	movs	r2, r5
 800047a:	4646      	mov	r6, r8
 800047c:	409a      	lsls	r2, r3
 800047e:	0023      	movs	r3, r4
 8000480:	40f3      	lsrs	r3, r6
 8000482:	4644      	mov	r4, r8
 8000484:	4313      	orrs	r3, r2
 8000486:	002a      	movs	r2, r5
 8000488:	40e2      	lsrs	r2, r4
 800048a:	001c      	movs	r4, r3
 800048c:	465b      	mov	r3, fp
 800048e:	0015      	movs	r5, r2
 8000490:	2b00      	cmp	r3, #0
 8000492:	dad4      	bge.n	800043e <__udivmoddi4+0x12e>
 8000494:	4642      	mov	r2, r8
 8000496:	002f      	movs	r7, r5
 8000498:	2320      	movs	r3, #32
 800049a:	0026      	movs	r6, r4
 800049c:	4097      	lsls	r7, r2
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	40de      	lsrs	r6, r3
 80004a2:	003b      	movs	r3, r7
 80004a4:	4333      	orrs	r3, r6
 80004a6:	e7cd      	b.n	8000444 <__udivmoddi4+0x134>

080004a8 <__aeabi_fadd>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	4647      	mov	r7, r8
 80004ac:	46ce      	mov	lr, r9
 80004ae:	024a      	lsls	r2, r1, #9
 80004b0:	0243      	lsls	r3, r0, #9
 80004b2:	0045      	lsls	r5, r0, #1
 80004b4:	0fc4      	lsrs	r4, r0, #31
 80004b6:	0a50      	lsrs	r0, r2, #9
 80004b8:	4680      	mov	r8, r0
 80004ba:	0048      	lsls	r0, r1, #1
 80004bc:	0a5b      	lsrs	r3, r3, #9
 80004be:	0e00      	lsrs	r0, r0, #24
 80004c0:	0992      	lsrs	r2, r2, #6
 80004c2:	4694      	mov	ip, r2
 80004c4:	b580      	push	{r7, lr}
 80004c6:	001e      	movs	r6, r3
 80004c8:	4681      	mov	r9, r0
 80004ca:	0002      	movs	r2, r0
 80004cc:	0e2d      	lsrs	r5, r5, #24
 80004ce:	00df      	lsls	r7, r3, #3
 80004d0:	0fc9      	lsrs	r1, r1, #31
 80004d2:	428c      	cmp	r4, r1
 80004d4:	d024      	beq.n	8000520 <__aeabi_fadd+0x78>
 80004d6:	1a28      	subs	r0, r5, r0
 80004d8:	2800      	cmp	r0, #0
 80004da:	dd0e      	ble.n	80004fa <__aeabi_fadd+0x52>
 80004dc:	2a00      	cmp	r2, #0
 80004de:	d13e      	bne.n	800055e <__aeabi_fadd+0xb6>
 80004e0:	4662      	mov	r2, ip
 80004e2:	2a00      	cmp	r2, #0
 80004e4:	d100      	bne.n	80004e8 <__aeabi_fadd+0x40>
 80004e6:	e0fd      	b.n	80006e4 <__aeabi_fadd+0x23c>
 80004e8:	1e42      	subs	r2, r0, #1
 80004ea:	2801      	cmp	r0, #1
 80004ec:	d100      	bne.n	80004f0 <__aeabi_fadd+0x48>
 80004ee:	e137      	b.n	8000760 <__aeabi_fadd+0x2b8>
 80004f0:	28ff      	cmp	r0, #255	; 0xff
 80004f2:	d100      	bne.n	80004f6 <__aeabi_fadd+0x4e>
 80004f4:	e0a9      	b.n	800064a <__aeabi_fadd+0x1a2>
 80004f6:	0010      	movs	r0, r2
 80004f8:	e039      	b.n	800056e <__aeabi_fadd+0xc6>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	d063      	beq.n	80005c6 <__aeabi_fadd+0x11e>
 80004fe:	464b      	mov	r3, r9
 8000500:	1b52      	subs	r2, r2, r5
 8000502:	2d00      	cmp	r5, #0
 8000504:	d000      	beq.n	8000508 <__aeabi_fadd+0x60>
 8000506:	e0e0      	b.n	80006ca <__aeabi_fadd+0x222>
 8000508:	2f00      	cmp	r7, #0
 800050a:	d100      	bne.n	800050e <__aeabi_fadd+0x66>
 800050c:	e0ce      	b.n	80006ac <__aeabi_fadd+0x204>
 800050e:	1e53      	subs	r3, r2, #1
 8000510:	2a01      	cmp	r2, #1
 8000512:	d100      	bne.n	8000516 <__aeabi_fadd+0x6e>
 8000514:	e155      	b.n	80007c2 <__aeabi_fadd+0x31a>
 8000516:	2aff      	cmp	r2, #255	; 0xff
 8000518:	d100      	bne.n	800051c <__aeabi_fadd+0x74>
 800051a:	e094      	b.n	8000646 <__aeabi_fadd+0x19e>
 800051c:	001a      	movs	r2, r3
 800051e:	e0d9      	b.n	80006d4 <__aeabi_fadd+0x22c>
 8000520:	1a2a      	subs	r2, r5, r0
 8000522:	2a00      	cmp	r2, #0
 8000524:	dc00      	bgt.n	8000528 <__aeabi_fadd+0x80>
 8000526:	e099      	b.n	800065c <__aeabi_fadd+0x1b4>
 8000528:	2800      	cmp	r0, #0
 800052a:	d062      	beq.n	80005f2 <__aeabi_fadd+0x14a>
 800052c:	2dff      	cmp	r5, #255	; 0xff
 800052e:	d100      	bne.n	8000532 <__aeabi_fadd+0x8a>
 8000530:	e08b      	b.n	800064a <__aeabi_fadd+0x1a2>
 8000532:	2380      	movs	r3, #128	; 0x80
 8000534:	4661      	mov	r1, ip
 8000536:	04db      	lsls	r3, r3, #19
 8000538:	4319      	orrs	r1, r3
 800053a:	468c      	mov	ip, r1
 800053c:	2a1b      	cmp	r2, #27
 800053e:	dc00      	bgt.n	8000542 <__aeabi_fadd+0x9a>
 8000540:	e0d2      	b.n	80006e8 <__aeabi_fadd+0x240>
 8000542:	2301      	movs	r3, #1
 8000544:	19db      	adds	r3, r3, r7
 8000546:	015a      	lsls	r2, r3, #5
 8000548:	d56a      	bpl.n	8000620 <__aeabi_fadd+0x178>
 800054a:	3501      	adds	r5, #1
 800054c:	2dff      	cmp	r5, #255	; 0xff
 800054e:	d05b      	beq.n	8000608 <__aeabi_fadd+0x160>
 8000550:	2201      	movs	r2, #1
 8000552:	49a3      	ldr	r1, [pc, #652]	; (80007e0 <__aeabi_fadd+0x338>)
 8000554:	401a      	ands	r2, r3
 8000556:	085b      	lsrs	r3, r3, #1
 8000558:	400b      	ands	r3, r1
 800055a:	4313      	orrs	r3, r2
 800055c:	e01c      	b.n	8000598 <__aeabi_fadd+0xf0>
 800055e:	2dff      	cmp	r5, #255	; 0xff
 8000560:	d100      	bne.n	8000564 <__aeabi_fadd+0xbc>
 8000562:	e072      	b.n	800064a <__aeabi_fadd+0x1a2>
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	4662      	mov	r2, ip
 8000568:	04db      	lsls	r3, r3, #19
 800056a:	431a      	orrs	r2, r3
 800056c:	4694      	mov	ip, r2
 800056e:	281b      	cmp	r0, #27
 8000570:	dc00      	bgt.n	8000574 <__aeabi_fadd+0xcc>
 8000572:	e090      	b.n	8000696 <__aeabi_fadd+0x1ee>
 8000574:	2301      	movs	r3, #1
 8000576:	1afb      	subs	r3, r7, r3
 8000578:	015a      	lsls	r2, r3, #5
 800057a:	d551      	bpl.n	8000620 <__aeabi_fadd+0x178>
 800057c:	019b      	lsls	r3, r3, #6
 800057e:	099e      	lsrs	r6, r3, #6
 8000580:	0030      	movs	r0, r6
 8000582:	f002 faa3 	bl	8002acc <__clzsi2>
 8000586:	0033      	movs	r3, r6
 8000588:	3805      	subs	r0, #5
 800058a:	4083      	lsls	r3, r0
 800058c:	4285      	cmp	r5, r0
 800058e:	dc00      	bgt.n	8000592 <__aeabi_fadd+0xea>
 8000590:	e075      	b.n	800067e <__aeabi_fadd+0x1d6>
 8000592:	4a94      	ldr	r2, [pc, #592]	; (80007e4 <__aeabi_fadd+0x33c>)
 8000594:	1a2d      	subs	r5, r5, r0
 8000596:	4013      	ands	r3, r2
 8000598:	075a      	lsls	r2, r3, #29
 800059a:	d004      	beq.n	80005a6 <__aeabi_fadd+0xfe>
 800059c:	220f      	movs	r2, #15
 800059e:	401a      	ands	r2, r3
 80005a0:	2a04      	cmp	r2, #4
 80005a2:	d000      	beq.n	80005a6 <__aeabi_fadd+0xfe>
 80005a4:	3304      	adds	r3, #4
 80005a6:	015a      	lsls	r2, r3, #5
 80005a8:	d53c      	bpl.n	8000624 <__aeabi_fadd+0x17c>
 80005aa:	1c68      	adds	r0, r5, #1
 80005ac:	2dfe      	cmp	r5, #254	; 0xfe
 80005ae:	d02b      	beq.n	8000608 <__aeabi_fadd+0x160>
 80005b0:	019b      	lsls	r3, r3, #6
 80005b2:	0a5e      	lsrs	r6, r3, #9
 80005b4:	b2c0      	uxtb	r0, r0
 80005b6:	05c0      	lsls	r0, r0, #23
 80005b8:	4330      	orrs	r0, r6
 80005ba:	07e4      	lsls	r4, r4, #31
 80005bc:	4320      	orrs	r0, r4
 80005be:	bcc0      	pop	{r6, r7}
 80005c0:	46b9      	mov	r9, r7
 80005c2:	46b0      	mov	r8, r6
 80005c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005c6:	20fe      	movs	r0, #254	; 0xfe
 80005c8:	1c6a      	adds	r2, r5, #1
 80005ca:	4210      	tst	r0, r2
 80005cc:	d172      	bne.n	80006b4 <__aeabi_fadd+0x20c>
 80005ce:	2d00      	cmp	r5, #0
 80005d0:	d000      	beq.n	80005d4 <__aeabi_fadd+0x12c>
 80005d2:	e0ae      	b.n	8000732 <__aeabi_fadd+0x28a>
 80005d4:	2f00      	cmp	r7, #0
 80005d6:	d100      	bne.n	80005da <__aeabi_fadd+0x132>
 80005d8:	e0ec      	b.n	80007b4 <__aeabi_fadd+0x30c>
 80005da:	4663      	mov	r3, ip
 80005dc:	2000      	movs	r0, #0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0e9      	beq.n	80005b6 <__aeabi_fadd+0x10e>
 80005e2:	1afb      	subs	r3, r7, r3
 80005e4:	015a      	lsls	r2, r3, #5
 80005e6:	d400      	bmi.n	80005ea <__aeabi_fadd+0x142>
 80005e8:	e0f3      	b.n	80007d2 <__aeabi_fadd+0x32a>
 80005ea:	4663      	mov	r3, ip
 80005ec:	000c      	movs	r4, r1
 80005ee:	1bdb      	subs	r3, r3, r7
 80005f0:	e7d2      	b.n	8000598 <__aeabi_fadd+0xf0>
 80005f2:	4661      	mov	r1, ip
 80005f4:	2900      	cmp	r1, #0
 80005f6:	d05b      	beq.n	80006b0 <__aeabi_fadd+0x208>
 80005f8:	1e51      	subs	r1, r2, #1
 80005fa:	2a01      	cmp	r2, #1
 80005fc:	d100      	bne.n	8000600 <__aeabi_fadd+0x158>
 80005fe:	e0a7      	b.n	8000750 <__aeabi_fadd+0x2a8>
 8000600:	2aff      	cmp	r2, #255	; 0xff
 8000602:	d022      	beq.n	800064a <__aeabi_fadd+0x1a2>
 8000604:	000a      	movs	r2, r1
 8000606:	e799      	b.n	800053c <__aeabi_fadd+0x94>
 8000608:	20ff      	movs	r0, #255	; 0xff
 800060a:	2600      	movs	r6, #0
 800060c:	e7d3      	b.n	80005b6 <__aeabi_fadd+0x10e>
 800060e:	21fe      	movs	r1, #254	; 0xfe
 8000610:	1c6a      	adds	r2, r5, #1
 8000612:	4211      	tst	r1, r2
 8000614:	d073      	beq.n	80006fe <__aeabi_fadd+0x256>
 8000616:	2aff      	cmp	r2, #255	; 0xff
 8000618:	d0f6      	beq.n	8000608 <__aeabi_fadd+0x160>
 800061a:	0015      	movs	r5, r2
 800061c:	4467      	add	r7, ip
 800061e:	087b      	lsrs	r3, r7, #1
 8000620:	075a      	lsls	r2, r3, #29
 8000622:	d1bb      	bne.n	800059c <__aeabi_fadd+0xf4>
 8000624:	08db      	lsrs	r3, r3, #3
 8000626:	2dff      	cmp	r5, #255	; 0xff
 8000628:	d00f      	beq.n	800064a <__aeabi_fadd+0x1a2>
 800062a:	025b      	lsls	r3, r3, #9
 800062c:	0a5e      	lsrs	r6, r3, #9
 800062e:	b2e8      	uxtb	r0, r5
 8000630:	e7c1      	b.n	80005b6 <__aeabi_fadd+0x10e>
 8000632:	4662      	mov	r2, ip
 8000634:	2a00      	cmp	r2, #0
 8000636:	d008      	beq.n	800064a <__aeabi_fadd+0x1a2>
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	03d2      	lsls	r2, r2, #15
 800063c:	4213      	tst	r3, r2
 800063e:	d004      	beq.n	800064a <__aeabi_fadd+0x1a2>
 8000640:	4640      	mov	r0, r8
 8000642:	4210      	tst	r0, r2
 8000644:	d101      	bne.n	800064a <__aeabi_fadd+0x1a2>
 8000646:	000c      	movs	r4, r1
 8000648:	4643      	mov	r3, r8
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0dc      	beq.n	8000608 <__aeabi_fadd+0x160>
 800064e:	2680      	movs	r6, #128	; 0x80
 8000650:	03f6      	lsls	r6, r6, #15
 8000652:	431e      	orrs	r6, r3
 8000654:	0276      	lsls	r6, r6, #9
 8000656:	20ff      	movs	r0, #255	; 0xff
 8000658:	0a76      	lsrs	r6, r6, #9
 800065a:	e7ac      	b.n	80005b6 <__aeabi_fadd+0x10e>
 800065c:	2a00      	cmp	r2, #0
 800065e:	d0d6      	beq.n	800060e <__aeabi_fadd+0x166>
 8000660:	1b42      	subs	r2, r0, r5
 8000662:	2d00      	cmp	r5, #0
 8000664:	d05c      	beq.n	8000720 <__aeabi_fadd+0x278>
 8000666:	28ff      	cmp	r0, #255	; 0xff
 8000668:	d0ee      	beq.n	8000648 <__aeabi_fadd+0x1a0>
 800066a:	2380      	movs	r3, #128	; 0x80
 800066c:	04db      	lsls	r3, r3, #19
 800066e:	431f      	orrs	r7, r3
 8000670:	2a1b      	cmp	r2, #27
 8000672:	dc00      	bgt.n	8000676 <__aeabi_fadd+0x1ce>
 8000674:	e082      	b.n	800077c <__aeabi_fadd+0x2d4>
 8000676:	2301      	movs	r3, #1
 8000678:	464d      	mov	r5, r9
 800067a:	4463      	add	r3, ip
 800067c:	e763      	b.n	8000546 <__aeabi_fadd+0x9e>
 800067e:	2220      	movs	r2, #32
 8000680:	1b40      	subs	r0, r0, r5
 8000682:	3001      	adds	r0, #1
 8000684:	1a12      	subs	r2, r2, r0
 8000686:	0019      	movs	r1, r3
 8000688:	4093      	lsls	r3, r2
 800068a:	40c1      	lsrs	r1, r0
 800068c:	1e5a      	subs	r2, r3, #1
 800068e:	4193      	sbcs	r3, r2
 8000690:	2500      	movs	r5, #0
 8000692:	430b      	orrs	r3, r1
 8000694:	e780      	b.n	8000598 <__aeabi_fadd+0xf0>
 8000696:	2320      	movs	r3, #32
 8000698:	4661      	mov	r1, ip
 800069a:	1a1b      	subs	r3, r3, r0
 800069c:	4099      	lsls	r1, r3
 800069e:	4662      	mov	r2, ip
 80006a0:	000b      	movs	r3, r1
 80006a2:	40c2      	lsrs	r2, r0
 80006a4:	1e59      	subs	r1, r3, #1
 80006a6:	418b      	sbcs	r3, r1
 80006a8:	4313      	orrs	r3, r2
 80006aa:	e764      	b.n	8000576 <__aeabi_fadd+0xce>
 80006ac:	000c      	movs	r4, r1
 80006ae:	4643      	mov	r3, r8
 80006b0:	0015      	movs	r5, r2
 80006b2:	e7b8      	b.n	8000626 <__aeabi_fadd+0x17e>
 80006b4:	4663      	mov	r3, ip
 80006b6:	1afe      	subs	r6, r7, r3
 80006b8:	0173      	lsls	r3, r6, #5
 80006ba:	d445      	bmi.n	8000748 <__aeabi_fadd+0x2a0>
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d000      	beq.n	80006c2 <__aeabi_fadd+0x21a>
 80006c0:	e75e      	b.n	8000580 <__aeabi_fadd+0xd8>
 80006c2:	2400      	movs	r4, #0
 80006c4:	2000      	movs	r0, #0
 80006c6:	2600      	movs	r6, #0
 80006c8:	e775      	b.n	80005b6 <__aeabi_fadd+0x10e>
 80006ca:	2bff      	cmp	r3, #255	; 0xff
 80006cc:	d0bb      	beq.n	8000646 <__aeabi_fadd+0x19e>
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	04db      	lsls	r3, r3, #19
 80006d2:	431f      	orrs	r7, r3
 80006d4:	2a1b      	cmp	r2, #27
 80006d6:	dd47      	ble.n	8000768 <__aeabi_fadd+0x2c0>
 80006d8:	2301      	movs	r3, #1
 80006da:	4662      	mov	r2, ip
 80006dc:	000c      	movs	r4, r1
 80006de:	464d      	mov	r5, r9
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	e749      	b.n	8000578 <__aeabi_fadd+0xd0>
 80006e4:	0005      	movs	r5, r0
 80006e6:	e79e      	b.n	8000626 <__aeabi_fadd+0x17e>
 80006e8:	4661      	mov	r1, ip
 80006ea:	2320      	movs	r3, #32
 80006ec:	40d1      	lsrs	r1, r2
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	4662      	mov	r2, ip
 80006f2:	409a      	lsls	r2, r3
 80006f4:	0013      	movs	r3, r2
 80006f6:	1e5a      	subs	r2, r3, #1
 80006f8:	4193      	sbcs	r3, r2
 80006fa:	430b      	orrs	r3, r1
 80006fc:	e722      	b.n	8000544 <__aeabi_fadd+0x9c>
 80006fe:	2d00      	cmp	r5, #0
 8000700:	d146      	bne.n	8000790 <__aeabi_fadd+0x2e8>
 8000702:	2f00      	cmp	r7, #0
 8000704:	d062      	beq.n	80007cc <__aeabi_fadd+0x324>
 8000706:	4663      	mov	r3, ip
 8000708:	2000      	movs	r0, #0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d100      	bne.n	8000710 <__aeabi_fadd+0x268>
 800070e:	e752      	b.n	80005b6 <__aeabi_fadd+0x10e>
 8000710:	003b      	movs	r3, r7
 8000712:	4463      	add	r3, ip
 8000714:	015a      	lsls	r2, r3, #5
 8000716:	d583      	bpl.n	8000620 <__aeabi_fadd+0x178>
 8000718:	4a32      	ldr	r2, [pc, #200]	; (80007e4 <__aeabi_fadd+0x33c>)
 800071a:	3501      	adds	r5, #1
 800071c:	4013      	ands	r3, r2
 800071e:	e77f      	b.n	8000620 <__aeabi_fadd+0x178>
 8000720:	2f00      	cmp	r7, #0
 8000722:	d0c4      	beq.n	80006ae <__aeabi_fadd+0x206>
 8000724:	1e53      	subs	r3, r2, #1
 8000726:	2a01      	cmp	r2, #1
 8000728:	d012      	beq.n	8000750 <__aeabi_fadd+0x2a8>
 800072a:	2aff      	cmp	r2, #255	; 0xff
 800072c:	d08c      	beq.n	8000648 <__aeabi_fadd+0x1a0>
 800072e:	001a      	movs	r2, r3
 8000730:	e79e      	b.n	8000670 <__aeabi_fadd+0x1c8>
 8000732:	2f00      	cmp	r7, #0
 8000734:	d000      	beq.n	8000738 <__aeabi_fadd+0x290>
 8000736:	e77c      	b.n	8000632 <__aeabi_fadd+0x18a>
 8000738:	4663      	mov	r3, ip
 800073a:	2b00      	cmp	r3, #0
 800073c:	d183      	bne.n	8000646 <__aeabi_fadd+0x19e>
 800073e:	2680      	movs	r6, #128	; 0x80
 8000740:	2400      	movs	r4, #0
 8000742:	20ff      	movs	r0, #255	; 0xff
 8000744:	03f6      	lsls	r6, r6, #15
 8000746:	e736      	b.n	80005b6 <__aeabi_fadd+0x10e>
 8000748:	4663      	mov	r3, ip
 800074a:	000c      	movs	r4, r1
 800074c:	1bde      	subs	r6, r3, r7
 800074e:	e717      	b.n	8000580 <__aeabi_fadd+0xd8>
 8000750:	003b      	movs	r3, r7
 8000752:	4463      	add	r3, ip
 8000754:	2501      	movs	r5, #1
 8000756:	015a      	lsls	r2, r3, #5
 8000758:	d400      	bmi.n	800075c <__aeabi_fadd+0x2b4>
 800075a:	e761      	b.n	8000620 <__aeabi_fadd+0x178>
 800075c:	2502      	movs	r5, #2
 800075e:	e6f7      	b.n	8000550 <__aeabi_fadd+0xa8>
 8000760:	4663      	mov	r3, ip
 8000762:	2501      	movs	r5, #1
 8000764:	1afb      	subs	r3, r7, r3
 8000766:	e707      	b.n	8000578 <__aeabi_fadd+0xd0>
 8000768:	2320      	movs	r3, #32
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	0038      	movs	r0, r7
 800076e:	409f      	lsls	r7, r3
 8000770:	003b      	movs	r3, r7
 8000772:	40d0      	lsrs	r0, r2
 8000774:	1e5a      	subs	r2, r3, #1
 8000776:	4193      	sbcs	r3, r2
 8000778:	4303      	orrs	r3, r0
 800077a:	e7ae      	b.n	80006da <__aeabi_fadd+0x232>
 800077c:	2320      	movs	r3, #32
 800077e:	1a9b      	subs	r3, r3, r2
 8000780:	0039      	movs	r1, r7
 8000782:	409f      	lsls	r7, r3
 8000784:	003b      	movs	r3, r7
 8000786:	40d1      	lsrs	r1, r2
 8000788:	1e5a      	subs	r2, r3, #1
 800078a:	4193      	sbcs	r3, r2
 800078c:	430b      	orrs	r3, r1
 800078e:	e773      	b.n	8000678 <__aeabi_fadd+0x1d0>
 8000790:	2f00      	cmp	r7, #0
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x2ee>
 8000794:	e758      	b.n	8000648 <__aeabi_fadd+0x1a0>
 8000796:	4662      	mov	r2, ip
 8000798:	2a00      	cmp	r2, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x2f6>
 800079c:	e755      	b.n	800064a <__aeabi_fadd+0x1a2>
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	03d2      	lsls	r2, r2, #15
 80007a2:	4213      	tst	r3, r2
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fadd+0x300>
 80007a6:	e750      	b.n	800064a <__aeabi_fadd+0x1a2>
 80007a8:	4641      	mov	r1, r8
 80007aa:	4211      	tst	r1, r2
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fadd+0x308>
 80007ae:	e74c      	b.n	800064a <__aeabi_fadd+0x1a2>
 80007b0:	4643      	mov	r3, r8
 80007b2:	e74a      	b.n	800064a <__aeabi_fadd+0x1a2>
 80007b4:	4663      	mov	r3, ip
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d083      	beq.n	80006c2 <__aeabi_fadd+0x21a>
 80007ba:	000c      	movs	r4, r1
 80007bc:	4646      	mov	r6, r8
 80007be:	2000      	movs	r0, #0
 80007c0:	e6f9      	b.n	80005b6 <__aeabi_fadd+0x10e>
 80007c2:	4663      	mov	r3, ip
 80007c4:	000c      	movs	r4, r1
 80007c6:	1bdb      	subs	r3, r3, r7
 80007c8:	3501      	adds	r5, #1
 80007ca:	e6d5      	b.n	8000578 <__aeabi_fadd+0xd0>
 80007cc:	4646      	mov	r6, r8
 80007ce:	2000      	movs	r0, #0
 80007d0:	e6f1      	b.n	80005b6 <__aeabi_fadd+0x10e>
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d000      	beq.n	80007d8 <__aeabi_fadd+0x330>
 80007d6:	e723      	b.n	8000620 <__aeabi_fadd+0x178>
 80007d8:	2400      	movs	r4, #0
 80007da:	2600      	movs	r6, #0
 80007dc:	e6eb      	b.n	80005b6 <__aeabi_fadd+0x10e>
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	7dffffff 	.word	0x7dffffff
 80007e4:	fbffffff 	.word	0xfbffffff

080007e8 <__aeabi_fmul>:
 80007e8:	0243      	lsls	r3, r0, #9
 80007ea:	0a5b      	lsrs	r3, r3, #9
 80007ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ee:	464f      	mov	r7, r9
 80007f0:	4646      	mov	r6, r8
 80007f2:	4699      	mov	r9, r3
 80007f4:	46d6      	mov	lr, sl
 80007f6:	0fc3      	lsrs	r3, r0, #31
 80007f8:	0045      	lsls	r5, r0, #1
 80007fa:	4698      	mov	r8, r3
 80007fc:	b5c0      	push	{r6, r7, lr}
 80007fe:	464b      	mov	r3, r9
 8000800:	1c0f      	adds	r7, r1, #0
 8000802:	0e2d      	lsrs	r5, r5, #24
 8000804:	d100      	bne.n	8000808 <__aeabi_fmul+0x20>
 8000806:	e0cb      	b.n	80009a0 <__aeabi_fmul+0x1b8>
 8000808:	2dff      	cmp	r5, #255	; 0xff
 800080a:	d100      	bne.n	800080e <__aeabi_fmul+0x26>
 800080c:	e0cf      	b.n	80009ae <__aeabi_fmul+0x1c6>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	04d2      	lsls	r2, r2, #19
 8000814:	431a      	orrs	r2, r3
 8000816:	2300      	movs	r3, #0
 8000818:	4691      	mov	r9, r2
 800081a:	2600      	movs	r6, #0
 800081c:	469a      	mov	sl, r3
 800081e:	3d7f      	subs	r5, #127	; 0x7f
 8000820:	027c      	lsls	r4, r7, #9
 8000822:	007b      	lsls	r3, r7, #1
 8000824:	0a64      	lsrs	r4, r4, #9
 8000826:	0e1b      	lsrs	r3, r3, #24
 8000828:	0fff      	lsrs	r7, r7, #31
 800082a:	2b00      	cmp	r3, #0
 800082c:	d100      	bne.n	8000830 <__aeabi_fmul+0x48>
 800082e:	e0a9      	b.n	8000984 <__aeabi_fmul+0x19c>
 8000830:	2bff      	cmp	r3, #255	; 0xff
 8000832:	d011      	beq.n	8000858 <__aeabi_fmul+0x70>
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	00e4      	lsls	r4, r4, #3
 8000838:	04d2      	lsls	r2, r2, #19
 800083a:	4314      	orrs	r4, r2
 800083c:	4642      	mov	r2, r8
 800083e:	3b7f      	subs	r3, #127	; 0x7f
 8000840:	195b      	adds	r3, r3, r5
 8000842:	407a      	eors	r2, r7
 8000844:	2000      	movs	r0, #0
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	1c5d      	adds	r5, r3, #1
 800084a:	2e0a      	cmp	r6, #10
 800084c:	dd13      	ble.n	8000876 <__aeabi_fmul+0x8e>
 800084e:	003a      	movs	r2, r7
 8000850:	2e0b      	cmp	r6, #11
 8000852:	d047      	beq.n	80008e4 <__aeabi_fmul+0xfc>
 8000854:	4647      	mov	r7, r8
 8000856:	e03f      	b.n	80008d8 <__aeabi_fmul+0xf0>
 8000858:	002b      	movs	r3, r5
 800085a:	33ff      	adds	r3, #255	; 0xff
 800085c:	2c00      	cmp	r4, #0
 800085e:	d11e      	bne.n	800089e <__aeabi_fmul+0xb6>
 8000860:	2202      	movs	r2, #2
 8000862:	4316      	orrs	r6, r2
 8000864:	4642      	mov	r2, r8
 8000866:	3501      	adds	r5, #1
 8000868:	407a      	eors	r2, r7
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	35ff      	adds	r5, #255	; 0xff
 800086e:	2e0a      	cmp	r6, #10
 8000870:	dd00      	ble.n	8000874 <__aeabi_fmul+0x8c>
 8000872:	e0e4      	b.n	8000a3e <__aeabi_fmul+0x256>
 8000874:	2002      	movs	r0, #2
 8000876:	2e02      	cmp	r6, #2
 8000878:	dc1c      	bgt.n	80008b4 <__aeabi_fmul+0xcc>
 800087a:	3e01      	subs	r6, #1
 800087c:	2e01      	cmp	r6, #1
 800087e:	d842      	bhi.n	8000906 <__aeabi_fmul+0x11e>
 8000880:	2802      	cmp	r0, #2
 8000882:	d03d      	beq.n	8000900 <__aeabi_fmul+0x118>
 8000884:	2801      	cmp	r0, #1
 8000886:	d166      	bne.n	8000956 <__aeabi_fmul+0x16e>
 8000888:	2000      	movs	r0, #0
 800088a:	2100      	movs	r1, #0
 800088c:	05c0      	lsls	r0, r0, #23
 800088e:	4308      	orrs	r0, r1
 8000890:	07d2      	lsls	r2, r2, #31
 8000892:	4310      	orrs	r0, r2
 8000894:	bce0      	pop	{r5, r6, r7}
 8000896:	46ba      	mov	sl, r7
 8000898:	46b1      	mov	r9, r6
 800089a:	46a8      	mov	r8, r5
 800089c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800089e:	2203      	movs	r2, #3
 80008a0:	4316      	orrs	r6, r2
 80008a2:	4642      	mov	r2, r8
 80008a4:	3501      	adds	r5, #1
 80008a6:	407a      	eors	r2, r7
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	35ff      	adds	r5, #255	; 0xff
 80008ac:	2e0a      	cmp	r6, #10
 80008ae:	dd00      	ble.n	80008b2 <__aeabi_fmul+0xca>
 80008b0:	e0e4      	b.n	8000a7c <__aeabi_fmul+0x294>
 80008b2:	2003      	movs	r0, #3
 80008b4:	2101      	movs	r1, #1
 80008b6:	40b1      	lsls	r1, r6
 80008b8:	26a6      	movs	r6, #166	; 0xa6
 80008ba:	00f6      	lsls	r6, r6, #3
 80008bc:	4231      	tst	r1, r6
 80008be:	d10a      	bne.n	80008d6 <__aeabi_fmul+0xee>
 80008c0:	2690      	movs	r6, #144	; 0x90
 80008c2:	00b6      	lsls	r6, r6, #2
 80008c4:	4231      	tst	r1, r6
 80008c6:	d116      	bne.n	80008f6 <__aeabi_fmul+0x10e>
 80008c8:	3eb9      	subs	r6, #185	; 0xb9
 80008ca:	3eff      	subs	r6, #255	; 0xff
 80008cc:	420e      	tst	r6, r1
 80008ce:	d01a      	beq.n	8000906 <__aeabi_fmul+0x11e>
 80008d0:	46a1      	mov	r9, r4
 80008d2:	4682      	mov	sl, r0
 80008d4:	e000      	b.n	80008d8 <__aeabi_fmul+0xf0>
 80008d6:	0017      	movs	r7, r2
 80008d8:	4653      	mov	r3, sl
 80008da:	003a      	movs	r2, r7
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d00f      	beq.n	8000900 <__aeabi_fmul+0x118>
 80008e0:	464c      	mov	r4, r9
 80008e2:	4650      	mov	r0, sl
 80008e4:	2803      	cmp	r0, #3
 80008e6:	d1cd      	bne.n	8000884 <__aeabi_fmul+0x9c>
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	03c9      	lsls	r1, r1, #15
 80008ec:	4321      	orrs	r1, r4
 80008ee:	0249      	lsls	r1, r1, #9
 80008f0:	20ff      	movs	r0, #255	; 0xff
 80008f2:	0a49      	lsrs	r1, r1, #9
 80008f4:	e7ca      	b.n	800088c <__aeabi_fmul+0xa4>
 80008f6:	2180      	movs	r1, #128	; 0x80
 80008f8:	2200      	movs	r2, #0
 80008fa:	20ff      	movs	r0, #255	; 0xff
 80008fc:	03c9      	lsls	r1, r1, #15
 80008fe:	e7c5      	b.n	800088c <__aeabi_fmul+0xa4>
 8000900:	20ff      	movs	r0, #255	; 0xff
 8000902:	2100      	movs	r1, #0
 8000904:	e7c2      	b.n	800088c <__aeabi_fmul+0xa4>
 8000906:	0c20      	lsrs	r0, r4, #16
 8000908:	4649      	mov	r1, r9
 800090a:	0424      	lsls	r4, r4, #16
 800090c:	0c24      	lsrs	r4, r4, #16
 800090e:	0027      	movs	r7, r4
 8000910:	0c0e      	lsrs	r6, r1, #16
 8000912:	0409      	lsls	r1, r1, #16
 8000914:	0c09      	lsrs	r1, r1, #16
 8000916:	4374      	muls	r4, r6
 8000918:	434f      	muls	r7, r1
 800091a:	4346      	muls	r6, r0
 800091c:	4348      	muls	r0, r1
 800091e:	0c39      	lsrs	r1, r7, #16
 8000920:	1900      	adds	r0, r0, r4
 8000922:	1809      	adds	r1, r1, r0
 8000924:	428c      	cmp	r4, r1
 8000926:	d903      	bls.n	8000930 <__aeabi_fmul+0x148>
 8000928:	2080      	movs	r0, #128	; 0x80
 800092a:	0240      	lsls	r0, r0, #9
 800092c:	4684      	mov	ip, r0
 800092e:	4466      	add	r6, ip
 8000930:	043f      	lsls	r7, r7, #16
 8000932:	0408      	lsls	r0, r1, #16
 8000934:	0c3f      	lsrs	r7, r7, #16
 8000936:	19c0      	adds	r0, r0, r7
 8000938:	0184      	lsls	r4, r0, #6
 800093a:	1e67      	subs	r7, r4, #1
 800093c:	41bc      	sbcs	r4, r7
 800093e:	0c09      	lsrs	r1, r1, #16
 8000940:	0e80      	lsrs	r0, r0, #26
 8000942:	1989      	adds	r1, r1, r6
 8000944:	4304      	orrs	r4, r0
 8000946:	0189      	lsls	r1, r1, #6
 8000948:	430c      	orrs	r4, r1
 800094a:	0109      	lsls	r1, r1, #4
 800094c:	d571      	bpl.n	8000a32 <__aeabi_fmul+0x24a>
 800094e:	2301      	movs	r3, #1
 8000950:	0861      	lsrs	r1, r4, #1
 8000952:	401c      	ands	r4, r3
 8000954:	430c      	orrs	r4, r1
 8000956:	002b      	movs	r3, r5
 8000958:	337f      	adds	r3, #127	; 0x7f
 800095a:	2b00      	cmp	r3, #0
 800095c:	dd51      	ble.n	8000a02 <__aeabi_fmul+0x21a>
 800095e:	0761      	lsls	r1, r4, #29
 8000960:	d004      	beq.n	800096c <__aeabi_fmul+0x184>
 8000962:	210f      	movs	r1, #15
 8000964:	4021      	ands	r1, r4
 8000966:	2904      	cmp	r1, #4
 8000968:	d000      	beq.n	800096c <__aeabi_fmul+0x184>
 800096a:	3404      	adds	r4, #4
 800096c:	0121      	lsls	r1, r4, #4
 800096e:	d503      	bpl.n	8000978 <__aeabi_fmul+0x190>
 8000970:	4b43      	ldr	r3, [pc, #268]	; (8000a80 <__aeabi_fmul+0x298>)
 8000972:	401c      	ands	r4, r3
 8000974:	002b      	movs	r3, r5
 8000976:	3380      	adds	r3, #128	; 0x80
 8000978:	2bfe      	cmp	r3, #254	; 0xfe
 800097a:	dcc1      	bgt.n	8000900 <__aeabi_fmul+0x118>
 800097c:	01a1      	lsls	r1, r4, #6
 800097e:	0a49      	lsrs	r1, r1, #9
 8000980:	b2d8      	uxtb	r0, r3
 8000982:	e783      	b.n	800088c <__aeabi_fmul+0xa4>
 8000984:	2c00      	cmp	r4, #0
 8000986:	d12c      	bne.n	80009e2 <__aeabi_fmul+0x1fa>
 8000988:	2301      	movs	r3, #1
 800098a:	4642      	mov	r2, r8
 800098c:	431e      	orrs	r6, r3
 800098e:	002b      	movs	r3, r5
 8000990:	407a      	eors	r2, r7
 8000992:	2001      	movs	r0, #1
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	1c5d      	adds	r5, r3, #1
 8000998:	2e0a      	cmp	r6, #10
 800099a:	dd00      	ble.n	800099e <__aeabi_fmul+0x1b6>
 800099c:	e757      	b.n	800084e <__aeabi_fmul+0x66>
 800099e:	e76a      	b.n	8000876 <__aeabi_fmul+0x8e>
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d110      	bne.n	80009c6 <__aeabi_fmul+0x1de>
 80009a4:	2301      	movs	r3, #1
 80009a6:	2604      	movs	r6, #4
 80009a8:	2500      	movs	r5, #0
 80009aa:	469a      	mov	sl, r3
 80009ac:	e738      	b.n	8000820 <__aeabi_fmul+0x38>
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d104      	bne.n	80009bc <__aeabi_fmul+0x1d4>
 80009b2:	2302      	movs	r3, #2
 80009b4:	2608      	movs	r6, #8
 80009b6:	25ff      	movs	r5, #255	; 0xff
 80009b8:	469a      	mov	sl, r3
 80009ba:	e731      	b.n	8000820 <__aeabi_fmul+0x38>
 80009bc:	2303      	movs	r3, #3
 80009be:	260c      	movs	r6, #12
 80009c0:	25ff      	movs	r5, #255	; 0xff
 80009c2:	469a      	mov	sl, r3
 80009c4:	e72c      	b.n	8000820 <__aeabi_fmul+0x38>
 80009c6:	4648      	mov	r0, r9
 80009c8:	f002 f880 	bl	8002acc <__clzsi2>
 80009cc:	464a      	mov	r2, r9
 80009ce:	1f43      	subs	r3, r0, #5
 80009d0:	2576      	movs	r5, #118	; 0x76
 80009d2:	409a      	lsls	r2, r3
 80009d4:	2300      	movs	r3, #0
 80009d6:	426d      	negs	r5, r5
 80009d8:	4691      	mov	r9, r2
 80009da:	2600      	movs	r6, #0
 80009dc:	469a      	mov	sl, r3
 80009de:	1a2d      	subs	r5, r5, r0
 80009e0:	e71e      	b.n	8000820 <__aeabi_fmul+0x38>
 80009e2:	0020      	movs	r0, r4
 80009e4:	f002 f872 	bl	8002acc <__clzsi2>
 80009e8:	4642      	mov	r2, r8
 80009ea:	1f43      	subs	r3, r0, #5
 80009ec:	409c      	lsls	r4, r3
 80009ee:	1a2b      	subs	r3, r5, r0
 80009f0:	3b76      	subs	r3, #118	; 0x76
 80009f2:	407a      	eors	r2, r7
 80009f4:	2000      	movs	r0, #0
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	1c5d      	adds	r5, r3, #1
 80009fa:	2e0a      	cmp	r6, #10
 80009fc:	dd00      	ble.n	8000a00 <__aeabi_fmul+0x218>
 80009fe:	e726      	b.n	800084e <__aeabi_fmul+0x66>
 8000a00:	e739      	b.n	8000876 <__aeabi_fmul+0x8e>
 8000a02:	2101      	movs	r1, #1
 8000a04:	1acb      	subs	r3, r1, r3
 8000a06:	2b1b      	cmp	r3, #27
 8000a08:	dd00      	ble.n	8000a0c <__aeabi_fmul+0x224>
 8000a0a:	e73d      	b.n	8000888 <__aeabi_fmul+0xa0>
 8000a0c:	359e      	adds	r5, #158	; 0x9e
 8000a0e:	0021      	movs	r1, r4
 8000a10:	40ac      	lsls	r4, r5
 8000a12:	40d9      	lsrs	r1, r3
 8000a14:	1e63      	subs	r3, r4, #1
 8000a16:	419c      	sbcs	r4, r3
 8000a18:	4321      	orrs	r1, r4
 8000a1a:	074b      	lsls	r3, r1, #29
 8000a1c:	d004      	beq.n	8000a28 <__aeabi_fmul+0x240>
 8000a1e:	230f      	movs	r3, #15
 8000a20:	400b      	ands	r3, r1
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	d000      	beq.n	8000a28 <__aeabi_fmul+0x240>
 8000a26:	3104      	adds	r1, #4
 8000a28:	014b      	lsls	r3, r1, #5
 8000a2a:	d504      	bpl.n	8000a36 <__aeabi_fmul+0x24e>
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	2100      	movs	r1, #0
 8000a30:	e72c      	b.n	800088c <__aeabi_fmul+0xa4>
 8000a32:	001d      	movs	r5, r3
 8000a34:	e78f      	b.n	8000956 <__aeabi_fmul+0x16e>
 8000a36:	0189      	lsls	r1, r1, #6
 8000a38:	2000      	movs	r0, #0
 8000a3a:	0a49      	lsrs	r1, r1, #9
 8000a3c:	e726      	b.n	800088c <__aeabi_fmul+0xa4>
 8000a3e:	2302      	movs	r3, #2
 8000a40:	2e0f      	cmp	r6, #15
 8000a42:	d10c      	bne.n	8000a5e <__aeabi_fmul+0x276>
 8000a44:	2180      	movs	r1, #128	; 0x80
 8000a46:	464b      	mov	r3, r9
 8000a48:	03c9      	lsls	r1, r1, #15
 8000a4a:	420b      	tst	r3, r1
 8000a4c:	d00d      	beq.n	8000a6a <__aeabi_fmul+0x282>
 8000a4e:	420c      	tst	r4, r1
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_fmul+0x282>
 8000a52:	4321      	orrs	r1, r4
 8000a54:	0249      	lsls	r1, r1, #9
 8000a56:	003a      	movs	r2, r7
 8000a58:	20ff      	movs	r0, #255	; 0xff
 8000a5a:	0a49      	lsrs	r1, r1, #9
 8000a5c:	e716      	b.n	800088c <__aeabi_fmul+0xa4>
 8000a5e:	2e0b      	cmp	r6, #11
 8000a60:	d000      	beq.n	8000a64 <__aeabi_fmul+0x27c>
 8000a62:	e6f7      	b.n	8000854 <__aeabi_fmul+0x6c>
 8000a64:	46a1      	mov	r9, r4
 8000a66:	469a      	mov	sl, r3
 8000a68:	e736      	b.n	80008d8 <__aeabi_fmul+0xf0>
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	464b      	mov	r3, r9
 8000a6e:	03c9      	lsls	r1, r1, #15
 8000a70:	4319      	orrs	r1, r3
 8000a72:	0249      	lsls	r1, r1, #9
 8000a74:	4642      	mov	r2, r8
 8000a76:	20ff      	movs	r0, #255	; 0xff
 8000a78:	0a49      	lsrs	r1, r1, #9
 8000a7a:	e707      	b.n	800088c <__aeabi_fmul+0xa4>
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	e7df      	b.n	8000a40 <__aeabi_fmul+0x258>
 8000a80:	f7ffffff 	.word	0xf7ffffff

08000a84 <__aeabi_fsub>:
 8000a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a86:	46c6      	mov	lr, r8
 8000a88:	0243      	lsls	r3, r0, #9
 8000a8a:	0a5b      	lsrs	r3, r3, #9
 8000a8c:	0045      	lsls	r5, r0, #1
 8000a8e:	00da      	lsls	r2, r3, #3
 8000a90:	0fc4      	lsrs	r4, r0, #31
 8000a92:	0248      	lsls	r0, r1, #9
 8000a94:	004f      	lsls	r7, r1, #1
 8000a96:	4694      	mov	ip, r2
 8000a98:	0a42      	lsrs	r2, r0, #9
 8000a9a:	001e      	movs	r6, r3
 8000a9c:	4690      	mov	r8, r2
 8000a9e:	b500      	push	{lr}
 8000aa0:	0e2d      	lsrs	r5, r5, #24
 8000aa2:	0e3f      	lsrs	r7, r7, #24
 8000aa4:	0fc9      	lsrs	r1, r1, #31
 8000aa6:	0980      	lsrs	r0, r0, #6
 8000aa8:	2fff      	cmp	r7, #255	; 0xff
 8000aaa:	d059      	beq.n	8000b60 <__aeabi_fsub+0xdc>
 8000aac:	2201      	movs	r2, #1
 8000aae:	4051      	eors	r1, r2
 8000ab0:	428c      	cmp	r4, r1
 8000ab2:	d039      	beq.n	8000b28 <__aeabi_fsub+0xa4>
 8000ab4:	1bea      	subs	r2, r5, r7
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	dd58      	ble.n	8000b6c <__aeabi_fsub+0xe8>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d068      	beq.n	8000b90 <__aeabi_fsub+0x10c>
 8000abe:	2dff      	cmp	r5, #255	; 0xff
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_fsub+0x40>
 8000ac2:	e0d1      	b.n	8000c68 <__aeabi_fsub+0x1e4>
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	04db      	lsls	r3, r3, #19
 8000ac8:	4318      	orrs	r0, r3
 8000aca:	2a1b      	cmp	r2, #27
 8000acc:	dc00      	bgt.n	8000ad0 <__aeabi_fsub+0x4c>
 8000ace:	e0e3      	b.n	8000c98 <__aeabi_fsub+0x214>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	4662      	mov	r2, ip
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	015a      	lsls	r2, r3, #5
 8000ad8:	d400      	bmi.n	8000adc <__aeabi_fsub+0x58>
 8000ada:	e0ac      	b.n	8000c36 <__aeabi_fsub+0x1b2>
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	099e      	lsrs	r6, r3, #6
 8000ae0:	0030      	movs	r0, r6
 8000ae2:	f001 fff3 	bl	8002acc <__clzsi2>
 8000ae6:	0033      	movs	r3, r6
 8000ae8:	3805      	subs	r0, #5
 8000aea:	4083      	lsls	r3, r0
 8000aec:	4285      	cmp	r5, r0
 8000aee:	dc00      	bgt.n	8000af2 <__aeabi_fsub+0x6e>
 8000af0:	e0c6      	b.n	8000c80 <__aeabi_fsub+0x1fc>
 8000af2:	4ab2      	ldr	r2, [pc, #712]	; (8000dbc <__aeabi_fsub+0x338>)
 8000af4:	1a2d      	subs	r5, r5, r0
 8000af6:	4013      	ands	r3, r2
 8000af8:	075a      	lsls	r2, r3, #29
 8000afa:	d004      	beq.n	8000b06 <__aeabi_fsub+0x82>
 8000afc:	220f      	movs	r2, #15
 8000afe:	401a      	ands	r2, r3
 8000b00:	2a04      	cmp	r2, #4
 8000b02:	d000      	beq.n	8000b06 <__aeabi_fsub+0x82>
 8000b04:	3304      	adds	r3, #4
 8000b06:	015a      	lsls	r2, r3, #5
 8000b08:	d400      	bmi.n	8000b0c <__aeabi_fsub+0x88>
 8000b0a:	e097      	b.n	8000c3c <__aeabi_fsub+0x1b8>
 8000b0c:	1c6a      	adds	r2, r5, #1
 8000b0e:	2dfe      	cmp	r5, #254	; 0xfe
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fsub+0x90>
 8000b12:	e084      	b.n	8000c1e <__aeabi_fsub+0x19a>
 8000b14:	019b      	lsls	r3, r3, #6
 8000b16:	0a5e      	lsrs	r6, r3, #9
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	05d0      	lsls	r0, r2, #23
 8000b1c:	4330      	orrs	r0, r6
 8000b1e:	07e4      	lsls	r4, r4, #31
 8000b20:	4320      	orrs	r0, r4
 8000b22:	bc80      	pop	{r7}
 8000b24:	46b8      	mov	r8, r7
 8000b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b28:	1bea      	subs	r2, r5, r7
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	dd41      	ble.n	8000bb2 <__aeabi_fsub+0x12e>
 8000b2e:	2f00      	cmp	r7, #0
 8000b30:	d06b      	beq.n	8000c0a <__aeabi_fsub+0x186>
 8000b32:	2dff      	cmp	r5, #255	; 0xff
 8000b34:	d100      	bne.n	8000b38 <__aeabi_fsub+0xb4>
 8000b36:	e097      	b.n	8000c68 <__aeabi_fsub+0x1e4>
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	04db      	lsls	r3, r3, #19
 8000b3c:	4318      	orrs	r0, r3
 8000b3e:	2a1b      	cmp	r2, #27
 8000b40:	dc00      	bgt.n	8000b44 <__aeabi_fsub+0xc0>
 8000b42:	e0cc      	b.n	8000cde <__aeabi_fsub+0x25a>
 8000b44:	2301      	movs	r3, #1
 8000b46:	4463      	add	r3, ip
 8000b48:	015a      	lsls	r2, r3, #5
 8000b4a:	d574      	bpl.n	8000c36 <__aeabi_fsub+0x1b2>
 8000b4c:	3501      	adds	r5, #1
 8000b4e:	2dff      	cmp	r5, #255	; 0xff
 8000b50:	d065      	beq.n	8000c1e <__aeabi_fsub+0x19a>
 8000b52:	2201      	movs	r2, #1
 8000b54:	499a      	ldr	r1, [pc, #616]	; (8000dc0 <__aeabi_fsub+0x33c>)
 8000b56:	401a      	ands	r2, r3
 8000b58:	085b      	lsrs	r3, r3, #1
 8000b5a:	400b      	ands	r3, r1
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	e7cb      	b.n	8000af8 <__aeabi_fsub+0x74>
 8000b60:	2800      	cmp	r0, #0
 8000b62:	d01f      	beq.n	8000ba4 <__aeabi_fsub+0x120>
 8000b64:	428c      	cmp	r4, r1
 8000b66:	d022      	beq.n	8000bae <__aeabi_fsub+0x12a>
 8000b68:	002a      	movs	r2, r5
 8000b6a:	3aff      	subs	r2, #255	; 0xff
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	d035      	beq.n	8000bdc <__aeabi_fsub+0x158>
 8000b70:	1b7a      	subs	r2, r7, r5
 8000b72:	2d00      	cmp	r5, #0
 8000b74:	d000      	beq.n	8000b78 <__aeabi_fsub+0xf4>
 8000b76:	e099      	b.n	8000cac <__aeabi_fsub+0x228>
 8000b78:	4663      	mov	r3, ip
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_fsub+0xfc>
 8000b7e:	e0dd      	b.n	8000d3c <__aeabi_fsub+0x2b8>
 8000b80:	1e53      	subs	r3, r2, #1
 8000b82:	2a01      	cmp	r2, #1
 8000b84:	d100      	bne.n	8000b88 <__aeabi_fsub+0x104>
 8000b86:	e105      	b.n	8000d94 <__aeabi_fsub+0x310>
 8000b88:	2aff      	cmp	r2, #255	; 0xff
 8000b8a:	d06b      	beq.n	8000c64 <__aeabi_fsub+0x1e0>
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	e094      	b.n	8000cba <__aeabi_fsub+0x236>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d073      	beq.n	8000c7c <__aeabi_fsub+0x1f8>
 8000b94:	1e51      	subs	r1, r2, #1
 8000b96:	2a01      	cmp	r2, #1
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fsub+0x118>
 8000b9a:	e0df      	b.n	8000d5c <__aeabi_fsub+0x2d8>
 8000b9c:	2aff      	cmp	r2, #255	; 0xff
 8000b9e:	d063      	beq.n	8000c68 <__aeabi_fsub+0x1e4>
 8000ba0:	000a      	movs	r2, r1
 8000ba2:	e792      	b.n	8000aca <__aeabi_fsub+0x46>
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4051      	eors	r1, r2
 8000ba8:	42a1      	cmp	r1, r4
 8000baa:	d000      	beq.n	8000bae <__aeabi_fsub+0x12a>
 8000bac:	e782      	b.n	8000ab4 <__aeabi_fsub+0x30>
 8000bae:	002a      	movs	r2, r5
 8000bb0:	3aff      	subs	r2, #255	; 0xff
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	d036      	beq.n	8000c24 <__aeabi_fsub+0x1a0>
 8000bb6:	1b7a      	subs	r2, r7, r5
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_fsub+0x13a>
 8000bbc:	e0aa      	b.n	8000d14 <__aeabi_fsub+0x290>
 8000bbe:	2fff      	cmp	r7, #255	; 0xff
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0x140>
 8000bc2:	e0da      	b.n	8000d7a <__aeabi_fsub+0x2f6>
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	4661      	mov	r1, ip
 8000bc8:	04db      	lsls	r3, r3, #19
 8000bca:	4319      	orrs	r1, r3
 8000bcc:	468c      	mov	ip, r1
 8000bce:	2a1b      	cmp	r2, #27
 8000bd0:	dc00      	bgt.n	8000bd4 <__aeabi_fsub+0x150>
 8000bd2:	e0d4      	b.n	8000d7e <__aeabi_fsub+0x2fa>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	003d      	movs	r5, r7
 8000bd8:	181b      	adds	r3, r3, r0
 8000bda:	e7b5      	b.n	8000b48 <__aeabi_fsub+0xc4>
 8000bdc:	27fe      	movs	r7, #254	; 0xfe
 8000bde:	1c6a      	adds	r2, r5, #1
 8000be0:	4217      	tst	r7, r2
 8000be2:	d171      	bne.n	8000cc8 <__aeabi_fsub+0x244>
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d000      	beq.n	8000bea <__aeabi_fsub+0x166>
 8000be8:	e09e      	b.n	8000d28 <__aeabi_fsub+0x2a4>
 8000bea:	4663      	mov	r3, ip
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_fsub+0x16e>
 8000bf0:	e0d5      	b.n	8000d9e <__aeabi_fsub+0x31a>
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_fsub+0x176>
 8000bf8:	e78f      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000bfa:	1a1b      	subs	r3, r3, r0
 8000bfc:	015e      	lsls	r6, r3, #5
 8000bfe:	d400      	bmi.n	8000c02 <__aeabi_fsub+0x17e>
 8000c00:	e0d6      	b.n	8000db0 <__aeabi_fsub+0x32c>
 8000c02:	4663      	mov	r3, ip
 8000c04:	000c      	movs	r4, r1
 8000c06:	1ac3      	subs	r3, r0, r3
 8000c08:	e776      	b.n	8000af8 <__aeabi_fsub+0x74>
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	d036      	beq.n	8000c7c <__aeabi_fsub+0x1f8>
 8000c0e:	1e51      	subs	r1, r2, #1
 8000c10:	2a01      	cmp	r2, #1
 8000c12:	d100      	bne.n	8000c16 <__aeabi_fsub+0x192>
 8000c14:	e09a      	b.n	8000d4c <__aeabi_fsub+0x2c8>
 8000c16:	2aff      	cmp	r2, #255	; 0xff
 8000c18:	d026      	beq.n	8000c68 <__aeabi_fsub+0x1e4>
 8000c1a:	000a      	movs	r2, r1
 8000c1c:	e78f      	b.n	8000b3e <__aeabi_fsub+0xba>
 8000c1e:	22ff      	movs	r2, #255	; 0xff
 8000c20:	2600      	movs	r6, #0
 8000c22:	e77a      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000c24:	27fe      	movs	r7, #254	; 0xfe
 8000c26:	1c6a      	adds	r2, r5, #1
 8000c28:	4217      	tst	r7, r2
 8000c2a:	d062      	beq.n	8000cf2 <__aeabi_fsub+0x26e>
 8000c2c:	2aff      	cmp	r2, #255	; 0xff
 8000c2e:	d0f6      	beq.n	8000c1e <__aeabi_fsub+0x19a>
 8000c30:	0015      	movs	r5, r2
 8000c32:	4460      	add	r0, ip
 8000c34:	0843      	lsrs	r3, r0, #1
 8000c36:	075a      	lsls	r2, r3, #29
 8000c38:	d000      	beq.n	8000c3c <__aeabi_fsub+0x1b8>
 8000c3a:	e75f      	b.n	8000afc <__aeabi_fsub+0x78>
 8000c3c:	08db      	lsrs	r3, r3, #3
 8000c3e:	2dff      	cmp	r5, #255	; 0xff
 8000c40:	d012      	beq.n	8000c68 <__aeabi_fsub+0x1e4>
 8000c42:	025b      	lsls	r3, r3, #9
 8000c44:	0a5e      	lsrs	r6, r3, #9
 8000c46:	b2ea      	uxtb	r2, r5
 8000c48:	e767      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000c4a:	4662      	mov	r2, ip
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_fsub+0x1ce>
 8000c50:	e093      	b.n	8000d7a <__aeabi_fsub+0x2f6>
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d008      	beq.n	8000c68 <__aeabi_fsub+0x1e4>
 8000c56:	2280      	movs	r2, #128	; 0x80
 8000c58:	03d2      	lsls	r2, r2, #15
 8000c5a:	4213      	tst	r3, r2
 8000c5c:	d004      	beq.n	8000c68 <__aeabi_fsub+0x1e4>
 8000c5e:	4640      	mov	r0, r8
 8000c60:	4210      	tst	r0, r2
 8000c62:	d101      	bne.n	8000c68 <__aeabi_fsub+0x1e4>
 8000c64:	000c      	movs	r4, r1
 8000c66:	4643      	mov	r3, r8
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0d8      	beq.n	8000c1e <__aeabi_fsub+0x19a>
 8000c6c:	2680      	movs	r6, #128	; 0x80
 8000c6e:	03f6      	lsls	r6, r6, #15
 8000c70:	431e      	orrs	r6, r3
 8000c72:	0276      	lsls	r6, r6, #9
 8000c74:	22ff      	movs	r2, #255	; 0xff
 8000c76:	0a76      	lsrs	r6, r6, #9
 8000c78:	e74f      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	0015      	movs	r5, r2
 8000c7e:	e7de      	b.n	8000c3e <__aeabi_fsub+0x1ba>
 8000c80:	2220      	movs	r2, #32
 8000c82:	1b40      	subs	r0, r0, r5
 8000c84:	3001      	adds	r0, #1
 8000c86:	1a12      	subs	r2, r2, r0
 8000c88:	0019      	movs	r1, r3
 8000c8a:	4093      	lsls	r3, r2
 8000c8c:	40c1      	lsrs	r1, r0
 8000c8e:	1e5a      	subs	r2, r3, #1
 8000c90:	4193      	sbcs	r3, r2
 8000c92:	2500      	movs	r5, #0
 8000c94:	430b      	orrs	r3, r1
 8000c96:	e72f      	b.n	8000af8 <__aeabi_fsub+0x74>
 8000c98:	2320      	movs	r3, #32
 8000c9a:	1a9b      	subs	r3, r3, r2
 8000c9c:	0001      	movs	r1, r0
 8000c9e:	4098      	lsls	r0, r3
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	40d1      	lsrs	r1, r2
 8000ca4:	1e5a      	subs	r2, r3, #1
 8000ca6:	4193      	sbcs	r3, r2
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	e712      	b.n	8000ad2 <__aeabi_fsub+0x4e>
 8000cac:	2fff      	cmp	r7, #255	; 0xff
 8000cae:	d0d9      	beq.n	8000c64 <__aeabi_fsub+0x1e0>
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	4664      	mov	r4, ip
 8000cb4:	04db      	lsls	r3, r3, #19
 8000cb6:	431c      	orrs	r4, r3
 8000cb8:	46a4      	mov	ip, r4
 8000cba:	2a1b      	cmp	r2, #27
 8000cbc:	dd52      	ble.n	8000d64 <__aeabi_fsub+0x2e0>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	000c      	movs	r4, r1
 8000cc2:	003d      	movs	r5, r7
 8000cc4:	1ac3      	subs	r3, r0, r3
 8000cc6:	e706      	b.n	8000ad6 <__aeabi_fsub+0x52>
 8000cc8:	4663      	mov	r3, ip
 8000cca:	1a1e      	subs	r6, r3, r0
 8000ccc:	0173      	lsls	r3, r6, #5
 8000cce:	d439      	bmi.n	8000d44 <__aeabi_fsub+0x2c0>
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d000      	beq.n	8000cd6 <__aeabi_fsub+0x252>
 8000cd4:	e704      	b.n	8000ae0 <__aeabi_fsub+0x5c>
 8000cd6:	2400      	movs	r4, #0
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2600      	movs	r6, #0
 8000cdc:	e71d      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000cde:	2320      	movs	r3, #32
 8000ce0:	1a9b      	subs	r3, r3, r2
 8000ce2:	0001      	movs	r1, r0
 8000ce4:	4098      	lsls	r0, r3
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	40d1      	lsrs	r1, r2
 8000cea:	1e5a      	subs	r2, r3, #1
 8000cec:	4193      	sbcs	r3, r2
 8000cee:	430b      	orrs	r3, r1
 8000cf0:	e729      	b.n	8000b46 <__aeabi_fsub+0xc2>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	d1a9      	bne.n	8000c4a <__aeabi_fsub+0x1c6>
 8000cf6:	4663      	mov	r3, ip
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d056      	beq.n	8000daa <__aeabi_fsub+0x326>
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_fsub+0x280>
 8000d02:	e70a      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000d04:	0003      	movs	r3, r0
 8000d06:	4463      	add	r3, ip
 8000d08:	015a      	lsls	r2, r3, #5
 8000d0a:	d594      	bpl.n	8000c36 <__aeabi_fsub+0x1b2>
 8000d0c:	4a2b      	ldr	r2, [pc, #172]	; (8000dbc <__aeabi_fsub+0x338>)
 8000d0e:	3501      	adds	r5, #1
 8000d10:	4013      	ands	r3, r2
 8000d12:	e790      	b.n	8000c36 <__aeabi_fsub+0x1b2>
 8000d14:	4663      	mov	r3, ip
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0af      	beq.n	8000c7a <__aeabi_fsub+0x1f6>
 8000d1a:	1e53      	subs	r3, r2, #1
 8000d1c:	2a01      	cmp	r2, #1
 8000d1e:	d015      	beq.n	8000d4c <__aeabi_fsub+0x2c8>
 8000d20:	2aff      	cmp	r2, #255	; 0xff
 8000d22:	d02a      	beq.n	8000d7a <__aeabi_fsub+0x2f6>
 8000d24:	001a      	movs	r2, r3
 8000d26:	e752      	b.n	8000bce <__aeabi_fsub+0x14a>
 8000d28:	4662      	mov	r2, ip
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	d191      	bne.n	8000c52 <__aeabi_fsub+0x1ce>
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	d198      	bne.n	8000c64 <__aeabi_fsub+0x1e0>
 8000d32:	2680      	movs	r6, #128	; 0x80
 8000d34:	2400      	movs	r4, #0
 8000d36:	22ff      	movs	r2, #255	; 0xff
 8000d38:	03f6      	lsls	r6, r6, #15
 8000d3a:	e6ee      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000d3c:	000c      	movs	r4, r1
 8000d3e:	4643      	mov	r3, r8
 8000d40:	0015      	movs	r5, r2
 8000d42:	e77c      	b.n	8000c3e <__aeabi_fsub+0x1ba>
 8000d44:	4663      	mov	r3, ip
 8000d46:	000c      	movs	r4, r1
 8000d48:	1ac6      	subs	r6, r0, r3
 8000d4a:	e6c9      	b.n	8000ae0 <__aeabi_fsub+0x5c>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	4463      	add	r3, ip
 8000d50:	2501      	movs	r5, #1
 8000d52:	015a      	lsls	r2, r3, #5
 8000d54:	d400      	bmi.n	8000d58 <__aeabi_fsub+0x2d4>
 8000d56:	e76e      	b.n	8000c36 <__aeabi_fsub+0x1b2>
 8000d58:	2502      	movs	r5, #2
 8000d5a:	e6fa      	b.n	8000b52 <__aeabi_fsub+0xce>
 8000d5c:	4663      	mov	r3, ip
 8000d5e:	2501      	movs	r5, #1
 8000d60:	1a1b      	subs	r3, r3, r0
 8000d62:	e6b8      	b.n	8000ad6 <__aeabi_fsub+0x52>
 8000d64:	4664      	mov	r4, ip
 8000d66:	2320      	movs	r3, #32
 8000d68:	40d4      	lsrs	r4, r2
 8000d6a:	1a9b      	subs	r3, r3, r2
 8000d6c:	4662      	mov	r2, ip
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	0013      	movs	r3, r2
 8000d72:	1e5a      	subs	r2, r3, #1
 8000d74:	4193      	sbcs	r3, r2
 8000d76:	4323      	orrs	r3, r4
 8000d78:	e7a2      	b.n	8000cc0 <__aeabi_fsub+0x23c>
 8000d7a:	4643      	mov	r3, r8
 8000d7c:	e774      	b.n	8000c68 <__aeabi_fsub+0x1e4>
 8000d7e:	4661      	mov	r1, ip
 8000d80:	2320      	movs	r3, #32
 8000d82:	40d1      	lsrs	r1, r2
 8000d84:	1a9b      	subs	r3, r3, r2
 8000d86:	4662      	mov	r2, ip
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	0013      	movs	r3, r2
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	4193      	sbcs	r3, r2
 8000d90:	430b      	orrs	r3, r1
 8000d92:	e720      	b.n	8000bd6 <__aeabi_fsub+0x152>
 8000d94:	4663      	mov	r3, ip
 8000d96:	000c      	movs	r4, r1
 8000d98:	2501      	movs	r5, #1
 8000d9a:	1ac3      	subs	r3, r0, r3
 8000d9c:	e69b      	b.n	8000ad6 <__aeabi_fsub+0x52>
 8000d9e:	2800      	cmp	r0, #0
 8000da0:	d099      	beq.n	8000cd6 <__aeabi_fsub+0x252>
 8000da2:	000c      	movs	r4, r1
 8000da4:	4646      	mov	r6, r8
 8000da6:	2200      	movs	r2, #0
 8000da8:	e6b7      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000daa:	4646      	mov	r6, r8
 8000dac:	2200      	movs	r2, #0
 8000dae:	e6b4      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d000      	beq.n	8000db6 <__aeabi_fsub+0x332>
 8000db4:	e73f      	b.n	8000c36 <__aeabi_fsub+0x1b2>
 8000db6:	2400      	movs	r4, #0
 8000db8:	2600      	movs	r6, #0
 8000dba:	e6ae      	b.n	8000b1a <__aeabi_fsub+0x96>
 8000dbc:	fbffffff 	.word	0xfbffffff
 8000dc0:	7dffffff 	.word	0x7dffffff

08000dc4 <__aeabi_f2iz>:
 8000dc4:	0241      	lsls	r1, r0, #9
 8000dc6:	0042      	lsls	r2, r0, #1
 8000dc8:	0fc3      	lsrs	r3, r0, #31
 8000dca:	0a49      	lsrs	r1, r1, #9
 8000dcc:	2000      	movs	r0, #0
 8000dce:	0e12      	lsrs	r2, r2, #24
 8000dd0:	2a7e      	cmp	r2, #126	; 0x7e
 8000dd2:	dd03      	ble.n	8000ddc <__aeabi_f2iz+0x18>
 8000dd4:	2a9d      	cmp	r2, #157	; 0x9d
 8000dd6:	dd02      	ble.n	8000dde <__aeabi_f2iz+0x1a>
 8000dd8:	4a09      	ldr	r2, [pc, #36]	; (8000e00 <__aeabi_f2iz+0x3c>)
 8000dda:	1898      	adds	r0, r3, r2
 8000ddc:	4770      	bx	lr
 8000dde:	2080      	movs	r0, #128	; 0x80
 8000de0:	0400      	lsls	r0, r0, #16
 8000de2:	4301      	orrs	r1, r0
 8000de4:	2a95      	cmp	r2, #149	; 0x95
 8000de6:	dc07      	bgt.n	8000df8 <__aeabi_f2iz+0x34>
 8000de8:	2096      	movs	r0, #150	; 0x96
 8000dea:	1a82      	subs	r2, r0, r2
 8000dec:	40d1      	lsrs	r1, r2
 8000dee:	4248      	negs	r0, r1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1f3      	bne.n	8000ddc <__aeabi_f2iz+0x18>
 8000df4:	0008      	movs	r0, r1
 8000df6:	e7f1      	b.n	8000ddc <__aeabi_f2iz+0x18>
 8000df8:	3a96      	subs	r2, #150	; 0x96
 8000dfa:	4091      	lsls	r1, r2
 8000dfc:	e7f7      	b.n	8000dee <__aeabi_f2iz+0x2a>
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	7fffffff 	.word	0x7fffffff

08000e04 <__aeabi_i2f>:
 8000e04:	b570      	push	{r4, r5, r6, lr}
 8000e06:	2800      	cmp	r0, #0
 8000e08:	d013      	beq.n	8000e32 <__aeabi_i2f+0x2e>
 8000e0a:	17c3      	asrs	r3, r0, #31
 8000e0c:	18c5      	adds	r5, r0, r3
 8000e0e:	405d      	eors	r5, r3
 8000e10:	0fc4      	lsrs	r4, r0, #31
 8000e12:	0028      	movs	r0, r5
 8000e14:	f001 fe5a 	bl	8002acc <__clzsi2>
 8000e18:	239e      	movs	r3, #158	; 0x9e
 8000e1a:	0001      	movs	r1, r0
 8000e1c:	1a1b      	subs	r3, r3, r0
 8000e1e:	2b96      	cmp	r3, #150	; 0x96
 8000e20:	dc0f      	bgt.n	8000e42 <__aeabi_i2f+0x3e>
 8000e22:	2808      	cmp	r0, #8
 8000e24:	d031      	beq.n	8000e8a <__aeabi_i2f+0x86>
 8000e26:	3908      	subs	r1, #8
 8000e28:	408d      	lsls	r5, r1
 8000e2a:	026d      	lsls	r5, r5, #9
 8000e2c:	0a6d      	lsrs	r5, r5, #9
 8000e2e:	b2d8      	uxtb	r0, r3
 8000e30:	e002      	b.n	8000e38 <__aeabi_i2f+0x34>
 8000e32:	2400      	movs	r4, #0
 8000e34:	2000      	movs	r0, #0
 8000e36:	2500      	movs	r5, #0
 8000e38:	05c0      	lsls	r0, r0, #23
 8000e3a:	4328      	orrs	r0, r5
 8000e3c:	07e4      	lsls	r4, r4, #31
 8000e3e:	4320      	orrs	r0, r4
 8000e40:	bd70      	pop	{r4, r5, r6, pc}
 8000e42:	2b99      	cmp	r3, #153	; 0x99
 8000e44:	dd0c      	ble.n	8000e60 <__aeabi_i2f+0x5c>
 8000e46:	2205      	movs	r2, #5
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	0028      	movs	r0, r5
 8000e4c:	40d0      	lsrs	r0, r2
 8000e4e:	0002      	movs	r2, r0
 8000e50:	0008      	movs	r0, r1
 8000e52:	301b      	adds	r0, #27
 8000e54:	4085      	lsls	r5, r0
 8000e56:	0028      	movs	r0, r5
 8000e58:	1e45      	subs	r5, r0, #1
 8000e5a:	41a8      	sbcs	r0, r5
 8000e5c:	4302      	orrs	r2, r0
 8000e5e:	0015      	movs	r5, r2
 8000e60:	2905      	cmp	r1, #5
 8000e62:	dc16      	bgt.n	8000e92 <__aeabi_i2f+0x8e>
 8000e64:	002a      	movs	r2, r5
 8000e66:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <__aeabi_i2f+0xa0>)
 8000e68:	4002      	ands	r2, r0
 8000e6a:	076e      	lsls	r6, r5, #29
 8000e6c:	d009      	beq.n	8000e82 <__aeabi_i2f+0x7e>
 8000e6e:	260f      	movs	r6, #15
 8000e70:	4035      	ands	r5, r6
 8000e72:	2d04      	cmp	r5, #4
 8000e74:	d005      	beq.n	8000e82 <__aeabi_i2f+0x7e>
 8000e76:	3204      	adds	r2, #4
 8000e78:	0155      	lsls	r5, r2, #5
 8000e7a:	d502      	bpl.n	8000e82 <__aeabi_i2f+0x7e>
 8000e7c:	239f      	movs	r3, #159	; 0x9f
 8000e7e:	4002      	ands	r2, r0
 8000e80:	1a5b      	subs	r3, r3, r1
 8000e82:	0192      	lsls	r2, r2, #6
 8000e84:	0a55      	lsrs	r5, r2, #9
 8000e86:	b2d8      	uxtb	r0, r3
 8000e88:	e7d6      	b.n	8000e38 <__aeabi_i2f+0x34>
 8000e8a:	026d      	lsls	r5, r5, #9
 8000e8c:	2096      	movs	r0, #150	; 0x96
 8000e8e:	0a6d      	lsrs	r5, r5, #9
 8000e90:	e7d2      	b.n	8000e38 <__aeabi_i2f+0x34>
 8000e92:	1f4a      	subs	r2, r1, #5
 8000e94:	4095      	lsls	r5, r2
 8000e96:	002a      	movs	r2, r5
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <__aeabi_i2f+0xa0>)
 8000e9a:	4002      	ands	r2, r0
 8000e9c:	076e      	lsls	r6, r5, #29
 8000e9e:	d0f0      	beq.n	8000e82 <__aeabi_i2f+0x7e>
 8000ea0:	e7e5      	b.n	8000e6e <__aeabi_i2f+0x6a>
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	fbffffff 	.word	0xfbffffff

08000ea8 <__aeabi_ui2f>:
 8000ea8:	b570      	push	{r4, r5, r6, lr}
 8000eaa:	1e04      	subs	r4, r0, #0
 8000eac:	d00e      	beq.n	8000ecc <__aeabi_ui2f+0x24>
 8000eae:	f001 fe0d 	bl	8002acc <__clzsi2>
 8000eb2:	239e      	movs	r3, #158	; 0x9e
 8000eb4:	0001      	movs	r1, r0
 8000eb6:	1a1b      	subs	r3, r3, r0
 8000eb8:	2b96      	cmp	r3, #150	; 0x96
 8000eba:	dc0c      	bgt.n	8000ed6 <__aeabi_ui2f+0x2e>
 8000ebc:	2808      	cmp	r0, #8
 8000ebe:	d02c      	beq.n	8000f1a <__aeabi_ui2f+0x72>
 8000ec0:	3908      	subs	r1, #8
 8000ec2:	408c      	lsls	r4, r1
 8000ec4:	0264      	lsls	r4, r4, #9
 8000ec6:	0a64      	lsrs	r4, r4, #9
 8000ec8:	b2d8      	uxtb	r0, r3
 8000eca:	e001      	b.n	8000ed0 <__aeabi_ui2f+0x28>
 8000ecc:	2000      	movs	r0, #0
 8000ece:	2400      	movs	r4, #0
 8000ed0:	05c0      	lsls	r0, r0, #23
 8000ed2:	4320      	orrs	r0, r4
 8000ed4:	bd70      	pop	{r4, r5, r6, pc}
 8000ed6:	2b99      	cmp	r3, #153	; 0x99
 8000ed8:	dd0a      	ble.n	8000ef0 <__aeabi_ui2f+0x48>
 8000eda:	0002      	movs	r2, r0
 8000edc:	0020      	movs	r0, r4
 8000ede:	321b      	adds	r2, #27
 8000ee0:	4090      	lsls	r0, r2
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	1e50      	subs	r0, r2, #1
 8000ee6:	4182      	sbcs	r2, r0
 8000ee8:	2005      	movs	r0, #5
 8000eea:	1a40      	subs	r0, r0, r1
 8000eec:	40c4      	lsrs	r4, r0
 8000eee:	4314      	orrs	r4, r2
 8000ef0:	2905      	cmp	r1, #5
 8000ef2:	dc16      	bgt.n	8000f22 <__aeabi_ui2f+0x7a>
 8000ef4:	0022      	movs	r2, r4
 8000ef6:	480f      	ldr	r0, [pc, #60]	; (8000f34 <__aeabi_ui2f+0x8c>)
 8000ef8:	4002      	ands	r2, r0
 8000efa:	0765      	lsls	r5, r4, #29
 8000efc:	d009      	beq.n	8000f12 <__aeabi_ui2f+0x6a>
 8000efe:	250f      	movs	r5, #15
 8000f00:	402c      	ands	r4, r5
 8000f02:	2c04      	cmp	r4, #4
 8000f04:	d005      	beq.n	8000f12 <__aeabi_ui2f+0x6a>
 8000f06:	3204      	adds	r2, #4
 8000f08:	0154      	lsls	r4, r2, #5
 8000f0a:	d502      	bpl.n	8000f12 <__aeabi_ui2f+0x6a>
 8000f0c:	239f      	movs	r3, #159	; 0x9f
 8000f0e:	4002      	ands	r2, r0
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	0192      	lsls	r2, r2, #6
 8000f14:	0a54      	lsrs	r4, r2, #9
 8000f16:	b2d8      	uxtb	r0, r3
 8000f18:	e7da      	b.n	8000ed0 <__aeabi_ui2f+0x28>
 8000f1a:	0264      	lsls	r4, r4, #9
 8000f1c:	2096      	movs	r0, #150	; 0x96
 8000f1e:	0a64      	lsrs	r4, r4, #9
 8000f20:	e7d6      	b.n	8000ed0 <__aeabi_ui2f+0x28>
 8000f22:	1f4a      	subs	r2, r1, #5
 8000f24:	4094      	lsls	r4, r2
 8000f26:	0022      	movs	r2, r4
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <__aeabi_ui2f+0x8c>)
 8000f2a:	4002      	ands	r2, r0
 8000f2c:	0765      	lsls	r5, r4, #29
 8000f2e:	d0f0      	beq.n	8000f12 <__aeabi_ui2f+0x6a>
 8000f30:	e7e5      	b.n	8000efe <__aeabi_ui2f+0x56>
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	fbffffff 	.word	0xfbffffff

08000f38 <__aeabi_dadd>:
 8000f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3a:	464f      	mov	r7, r9
 8000f3c:	4646      	mov	r6, r8
 8000f3e:	46d6      	mov	lr, sl
 8000f40:	0004      	movs	r4, r0
 8000f42:	b5c0      	push	{r6, r7, lr}
 8000f44:	001f      	movs	r7, r3
 8000f46:	030b      	lsls	r3, r1, #12
 8000f48:	0010      	movs	r0, r2
 8000f4a:	004e      	lsls	r6, r1, #1
 8000f4c:	0a5b      	lsrs	r3, r3, #9
 8000f4e:	0fcd      	lsrs	r5, r1, #31
 8000f50:	0f61      	lsrs	r1, r4, #29
 8000f52:	007a      	lsls	r2, r7, #1
 8000f54:	4319      	orrs	r1, r3
 8000f56:	00e3      	lsls	r3, r4, #3
 8000f58:	033c      	lsls	r4, r7, #12
 8000f5a:	0fff      	lsrs	r7, r7, #31
 8000f5c:	46bc      	mov	ip, r7
 8000f5e:	0a64      	lsrs	r4, r4, #9
 8000f60:	0f47      	lsrs	r7, r0, #29
 8000f62:	4327      	orrs	r7, r4
 8000f64:	0d76      	lsrs	r6, r6, #21
 8000f66:	0d52      	lsrs	r2, r2, #21
 8000f68:	00c0      	lsls	r0, r0, #3
 8000f6a:	46b9      	mov	r9, r7
 8000f6c:	4680      	mov	r8, r0
 8000f6e:	1ab7      	subs	r7, r6, r2
 8000f70:	4565      	cmp	r5, ip
 8000f72:	d100      	bne.n	8000f76 <__aeabi_dadd+0x3e>
 8000f74:	e09b      	b.n	80010ae <__aeabi_dadd+0x176>
 8000f76:	2f00      	cmp	r7, #0
 8000f78:	dc00      	bgt.n	8000f7c <__aeabi_dadd+0x44>
 8000f7a:	e084      	b.n	8001086 <__aeabi_dadd+0x14e>
 8000f7c:	2a00      	cmp	r2, #0
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dadd+0x4a>
 8000f80:	e0be      	b.n	8001100 <__aeabi_dadd+0x1c8>
 8000f82:	4ac8      	ldr	r2, [pc, #800]	; (80012a4 <__aeabi_dadd+0x36c>)
 8000f84:	4296      	cmp	r6, r2
 8000f86:	d100      	bne.n	8000f8a <__aeabi_dadd+0x52>
 8000f88:	e124      	b.n	80011d4 <__aeabi_dadd+0x29c>
 8000f8a:	2280      	movs	r2, #128	; 0x80
 8000f8c:	464c      	mov	r4, r9
 8000f8e:	0412      	lsls	r2, r2, #16
 8000f90:	4314      	orrs	r4, r2
 8000f92:	46a1      	mov	r9, r4
 8000f94:	2f38      	cmp	r7, #56	; 0x38
 8000f96:	dd00      	ble.n	8000f9a <__aeabi_dadd+0x62>
 8000f98:	e167      	b.n	800126a <__aeabi_dadd+0x332>
 8000f9a:	2f1f      	cmp	r7, #31
 8000f9c:	dd00      	ble.n	8000fa0 <__aeabi_dadd+0x68>
 8000f9e:	e1d6      	b.n	800134e <__aeabi_dadd+0x416>
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	464c      	mov	r4, r9
 8000fa4:	1bd2      	subs	r2, r2, r7
 8000fa6:	4094      	lsls	r4, r2
 8000fa8:	46a2      	mov	sl, r4
 8000faa:	4644      	mov	r4, r8
 8000fac:	40fc      	lsrs	r4, r7
 8000fae:	0020      	movs	r0, r4
 8000fb0:	4654      	mov	r4, sl
 8000fb2:	4304      	orrs	r4, r0
 8000fb4:	4640      	mov	r0, r8
 8000fb6:	4090      	lsls	r0, r2
 8000fb8:	1e42      	subs	r2, r0, #1
 8000fba:	4190      	sbcs	r0, r2
 8000fbc:	464a      	mov	r2, r9
 8000fbe:	40fa      	lsrs	r2, r7
 8000fc0:	4304      	orrs	r4, r0
 8000fc2:	1a89      	subs	r1, r1, r2
 8000fc4:	1b1c      	subs	r4, r3, r4
 8000fc6:	42a3      	cmp	r3, r4
 8000fc8:	4192      	sbcs	r2, r2
 8000fca:	4252      	negs	r2, r2
 8000fcc:	1a8b      	subs	r3, r1, r2
 8000fce:	469a      	mov	sl, r3
 8000fd0:	4653      	mov	r3, sl
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	d400      	bmi.n	8000fd8 <__aeabi_dadd+0xa0>
 8000fd6:	e0d4      	b.n	8001182 <__aeabi_dadd+0x24a>
 8000fd8:	4653      	mov	r3, sl
 8000fda:	025a      	lsls	r2, r3, #9
 8000fdc:	0a53      	lsrs	r3, r2, #9
 8000fde:	469a      	mov	sl, r3
 8000fe0:	4653      	mov	r3, sl
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dadd+0xb0>
 8000fe6:	e104      	b.n	80011f2 <__aeabi_dadd+0x2ba>
 8000fe8:	4650      	mov	r0, sl
 8000fea:	f001 fd6f 	bl	8002acc <__clzsi2>
 8000fee:	0003      	movs	r3, r0
 8000ff0:	3b08      	subs	r3, #8
 8000ff2:	2220      	movs	r2, #32
 8000ff4:	0020      	movs	r0, r4
 8000ff6:	1ad2      	subs	r2, r2, r3
 8000ff8:	4651      	mov	r1, sl
 8000ffa:	40d0      	lsrs	r0, r2
 8000ffc:	4099      	lsls	r1, r3
 8000ffe:	0002      	movs	r2, r0
 8001000:	409c      	lsls	r4, r3
 8001002:	430a      	orrs	r2, r1
 8001004:	42b3      	cmp	r3, r6
 8001006:	da00      	bge.n	800100a <__aeabi_dadd+0xd2>
 8001008:	e102      	b.n	8001210 <__aeabi_dadd+0x2d8>
 800100a:	1b9b      	subs	r3, r3, r6
 800100c:	1c59      	adds	r1, r3, #1
 800100e:	291f      	cmp	r1, #31
 8001010:	dd00      	ble.n	8001014 <__aeabi_dadd+0xdc>
 8001012:	e0a7      	b.n	8001164 <__aeabi_dadd+0x22c>
 8001014:	2320      	movs	r3, #32
 8001016:	0010      	movs	r0, r2
 8001018:	0026      	movs	r6, r4
 800101a:	1a5b      	subs	r3, r3, r1
 800101c:	409c      	lsls	r4, r3
 800101e:	4098      	lsls	r0, r3
 8001020:	40ce      	lsrs	r6, r1
 8001022:	40ca      	lsrs	r2, r1
 8001024:	1e63      	subs	r3, r4, #1
 8001026:	419c      	sbcs	r4, r3
 8001028:	4330      	orrs	r0, r6
 800102a:	4692      	mov	sl, r2
 800102c:	2600      	movs	r6, #0
 800102e:	4304      	orrs	r4, r0
 8001030:	0763      	lsls	r3, r4, #29
 8001032:	d009      	beq.n	8001048 <__aeabi_dadd+0x110>
 8001034:	230f      	movs	r3, #15
 8001036:	4023      	ands	r3, r4
 8001038:	2b04      	cmp	r3, #4
 800103a:	d005      	beq.n	8001048 <__aeabi_dadd+0x110>
 800103c:	1d23      	adds	r3, r4, #4
 800103e:	42a3      	cmp	r3, r4
 8001040:	41a4      	sbcs	r4, r4
 8001042:	4264      	negs	r4, r4
 8001044:	44a2      	add	sl, r4
 8001046:	001c      	movs	r4, r3
 8001048:	4653      	mov	r3, sl
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x118>
 800104e:	e09b      	b.n	8001188 <__aeabi_dadd+0x250>
 8001050:	4b94      	ldr	r3, [pc, #592]	; (80012a4 <__aeabi_dadd+0x36c>)
 8001052:	3601      	adds	r6, #1
 8001054:	429e      	cmp	r6, r3
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x122>
 8001058:	e0b8      	b.n	80011cc <__aeabi_dadd+0x294>
 800105a:	4653      	mov	r3, sl
 800105c:	4992      	ldr	r1, [pc, #584]	; (80012a8 <__aeabi_dadd+0x370>)
 800105e:	08e4      	lsrs	r4, r4, #3
 8001060:	400b      	ands	r3, r1
 8001062:	0019      	movs	r1, r3
 8001064:	075b      	lsls	r3, r3, #29
 8001066:	4323      	orrs	r3, r4
 8001068:	0572      	lsls	r2, r6, #21
 800106a:	024c      	lsls	r4, r1, #9
 800106c:	0b24      	lsrs	r4, r4, #12
 800106e:	0d52      	lsrs	r2, r2, #21
 8001070:	0512      	lsls	r2, r2, #20
 8001072:	07ed      	lsls	r5, r5, #31
 8001074:	4322      	orrs	r2, r4
 8001076:	432a      	orrs	r2, r5
 8001078:	0018      	movs	r0, r3
 800107a:	0011      	movs	r1, r2
 800107c:	bce0      	pop	{r5, r6, r7}
 800107e:	46ba      	mov	sl, r7
 8001080:	46b1      	mov	r9, r6
 8001082:	46a8      	mov	r8, r5
 8001084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001086:	2f00      	cmp	r7, #0
 8001088:	d048      	beq.n	800111c <__aeabi_dadd+0x1e4>
 800108a:	1b97      	subs	r7, r2, r6
 800108c:	2e00      	cmp	r6, #0
 800108e:	d000      	beq.n	8001092 <__aeabi_dadd+0x15a>
 8001090:	e10e      	b.n	80012b0 <__aeabi_dadd+0x378>
 8001092:	000c      	movs	r4, r1
 8001094:	431c      	orrs	r4, r3
 8001096:	d100      	bne.n	800109a <__aeabi_dadd+0x162>
 8001098:	e1b7      	b.n	800140a <__aeabi_dadd+0x4d2>
 800109a:	1e7c      	subs	r4, r7, #1
 800109c:	2f01      	cmp	r7, #1
 800109e:	d100      	bne.n	80010a2 <__aeabi_dadd+0x16a>
 80010a0:	e226      	b.n	80014f0 <__aeabi_dadd+0x5b8>
 80010a2:	4d80      	ldr	r5, [pc, #512]	; (80012a4 <__aeabi_dadd+0x36c>)
 80010a4:	42af      	cmp	r7, r5
 80010a6:	d100      	bne.n	80010aa <__aeabi_dadd+0x172>
 80010a8:	e1d5      	b.n	8001456 <__aeabi_dadd+0x51e>
 80010aa:	0027      	movs	r7, r4
 80010ac:	e107      	b.n	80012be <__aeabi_dadd+0x386>
 80010ae:	2f00      	cmp	r7, #0
 80010b0:	dc00      	bgt.n	80010b4 <__aeabi_dadd+0x17c>
 80010b2:	e0b2      	b.n	800121a <__aeabi_dadd+0x2e2>
 80010b4:	2a00      	cmp	r2, #0
 80010b6:	d047      	beq.n	8001148 <__aeabi_dadd+0x210>
 80010b8:	4a7a      	ldr	r2, [pc, #488]	; (80012a4 <__aeabi_dadd+0x36c>)
 80010ba:	4296      	cmp	r6, r2
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dadd+0x188>
 80010be:	e089      	b.n	80011d4 <__aeabi_dadd+0x29c>
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	464c      	mov	r4, r9
 80010c4:	0412      	lsls	r2, r2, #16
 80010c6:	4314      	orrs	r4, r2
 80010c8:	46a1      	mov	r9, r4
 80010ca:	2f38      	cmp	r7, #56	; 0x38
 80010cc:	dc6b      	bgt.n	80011a6 <__aeabi_dadd+0x26e>
 80010ce:	2f1f      	cmp	r7, #31
 80010d0:	dc00      	bgt.n	80010d4 <__aeabi_dadd+0x19c>
 80010d2:	e16e      	b.n	80013b2 <__aeabi_dadd+0x47a>
 80010d4:	003a      	movs	r2, r7
 80010d6:	4648      	mov	r0, r9
 80010d8:	3a20      	subs	r2, #32
 80010da:	40d0      	lsrs	r0, r2
 80010dc:	4684      	mov	ip, r0
 80010de:	2f20      	cmp	r7, #32
 80010e0:	d007      	beq.n	80010f2 <__aeabi_dadd+0x1ba>
 80010e2:	2240      	movs	r2, #64	; 0x40
 80010e4:	4648      	mov	r0, r9
 80010e6:	1bd2      	subs	r2, r2, r7
 80010e8:	4090      	lsls	r0, r2
 80010ea:	0002      	movs	r2, r0
 80010ec:	4640      	mov	r0, r8
 80010ee:	4310      	orrs	r0, r2
 80010f0:	4680      	mov	r8, r0
 80010f2:	4640      	mov	r0, r8
 80010f4:	1e42      	subs	r2, r0, #1
 80010f6:	4190      	sbcs	r0, r2
 80010f8:	4662      	mov	r2, ip
 80010fa:	0004      	movs	r4, r0
 80010fc:	4314      	orrs	r4, r2
 80010fe:	e057      	b.n	80011b0 <__aeabi_dadd+0x278>
 8001100:	464a      	mov	r2, r9
 8001102:	4302      	orrs	r2, r0
 8001104:	d100      	bne.n	8001108 <__aeabi_dadd+0x1d0>
 8001106:	e103      	b.n	8001310 <__aeabi_dadd+0x3d8>
 8001108:	1e7a      	subs	r2, r7, #1
 800110a:	2f01      	cmp	r7, #1
 800110c:	d100      	bne.n	8001110 <__aeabi_dadd+0x1d8>
 800110e:	e193      	b.n	8001438 <__aeabi_dadd+0x500>
 8001110:	4c64      	ldr	r4, [pc, #400]	; (80012a4 <__aeabi_dadd+0x36c>)
 8001112:	42a7      	cmp	r7, r4
 8001114:	d100      	bne.n	8001118 <__aeabi_dadd+0x1e0>
 8001116:	e18a      	b.n	800142e <__aeabi_dadd+0x4f6>
 8001118:	0017      	movs	r7, r2
 800111a:	e73b      	b.n	8000f94 <__aeabi_dadd+0x5c>
 800111c:	4c63      	ldr	r4, [pc, #396]	; (80012ac <__aeabi_dadd+0x374>)
 800111e:	1c72      	adds	r2, r6, #1
 8001120:	4222      	tst	r2, r4
 8001122:	d000      	beq.n	8001126 <__aeabi_dadd+0x1ee>
 8001124:	e0e0      	b.n	80012e8 <__aeabi_dadd+0x3b0>
 8001126:	000a      	movs	r2, r1
 8001128:	431a      	orrs	r2, r3
 800112a:	2e00      	cmp	r6, #0
 800112c:	d000      	beq.n	8001130 <__aeabi_dadd+0x1f8>
 800112e:	e174      	b.n	800141a <__aeabi_dadd+0x4e2>
 8001130:	2a00      	cmp	r2, #0
 8001132:	d100      	bne.n	8001136 <__aeabi_dadd+0x1fe>
 8001134:	e1d0      	b.n	80014d8 <__aeabi_dadd+0x5a0>
 8001136:	464a      	mov	r2, r9
 8001138:	4302      	orrs	r2, r0
 800113a:	d000      	beq.n	800113e <__aeabi_dadd+0x206>
 800113c:	e1e3      	b.n	8001506 <__aeabi_dadd+0x5ce>
 800113e:	074a      	lsls	r2, r1, #29
 8001140:	08db      	lsrs	r3, r3, #3
 8001142:	4313      	orrs	r3, r2
 8001144:	08c9      	lsrs	r1, r1, #3
 8001146:	e029      	b.n	800119c <__aeabi_dadd+0x264>
 8001148:	464a      	mov	r2, r9
 800114a:	4302      	orrs	r2, r0
 800114c:	d100      	bne.n	8001150 <__aeabi_dadd+0x218>
 800114e:	e17d      	b.n	800144c <__aeabi_dadd+0x514>
 8001150:	1e7a      	subs	r2, r7, #1
 8001152:	2f01      	cmp	r7, #1
 8001154:	d100      	bne.n	8001158 <__aeabi_dadd+0x220>
 8001156:	e0e0      	b.n	800131a <__aeabi_dadd+0x3e2>
 8001158:	4c52      	ldr	r4, [pc, #328]	; (80012a4 <__aeabi_dadd+0x36c>)
 800115a:	42a7      	cmp	r7, r4
 800115c:	d100      	bne.n	8001160 <__aeabi_dadd+0x228>
 800115e:	e166      	b.n	800142e <__aeabi_dadd+0x4f6>
 8001160:	0017      	movs	r7, r2
 8001162:	e7b2      	b.n	80010ca <__aeabi_dadd+0x192>
 8001164:	0010      	movs	r0, r2
 8001166:	3b1f      	subs	r3, #31
 8001168:	40d8      	lsrs	r0, r3
 800116a:	2920      	cmp	r1, #32
 800116c:	d003      	beq.n	8001176 <__aeabi_dadd+0x23e>
 800116e:	2340      	movs	r3, #64	; 0x40
 8001170:	1a5b      	subs	r3, r3, r1
 8001172:	409a      	lsls	r2, r3
 8001174:	4314      	orrs	r4, r2
 8001176:	1e63      	subs	r3, r4, #1
 8001178:	419c      	sbcs	r4, r3
 800117a:	2300      	movs	r3, #0
 800117c:	2600      	movs	r6, #0
 800117e:	469a      	mov	sl, r3
 8001180:	4304      	orrs	r4, r0
 8001182:	0763      	lsls	r3, r4, #29
 8001184:	d000      	beq.n	8001188 <__aeabi_dadd+0x250>
 8001186:	e755      	b.n	8001034 <__aeabi_dadd+0xfc>
 8001188:	4652      	mov	r2, sl
 800118a:	08e3      	lsrs	r3, r4, #3
 800118c:	0752      	lsls	r2, r2, #29
 800118e:	4313      	orrs	r3, r2
 8001190:	4652      	mov	r2, sl
 8001192:	0037      	movs	r7, r6
 8001194:	08d1      	lsrs	r1, r2, #3
 8001196:	4a43      	ldr	r2, [pc, #268]	; (80012a4 <__aeabi_dadd+0x36c>)
 8001198:	4297      	cmp	r7, r2
 800119a:	d01f      	beq.n	80011dc <__aeabi_dadd+0x2a4>
 800119c:	0309      	lsls	r1, r1, #12
 800119e:	057a      	lsls	r2, r7, #21
 80011a0:	0b0c      	lsrs	r4, r1, #12
 80011a2:	0d52      	lsrs	r2, r2, #21
 80011a4:	e764      	b.n	8001070 <__aeabi_dadd+0x138>
 80011a6:	4642      	mov	r2, r8
 80011a8:	464c      	mov	r4, r9
 80011aa:	4314      	orrs	r4, r2
 80011ac:	1e62      	subs	r2, r4, #1
 80011ae:	4194      	sbcs	r4, r2
 80011b0:	18e4      	adds	r4, r4, r3
 80011b2:	429c      	cmp	r4, r3
 80011b4:	4192      	sbcs	r2, r2
 80011b6:	4252      	negs	r2, r2
 80011b8:	4692      	mov	sl, r2
 80011ba:	448a      	add	sl, r1
 80011bc:	4653      	mov	r3, sl
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	d5df      	bpl.n	8001182 <__aeabi_dadd+0x24a>
 80011c2:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <__aeabi_dadd+0x36c>)
 80011c4:	3601      	adds	r6, #1
 80011c6:	429e      	cmp	r6, r3
 80011c8:	d000      	beq.n	80011cc <__aeabi_dadd+0x294>
 80011ca:	e0b3      	b.n	8001334 <__aeabi_dadd+0x3fc>
 80011cc:	0032      	movs	r2, r6
 80011ce:	2400      	movs	r4, #0
 80011d0:	2300      	movs	r3, #0
 80011d2:	e74d      	b.n	8001070 <__aeabi_dadd+0x138>
 80011d4:	074a      	lsls	r2, r1, #29
 80011d6:	08db      	lsrs	r3, r3, #3
 80011d8:	4313      	orrs	r3, r2
 80011da:	08c9      	lsrs	r1, r1, #3
 80011dc:	001a      	movs	r2, r3
 80011de:	430a      	orrs	r2, r1
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x2ac>
 80011e2:	e200      	b.n	80015e6 <__aeabi_dadd+0x6ae>
 80011e4:	2480      	movs	r4, #128	; 0x80
 80011e6:	0324      	lsls	r4, r4, #12
 80011e8:	430c      	orrs	r4, r1
 80011ea:	0324      	lsls	r4, r4, #12
 80011ec:	4a2d      	ldr	r2, [pc, #180]	; (80012a4 <__aeabi_dadd+0x36c>)
 80011ee:	0b24      	lsrs	r4, r4, #12
 80011f0:	e73e      	b.n	8001070 <__aeabi_dadd+0x138>
 80011f2:	0020      	movs	r0, r4
 80011f4:	f001 fc6a 	bl	8002acc <__clzsi2>
 80011f8:	0003      	movs	r3, r0
 80011fa:	3318      	adds	r3, #24
 80011fc:	2b1f      	cmp	r3, #31
 80011fe:	dc00      	bgt.n	8001202 <__aeabi_dadd+0x2ca>
 8001200:	e6f7      	b.n	8000ff2 <__aeabi_dadd+0xba>
 8001202:	0022      	movs	r2, r4
 8001204:	3808      	subs	r0, #8
 8001206:	4082      	lsls	r2, r0
 8001208:	2400      	movs	r4, #0
 800120a:	42b3      	cmp	r3, r6
 800120c:	db00      	blt.n	8001210 <__aeabi_dadd+0x2d8>
 800120e:	e6fc      	b.n	800100a <__aeabi_dadd+0xd2>
 8001210:	1af6      	subs	r6, r6, r3
 8001212:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <__aeabi_dadd+0x370>)
 8001214:	401a      	ands	r2, r3
 8001216:	4692      	mov	sl, r2
 8001218:	e70a      	b.n	8001030 <__aeabi_dadd+0xf8>
 800121a:	2f00      	cmp	r7, #0
 800121c:	d02b      	beq.n	8001276 <__aeabi_dadd+0x33e>
 800121e:	1b97      	subs	r7, r2, r6
 8001220:	2e00      	cmp	r6, #0
 8001222:	d100      	bne.n	8001226 <__aeabi_dadd+0x2ee>
 8001224:	e0b8      	b.n	8001398 <__aeabi_dadd+0x460>
 8001226:	4c1f      	ldr	r4, [pc, #124]	; (80012a4 <__aeabi_dadd+0x36c>)
 8001228:	42a2      	cmp	r2, r4
 800122a:	d100      	bne.n	800122e <__aeabi_dadd+0x2f6>
 800122c:	e11c      	b.n	8001468 <__aeabi_dadd+0x530>
 800122e:	2480      	movs	r4, #128	; 0x80
 8001230:	0424      	lsls	r4, r4, #16
 8001232:	4321      	orrs	r1, r4
 8001234:	2f38      	cmp	r7, #56	; 0x38
 8001236:	dd00      	ble.n	800123a <__aeabi_dadd+0x302>
 8001238:	e11e      	b.n	8001478 <__aeabi_dadd+0x540>
 800123a:	2f1f      	cmp	r7, #31
 800123c:	dd00      	ble.n	8001240 <__aeabi_dadd+0x308>
 800123e:	e19e      	b.n	800157e <__aeabi_dadd+0x646>
 8001240:	2620      	movs	r6, #32
 8001242:	000c      	movs	r4, r1
 8001244:	1bf6      	subs	r6, r6, r7
 8001246:	0018      	movs	r0, r3
 8001248:	40b3      	lsls	r3, r6
 800124a:	40b4      	lsls	r4, r6
 800124c:	40f8      	lsrs	r0, r7
 800124e:	1e5e      	subs	r6, r3, #1
 8001250:	41b3      	sbcs	r3, r6
 8001252:	40f9      	lsrs	r1, r7
 8001254:	4304      	orrs	r4, r0
 8001256:	431c      	orrs	r4, r3
 8001258:	4489      	add	r9, r1
 800125a:	4444      	add	r4, r8
 800125c:	4544      	cmp	r4, r8
 800125e:	419b      	sbcs	r3, r3
 8001260:	425b      	negs	r3, r3
 8001262:	444b      	add	r3, r9
 8001264:	469a      	mov	sl, r3
 8001266:	0016      	movs	r6, r2
 8001268:	e7a8      	b.n	80011bc <__aeabi_dadd+0x284>
 800126a:	4642      	mov	r2, r8
 800126c:	464c      	mov	r4, r9
 800126e:	4314      	orrs	r4, r2
 8001270:	1e62      	subs	r2, r4, #1
 8001272:	4194      	sbcs	r4, r2
 8001274:	e6a6      	b.n	8000fc4 <__aeabi_dadd+0x8c>
 8001276:	4c0d      	ldr	r4, [pc, #52]	; (80012ac <__aeabi_dadd+0x374>)
 8001278:	1c72      	adds	r2, r6, #1
 800127a:	4222      	tst	r2, r4
 800127c:	d000      	beq.n	8001280 <__aeabi_dadd+0x348>
 800127e:	e0a8      	b.n	80013d2 <__aeabi_dadd+0x49a>
 8001280:	000a      	movs	r2, r1
 8001282:	431a      	orrs	r2, r3
 8001284:	2e00      	cmp	r6, #0
 8001286:	d000      	beq.n	800128a <__aeabi_dadd+0x352>
 8001288:	e10a      	b.n	80014a0 <__aeabi_dadd+0x568>
 800128a:	2a00      	cmp	r2, #0
 800128c:	d100      	bne.n	8001290 <__aeabi_dadd+0x358>
 800128e:	e15e      	b.n	800154e <__aeabi_dadd+0x616>
 8001290:	464a      	mov	r2, r9
 8001292:	4302      	orrs	r2, r0
 8001294:	d000      	beq.n	8001298 <__aeabi_dadd+0x360>
 8001296:	e161      	b.n	800155c <__aeabi_dadd+0x624>
 8001298:	074a      	lsls	r2, r1, #29
 800129a:	08db      	lsrs	r3, r3, #3
 800129c:	4313      	orrs	r3, r2
 800129e:	08c9      	lsrs	r1, r1, #3
 80012a0:	e77c      	b.n	800119c <__aeabi_dadd+0x264>
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	000007ff 	.word	0x000007ff
 80012a8:	ff7fffff 	.word	0xff7fffff
 80012ac:	000007fe 	.word	0x000007fe
 80012b0:	4ccf      	ldr	r4, [pc, #828]	; (80015f0 <__aeabi_dadd+0x6b8>)
 80012b2:	42a2      	cmp	r2, r4
 80012b4:	d100      	bne.n	80012b8 <__aeabi_dadd+0x380>
 80012b6:	e0ce      	b.n	8001456 <__aeabi_dadd+0x51e>
 80012b8:	2480      	movs	r4, #128	; 0x80
 80012ba:	0424      	lsls	r4, r4, #16
 80012bc:	4321      	orrs	r1, r4
 80012be:	2f38      	cmp	r7, #56	; 0x38
 80012c0:	dc5b      	bgt.n	800137a <__aeabi_dadd+0x442>
 80012c2:	2f1f      	cmp	r7, #31
 80012c4:	dd00      	ble.n	80012c8 <__aeabi_dadd+0x390>
 80012c6:	e0dc      	b.n	8001482 <__aeabi_dadd+0x54a>
 80012c8:	2520      	movs	r5, #32
 80012ca:	000c      	movs	r4, r1
 80012cc:	1bed      	subs	r5, r5, r7
 80012ce:	001e      	movs	r6, r3
 80012d0:	40ab      	lsls	r3, r5
 80012d2:	40ac      	lsls	r4, r5
 80012d4:	40fe      	lsrs	r6, r7
 80012d6:	1e5d      	subs	r5, r3, #1
 80012d8:	41ab      	sbcs	r3, r5
 80012da:	4334      	orrs	r4, r6
 80012dc:	40f9      	lsrs	r1, r7
 80012de:	431c      	orrs	r4, r3
 80012e0:	464b      	mov	r3, r9
 80012e2:	1a5b      	subs	r3, r3, r1
 80012e4:	4699      	mov	r9, r3
 80012e6:	e04c      	b.n	8001382 <__aeabi_dadd+0x44a>
 80012e8:	464a      	mov	r2, r9
 80012ea:	1a1c      	subs	r4, r3, r0
 80012ec:	1a88      	subs	r0, r1, r2
 80012ee:	42a3      	cmp	r3, r4
 80012f0:	4192      	sbcs	r2, r2
 80012f2:	4252      	negs	r2, r2
 80012f4:	4692      	mov	sl, r2
 80012f6:	0002      	movs	r2, r0
 80012f8:	4650      	mov	r0, sl
 80012fa:	1a12      	subs	r2, r2, r0
 80012fc:	4692      	mov	sl, r2
 80012fe:	0212      	lsls	r2, r2, #8
 8001300:	d478      	bmi.n	80013f4 <__aeabi_dadd+0x4bc>
 8001302:	4653      	mov	r3, sl
 8001304:	4323      	orrs	r3, r4
 8001306:	d000      	beq.n	800130a <__aeabi_dadd+0x3d2>
 8001308:	e66a      	b.n	8000fe0 <__aeabi_dadd+0xa8>
 800130a:	2100      	movs	r1, #0
 800130c:	2500      	movs	r5, #0
 800130e:	e745      	b.n	800119c <__aeabi_dadd+0x264>
 8001310:	074a      	lsls	r2, r1, #29
 8001312:	08db      	lsrs	r3, r3, #3
 8001314:	4313      	orrs	r3, r2
 8001316:	08c9      	lsrs	r1, r1, #3
 8001318:	e73d      	b.n	8001196 <__aeabi_dadd+0x25e>
 800131a:	181c      	adds	r4, r3, r0
 800131c:	429c      	cmp	r4, r3
 800131e:	419b      	sbcs	r3, r3
 8001320:	4449      	add	r1, r9
 8001322:	468a      	mov	sl, r1
 8001324:	425b      	negs	r3, r3
 8001326:	449a      	add	sl, r3
 8001328:	4653      	mov	r3, sl
 800132a:	2601      	movs	r6, #1
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	d400      	bmi.n	8001332 <__aeabi_dadd+0x3fa>
 8001330:	e727      	b.n	8001182 <__aeabi_dadd+0x24a>
 8001332:	2602      	movs	r6, #2
 8001334:	4652      	mov	r2, sl
 8001336:	4baf      	ldr	r3, [pc, #700]	; (80015f4 <__aeabi_dadd+0x6bc>)
 8001338:	2101      	movs	r1, #1
 800133a:	401a      	ands	r2, r3
 800133c:	0013      	movs	r3, r2
 800133e:	4021      	ands	r1, r4
 8001340:	0862      	lsrs	r2, r4, #1
 8001342:	430a      	orrs	r2, r1
 8001344:	07dc      	lsls	r4, r3, #31
 8001346:	085b      	lsrs	r3, r3, #1
 8001348:	469a      	mov	sl, r3
 800134a:	4314      	orrs	r4, r2
 800134c:	e670      	b.n	8001030 <__aeabi_dadd+0xf8>
 800134e:	003a      	movs	r2, r7
 8001350:	464c      	mov	r4, r9
 8001352:	3a20      	subs	r2, #32
 8001354:	40d4      	lsrs	r4, r2
 8001356:	46a4      	mov	ip, r4
 8001358:	2f20      	cmp	r7, #32
 800135a:	d007      	beq.n	800136c <__aeabi_dadd+0x434>
 800135c:	2240      	movs	r2, #64	; 0x40
 800135e:	4648      	mov	r0, r9
 8001360:	1bd2      	subs	r2, r2, r7
 8001362:	4090      	lsls	r0, r2
 8001364:	0002      	movs	r2, r0
 8001366:	4640      	mov	r0, r8
 8001368:	4310      	orrs	r0, r2
 800136a:	4680      	mov	r8, r0
 800136c:	4640      	mov	r0, r8
 800136e:	1e42      	subs	r2, r0, #1
 8001370:	4190      	sbcs	r0, r2
 8001372:	4662      	mov	r2, ip
 8001374:	0004      	movs	r4, r0
 8001376:	4314      	orrs	r4, r2
 8001378:	e624      	b.n	8000fc4 <__aeabi_dadd+0x8c>
 800137a:	4319      	orrs	r1, r3
 800137c:	000c      	movs	r4, r1
 800137e:	1e63      	subs	r3, r4, #1
 8001380:	419c      	sbcs	r4, r3
 8001382:	4643      	mov	r3, r8
 8001384:	1b1c      	subs	r4, r3, r4
 8001386:	45a0      	cmp	r8, r4
 8001388:	419b      	sbcs	r3, r3
 800138a:	4649      	mov	r1, r9
 800138c:	425b      	negs	r3, r3
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	469a      	mov	sl, r3
 8001392:	4665      	mov	r5, ip
 8001394:	0016      	movs	r6, r2
 8001396:	e61b      	b.n	8000fd0 <__aeabi_dadd+0x98>
 8001398:	000c      	movs	r4, r1
 800139a:	431c      	orrs	r4, r3
 800139c:	d100      	bne.n	80013a0 <__aeabi_dadd+0x468>
 800139e:	e0c7      	b.n	8001530 <__aeabi_dadd+0x5f8>
 80013a0:	1e7c      	subs	r4, r7, #1
 80013a2:	2f01      	cmp	r7, #1
 80013a4:	d100      	bne.n	80013a8 <__aeabi_dadd+0x470>
 80013a6:	e0f9      	b.n	800159c <__aeabi_dadd+0x664>
 80013a8:	4e91      	ldr	r6, [pc, #580]	; (80015f0 <__aeabi_dadd+0x6b8>)
 80013aa:	42b7      	cmp	r7, r6
 80013ac:	d05c      	beq.n	8001468 <__aeabi_dadd+0x530>
 80013ae:	0027      	movs	r7, r4
 80013b0:	e740      	b.n	8001234 <__aeabi_dadd+0x2fc>
 80013b2:	2220      	movs	r2, #32
 80013b4:	464c      	mov	r4, r9
 80013b6:	4640      	mov	r0, r8
 80013b8:	1bd2      	subs	r2, r2, r7
 80013ba:	4094      	lsls	r4, r2
 80013bc:	40f8      	lsrs	r0, r7
 80013be:	4304      	orrs	r4, r0
 80013c0:	4640      	mov	r0, r8
 80013c2:	4090      	lsls	r0, r2
 80013c4:	1e42      	subs	r2, r0, #1
 80013c6:	4190      	sbcs	r0, r2
 80013c8:	464a      	mov	r2, r9
 80013ca:	40fa      	lsrs	r2, r7
 80013cc:	4304      	orrs	r4, r0
 80013ce:	1889      	adds	r1, r1, r2
 80013d0:	e6ee      	b.n	80011b0 <__aeabi_dadd+0x278>
 80013d2:	4c87      	ldr	r4, [pc, #540]	; (80015f0 <__aeabi_dadd+0x6b8>)
 80013d4:	42a2      	cmp	r2, r4
 80013d6:	d100      	bne.n	80013da <__aeabi_dadd+0x4a2>
 80013d8:	e6f9      	b.n	80011ce <__aeabi_dadd+0x296>
 80013da:	1818      	adds	r0, r3, r0
 80013dc:	4298      	cmp	r0, r3
 80013de:	419b      	sbcs	r3, r3
 80013e0:	4449      	add	r1, r9
 80013e2:	425b      	negs	r3, r3
 80013e4:	18cb      	adds	r3, r1, r3
 80013e6:	07dc      	lsls	r4, r3, #31
 80013e8:	0840      	lsrs	r0, r0, #1
 80013ea:	085b      	lsrs	r3, r3, #1
 80013ec:	469a      	mov	sl, r3
 80013ee:	0016      	movs	r6, r2
 80013f0:	4304      	orrs	r4, r0
 80013f2:	e6c6      	b.n	8001182 <__aeabi_dadd+0x24a>
 80013f4:	4642      	mov	r2, r8
 80013f6:	1ad4      	subs	r4, r2, r3
 80013f8:	45a0      	cmp	r8, r4
 80013fa:	4180      	sbcs	r0, r0
 80013fc:	464b      	mov	r3, r9
 80013fe:	4240      	negs	r0, r0
 8001400:	1a59      	subs	r1, r3, r1
 8001402:	1a0b      	subs	r3, r1, r0
 8001404:	469a      	mov	sl, r3
 8001406:	4665      	mov	r5, ip
 8001408:	e5ea      	b.n	8000fe0 <__aeabi_dadd+0xa8>
 800140a:	464b      	mov	r3, r9
 800140c:	464a      	mov	r2, r9
 800140e:	08c0      	lsrs	r0, r0, #3
 8001410:	075b      	lsls	r3, r3, #29
 8001412:	4665      	mov	r5, ip
 8001414:	4303      	orrs	r3, r0
 8001416:	08d1      	lsrs	r1, r2, #3
 8001418:	e6bd      	b.n	8001196 <__aeabi_dadd+0x25e>
 800141a:	2a00      	cmp	r2, #0
 800141c:	d000      	beq.n	8001420 <__aeabi_dadd+0x4e8>
 800141e:	e08e      	b.n	800153e <__aeabi_dadd+0x606>
 8001420:	464b      	mov	r3, r9
 8001422:	4303      	orrs	r3, r0
 8001424:	d117      	bne.n	8001456 <__aeabi_dadd+0x51e>
 8001426:	2180      	movs	r1, #128	; 0x80
 8001428:	2500      	movs	r5, #0
 800142a:	0309      	lsls	r1, r1, #12
 800142c:	e6da      	b.n	80011e4 <__aeabi_dadd+0x2ac>
 800142e:	074a      	lsls	r2, r1, #29
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	4313      	orrs	r3, r2
 8001434:	08c9      	lsrs	r1, r1, #3
 8001436:	e6d1      	b.n	80011dc <__aeabi_dadd+0x2a4>
 8001438:	1a1c      	subs	r4, r3, r0
 800143a:	464a      	mov	r2, r9
 800143c:	42a3      	cmp	r3, r4
 800143e:	419b      	sbcs	r3, r3
 8001440:	1a89      	subs	r1, r1, r2
 8001442:	425b      	negs	r3, r3
 8001444:	1acb      	subs	r3, r1, r3
 8001446:	469a      	mov	sl, r3
 8001448:	2601      	movs	r6, #1
 800144a:	e5c1      	b.n	8000fd0 <__aeabi_dadd+0x98>
 800144c:	074a      	lsls	r2, r1, #29
 800144e:	08db      	lsrs	r3, r3, #3
 8001450:	4313      	orrs	r3, r2
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	e69f      	b.n	8001196 <__aeabi_dadd+0x25e>
 8001456:	4643      	mov	r3, r8
 8001458:	08d8      	lsrs	r0, r3, #3
 800145a:	464b      	mov	r3, r9
 800145c:	464a      	mov	r2, r9
 800145e:	075b      	lsls	r3, r3, #29
 8001460:	4665      	mov	r5, ip
 8001462:	4303      	orrs	r3, r0
 8001464:	08d1      	lsrs	r1, r2, #3
 8001466:	e6b9      	b.n	80011dc <__aeabi_dadd+0x2a4>
 8001468:	4643      	mov	r3, r8
 800146a:	08d8      	lsrs	r0, r3, #3
 800146c:	464b      	mov	r3, r9
 800146e:	464a      	mov	r2, r9
 8001470:	075b      	lsls	r3, r3, #29
 8001472:	4303      	orrs	r3, r0
 8001474:	08d1      	lsrs	r1, r2, #3
 8001476:	e6b1      	b.n	80011dc <__aeabi_dadd+0x2a4>
 8001478:	4319      	orrs	r1, r3
 800147a:	000c      	movs	r4, r1
 800147c:	1e63      	subs	r3, r4, #1
 800147e:	419c      	sbcs	r4, r3
 8001480:	e6eb      	b.n	800125a <__aeabi_dadd+0x322>
 8001482:	003c      	movs	r4, r7
 8001484:	000d      	movs	r5, r1
 8001486:	3c20      	subs	r4, #32
 8001488:	40e5      	lsrs	r5, r4
 800148a:	2f20      	cmp	r7, #32
 800148c:	d003      	beq.n	8001496 <__aeabi_dadd+0x55e>
 800148e:	2440      	movs	r4, #64	; 0x40
 8001490:	1be4      	subs	r4, r4, r7
 8001492:	40a1      	lsls	r1, r4
 8001494:	430b      	orrs	r3, r1
 8001496:	001c      	movs	r4, r3
 8001498:	1e63      	subs	r3, r4, #1
 800149a:	419c      	sbcs	r4, r3
 800149c:	432c      	orrs	r4, r5
 800149e:	e770      	b.n	8001382 <__aeabi_dadd+0x44a>
 80014a0:	2a00      	cmp	r2, #0
 80014a2:	d0e1      	beq.n	8001468 <__aeabi_dadd+0x530>
 80014a4:	464a      	mov	r2, r9
 80014a6:	4302      	orrs	r2, r0
 80014a8:	d0c1      	beq.n	800142e <__aeabi_dadd+0x4f6>
 80014aa:	074a      	lsls	r2, r1, #29
 80014ac:	08db      	lsrs	r3, r3, #3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	08c9      	lsrs	r1, r1, #3
 80014b4:	0312      	lsls	r2, r2, #12
 80014b6:	4211      	tst	r1, r2
 80014b8:	d008      	beq.n	80014cc <__aeabi_dadd+0x594>
 80014ba:	4648      	mov	r0, r9
 80014bc:	08c4      	lsrs	r4, r0, #3
 80014be:	4214      	tst	r4, r2
 80014c0:	d104      	bne.n	80014cc <__aeabi_dadd+0x594>
 80014c2:	4643      	mov	r3, r8
 80014c4:	0021      	movs	r1, r4
 80014c6:	08db      	lsrs	r3, r3, #3
 80014c8:	0742      	lsls	r2, r0, #29
 80014ca:	4313      	orrs	r3, r2
 80014cc:	0f5a      	lsrs	r2, r3, #29
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	0752      	lsls	r2, r2, #29
 80014d2:	08db      	lsrs	r3, r3, #3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	e681      	b.n	80011dc <__aeabi_dadd+0x2a4>
 80014d8:	464b      	mov	r3, r9
 80014da:	4303      	orrs	r3, r0
 80014dc:	d100      	bne.n	80014e0 <__aeabi_dadd+0x5a8>
 80014de:	e714      	b.n	800130a <__aeabi_dadd+0x3d2>
 80014e0:	464b      	mov	r3, r9
 80014e2:	464a      	mov	r2, r9
 80014e4:	08c0      	lsrs	r0, r0, #3
 80014e6:	075b      	lsls	r3, r3, #29
 80014e8:	4665      	mov	r5, ip
 80014ea:	4303      	orrs	r3, r0
 80014ec:	08d1      	lsrs	r1, r2, #3
 80014ee:	e655      	b.n	800119c <__aeabi_dadd+0x264>
 80014f0:	1ac4      	subs	r4, r0, r3
 80014f2:	45a0      	cmp	r8, r4
 80014f4:	4180      	sbcs	r0, r0
 80014f6:	464b      	mov	r3, r9
 80014f8:	4240      	negs	r0, r0
 80014fa:	1a59      	subs	r1, r3, r1
 80014fc:	1a0b      	subs	r3, r1, r0
 80014fe:	469a      	mov	sl, r3
 8001500:	4665      	mov	r5, ip
 8001502:	2601      	movs	r6, #1
 8001504:	e564      	b.n	8000fd0 <__aeabi_dadd+0x98>
 8001506:	1a1c      	subs	r4, r3, r0
 8001508:	464a      	mov	r2, r9
 800150a:	42a3      	cmp	r3, r4
 800150c:	4180      	sbcs	r0, r0
 800150e:	1a8a      	subs	r2, r1, r2
 8001510:	4240      	negs	r0, r0
 8001512:	1a12      	subs	r2, r2, r0
 8001514:	4692      	mov	sl, r2
 8001516:	0212      	lsls	r2, r2, #8
 8001518:	d549      	bpl.n	80015ae <__aeabi_dadd+0x676>
 800151a:	4642      	mov	r2, r8
 800151c:	1ad4      	subs	r4, r2, r3
 800151e:	45a0      	cmp	r8, r4
 8001520:	4180      	sbcs	r0, r0
 8001522:	464b      	mov	r3, r9
 8001524:	4240      	negs	r0, r0
 8001526:	1a59      	subs	r1, r3, r1
 8001528:	1a0b      	subs	r3, r1, r0
 800152a:	469a      	mov	sl, r3
 800152c:	4665      	mov	r5, ip
 800152e:	e57f      	b.n	8001030 <__aeabi_dadd+0xf8>
 8001530:	464b      	mov	r3, r9
 8001532:	464a      	mov	r2, r9
 8001534:	08c0      	lsrs	r0, r0, #3
 8001536:	075b      	lsls	r3, r3, #29
 8001538:	4303      	orrs	r3, r0
 800153a:	08d1      	lsrs	r1, r2, #3
 800153c:	e62b      	b.n	8001196 <__aeabi_dadd+0x25e>
 800153e:	464a      	mov	r2, r9
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	4302      	orrs	r2, r0
 8001544:	d138      	bne.n	80015b8 <__aeabi_dadd+0x680>
 8001546:	074a      	lsls	r2, r1, #29
 8001548:	4313      	orrs	r3, r2
 800154a:	08c9      	lsrs	r1, r1, #3
 800154c:	e646      	b.n	80011dc <__aeabi_dadd+0x2a4>
 800154e:	464b      	mov	r3, r9
 8001550:	464a      	mov	r2, r9
 8001552:	08c0      	lsrs	r0, r0, #3
 8001554:	075b      	lsls	r3, r3, #29
 8001556:	4303      	orrs	r3, r0
 8001558:	08d1      	lsrs	r1, r2, #3
 800155a:	e61f      	b.n	800119c <__aeabi_dadd+0x264>
 800155c:	181c      	adds	r4, r3, r0
 800155e:	429c      	cmp	r4, r3
 8001560:	419b      	sbcs	r3, r3
 8001562:	4449      	add	r1, r9
 8001564:	468a      	mov	sl, r1
 8001566:	425b      	negs	r3, r3
 8001568:	449a      	add	sl, r3
 800156a:	4653      	mov	r3, sl
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	d400      	bmi.n	8001572 <__aeabi_dadd+0x63a>
 8001570:	e607      	b.n	8001182 <__aeabi_dadd+0x24a>
 8001572:	4652      	mov	r2, sl
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <__aeabi_dadd+0x6bc>)
 8001576:	2601      	movs	r6, #1
 8001578:	401a      	ands	r2, r3
 800157a:	4692      	mov	sl, r2
 800157c:	e601      	b.n	8001182 <__aeabi_dadd+0x24a>
 800157e:	003c      	movs	r4, r7
 8001580:	000e      	movs	r6, r1
 8001582:	3c20      	subs	r4, #32
 8001584:	40e6      	lsrs	r6, r4
 8001586:	2f20      	cmp	r7, #32
 8001588:	d003      	beq.n	8001592 <__aeabi_dadd+0x65a>
 800158a:	2440      	movs	r4, #64	; 0x40
 800158c:	1be4      	subs	r4, r4, r7
 800158e:	40a1      	lsls	r1, r4
 8001590:	430b      	orrs	r3, r1
 8001592:	001c      	movs	r4, r3
 8001594:	1e63      	subs	r3, r4, #1
 8001596:	419c      	sbcs	r4, r3
 8001598:	4334      	orrs	r4, r6
 800159a:	e65e      	b.n	800125a <__aeabi_dadd+0x322>
 800159c:	4443      	add	r3, r8
 800159e:	4283      	cmp	r3, r0
 80015a0:	4180      	sbcs	r0, r0
 80015a2:	4449      	add	r1, r9
 80015a4:	468a      	mov	sl, r1
 80015a6:	4240      	negs	r0, r0
 80015a8:	001c      	movs	r4, r3
 80015aa:	4482      	add	sl, r0
 80015ac:	e6bc      	b.n	8001328 <__aeabi_dadd+0x3f0>
 80015ae:	4653      	mov	r3, sl
 80015b0:	4323      	orrs	r3, r4
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dadd+0x67e>
 80015b4:	e6a9      	b.n	800130a <__aeabi_dadd+0x3d2>
 80015b6:	e5e4      	b.n	8001182 <__aeabi_dadd+0x24a>
 80015b8:	074a      	lsls	r2, r1, #29
 80015ba:	4313      	orrs	r3, r2
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	08c9      	lsrs	r1, r1, #3
 80015c0:	0312      	lsls	r2, r2, #12
 80015c2:	4211      	tst	r1, r2
 80015c4:	d009      	beq.n	80015da <__aeabi_dadd+0x6a2>
 80015c6:	4648      	mov	r0, r9
 80015c8:	08c4      	lsrs	r4, r0, #3
 80015ca:	4214      	tst	r4, r2
 80015cc:	d105      	bne.n	80015da <__aeabi_dadd+0x6a2>
 80015ce:	4643      	mov	r3, r8
 80015d0:	4665      	mov	r5, ip
 80015d2:	0021      	movs	r1, r4
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	0742      	lsls	r2, r0, #29
 80015d8:	4313      	orrs	r3, r2
 80015da:	0f5a      	lsrs	r2, r3, #29
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	08db      	lsrs	r3, r3, #3
 80015e0:	0752      	lsls	r2, r2, #29
 80015e2:	4313      	orrs	r3, r2
 80015e4:	e5fa      	b.n	80011dc <__aeabi_dadd+0x2a4>
 80015e6:	2300      	movs	r3, #0
 80015e8:	4a01      	ldr	r2, [pc, #4]	; (80015f0 <__aeabi_dadd+0x6b8>)
 80015ea:	001c      	movs	r4, r3
 80015ec:	e540      	b.n	8001070 <__aeabi_dadd+0x138>
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	000007ff 	.word	0x000007ff
 80015f4:	ff7fffff 	.word	0xff7fffff

080015f8 <__aeabi_ddiv>:
 80015f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fa:	4657      	mov	r7, sl
 80015fc:	464e      	mov	r6, r9
 80015fe:	4645      	mov	r5, r8
 8001600:	46de      	mov	lr, fp
 8001602:	b5e0      	push	{r5, r6, r7, lr}
 8001604:	030c      	lsls	r4, r1, #12
 8001606:	001f      	movs	r7, r3
 8001608:	004b      	lsls	r3, r1, #1
 800160a:	4681      	mov	r9, r0
 800160c:	4692      	mov	sl, r2
 800160e:	0005      	movs	r5, r0
 8001610:	b085      	sub	sp, #20
 8001612:	0b24      	lsrs	r4, r4, #12
 8001614:	0d5b      	lsrs	r3, r3, #21
 8001616:	0fce      	lsrs	r6, r1, #31
 8001618:	2b00      	cmp	r3, #0
 800161a:	d100      	bne.n	800161e <__aeabi_ddiv+0x26>
 800161c:	e152      	b.n	80018c4 <__aeabi_ddiv+0x2cc>
 800161e:	4ad2      	ldr	r2, [pc, #840]	; (8001968 <__aeabi_ddiv+0x370>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d100      	bne.n	8001626 <__aeabi_ddiv+0x2e>
 8001624:	e16e      	b.n	8001904 <__aeabi_ddiv+0x30c>
 8001626:	0f42      	lsrs	r2, r0, #29
 8001628:	00e4      	lsls	r4, r4, #3
 800162a:	4314      	orrs	r4, r2
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	0412      	lsls	r2, r2, #16
 8001630:	4322      	orrs	r2, r4
 8001632:	4690      	mov	r8, r2
 8001634:	4acd      	ldr	r2, [pc, #820]	; (800196c <__aeabi_ddiv+0x374>)
 8001636:	00c5      	lsls	r5, r0, #3
 8001638:	4693      	mov	fp, r2
 800163a:	449b      	add	fp, r3
 800163c:	2300      	movs	r3, #0
 800163e:	4699      	mov	r9, r3
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	033c      	lsls	r4, r7, #12
 8001644:	007b      	lsls	r3, r7, #1
 8001646:	4650      	mov	r0, sl
 8001648:	0b24      	lsrs	r4, r4, #12
 800164a:	0d5b      	lsrs	r3, r3, #21
 800164c:	0fff      	lsrs	r7, r7, #31
 800164e:	2b00      	cmp	r3, #0
 8001650:	d100      	bne.n	8001654 <__aeabi_ddiv+0x5c>
 8001652:	e11a      	b.n	800188a <__aeabi_ddiv+0x292>
 8001654:	4ac4      	ldr	r2, [pc, #784]	; (8001968 <__aeabi_ddiv+0x370>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d100      	bne.n	800165c <__aeabi_ddiv+0x64>
 800165a:	e15e      	b.n	800191a <__aeabi_ddiv+0x322>
 800165c:	0f42      	lsrs	r2, r0, #29
 800165e:	00e4      	lsls	r4, r4, #3
 8001660:	4322      	orrs	r2, r4
 8001662:	2480      	movs	r4, #128	; 0x80
 8001664:	0424      	lsls	r4, r4, #16
 8001666:	4314      	orrs	r4, r2
 8001668:	4ac0      	ldr	r2, [pc, #768]	; (800196c <__aeabi_ddiv+0x374>)
 800166a:	00c1      	lsls	r1, r0, #3
 800166c:	4694      	mov	ip, r2
 800166e:	465a      	mov	r2, fp
 8001670:	4463      	add	r3, ip
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	469b      	mov	fp, r3
 8001676:	2000      	movs	r0, #0
 8001678:	0033      	movs	r3, r6
 800167a:	407b      	eors	r3, r7
 800167c:	469a      	mov	sl, r3
 800167e:	464b      	mov	r3, r9
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d827      	bhi.n	80016d4 <__aeabi_ddiv+0xdc>
 8001684:	4aba      	ldr	r2, [pc, #744]	; (8001970 <__aeabi_ddiv+0x378>)
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	58d3      	ldr	r3, [r2, r3]
 800168a:	469f      	mov	pc, r3
 800168c:	46b2      	mov	sl, r6
 800168e:	9b00      	ldr	r3, [sp, #0]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d016      	beq.n	80016c2 <__aeabi_ddiv+0xca>
 8001694:	2b03      	cmp	r3, #3
 8001696:	d100      	bne.n	800169a <__aeabi_ddiv+0xa2>
 8001698:	e287      	b.n	8001baa <__aeabi_ddiv+0x5b2>
 800169a:	2b01      	cmp	r3, #1
 800169c:	d000      	beq.n	80016a0 <__aeabi_ddiv+0xa8>
 800169e:	e0d5      	b.n	800184c <__aeabi_ddiv+0x254>
 80016a0:	2300      	movs	r3, #0
 80016a2:	2200      	movs	r2, #0
 80016a4:	2500      	movs	r5, #0
 80016a6:	051b      	lsls	r3, r3, #20
 80016a8:	4313      	orrs	r3, r2
 80016aa:	4652      	mov	r2, sl
 80016ac:	07d2      	lsls	r2, r2, #31
 80016ae:	4313      	orrs	r3, r2
 80016b0:	0028      	movs	r0, r5
 80016b2:	0019      	movs	r1, r3
 80016b4:	b005      	add	sp, #20
 80016b6:	bcf0      	pop	{r4, r5, r6, r7}
 80016b8:	46bb      	mov	fp, r7
 80016ba:	46b2      	mov	sl, r6
 80016bc:	46a9      	mov	r9, r5
 80016be:	46a0      	mov	r8, r4
 80016c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c2:	2200      	movs	r2, #0
 80016c4:	2500      	movs	r5, #0
 80016c6:	4ba8      	ldr	r3, [pc, #672]	; (8001968 <__aeabi_ddiv+0x370>)
 80016c8:	e7ed      	b.n	80016a6 <__aeabi_ddiv+0xae>
 80016ca:	46ba      	mov	sl, r7
 80016cc:	46a0      	mov	r8, r4
 80016ce:	000d      	movs	r5, r1
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	e7dc      	b.n	800168e <__aeabi_ddiv+0x96>
 80016d4:	4544      	cmp	r4, r8
 80016d6:	d200      	bcs.n	80016da <__aeabi_ddiv+0xe2>
 80016d8:	e1c4      	b.n	8001a64 <__aeabi_ddiv+0x46c>
 80016da:	d100      	bne.n	80016de <__aeabi_ddiv+0xe6>
 80016dc:	e1bf      	b.n	8001a5e <__aeabi_ddiv+0x466>
 80016de:	2301      	movs	r3, #1
 80016e0:	425b      	negs	r3, r3
 80016e2:	469c      	mov	ip, r3
 80016e4:	002e      	movs	r6, r5
 80016e6:	4640      	mov	r0, r8
 80016e8:	2500      	movs	r5, #0
 80016ea:	44e3      	add	fp, ip
 80016ec:	0223      	lsls	r3, r4, #8
 80016ee:	0e0c      	lsrs	r4, r1, #24
 80016f0:	431c      	orrs	r4, r3
 80016f2:	0c1b      	lsrs	r3, r3, #16
 80016f4:	4699      	mov	r9, r3
 80016f6:	0423      	lsls	r3, r4, #16
 80016f8:	020a      	lsls	r2, r1, #8
 80016fa:	0c1f      	lsrs	r7, r3, #16
 80016fc:	4649      	mov	r1, r9
 80016fe:	9200      	str	r2, [sp, #0]
 8001700:	9701      	str	r7, [sp, #4]
 8001702:	f7fe fd99 	bl	8000238 <__aeabi_uidivmod>
 8001706:	0002      	movs	r2, r0
 8001708:	437a      	muls	r2, r7
 800170a:	040b      	lsls	r3, r1, #16
 800170c:	0c31      	lsrs	r1, r6, #16
 800170e:	4680      	mov	r8, r0
 8001710:	4319      	orrs	r1, r3
 8001712:	428a      	cmp	r2, r1
 8001714:	d907      	bls.n	8001726 <__aeabi_ddiv+0x12e>
 8001716:	2301      	movs	r3, #1
 8001718:	425b      	negs	r3, r3
 800171a:	469c      	mov	ip, r3
 800171c:	1909      	adds	r1, r1, r4
 800171e:	44e0      	add	r8, ip
 8001720:	428c      	cmp	r4, r1
 8001722:	d800      	bhi.n	8001726 <__aeabi_ddiv+0x12e>
 8001724:	e201      	b.n	8001b2a <__aeabi_ddiv+0x532>
 8001726:	1a88      	subs	r0, r1, r2
 8001728:	4649      	mov	r1, r9
 800172a:	f7fe fd85 	bl	8000238 <__aeabi_uidivmod>
 800172e:	9a01      	ldr	r2, [sp, #4]
 8001730:	0436      	lsls	r6, r6, #16
 8001732:	4342      	muls	r2, r0
 8001734:	0409      	lsls	r1, r1, #16
 8001736:	0c36      	lsrs	r6, r6, #16
 8001738:	0003      	movs	r3, r0
 800173a:	430e      	orrs	r6, r1
 800173c:	42b2      	cmp	r2, r6
 800173e:	d904      	bls.n	800174a <__aeabi_ddiv+0x152>
 8001740:	1936      	adds	r6, r6, r4
 8001742:	3b01      	subs	r3, #1
 8001744:	42b4      	cmp	r4, r6
 8001746:	d800      	bhi.n	800174a <__aeabi_ddiv+0x152>
 8001748:	e1e9      	b.n	8001b1e <__aeabi_ddiv+0x526>
 800174a:	1ab0      	subs	r0, r6, r2
 800174c:	4642      	mov	r2, r8
 800174e:	9e00      	ldr	r6, [sp, #0]
 8001750:	0412      	lsls	r2, r2, #16
 8001752:	431a      	orrs	r2, r3
 8001754:	0c33      	lsrs	r3, r6, #16
 8001756:	001f      	movs	r7, r3
 8001758:	0c11      	lsrs	r1, r2, #16
 800175a:	4690      	mov	r8, r2
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	0413      	lsls	r3, r2, #16
 8001760:	0432      	lsls	r2, r6, #16
 8001762:	0c16      	lsrs	r6, r2, #16
 8001764:	0032      	movs	r2, r6
 8001766:	0c1b      	lsrs	r3, r3, #16
 8001768:	435a      	muls	r2, r3
 800176a:	9603      	str	r6, [sp, #12]
 800176c:	437b      	muls	r3, r7
 800176e:	434e      	muls	r6, r1
 8001770:	4379      	muls	r1, r7
 8001772:	0c17      	lsrs	r7, r2, #16
 8001774:	46bc      	mov	ip, r7
 8001776:	199b      	adds	r3, r3, r6
 8001778:	4463      	add	r3, ip
 800177a:	429e      	cmp	r6, r3
 800177c:	d903      	bls.n	8001786 <__aeabi_ddiv+0x18e>
 800177e:	2680      	movs	r6, #128	; 0x80
 8001780:	0276      	lsls	r6, r6, #9
 8001782:	46b4      	mov	ip, r6
 8001784:	4461      	add	r1, ip
 8001786:	0c1e      	lsrs	r6, r3, #16
 8001788:	1871      	adds	r1, r6, r1
 800178a:	0416      	lsls	r6, r2, #16
 800178c:	041b      	lsls	r3, r3, #16
 800178e:	0c36      	lsrs	r6, r6, #16
 8001790:	199e      	adds	r6, r3, r6
 8001792:	4288      	cmp	r0, r1
 8001794:	d302      	bcc.n	800179c <__aeabi_ddiv+0x1a4>
 8001796:	d112      	bne.n	80017be <__aeabi_ddiv+0x1c6>
 8001798:	42b5      	cmp	r5, r6
 800179a:	d210      	bcs.n	80017be <__aeabi_ddiv+0x1c6>
 800179c:	4643      	mov	r3, r8
 800179e:	1e5a      	subs	r2, r3, #1
 80017a0:	9b00      	ldr	r3, [sp, #0]
 80017a2:	469c      	mov	ip, r3
 80017a4:	4465      	add	r5, ip
 80017a6:	001f      	movs	r7, r3
 80017a8:	429d      	cmp	r5, r3
 80017aa:	419b      	sbcs	r3, r3
 80017ac:	425b      	negs	r3, r3
 80017ae:	191b      	adds	r3, r3, r4
 80017b0:	18c0      	adds	r0, r0, r3
 80017b2:	4284      	cmp	r4, r0
 80017b4:	d200      	bcs.n	80017b8 <__aeabi_ddiv+0x1c0>
 80017b6:	e19e      	b.n	8001af6 <__aeabi_ddiv+0x4fe>
 80017b8:	d100      	bne.n	80017bc <__aeabi_ddiv+0x1c4>
 80017ba:	e199      	b.n	8001af0 <__aeabi_ddiv+0x4f8>
 80017bc:	4690      	mov	r8, r2
 80017be:	1bae      	subs	r6, r5, r6
 80017c0:	42b5      	cmp	r5, r6
 80017c2:	41ad      	sbcs	r5, r5
 80017c4:	1a40      	subs	r0, r0, r1
 80017c6:	426d      	negs	r5, r5
 80017c8:	1b40      	subs	r0, r0, r5
 80017ca:	4284      	cmp	r4, r0
 80017cc:	d100      	bne.n	80017d0 <__aeabi_ddiv+0x1d8>
 80017ce:	e1d2      	b.n	8001b76 <__aeabi_ddiv+0x57e>
 80017d0:	4649      	mov	r1, r9
 80017d2:	f7fe fd31 	bl	8000238 <__aeabi_uidivmod>
 80017d6:	9a01      	ldr	r2, [sp, #4]
 80017d8:	040b      	lsls	r3, r1, #16
 80017da:	4342      	muls	r2, r0
 80017dc:	0c31      	lsrs	r1, r6, #16
 80017de:	0005      	movs	r5, r0
 80017e0:	4319      	orrs	r1, r3
 80017e2:	428a      	cmp	r2, r1
 80017e4:	d900      	bls.n	80017e8 <__aeabi_ddiv+0x1f0>
 80017e6:	e16c      	b.n	8001ac2 <__aeabi_ddiv+0x4ca>
 80017e8:	1a88      	subs	r0, r1, r2
 80017ea:	4649      	mov	r1, r9
 80017ec:	f7fe fd24 	bl	8000238 <__aeabi_uidivmod>
 80017f0:	9a01      	ldr	r2, [sp, #4]
 80017f2:	0436      	lsls	r6, r6, #16
 80017f4:	4342      	muls	r2, r0
 80017f6:	0409      	lsls	r1, r1, #16
 80017f8:	0c36      	lsrs	r6, r6, #16
 80017fa:	0003      	movs	r3, r0
 80017fc:	430e      	orrs	r6, r1
 80017fe:	42b2      	cmp	r2, r6
 8001800:	d900      	bls.n	8001804 <__aeabi_ddiv+0x20c>
 8001802:	e153      	b.n	8001aac <__aeabi_ddiv+0x4b4>
 8001804:	9803      	ldr	r0, [sp, #12]
 8001806:	1ab6      	subs	r6, r6, r2
 8001808:	0002      	movs	r2, r0
 800180a:	042d      	lsls	r5, r5, #16
 800180c:	431d      	orrs	r5, r3
 800180e:	9f02      	ldr	r7, [sp, #8]
 8001810:	042b      	lsls	r3, r5, #16
 8001812:	0c1b      	lsrs	r3, r3, #16
 8001814:	435a      	muls	r2, r3
 8001816:	437b      	muls	r3, r7
 8001818:	469c      	mov	ip, r3
 800181a:	0c29      	lsrs	r1, r5, #16
 800181c:	4348      	muls	r0, r1
 800181e:	0c13      	lsrs	r3, r2, #16
 8001820:	4484      	add	ip, r0
 8001822:	4463      	add	r3, ip
 8001824:	4379      	muls	r1, r7
 8001826:	4298      	cmp	r0, r3
 8001828:	d903      	bls.n	8001832 <__aeabi_ddiv+0x23a>
 800182a:	2080      	movs	r0, #128	; 0x80
 800182c:	0240      	lsls	r0, r0, #9
 800182e:	4684      	mov	ip, r0
 8001830:	4461      	add	r1, ip
 8001832:	0c18      	lsrs	r0, r3, #16
 8001834:	0412      	lsls	r2, r2, #16
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	0c12      	lsrs	r2, r2, #16
 800183a:	1840      	adds	r0, r0, r1
 800183c:	189b      	adds	r3, r3, r2
 800183e:	4286      	cmp	r6, r0
 8001840:	d200      	bcs.n	8001844 <__aeabi_ddiv+0x24c>
 8001842:	e100      	b.n	8001a46 <__aeabi_ddiv+0x44e>
 8001844:	d100      	bne.n	8001848 <__aeabi_ddiv+0x250>
 8001846:	e0fb      	b.n	8001a40 <__aeabi_ddiv+0x448>
 8001848:	2301      	movs	r3, #1
 800184a:	431d      	orrs	r5, r3
 800184c:	4b49      	ldr	r3, [pc, #292]	; (8001974 <__aeabi_ddiv+0x37c>)
 800184e:	445b      	add	r3, fp
 8001850:	2b00      	cmp	r3, #0
 8001852:	dc00      	bgt.n	8001856 <__aeabi_ddiv+0x25e>
 8001854:	e0aa      	b.n	80019ac <__aeabi_ddiv+0x3b4>
 8001856:	076a      	lsls	r2, r5, #29
 8001858:	d000      	beq.n	800185c <__aeabi_ddiv+0x264>
 800185a:	e13d      	b.n	8001ad8 <__aeabi_ddiv+0x4e0>
 800185c:	08e9      	lsrs	r1, r5, #3
 800185e:	4642      	mov	r2, r8
 8001860:	01d2      	lsls	r2, r2, #7
 8001862:	d506      	bpl.n	8001872 <__aeabi_ddiv+0x27a>
 8001864:	4642      	mov	r2, r8
 8001866:	4b44      	ldr	r3, [pc, #272]	; (8001978 <__aeabi_ddiv+0x380>)
 8001868:	401a      	ands	r2, r3
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	4690      	mov	r8, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	445b      	add	r3, fp
 8001872:	4a42      	ldr	r2, [pc, #264]	; (800197c <__aeabi_ddiv+0x384>)
 8001874:	4293      	cmp	r3, r2
 8001876:	dd00      	ble.n	800187a <__aeabi_ddiv+0x282>
 8001878:	e723      	b.n	80016c2 <__aeabi_ddiv+0xca>
 800187a:	4642      	mov	r2, r8
 800187c:	055b      	lsls	r3, r3, #21
 800187e:	0755      	lsls	r5, r2, #29
 8001880:	0252      	lsls	r2, r2, #9
 8001882:	430d      	orrs	r5, r1
 8001884:	0b12      	lsrs	r2, r2, #12
 8001886:	0d5b      	lsrs	r3, r3, #21
 8001888:	e70d      	b.n	80016a6 <__aeabi_ddiv+0xae>
 800188a:	4651      	mov	r1, sl
 800188c:	4321      	orrs	r1, r4
 800188e:	d100      	bne.n	8001892 <__aeabi_ddiv+0x29a>
 8001890:	e07c      	b.n	800198c <__aeabi_ddiv+0x394>
 8001892:	2c00      	cmp	r4, #0
 8001894:	d100      	bne.n	8001898 <__aeabi_ddiv+0x2a0>
 8001896:	e0fb      	b.n	8001a90 <__aeabi_ddiv+0x498>
 8001898:	0020      	movs	r0, r4
 800189a:	f001 f917 	bl	8002acc <__clzsi2>
 800189e:	0002      	movs	r2, r0
 80018a0:	3a0b      	subs	r2, #11
 80018a2:	231d      	movs	r3, #29
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	4652      	mov	r2, sl
 80018a8:	0001      	movs	r1, r0
 80018aa:	40da      	lsrs	r2, r3
 80018ac:	4653      	mov	r3, sl
 80018ae:	3908      	subs	r1, #8
 80018b0:	408b      	lsls	r3, r1
 80018b2:	408c      	lsls	r4, r1
 80018b4:	0019      	movs	r1, r3
 80018b6:	4314      	orrs	r4, r2
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <__aeabi_ddiv+0x388>)
 80018ba:	4458      	add	r0, fp
 80018bc:	469b      	mov	fp, r3
 80018be:	4483      	add	fp, r0
 80018c0:	2000      	movs	r0, #0
 80018c2:	e6d9      	b.n	8001678 <__aeabi_ddiv+0x80>
 80018c4:	0003      	movs	r3, r0
 80018c6:	4323      	orrs	r3, r4
 80018c8:	4698      	mov	r8, r3
 80018ca:	d044      	beq.n	8001956 <__aeabi_ddiv+0x35e>
 80018cc:	2c00      	cmp	r4, #0
 80018ce:	d100      	bne.n	80018d2 <__aeabi_ddiv+0x2da>
 80018d0:	e0cf      	b.n	8001a72 <__aeabi_ddiv+0x47a>
 80018d2:	0020      	movs	r0, r4
 80018d4:	f001 f8fa 	bl	8002acc <__clzsi2>
 80018d8:	0001      	movs	r1, r0
 80018da:	0002      	movs	r2, r0
 80018dc:	390b      	subs	r1, #11
 80018de:	231d      	movs	r3, #29
 80018e0:	1a5b      	subs	r3, r3, r1
 80018e2:	4649      	mov	r1, r9
 80018e4:	0010      	movs	r0, r2
 80018e6:	40d9      	lsrs	r1, r3
 80018e8:	3808      	subs	r0, #8
 80018ea:	4084      	lsls	r4, r0
 80018ec:	000b      	movs	r3, r1
 80018ee:	464d      	mov	r5, r9
 80018f0:	4323      	orrs	r3, r4
 80018f2:	4698      	mov	r8, r3
 80018f4:	4085      	lsls	r5, r0
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <__aeabi_ddiv+0x38c>)
 80018f8:	1a9b      	subs	r3, r3, r2
 80018fa:	469b      	mov	fp, r3
 80018fc:	2300      	movs	r3, #0
 80018fe:	4699      	mov	r9, r3
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	e69e      	b.n	8001642 <__aeabi_ddiv+0x4a>
 8001904:	0002      	movs	r2, r0
 8001906:	4322      	orrs	r2, r4
 8001908:	4690      	mov	r8, r2
 800190a:	d11d      	bne.n	8001948 <__aeabi_ddiv+0x350>
 800190c:	2208      	movs	r2, #8
 800190e:	469b      	mov	fp, r3
 8001910:	2302      	movs	r3, #2
 8001912:	2500      	movs	r5, #0
 8001914:	4691      	mov	r9, r2
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	e693      	b.n	8001642 <__aeabi_ddiv+0x4a>
 800191a:	4651      	mov	r1, sl
 800191c:	4321      	orrs	r1, r4
 800191e:	d109      	bne.n	8001934 <__aeabi_ddiv+0x33c>
 8001920:	2302      	movs	r3, #2
 8001922:	464a      	mov	r2, r9
 8001924:	431a      	orrs	r2, r3
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <__aeabi_ddiv+0x390>)
 8001928:	4691      	mov	r9, r2
 800192a:	469c      	mov	ip, r3
 800192c:	2400      	movs	r4, #0
 800192e:	2002      	movs	r0, #2
 8001930:	44e3      	add	fp, ip
 8001932:	e6a1      	b.n	8001678 <__aeabi_ddiv+0x80>
 8001934:	2303      	movs	r3, #3
 8001936:	464a      	mov	r2, r9
 8001938:	431a      	orrs	r2, r3
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <__aeabi_ddiv+0x390>)
 800193c:	4691      	mov	r9, r2
 800193e:	469c      	mov	ip, r3
 8001940:	4651      	mov	r1, sl
 8001942:	2003      	movs	r0, #3
 8001944:	44e3      	add	fp, ip
 8001946:	e697      	b.n	8001678 <__aeabi_ddiv+0x80>
 8001948:	220c      	movs	r2, #12
 800194a:	469b      	mov	fp, r3
 800194c:	2303      	movs	r3, #3
 800194e:	46a0      	mov	r8, r4
 8001950:	4691      	mov	r9, r2
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	e675      	b.n	8001642 <__aeabi_ddiv+0x4a>
 8001956:	2304      	movs	r3, #4
 8001958:	4699      	mov	r9, r3
 800195a:	2300      	movs	r3, #0
 800195c:	469b      	mov	fp, r3
 800195e:	3301      	adds	r3, #1
 8001960:	2500      	movs	r5, #0
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	e66d      	b.n	8001642 <__aeabi_ddiv+0x4a>
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	000007ff 	.word	0x000007ff
 800196c:	fffffc01 	.word	0xfffffc01
 8001970:	08006ccc 	.word	0x08006ccc
 8001974:	000003ff 	.word	0x000003ff
 8001978:	feffffff 	.word	0xfeffffff
 800197c:	000007fe 	.word	0x000007fe
 8001980:	000003f3 	.word	0x000003f3
 8001984:	fffffc0d 	.word	0xfffffc0d
 8001988:	fffff801 	.word	0xfffff801
 800198c:	464a      	mov	r2, r9
 800198e:	2301      	movs	r3, #1
 8001990:	431a      	orrs	r2, r3
 8001992:	4691      	mov	r9, r2
 8001994:	2400      	movs	r4, #0
 8001996:	2001      	movs	r0, #1
 8001998:	e66e      	b.n	8001678 <__aeabi_ddiv+0x80>
 800199a:	2300      	movs	r3, #0
 800199c:	2280      	movs	r2, #128	; 0x80
 800199e:	469a      	mov	sl, r3
 80019a0:	2500      	movs	r5, #0
 80019a2:	4b88      	ldr	r3, [pc, #544]	; (8001bc4 <__aeabi_ddiv+0x5cc>)
 80019a4:	0312      	lsls	r2, r2, #12
 80019a6:	e67e      	b.n	80016a6 <__aeabi_ddiv+0xae>
 80019a8:	2501      	movs	r5, #1
 80019aa:	426d      	negs	r5, r5
 80019ac:	2201      	movs	r2, #1
 80019ae:	1ad2      	subs	r2, r2, r3
 80019b0:	2a38      	cmp	r2, #56	; 0x38
 80019b2:	dd00      	ble.n	80019b6 <__aeabi_ddiv+0x3be>
 80019b4:	e674      	b.n	80016a0 <__aeabi_ddiv+0xa8>
 80019b6:	2a1f      	cmp	r2, #31
 80019b8:	dc00      	bgt.n	80019bc <__aeabi_ddiv+0x3c4>
 80019ba:	e0bd      	b.n	8001b38 <__aeabi_ddiv+0x540>
 80019bc:	211f      	movs	r1, #31
 80019be:	4249      	negs	r1, r1
 80019c0:	1acb      	subs	r3, r1, r3
 80019c2:	4641      	mov	r1, r8
 80019c4:	40d9      	lsrs	r1, r3
 80019c6:	000b      	movs	r3, r1
 80019c8:	2a20      	cmp	r2, #32
 80019ca:	d004      	beq.n	80019d6 <__aeabi_ddiv+0x3de>
 80019cc:	4641      	mov	r1, r8
 80019ce:	4a7e      	ldr	r2, [pc, #504]	; (8001bc8 <__aeabi_ddiv+0x5d0>)
 80019d0:	445a      	add	r2, fp
 80019d2:	4091      	lsls	r1, r2
 80019d4:	430d      	orrs	r5, r1
 80019d6:	0029      	movs	r1, r5
 80019d8:	1e4a      	subs	r2, r1, #1
 80019da:	4191      	sbcs	r1, r2
 80019dc:	4319      	orrs	r1, r3
 80019de:	2307      	movs	r3, #7
 80019e0:	001d      	movs	r5, r3
 80019e2:	2200      	movs	r2, #0
 80019e4:	400d      	ands	r5, r1
 80019e6:	420b      	tst	r3, r1
 80019e8:	d100      	bne.n	80019ec <__aeabi_ddiv+0x3f4>
 80019ea:	e0d0      	b.n	8001b8e <__aeabi_ddiv+0x596>
 80019ec:	220f      	movs	r2, #15
 80019ee:	2300      	movs	r3, #0
 80019f0:	400a      	ands	r2, r1
 80019f2:	2a04      	cmp	r2, #4
 80019f4:	d100      	bne.n	80019f8 <__aeabi_ddiv+0x400>
 80019f6:	e0c7      	b.n	8001b88 <__aeabi_ddiv+0x590>
 80019f8:	1d0a      	adds	r2, r1, #4
 80019fa:	428a      	cmp	r2, r1
 80019fc:	4189      	sbcs	r1, r1
 80019fe:	4249      	negs	r1, r1
 8001a00:	185b      	adds	r3, r3, r1
 8001a02:	0011      	movs	r1, r2
 8001a04:	021a      	lsls	r2, r3, #8
 8001a06:	d400      	bmi.n	8001a0a <__aeabi_ddiv+0x412>
 8001a08:	e0be      	b.n	8001b88 <__aeabi_ddiv+0x590>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2500      	movs	r5, #0
 8001a10:	e649      	b.n	80016a6 <__aeabi_ddiv+0xae>
 8001a12:	2280      	movs	r2, #128	; 0x80
 8001a14:	4643      	mov	r3, r8
 8001a16:	0312      	lsls	r2, r2, #12
 8001a18:	4213      	tst	r3, r2
 8001a1a:	d008      	beq.n	8001a2e <__aeabi_ddiv+0x436>
 8001a1c:	4214      	tst	r4, r2
 8001a1e:	d106      	bne.n	8001a2e <__aeabi_ddiv+0x436>
 8001a20:	4322      	orrs	r2, r4
 8001a22:	0312      	lsls	r2, r2, #12
 8001a24:	46ba      	mov	sl, r7
 8001a26:	000d      	movs	r5, r1
 8001a28:	4b66      	ldr	r3, [pc, #408]	; (8001bc4 <__aeabi_ddiv+0x5cc>)
 8001a2a:	0b12      	lsrs	r2, r2, #12
 8001a2c:	e63b      	b.n	80016a6 <__aeabi_ddiv+0xae>
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	4643      	mov	r3, r8
 8001a32:	0312      	lsls	r2, r2, #12
 8001a34:	431a      	orrs	r2, r3
 8001a36:	0312      	lsls	r2, r2, #12
 8001a38:	46b2      	mov	sl, r6
 8001a3a:	4b62      	ldr	r3, [pc, #392]	; (8001bc4 <__aeabi_ddiv+0x5cc>)
 8001a3c:	0b12      	lsrs	r2, r2, #12
 8001a3e:	e632      	b.n	80016a6 <__aeabi_ddiv+0xae>
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d100      	bne.n	8001a46 <__aeabi_ddiv+0x44e>
 8001a44:	e702      	b.n	800184c <__aeabi_ddiv+0x254>
 8001a46:	19a6      	adds	r6, r4, r6
 8001a48:	1e6a      	subs	r2, r5, #1
 8001a4a:	42a6      	cmp	r6, r4
 8001a4c:	d200      	bcs.n	8001a50 <__aeabi_ddiv+0x458>
 8001a4e:	e089      	b.n	8001b64 <__aeabi_ddiv+0x56c>
 8001a50:	4286      	cmp	r6, r0
 8001a52:	d200      	bcs.n	8001a56 <__aeabi_ddiv+0x45e>
 8001a54:	e09f      	b.n	8001b96 <__aeabi_ddiv+0x59e>
 8001a56:	d100      	bne.n	8001a5a <__aeabi_ddiv+0x462>
 8001a58:	e0af      	b.n	8001bba <__aeabi_ddiv+0x5c2>
 8001a5a:	0015      	movs	r5, r2
 8001a5c:	e6f4      	b.n	8001848 <__aeabi_ddiv+0x250>
 8001a5e:	42a9      	cmp	r1, r5
 8001a60:	d900      	bls.n	8001a64 <__aeabi_ddiv+0x46c>
 8001a62:	e63c      	b.n	80016de <__aeabi_ddiv+0xe6>
 8001a64:	4643      	mov	r3, r8
 8001a66:	07de      	lsls	r6, r3, #31
 8001a68:	0858      	lsrs	r0, r3, #1
 8001a6a:	086b      	lsrs	r3, r5, #1
 8001a6c:	431e      	orrs	r6, r3
 8001a6e:	07ed      	lsls	r5, r5, #31
 8001a70:	e63c      	b.n	80016ec <__aeabi_ddiv+0xf4>
 8001a72:	f001 f82b 	bl	8002acc <__clzsi2>
 8001a76:	0001      	movs	r1, r0
 8001a78:	0002      	movs	r2, r0
 8001a7a:	3115      	adds	r1, #21
 8001a7c:	3220      	adds	r2, #32
 8001a7e:	291c      	cmp	r1, #28
 8001a80:	dc00      	bgt.n	8001a84 <__aeabi_ddiv+0x48c>
 8001a82:	e72c      	b.n	80018de <__aeabi_ddiv+0x2e6>
 8001a84:	464b      	mov	r3, r9
 8001a86:	3808      	subs	r0, #8
 8001a88:	4083      	lsls	r3, r0
 8001a8a:	2500      	movs	r5, #0
 8001a8c:	4698      	mov	r8, r3
 8001a8e:	e732      	b.n	80018f6 <__aeabi_ddiv+0x2fe>
 8001a90:	f001 f81c 	bl	8002acc <__clzsi2>
 8001a94:	0003      	movs	r3, r0
 8001a96:	001a      	movs	r2, r3
 8001a98:	3215      	adds	r2, #21
 8001a9a:	3020      	adds	r0, #32
 8001a9c:	2a1c      	cmp	r2, #28
 8001a9e:	dc00      	bgt.n	8001aa2 <__aeabi_ddiv+0x4aa>
 8001aa0:	e6ff      	b.n	80018a2 <__aeabi_ddiv+0x2aa>
 8001aa2:	4654      	mov	r4, sl
 8001aa4:	3b08      	subs	r3, #8
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	409c      	lsls	r4, r3
 8001aaa:	e705      	b.n	80018b8 <__aeabi_ddiv+0x2c0>
 8001aac:	1936      	adds	r6, r6, r4
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	42b4      	cmp	r4, r6
 8001ab2:	d900      	bls.n	8001ab6 <__aeabi_ddiv+0x4be>
 8001ab4:	e6a6      	b.n	8001804 <__aeabi_ddiv+0x20c>
 8001ab6:	42b2      	cmp	r2, r6
 8001ab8:	d800      	bhi.n	8001abc <__aeabi_ddiv+0x4c4>
 8001aba:	e6a3      	b.n	8001804 <__aeabi_ddiv+0x20c>
 8001abc:	1e83      	subs	r3, r0, #2
 8001abe:	1936      	adds	r6, r6, r4
 8001ac0:	e6a0      	b.n	8001804 <__aeabi_ddiv+0x20c>
 8001ac2:	1909      	adds	r1, r1, r4
 8001ac4:	3d01      	subs	r5, #1
 8001ac6:	428c      	cmp	r4, r1
 8001ac8:	d900      	bls.n	8001acc <__aeabi_ddiv+0x4d4>
 8001aca:	e68d      	b.n	80017e8 <__aeabi_ddiv+0x1f0>
 8001acc:	428a      	cmp	r2, r1
 8001ace:	d800      	bhi.n	8001ad2 <__aeabi_ddiv+0x4da>
 8001ad0:	e68a      	b.n	80017e8 <__aeabi_ddiv+0x1f0>
 8001ad2:	1e85      	subs	r5, r0, #2
 8001ad4:	1909      	adds	r1, r1, r4
 8001ad6:	e687      	b.n	80017e8 <__aeabi_ddiv+0x1f0>
 8001ad8:	220f      	movs	r2, #15
 8001ada:	402a      	ands	r2, r5
 8001adc:	2a04      	cmp	r2, #4
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_ddiv+0x4ea>
 8001ae0:	e6bc      	b.n	800185c <__aeabi_ddiv+0x264>
 8001ae2:	1d29      	adds	r1, r5, #4
 8001ae4:	42a9      	cmp	r1, r5
 8001ae6:	41ad      	sbcs	r5, r5
 8001ae8:	426d      	negs	r5, r5
 8001aea:	08c9      	lsrs	r1, r1, #3
 8001aec:	44a8      	add	r8, r5
 8001aee:	e6b6      	b.n	800185e <__aeabi_ddiv+0x266>
 8001af0:	42af      	cmp	r7, r5
 8001af2:	d900      	bls.n	8001af6 <__aeabi_ddiv+0x4fe>
 8001af4:	e662      	b.n	80017bc <__aeabi_ddiv+0x1c4>
 8001af6:	4281      	cmp	r1, r0
 8001af8:	d804      	bhi.n	8001b04 <__aeabi_ddiv+0x50c>
 8001afa:	d000      	beq.n	8001afe <__aeabi_ddiv+0x506>
 8001afc:	e65e      	b.n	80017bc <__aeabi_ddiv+0x1c4>
 8001afe:	42ae      	cmp	r6, r5
 8001b00:	d800      	bhi.n	8001b04 <__aeabi_ddiv+0x50c>
 8001b02:	e65b      	b.n	80017bc <__aeabi_ddiv+0x1c4>
 8001b04:	2302      	movs	r3, #2
 8001b06:	425b      	negs	r3, r3
 8001b08:	469c      	mov	ip, r3
 8001b0a:	9b00      	ldr	r3, [sp, #0]
 8001b0c:	44e0      	add	r8, ip
 8001b0e:	469c      	mov	ip, r3
 8001b10:	4465      	add	r5, ip
 8001b12:	429d      	cmp	r5, r3
 8001b14:	419b      	sbcs	r3, r3
 8001b16:	425b      	negs	r3, r3
 8001b18:	191b      	adds	r3, r3, r4
 8001b1a:	18c0      	adds	r0, r0, r3
 8001b1c:	e64f      	b.n	80017be <__aeabi_ddiv+0x1c6>
 8001b1e:	42b2      	cmp	r2, r6
 8001b20:	d800      	bhi.n	8001b24 <__aeabi_ddiv+0x52c>
 8001b22:	e612      	b.n	800174a <__aeabi_ddiv+0x152>
 8001b24:	1e83      	subs	r3, r0, #2
 8001b26:	1936      	adds	r6, r6, r4
 8001b28:	e60f      	b.n	800174a <__aeabi_ddiv+0x152>
 8001b2a:	428a      	cmp	r2, r1
 8001b2c:	d800      	bhi.n	8001b30 <__aeabi_ddiv+0x538>
 8001b2e:	e5fa      	b.n	8001726 <__aeabi_ddiv+0x12e>
 8001b30:	1e83      	subs	r3, r0, #2
 8001b32:	4698      	mov	r8, r3
 8001b34:	1909      	adds	r1, r1, r4
 8001b36:	e5f6      	b.n	8001726 <__aeabi_ddiv+0x12e>
 8001b38:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <__aeabi_ddiv+0x5d4>)
 8001b3a:	0028      	movs	r0, r5
 8001b3c:	445b      	add	r3, fp
 8001b3e:	4641      	mov	r1, r8
 8001b40:	409d      	lsls	r5, r3
 8001b42:	4099      	lsls	r1, r3
 8001b44:	40d0      	lsrs	r0, r2
 8001b46:	1e6b      	subs	r3, r5, #1
 8001b48:	419d      	sbcs	r5, r3
 8001b4a:	4643      	mov	r3, r8
 8001b4c:	4301      	orrs	r1, r0
 8001b4e:	4329      	orrs	r1, r5
 8001b50:	40d3      	lsrs	r3, r2
 8001b52:	074a      	lsls	r2, r1, #29
 8001b54:	d100      	bne.n	8001b58 <__aeabi_ddiv+0x560>
 8001b56:	e755      	b.n	8001a04 <__aeabi_ddiv+0x40c>
 8001b58:	220f      	movs	r2, #15
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	2a04      	cmp	r2, #4
 8001b5e:	d000      	beq.n	8001b62 <__aeabi_ddiv+0x56a>
 8001b60:	e74a      	b.n	80019f8 <__aeabi_ddiv+0x400>
 8001b62:	e74f      	b.n	8001a04 <__aeabi_ddiv+0x40c>
 8001b64:	0015      	movs	r5, r2
 8001b66:	4286      	cmp	r6, r0
 8001b68:	d000      	beq.n	8001b6c <__aeabi_ddiv+0x574>
 8001b6a:	e66d      	b.n	8001848 <__aeabi_ddiv+0x250>
 8001b6c:	9a00      	ldr	r2, [sp, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d000      	beq.n	8001b74 <__aeabi_ddiv+0x57c>
 8001b72:	e669      	b.n	8001848 <__aeabi_ddiv+0x250>
 8001b74:	e66a      	b.n	800184c <__aeabi_ddiv+0x254>
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <__aeabi_ddiv+0x5d8>)
 8001b78:	445b      	add	r3, fp
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	dc00      	bgt.n	8001b80 <__aeabi_ddiv+0x588>
 8001b7e:	e713      	b.n	80019a8 <__aeabi_ddiv+0x3b0>
 8001b80:	2501      	movs	r5, #1
 8001b82:	2100      	movs	r1, #0
 8001b84:	44a8      	add	r8, r5
 8001b86:	e66a      	b.n	800185e <__aeabi_ddiv+0x266>
 8001b88:	075d      	lsls	r5, r3, #29
 8001b8a:	025b      	lsls	r3, r3, #9
 8001b8c:	0b1a      	lsrs	r2, r3, #12
 8001b8e:	08c9      	lsrs	r1, r1, #3
 8001b90:	2300      	movs	r3, #0
 8001b92:	430d      	orrs	r5, r1
 8001b94:	e587      	b.n	80016a6 <__aeabi_ddiv+0xae>
 8001b96:	9900      	ldr	r1, [sp, #0]
 8001b98:	3d02      	subs	r5, #2
 8001b9a:	004a      	lsls	r2, r1, #1
 8001b9c:	428a      	cmp	r2, r1
 8001b9e:	41bf      	sbcs	r7, r7
 8001ba0:	427f      	negs	r7, r7
 8001ba2:	193f      	adds	r7, r7, r4
 8001ba4:	19f6      	adds	r6, r6, r7
 8001ba6:	9200      	str	r2, [sp, #0]
 8001ba8:	e7dd      	b.n	8001b66 <__aeabi_ddiv+0x56e>
 8001baa:	2280      	movs	r2, #128	; 0x80
 8001bac:	4643      	mov	r3, r8
 8001bae:	0312      	lsls	r2, r2, #12
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	0312      	lsls	r2, r2, #12
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <__aeabi_ddiv+0x5cc>)
 8001bb6:	0b12      	lsrs	r2, r2, #12
 8001bb8:	e575      	b.n	80016a6 <__aeabi_ddiv+0xae>
 8001bba:	9900      	ldr	r1, [sp, #0]
 8001bbc:	4299      	cmp	r1, r3
 8001bbe:	d3ea      	bcc.n	8001b96 <__aeabi_ddiv+0x59e>
 8001bc0:	0015      	movs	r5, r2
 8001bc2:	e7d3      	b.n	8001b6c <__aeabi_ddiv+0x574>
 8001bc4:	000007ff 	.word	0x000007ff
 8001bc8:	0000043e 	.word	0x0000043e
 8001bcc:	0000041e 	.word	0x0000041e
 8001bd0:	000003ff 	.word	0x000003ff

08001bd4 <__aeabi_dmul>:
 8001bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bd6:	4645      	mov	r5, r8
 8001bd8:	46de      	mov	lr, fp
 8001bda:	4657      	mov	r7, sl
 8001bdc:	464e      	mov	r6, r9
 8001bde:	b5e0      	push	{r5, r6, r7, lr}
 8001be0:	001f      	movs	r7, r3
 8001be2:	030b      	lsls	r3, r1, #12
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	469b      	mov	fp, r3
 8001be8:	004d      	lsls	r5, r1, #1
 8001bea:	0fcb      	lsrs	r3, r1, #31
 8001bec:	0004      	movs	r4, r0
 8001bee:	4691      	mov	r9, r2
 8001bf0:	4698      	mov	r8, r3
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	0d6d      	lsrs	r5, r5, #21
 8001bf6:	d100      	bne.n	8001bfa <__aeabi_dmul+0x26>
 8001bf8:	e1cd      	b.n	8001f96 <__aeabi_dmul+0x3c2>
 8001bfa:	4bce      	ldr	r3, [pc, #824]	; (8001f34 <__aeabi_dmul+0x360>)
 8001bfc:	429d      	cmp	r5, r3
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dmul+0x2e>
 8001c00:	e1e9      	b.n	8001fd6 <__aeabi_dmul+0x402>
 8001c02:	465a      	mov	r2, fp
 8001c04:	0f43      	lsrs	r3, r0, #29
 8001c06:	00d2      	lsls	r2, r2, #3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	2280      	movs	r2, #128	; 0x80
 8001c0c:	0412      	lsls	r2, r2, #16
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	00c3      	lsls	r3, r0, #3
 8001c12:	469a      	mov	sl, r3
 8001c14:	4bc8      	ldr	r3, [pc, #800]	; (8001f38 <__aeabi_dmul+0x364>)
 8001c16:	4693      	mov	fp, r2
 8001c18:	469c      	mov	ip, r3
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	2600      	movs	r6, #0
 8001c1e:	4465      	add	r5, ip
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	033c      	lsls	r4, r7, #12
 8001c24:	007b      	lsls	r3, r7, #1
 8001c26:	4648      	mov	r0, r9
 8001c28:	0b24      	lsrs	r4, r4, #12
 8001c2a:	0d5b      	lsrs	r3, r3, #21
 8001c2c:	0fff      	lsrs	r7, r7, #31
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dmul+0x60>
 8001c32:	e189      	b.n	8001f48 <__aeabi_dmul+0x374>
 8001c34:	4abf      	ldr	r2, [pc, #764]	; (8001f34 <__aeabi_dmul+0x360>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d019      	beq.n	8001c6e <__aeabi_dmul+0x9a>
 8001c3a:	0f42      	lsrs	r2, r0, #29
 8001c3c:	00e4      	lsls	r4, r4, #3
 8001c3e:	4322      	orrs	r2, r4
 8001c40:	2480      	movs	r4, #128	; 0x80
 8001c42:	0424      	lsls	r4, r4, #16
 8001c44:	4314      	orrs	r4, r2
 8001c46:	4abc      	ldr	r2, [pc, #752]	; (8001f38 <__aeabi_dmul+0x364>)
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4694      	mov	ip, r2
 8001c4c:	4642      	mov	r2, r8
 8001c4e:	4463      	add	r3, ip
 8001c50:	195b      	adds	r3, r3, r5
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	9b01      	ldr	r3, [sp, #4]
 8001c56:	407a      	eors	r2, r7
 8001c58:	3301      	adds	r3, #1
 8001c5a:	00c0      	lsls	r0, r0, #3
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	9302      	str	r3, [sp, #8]
 8001c60:	2e0a      	cmp	r6, #10
 8001c62:	dd1c      	ble.n	8001c9e <__aeabi_dmul+0xca>
 8001c64:	003a      	movs	r2, r7
 8001c66:	2e0b      	cmp	r6, #11
 8001c68:	d05e      	beq.n	8001d28 <__aeabi_dmul+0x154>
 8001c6a:	4647      	mov	r7, r8
 8001c6c:	e056      	b.n	8001d1c <__aeabi_dmul+0x148>
 8001c6e:	4649      	mov	r1, r9
 8001c70:	4bb0      	ldr	r3, [pc, #704]	; (8001f34 <__aeabi_dmul+0x360>)
 8001c72:	4321      	orrs	r1, r4
 8001c74:	18eb      	adds	r3, r5, r3
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	2900      	cmp	r1, #0
 8001c7a:	d12a      	bne.n	8001cd2 <__aeabi_dmul+0xfe>
 8001c7c:	2080      	movs	r0, #128	; 0x80
 8001c7e:	2202      	movs	r2, #2
 8001c80:	0100      	lsls	r0, r0, #4
 8001c82:	002b      	movs	r3, r5
 8001c84:	4684      	mov	ip, r0
 8001c86:	4316      	orrs	r6, r2
 8001c88:	4642      	mov	r2, r8
 8001c8a:	4463      	add	r3, ip
 8001c8c:	407a      	eors	r2, r7
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	9302      	str	r3, [sp, #8]
 8001c92:	2e0a      	cmp	r6, #10
 8001c94:	dd00      	ble.n	8001c98 <__aeabi_dmul+0xc4>
 8001c96:	e231      	b.n	80020fc <__aeabi_dmul+0x528>
 8001c98:	2000      	movs	r0, #0
 8001c9a:	2400      	movs	r4, #0
 8001c9c:	2102      	movs	r1, #2
 8001c9e:	2e02      	cmp	r6, #2
 8001ca0:	dc26      	bgt.n	8001cf0 <__aeabi_dmul+0x11c>
 8001ca2:	3e01      	subs	r6, #1
 8001ca4:	2e01      	cmp	r6, #1
 8001ca6:	d852      	bhi.n	8001d4e <__aeabi_dmul+0x17a>
 8001ca8:	2902      	cmp	r1, #2
 8001caa:	d04c      	beq.n	8001d46 <__aeabi_dmul+0x172>
 8001cac:	2901      	cmp	r1, #1
 8001cae:	d000      	beq.n	8001cb2 <__aeabi_dmul+0xde>
 8001cb0:	e118      	b.n	8001ee4 <__aeabi_dmul+0x310>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	2400      	movs	r4, #0
 8001cb6:	2500      	movs	r5, #0
 8001cb8:	051b      	lsls	r3, r3, #20
 8001cba:	4323      	orrs	r3, r4
 8001cbc:	07d2      	lsls	r2, r2, #31
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	0028      	movs	r0, r5
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	b007      	add	sp, #28
 8001cc6:	bcf0      	pop	{r4, r5, r6, r7}
 8001cc8:	46bb      	mov	fp, r7
 8001cca:	46b2      	mov	sl, r6
 8001ccc:	46a9      	mov	r9, r5
 8001cce:	46a0      	mov	r8, r4
 8001cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd2:	2180      	movs	r1, #128	; 0x80
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	0109      	lsls	r1, r1, #4
 8001cd8:	002b      	movs	r3, r5
 8001cda:	468c      	mov	ip, r1
 8001cdc:	4316      	orrs	r6, r2
 8001cde:	4642      	mov	r2, r8
 8001ce0:	4463      	add	r3, ip
 8001ce2:	407a      	eors	r2, r7
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	2e0a      	cmp	r6, #10
 8001cea:	dd00      	ble.n	8001cee <__aeabi_dmul+0x11a>
 8001cec:	e228      	b.n	8002140 <__aeabi_dmul+0x56c>
 8001cee:	2103      	movs	r1, #3
 8001cf0:	2501      	movs	r5, #1
 8001cf2:	40b5      	lsls	r5, r6
 8001cf4:	46ac      	mov	ip, r5
 8001cf6:	26a6      	movs	r6, #166	; 0xa6
 8001cf8:	4663      	mov	r3, ip
 8001cfa:	00f6      	lsls	r6, r6, #3
 8001cfc:	4035      	ands	r5, r6
 8001cfe:	4233      	tst	r3, r6
 8001d00:	d10b      	bne.n	8001d1a <__aeabi_dmul+0x146>
 8001d02:	2690      	movs	r6, #144	; 0x90
 8001d04:	00b6      	lsls	r6, r6, #2
 8001d06:	4233      	tst	r3, r6
 8001d08:	d118      	bne.n	8001d3c <__aeabi_dmul+0x168>
 8001d0a:	3eb9      	subs	r6, #185	; 0xb9
 8001d0c:	3eff      	subs	r6, #255	; 0xff
 8001d0e:	421e      	tst	r6, r3
 8001d10:	d01d      	beq.n	8001d4e <__aeabi_dmul+0x17a>
 8001d12:	46a3      	mov	fp, r4
 8001d14:	4682      	mov	sl, r0
 8001d16:	9100      	str	r1, [sp, #0]
 8001d18:	e000      	b.n	8001d1c <__aeabi_dmul+0x148>
 8001d1a:	0017      	movs	r7, r2
 8001d1c:	9900      	ldr	r1, [sp, #0]
 8001d1e:	003a      	movs	r2, r7
 8001d20:	2902      	cmp	r1, #2
 8001d22:	d010      	beq.n	8001d46 <__aeabi_dmul+0x172>
 8001d24:	465c      	mov	r4, fp
 8001d26:	4650      	mov	r0, sl
 8001d28:	2903      	cmp	r1, #3
 8001d2a:	d1bf      	bne.n	8001cac <__aeabi_dmul+0xd8>
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	031b      	lsls	r3, r3, #12
 8001d30:	431c      	orrs	r4, r3
 8001d32:	0324      	lsls	r4, r4, #12
 8001d34:	0005      	movs	r5, r0
 8001d36:	4b7f      	ldr	r3, [pc, #508]	; (8001f34 <__aeabi_dmul+0x360>)
 8001d38:	0b24      	lsrs	r4, r4, #12
 8001d3a:	e7bd      	b.n	8001cb8 <__aeabi_dmul+0xe4>
 8001d3c:	2480      	movs	r4, #128	; 0x80
 8001d3e:	2200      	movs	r2, #0
 8001d40:	4b7c      	ldr	r3, [pc, #496]	; (8001f34 <__aeabi_dmul+0x360>)
 8001d42:	0324      	lsls	r4, r4, #12
 8001d44:	e7b8      	b.n	8001cb8 <__aeabi_dmul+0xe4>
 8001d46:	2400      	movs	r4, #0
 8001d48:	2500      	movs	r5, #0
 8001d4a:	4b7a      	ldr	r3, [pc, #488]	; (8001f34 <__aeabi_dmul+0x360>)
 8001d4c:	e7b4      	b.n	8001cb8 <__aeabi_dmul+0xe4>
 8001d4e:	4653      	mov	r3, sl
 8001d50:	041e      	lsls	r6, r3, #16
 8001d52:	0c36      	lsrs	r6, r6, #16
 8001d54:	0c1f      	lsrs	r7, r3, #16
 8001d56:	0033      	movs	r3, r6
 8001d58:	0c01      	lsrs	r1, r0, #16
 8001d5a:	0400      	lsls	r0, r0, #16
 8001d5c:	0c00      	lsrs	r0, r0, #16
 8001d5e:	4343      	muls	r3, r0
 8001d60:	4698      	mov	r8, r3
 8001d62:	0003      	movs	r3, r0
 8001d64:	437b      	muls	r3, r7
 8001d66:	4699      	mov	r9, r3
 8001d68:	0033      	movs	r3, r6
 8001d6a:	434b      	muls	r3, r1
 8001d6c:	469c      	mov	ip, r3
 8001d6e:	4643      	mov	r3, r8
 8001d70:	000d      	movs	r5, r1
 8001d72:	0c1b      	lsrs	r3, r3, #16
 8001d74:	469a      	mov	sl, r3
 8001d76:	437d      	muls	r5, r7
 8001d78:	44cc      	add	ip, r9
 8001d7a:	44d4      	add	ip, sl
 8001d7c:	9500      	str	r5, [sp, #0]
 8001d7e:	45e1      	cmp	r9, ip
 8001d80:	d904      	bls.n	8001d8c <__aeabi_dmul+0x1b8>
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	025b      	lsls	r3, r3, #9
 8001d86:	4699      	mov	r9, r3
 8001d88:	444d      	add	r5, r9
 8001d8a:	9500      	str	r5, [sp, #0]
 8001d8c:	4663      	mov	r3, ip
 8001d8e:	0c1b      	lsrs	r3, r3, #16
 8001d90:	001d      	movs	r5, r3
 8001d92:	4663      	mov	r3, ip
 8001d94:	041b      	lsls	r3, r3, #16
 8001d96:	469c      	mov	ip, r3
 8001d98:	4643      	mov	r3, r8
 8001d9a:	041b      	lsls	r3, r3, #16
 8001d9c:	0c1b      	lsrs	r3, r3, #16
 8001d9e:	4698      	mov	r8, r3
 8001da0:	4663      	mov	r3, ip
 8001da2:	4443      	add	r3, r8
 8001da4:	9303      	str	r3, [sp, #12]
 8001da6:	0c23      	lsrs	r3, r4, #16
 8001da8:	4698      	mov	r8, r3
 8001daa:	0033      	movs	r3, r6
 8001dac:	0424      	lsls	r4, r4, #16
 8001dae:	0c24      	lsrs	r4, r4, #16
 8001db0:	4363      	muls	r3, r4
 8001db2:	469c      	mov	ip, r3
 8001db4:	0023      	movs	r3, r4
 8001db6:	437b      	muls	r3, r7
 8001db8:	4699      	mov	r9, r3
 8001dba:	4643      	mov	r3, r8
 8001dbc:	435e      	muls	r6, r3
 8001dbe:	435f      	muls	r7, r3
 8001dc0:	444e      	add	r6, r9
 8001dc2:	4663      	mov	r3, ip
 8001dc4:	46b2      	mov	sl, r6
 8001dc6:	0c1e      	lsrs	r6, r3, #16
 8001dc8:	4456      	add	r6, sl
 8001dca:	45b1      	cmp	r9, r6
 8001dcc:	d903      	bls.n	8001dd6 <__aeabi_dmul+0x202>
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	025b      	lsls	r3, r3, #9
 8001dd2:	4699      	mov	r9, r3
 8001dd4:	444f      	add	r7, r9
 8001dd6:	0c33      	lsrs	r3, r6, #16
 8001dd8:	4699      	mov	r9, r3
 8001dda:	003b      	movs	r3, r7
 8001ddc:	444b      	add	r3, r9
 8001dde:	9305      	str	r3, [sp, #20]
 8001de0:	4663      	mov	r3, ip
 8001de2:	46ac      	mov	ip, r5
 8001de4:	041f      	lsls	r7, r3, #16
 8001de6:	0c3f      	lsrs	r7, r7, #16
 8001de8:	0436      	lsls	r6, r6, #16
 8001dea:	19f6      	adds	r6, r6, r7
 8001dec:	44b4      	add	ip, r6
 8001dee:	4663      	mov	r3, ip
 8001df0:	9304      	str	r3, [sp, #16]
 8001df2:	465b      	mov	r3, fp
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	469c      	mov	ip, r3
 8001df8:	465b      	mov	r3, fp
 8001dfa:	041f      	lsls	r7, r3, #16
 8001dfc:	0c3f      	lsrs	r7, r7, #16
 8001dfe:	003b      	movs	r3, r7
 8001e00:	4343      	muls	r3, r0
 8001e02:	4699      	mov	r9, r3
 8001e04:	4663      	mov	r3, ip
 8001e06:	4343      	muls	r3, r0
 8001e08:	469a      	mov	sl, r3
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	4660      	mov	r0, ip
 8001e0e:	0c1b      	lsrs	r3, r3, #16
 8001e10:	469b      	mov	fp, r3
 8001e12:	4348      	muls	r0, r1
 8001e14:	4379      	muls	r1, r7
 8001e16:	4451      	add	r1, sl
 8001e18:	4459      	add	r1, fp
 8001e1a:	458a      	cmp	sl, r1
 8001e1c:	d903      	bls.n	8001e26 <__aeabi_dmul+0x252>
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	025b      	lsls	r3, r3, #9
 8001e22:	469a      	mov	sl, r3
 8001e24:	4450      	add	r0, sl
 8001e26:	0c0b      	lsrs	r3, r1, #16
 8001e28:	469a      	mov	sl, r3
 8001e2a:	464b      	mov	r3, r9
 8001e2c:	041b      	lsls	r3, r3, #16
 8001e2e:	0c1b      	lsrs	r3, r3, #16
 8001e30:	4699      	mov	r9, r3
 8001e32:	003b      	movs	r3, r7
 8001e34:	4363      	muls	r3, r4
 8001e36:	0409      	lsls	r1, r1, #16
 8001e38:	4645      	mov	r5, r8
 8001e3a:	4449      	add	r1, r9
 8001e3c:	4699      	mov	r9, r3
 8001e3e:	4663      	mov	r3, ip
 8001e40:	435c      	muls	r4, r3
 8001e42:	436b      	muls	r3, r5
 8001e44:	469c      	mov	ip, r3
 8001e46:	464b      	mov	r3, r9
 8001e48:	0c1b      	lsrs	r3, r3, #16
 8001e4a:	4698      	mov	r8, r3
 8001e4c:	436f      	muls	r7, r5
 8001e4e:	193f      	adds	r7, r7, r4
 8001e50:	4447      	add	r7, r8
 8001e52:	4450      	add	r0, sl
 8001e54:	42bc      	cmp	r4, r7
 8001e56:	d903      	bls.n	8001e60 <__aeabi_dmul+0x28c>
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	025b      	lsls	r3, r3, #9
 8001e5c:	4698      	mov	r8, r3
 8001e5e:	44c4      	add	ip, r8
 8001e60:	9b04      	ldr	r3, [sp, #16]
 8001e62:	9d00      	ldr	r5, [sp, #0]
 8001e64:	4698      	mov	r8, r3
 8001e66:	4445      	add	r5, r8
 8001e68:	42b5      	cmp	r5, r6
 8001e6a:	41b6      	sbcs	r6, r6
 8001e6c:	4273      	negs	r3, r6
 8001e6e:	4698      	mov	r8, r3
 8001e70:	464b      	mov	r3, r9
 8001e72:	041e      	lsls	r6, r3, #16
 8001e74:	9b05      	ldr	r3, [sp, #20]
 8001e76:	043c      	lsls	r4, r7, #16
 8001e78:	4699      	mov	r9, r3
 8001e7a:	0c36      	lsrs	r6, r6, #16
 8001e7c:	19a4      	adds	r4, r4, r6
 8001e7e:	444c      	add	r4, r9
 8001e80:	46a1      	mov	r9, r4
 8001e82:	4683      	mov	fp, r0
 8001e84:	186e      	adds	r6, r5, r1
 8001e86:	44c1      	add	r9, r8
 8001e88:	428e      	cmp	r6, r1
 8001e8a:	4189      	sbcs	r1, r1
 8001e8c:	44cb      	add	fp, r9
 8001e8e:	465d      	mov	r5, fp
 8001e90:	4249      	negs	r1, r1
 8001e92:	186d      	adds	r5, r5, r1
 8001e94:	429c      	cmp	r4, r3
 8001e96:	41a4      	sbcs	r4, r4
 8001e98:	45c1      	cmp	r9, r8
 8001e9a:	419b      	sbcs	r3, r3
 8001e9c:	4583      	cmp	fp, r0
 8001e9e:	4180      	sbcs	r0, r0
 8001ea0:	428d      	cmp	r5, r1
 8001ea2:	4189      	sbcs	r1, r1
 8001ea4:	425b      	negs	r3, r3
 8001ea6:	4264      	negs	r4, r4
 8001ea8:	431c      	orrs	r4, r3
 8001eaa:	4240      	negs	r0, r0
 8001eac:	9b03      	ldr	r3, [sp, #12]
 8001eae:	4249      	negs	r1, r1
 8001eb0:	4301      	orrs	r1, r0
 8001eb2:	0270      	lsls	r0, r6, #9
 8001eb4:	0c3f      	lsrs	r7, r7, #16
 8001eb6:	4318      	orrs	r0, r3
 8001eb8:	19e4      	adds	r4, r4, r7
 8001eba:	1e47      	subs	r7, r0, #1
 8001ebc:	41b8      	sbcs	r0, r7
 8001ebe:	1864      	adds	r4, r4, r1
 8001ec0:	4464      	add	r4, ip
 8001ec2:	0df6      	lsrs	r6, r6, #23
 8001ec4:	0261      	lsls	r1, r4, #9
 8001ec6:	4330      	orrs	r0, r6
 8001ec8:	0dec      	lsrs	r4, r5, #23
 8001eca:	026e      	lsls	r6, r5, #9
 8001ecc:	430c      	orrs	r4, r1
 8001ece:	4330      	orrs	r0, r6
 8001ed0:	01c9      	lsls	r1, r1, #7
 8001ed2:	d400      	bmi.n	8001ed6 <__aeabi_dmul+0x302>
 8001ed4:	e0f1      	b.n	80020ba <__aeabi_dmul+0x4e6>
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	0843      	lsrs	r3, r0, #1
 8001eda:	4001      	ands	r1, r0
 8001edc:	430b      	orrs	r3, r1
 8001ede:	07e0      	lsls	r0, r4, #31
 8001ee0:	4318      	orrs	r0, r3
 8001ee2:	0864      	lsrs	r4, r4, #1
 8001ee4:	4915      	ldr	r1, [pc, #84]	; (8001f3c <__aeabi_dmul+0x368>)
 8001ee6:	9b02      	ldr	r3, [sp, #8]
 8001ee8:	468c      	mov	ip, r1
 8001eea:	4463      	add	r3, ip
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	dc00      	bgt.n	8001ef2 <__aeabi_dmul+0x31e>
 8001ef0:	e097      	b.n	8002022 <__aeabi_dmul+0x44e>
 8001ef2:	0741      	lsls	r1, r0, #29
 8001ef4:	d009      	beq.n	8001f0a <__aeabi_dmul+0x336>
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	4001      	ands	r1, r0
 8001efa:	2904      	cmp	r1, #4
 8001efc:	d005      	beq.n	8001f0a <__aeabi_dmul+0x336>
 8001efe:	1d01      	adds	r1, r0, #4
 8001f00:	4281      	cmp	r1, r0
 8001f02:	4180      	sbcs	r0, r0
 8001f04:	4240      	negs	r0, r0
 8001f06:	1824      	adds	r4, r4, r0
 8001f08:	0008      	movs	r0, r1
 8001f0a:	01e1      	lsls	r1, r4, #7
 8001f0c:	d506      	bpl.n	8001f1c <__aeabi_dmul+0x348>
 8001f0e:	2180      	movs	r1, #128	; 0x80
 8001f10:	00c9      	lsls	r1, r1, #3
 8001f12:	468c      	mov	ip, r1
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <__aeabi_dmul+0x36c>)
 8001f16:	401c      	ands	r4, r3
 8001f18:	9b02      	ldr	r3, [sp, #8]
 8001f1a:	4463      	add	r3, ip
 8001f1c:	4909      	ldr	r1, [pc, #36]	; (8001f44 <__aeabi_dmul+0x370>)
 8001f1e:	428b      	cmp	r3, r1
 8001f20:	dd00      	ble.n	8001f24 <__aeabi_dmul+0x350>
 8001f22:	e710      	b.n	8001d46 <__aeabi_dmul+0x172>
 8001f24:	0761      	lsls	r1, r4, #29
 8001f26:	08c5      	lsrs	r5, r0, #3
 8001f28:	0264      	lsls	r4, r4, #9
 8001f2a:	055b      	lsls	r3, r3, #21
 8001f2c:	430d      	orrs	r5, r1
 8001f2e:	0b24      	lsrs	r4, r4, #12
 8001f30:	0d5b      	lsrs	r3, r3, #21
 8001f32:	e6c1      	b.n	8001cb8 <__aeabi_dmul+0xe4>
 8001f34:	000007ff 	.word	0x000007ff
 8001f38:	fffffc01 	.word	0xfffffc01
 8001f3c:	000003ff 	.word	0x000003ff
 8001f40:	feffffff 	.word	0xfeffffff
 8001f44:	000007fe 	.word	0x000007fe
 8001f48:	464b      	mov	r3, r9
 8001f4a:	4323      	orrs	r3, r4
 8001f4c:	d059      	beq.n	8002002 <__aeabi_dmul+0x42e>
 8001f4e:	2c00      	cmp	r4, #0
 8001f50:	d100      	bne.n	8001f54 <__aeabi_dmul+0x380>
 8001f52:	e0a3      	b.n	800209c <__aeabi_dmul+0x4c8>
 8001f54:	0020      	movs	r0, r4
 8001f56:	f000 fdb9 	bl	8002acc <__clzsi2>
 8001f5a:	0001      	movs	r1, r0
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	390b      	subs	r1, #11
 8001f60:	221d      	movs	r2, #29
 8001f62:	1a52      	subs	r2, r2, r1
 8001f64:	4649      	mov	r1, r9
 8001f66:	0018      	movs	r0, r3
 8001f68:	40d1      	lsrs	r1, r2
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	3808      	subs	r0, #8
 8001f6e:	4082      	lsls	r2, r0
 8001f70:	4084      	lsls	r4, r0
 8001f72:	0010      	movs	r0, r2
 8001f74:	430c      	orrs	r4, r1
 8001f76:	4a74      	ldr	r2, [pc, #464]	; (8002148 <__aeabi_dmul+0x574>)
 8001f78:	1aeb      	subs	r3, r5, r3
 8001f7a:	4694      	mov	ip, r2
 8001f7c:	4642      	mov	r2, r8
 8001f7e:	4463      	add	r3, ip
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	9b01      	ldr	r3, [sp, #4]
 8001f84:	407a      	eors	r2, r7
 8001f86:	3301      	adds	r3, #1
 8001f88:	2100      	movs	r1, #0
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	2e0a      	cmp	r6, #10
 8001f90:	dd00      	ble.n	8001f94 <__aeabi_dmul+0x3c0>
 8001f92:	e667      	b.n	8001c64 <__aeabi_dmul+0x90>
 8001f94:	e683      	b.n	8001c9e <__aeabi_dmul+0xca>
 8001f96:	465b      	mov	r3, fp
 8001f98:	4303      	orrs	r3, r0
 8001f9a:	469a      	mov	sl, r3
 8001f9c:	d02a      	beq.n	8001ff4 <__aeabi_dmul+0x420>
 8001f9e:	465b      	mov	r3, fp
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d06d      	beq.n	8002080 <__aeabi_dmul+0x4ac>
 8001fa4:	4658      	mov	r0, fp
 8001fa6:	f000 fd91 	bl	8002acc <__clzsi2>
 8001faa:	0001      	movs	r1, r0
 8001fac:	0003      	movs	r3, r0
 8001fae:	390b      	subs	r1, #11
 8001fb0:	221d      	movs	r2, #29
 8001fb2:	1a52      	subs	r2, r2, r1
 8001fb4:	0021      	movs	r1, r4
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	465d      	mov	r5, fp
 8001fba:	40d1      	lsrs	r1, r2
 8001fbc:	3808      	subs	r0, #8
 8001fbe:	4085      	lsls	r5, r0
 8001fc0:	000a      	movs	r2, r1
 8001fc2:	4084      	lsls	r4, r0
 8001fc4:	432a      	orrs	r2, r5
 8001fc6:	4693      	mov	fp, r2
 8001fc8:	46a2      	mov	sl, r4
 8001fca:	4d5f      	ldr	r5, [pc, #380]	; (8002148 <__aeabi_dmul+0x574>)
 8001fcc:	2600      	movs	r6, #0
 8001fce:	1aed      	subs	r5, r5, r3
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	e625      	b.n	8001c22 <__aeabi_dmul+0x4e>
 8001fd6:	465b      	mov	r3, fp
 8001fd8:	4303      	orrs	r3, r0
 8001fda:	469a      	mov	sl, r3
 8001fdc:	d105      	bne.n	8001fea <__aeabi_dmul+0x416>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	469b      	mov	fp, r3
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	2608      	movs	r6, #8
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	e61b      	b.n	8001c22 <__aeabi_dmul+0x4e>
 8001fea:	2303      	movs	r3, #3
 8001fec:	4682      	mov	sl, r0
 8001fee:	260c      	movs	r6, #12
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	e616      	b.n	8001c22 <__aeabi_dmul+0x4e>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	469b      	mov	fp, r3
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	2604      	movs	r6, #4
 8001ffc:	2500      	movs	r5, #0
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	e60f      	b.n	8001c22 <__aeabi_dmul+0x4e>
 8002002:	4642      	mov	r2, r8
 8002004:	3301      	adds	r3, #1
 8002006:	9501      	str	r5, [sp, #4]
 8002008:	431e      	orrs	r6, r3
 800200a:	9b01      	ldr	r3, [sp, #4]
 800200c:	407a      	eors	r2, r7
 800200e:	3301      	adds	r3, #1
 8002010:	2400      	movs	r4, #0
 8002012:	2000      	movs	r0, #0
 8002014:	2101      	movs	r1, #1
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	9302      	str	r3, [sp, #8]
 800201a:	2e0a      	cmp	r6, #10
 800201c:	dd00      	ble.n	8002020 <__aeabi_dmul+0x44c>
 800201e:	e621      	b.n	8001c64 <__aeabi_dmul+0x90>
 8002020:	e63d      	b.n	8001c9e <__aeabi_dmul+0xca>
 8002022:	2101      	movs	r1, #1
 8002024:	1ac9      	subs	r1, r1, r3
 8002026:	2938      	cmp	r1, #56	; 0x38
 8002028:	dd00      	ble.n	800202c <__aeabi_dmul+0x458>
 800202a:	e642      	b.n	8001cb2 <__aeabi_dmul+0xde>
 800202c:	291f      	cmp	r1, #31
 800202e:	dd47      	ble.n	80020c0 <__aeabi_dmul+0x4ec>
 8002030:	261f      	movs	r6, #31
 8002032:	0025      	movs	r5, r4
 8002034:	4276      	negs	r6, r6
 8002036:	1af3      	subs	r3, r6, r3
 8002038:	40dd      	lsrs	r5, r3
 800203a:	002b      	movs	r3, r5
 800203c:	2920      	cmp	r1, #32
 800203e:	d005      	beq.n	800204c <__aeabi_dmul+0x478>
 8002040:	4942      	ldr	r1, [pc, #264]	; (800214c <__aeabi_dmul+0x578>)
 8002042:	9d02      	ldr	r5, [sp, #8]
 8002044:	468c      	mov	ip, r1
 8002046:	4465      	add	r5, ip
 8002048:	40ac      	lsls	r4, r5
 800204a:	4320      	orrs	r0, r4
 800204c:	1e41      	subs	r1, r0, #1
 800204e:	4188      	sbcs	r0, r1
 8002050:	4318      	orrs	r0, r3
 8002052:	2307      	movs	r3, #7
 8002054:	001d      	movs	r5, r3
 8002056:	2400      	movs	r4, #0
 8002058:	4005      	ands	r5, r0
 800205a:	4203      	tst	r3, r0
 800205c:	d04a      	beq.n	80020f4 <__aeabi_dmul+0x520>
 800205e:	230f      	movs	r3, #15
 8002060:	2400      	movs	r4, #0
 8002062:	4003      	ands	r3, r0
 8002064:	2b04      	cmp	r3, #4
 8002066:	d042      	beq.n	80020ee <__aeabi_dmul+0x51a>
 8002068:	1d03      	adds	r3, r0, #4
 800206a:	4283      	cmp	r3, r0
 800206c:	4180      	sbcs	r0, r0
 800206e:	4240      	negs	r0, r0
 8002070:	1824      	adds	r4, r4, r0
 8002072:	0018      	movs	r0, r3
 8002074:	0223      	lsls	r3, r4, #8
 8002076:	d53a      	bpl.n	80020ee <__aeabi_dmul+0x51a>
 8002078:	2301      	movs	r3, #1
 800207a:	2400      	movs	r4, #0
 800207c:	2500      	movs	r5, #0
 800207e:	e61b      	b.n	8001cb8 <__aeabi_dmul+0xe4>
 8002080:	f000 fd24 	bl	8002acc <__clzsi2>
 8002084:	0001      	movs	r1, r0
 8002086:	0003      	movs	r3, r0
 8002088:	3115      	adds	r1, #21
 800208a:	3320      	adds	r3, #32
 800208c:	291c      	cmp	r1, #28
 800208e:	dd8f      	ble.n	8001fb0 <__aeabi_dmul+0x3dc>
 8002090:	3808      	subs	r0, #8
 8002092:	2200      	movs	r2, #0
 8002094:	4084      	lsls	r4, r0
 8002096:	4692      	mov	sl, r2
 8002098:	46a3      	mov	fp, r4
 800209a:	e796      	b.n	8001fca <__aeabi_dmul+0x3f6>
 800209c:	f000 fd16 	bl	8002acc <__clzsi2>
 80020a0:	0001      	movs	r1, r0
 80020a2:	0003      	movs	r3, r0
 80020a4:	3115      	adds	r1, #21
 80020a6:	3320      	adds	r3, #32
 80020a8:	291c      	cmp	r1, #28
 80020aa:	dc00      	bgt.n	80020ae <__aeabi_dmul+0x4da>
 80020ac:	e758      	b.n	8001f60 <__aeabi_dmul+0x38c>
 80020ae:	0002      	movs	r2, r0
 80020b0:	464c      	mov	r4, r9
 80020b2:	3a08      	subs	r2, #8
 80020b4:	2000      	movs	r0, #0
 80020b6:	4094      	lsls	r4, r2
 80020b8:	e75d      	b.n	8001f76 <__aeabi_dmul+0x3a2>
 80020ba:	9b01      	ldr	r3, [sp, #4]
 80020bc:	9302      	str	r3, [sp, #8]
 80020be:	e711      	b.n	8001ee4 <__aeabi_dmul+0x310>
 80020c0:	4b23      	ldr	r3, [pc, #140]	; (8002150 <__aeabi_dmul+0x57c>)
 80020c2:	0026      	movs	r6, r4
 80020c4:	469c      	mov	ip, r3
 80020c6:	0003      	movs	r3, r0
 80020c8:	9d02      	ldr	r5, [sp, #8]
 80020ca:	40cb      	lsrs	r3, r1
 80020cc:	4465      	add	r5, ip
 80020ce:	40ae      	lsls	r6, r5
 80020d0:	431e      	orrs	r6, r3
 80020d2:	0003      	movs	r3, r0
 80020d4:	40ab      	lsls	r3, r5
 80020d6:	1e58      	subs	r0, r3, #1
 80020d8:	4183      	sbcs	r3, r0
 80020da:	0030      	movs	r0, r6
 80020dc:	4318      	orrs	r0, r3
 80020de:	40cc      	lsrs	r4, r1
 80020e0:	0743      	lsls	r3, r0, #29
 80020e2:	d0c7      	beq.n	8002074 <__aeabi_dmul+0x4a0>
 80020e4:	230f      	movs	r3, #15
 80020e6:	4003      	ands	r3, r0
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d1bd      	bne.n	8002068 <__aeabi_dmul+0x494>
 80020ec:	e7c2      	b.n	8002074 <__aeabi_dmul+0x4a0>
 80020ee:	0765      	lsls	r5, r4, #29
 80020f0:	0264      	lsls	r4, r4, #9
 80020f2:	0b24      	lsrs	r4, r4, #12
 80020f4:	08c0      	lsrs	r0, r0, #3
 80020f6:	2300      	movs	r3, #0
 80020f8:	4305      	orrs	r5, r0
 80020fa:	e5dd      	b.n	8001cb8 <__aeabi_dmul+0xe4>
 80020fc:	2500      	movs	r5, #0
 80020fe:	2302      	movs	r3, #2
 8002100:	2e0f      	cmp	r6, #15
 8002102:	d10c      	bne.n	800211e <__aeabi_dmul+0x54a>
 8002104:	2480      	movs	r4, #128	; 0x80
 8002106:	465b      	mov	r3, fp
 8002108:	0324      	lsls	r4, r4, #12
 800210a:	4223      	tst	r3, r4
 800210c:	d00e      	beq.n	800212c <__aeabi_dmul+0x558>
 800210e:	4221      	tst	r1, r4
 8002110:	d10c      	bne.n	800212c <__aeabi_dmul+0x558>
 8002112:	430c      	orrs	r4, r1
 8002114:	0324      	lsls	r4, r4, #12
 8002116:	003a      	movs	r2, r7
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <__aeabi_dmul+0x580>)
 800211a:	0b24      	lsrs	r4, r4, #12
 800211c:	e5cc      	b.n	8001cb8 <__aeabi_dmul+0xe4>
 800211e:	2e0b      	cmp	r6, #11
 8002120:	d000      	beq.n	8002124 <__aeabi_dmul+0x550>
 8002122:	e5a2      	b.n	8001c6a <__aeabi_dmul+0x96>
 8002124:	468b      	mov	fp, r1
 8002126:	46aa      	mov	sl, r5
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	e5f7      	b.n	8001d1c <__aeabi_dmul+0x148>
 800212c:	2480      	movs	r4, #128	; 0x80
 800212e:	465b      	mov	r3, fp
 8002130:	0324      	lsls	r4, r4, #12
 8002132:	431c      	orrs	r4, r3
 8002134:	0324      	lsls	r4, r4, #12
 8002136:	4642      	mov	r2, r8
 8002138:	4655      	mov	r5, sl
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <__aeabi_dmul+0x580>)
 800213c:	0b24      	lsrs	r4, r4, #12
 800213e:	e5bb      	b.n	8001cb8 <__aeabi_dmul+0xe4>
 8002140:	464d      	mov	r5, r9
 8002142:	0021      	movs	r1, r4
 8002144:	2303      	movs	r3, #3
 8002146:	e7db      	b.n	8002100 <__aeabi_dmul+0x52c>
 8002148:	fffffc0d 	.word	0xfffffc0d
 800214c:	0000043e 	.word	0x0000043e
 8002150:	0000041e 	.word	0x0000041e
 8002154:	000007ff 	.word	0x000007ff

08002158 <__aeabi_dsub>:
 8002158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215a:	4657      	mov	r7, sl
 800215c:	464e      	mov	r6, r9
 800215e:	4645      	mov	r5, r8
 8002160:	46de      	mov	lr, fp
 8002162:	b5e0      	push	{r5, r6, r7, lr}
 8002164:	000d      	movs	r5, r1
 8002166:	0004      	movs	r4, r0
 8002168:	0019      	movs	r1, r3
 800216a:	0010      	movs	r0, r2
 800216c:	032b      	lsls	r3, r5, #12
 800216e:	0a5b      	lsrs	r3, r3, #9
 8002170:	0f62      	lsrs	r2, r4, #29
 8002172:	431a      	orrs	r2, r3
 8002174:	00e3      	lsls	r3, r4, #3
 8002176:	030c      	lsls	r4, r1, #12
 8002178:	0a64      	lsrs	r4, r4, #9
 800217a:	0f47      	lsrs	r7, r0, #29
 800217c:	4327      	orrs	r7, r4
 800217e:	4cd0      	ldr	r4, [pc, #832]	; (80024c0 <__aeabi_dsub+0x368>)
 8002180:	006e      	lsls	r6, r5, #1
 8002182:	4691      	mov	r9, r2
 8002184:	b083      	sub	sp, #12
 8002186:	004a      	lsls	r2, r1, #1
 8002188:	00c0      	lsls	r0, r0, #3
 800218a:	4698      	mov	r8, r3
 800218c:	46a2      	mov	sl, r4
 800218e:	0d76      	lsrs	r6, r6, #21
 8002190:	0fed      	lsrs	r5, r5, #31
 8002192:	0d52      	lsrs	r2, r2, #21
 8002194:	0fc9      	lsrs	r1, r1, #31
 8002196:	9001      	str	r0, [sp, #4]
 8002198:	42a2      	cmp	r2, r4
 800219a:	d100      	bne.n	800219e <__aeabi_dsub+0x46>
 800219c:	e0b9      	b.n	8002312 <__aeabi_dsub+0x1ba>
 800219e:	2401      	movs	r4, #1
 80021a0:	4061      	eors	r1, r4
 80021a2:	468b      	mov	fp, r1
 80021a4:	428d      	cmp	r5, r1
 80021a6:	d100      	bne.n	80021aa <__aeabi_dsub+0x52>
 80021a8:	e08d      	b.n	80022c6 <__aeabi_dsub+0x16e>
 80021aa:	1ab4      	subs	r4, r6, r2
 80021ac:	46a4      	mov	ip, r4
 80021ae:	2c00      	cmp	r4, #0
 80021b0:	dc00      	bgt.n	80021b4 <__aeabi_dsub+0x5c>
 80021b2:	e0b7      	b.n	8002324 <__aeabi_dsub+0x1cc>
 80021b4:	2a00      	cmp	r2, #0
 80021b6:	d100      	bne.n	80021ba <__aeabi_dsub+0x62>
 80021b8:	e0cb      	b.n	8002352 <__aeabi_dsub+0x1fa>
 80021ba:	4ac1      	ldr	r2, [pc, #772]	; (80024c0 <__aeabi_dsub+0x368>)
 80021bc:	4296      	cmp	r6, r2
 80021be:	d100      	bne.n	80021c2 <__aeabi_dsub+0x6a>
 80021c0:	e186      	b.n	80024d0 <__aeabi_dsub+0x378>
 80021c2:	2280      	movs	r2, #128	; 0x80
 80021c4:	0412      	lsls	r2, r2, #16
 80021c6:	4317      	orrs	r7, r2
 80021c8:	4662      	mov	r2, ip
 80021ca:	2a38      	cmp	r2, #56	; 0x38
 80021cc:	dd00      	ble.n	80021d0 <__aeabi_dsub+0x78>
 80021ce:	e1a4      	b.n	800251a <__aeabi_dsub+0x3c2>
 80021d0:	2a1f      	cmp	r2, #31
 80021d2:	dd00      	ble.n	80021d6 <__aeabi_dsub+0x7e>
 80021d4:	e21d      	b.n	8002612 <__aeabi_dsub+0x4ba>
 80021d6:	4661      	mov	r1, ip
 80021d8:	2220      	movs	r2, #32
 80021da:	003c      	movs	r4, r7
 80021dc:	1a52      	subs	r2, r2, r1
 80021de:	0001      	movs	r1, r0
 80021e0:	4090      	lsls	r0, r2
 80021e2:	4094      	lsls	r4, r2
 80021e4:	1e42      	subs	r2, r0, #1
 80021e6:	4190      	sbcs	r0, r2
 80021e8:	4662      	mov	r2, ip
 80021ea:	46a0      	mov	r8, r4
 80021ec:	4664      	mov	r4, ip
 80021ee:	40d7      	lsrs	r7, r2
 80021f0:	464a      	mov	r2, r9
 80021f2:	40e1      	lsrs	r1, r4
 80021f4:	4644      	mov	r4, r8
 80021f6:	1bd2      	subs	r2, r2, r7
 80021f8:	4691      	mov	r9, r2
 80021fa:	430c      	orrs	r4, r1
 80021fc:	4304      	orrs	r4, r0
 80021fe:	1b1c      	subs	r4, r3, r4
 8002200:	42a3      	cmp	r3, r4
 8002202:	4192      	sbcs	r2, r2
 8002204:	464b      	mov	r3, r9
 8002206:	4252      	negs	r2, r2
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	469a      	mov	sl, r3
 800220c:	4653      	mov	r3, sl
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	d400      	bmi.n	8002214 <__aeabi_dsub+0xbc>
 8002212:	e12b      	b.n	800246c <__aeabi_dsub+0x314>
 8002214:	4653      	mov	r3, sl
 8002216:	025a      	lsls	r2, r3, #9
 8002218:	0a53      	lsrs	r3, r2, #9
 800221a:	469a      	mov	sl, r3
 800221c:	4653      	mov	r3, sl
 800221e:	2b00      	cmp	r3, #0
 8002220:	d100      	bne.n	8002224 <__aeabi_dsub+0xcc>
 8002222:	e166      	b.n	80024f2 <__aeabi_dsub+0x39a>
 8002224:	4650      	mov	r0, sl
 8002226:	f000 fc51 	bl	8002acc <__clzsi2>
 800222a:	0003      	movs	r3, r0
 800222c:	3b08      	subs	r3, #8
 800222e:	2220      	movs	r2, #32
 8002230:	0020      	movs	r0, r4
 8002232:	1ad2      	subs	r2, r2, r3
 8002234:	4651      	mov	r1, sl
 8002236:	40d0      	lsrs	r0, r2
 8002238:	4099      	lsls	r1, r3
 800223a:	0002      	movs	r2, r0
 800223c:	409c      	lsls	r4, r3
 800223e:	430a      	orrs	r2, r1
 8002240:	429e      	cmp	r6, r3
 8002242:	dd00      	ble.n	8002246 <__aeabi_dsub+0xee>
 8002244:	e164      	b.n	8002510 <__aeabi_dsub+0x3b8>
 8002246:	1b9b      	subs	r3, r3, r6
 8002248:	1c59      	adds	r1, r3, #1
 800224a:	291f      	cmp	r1, #31
 800224c:	dd00      	ble.n	8002250 <__aeabi_dsub+0xf8>
 800224e:	e0fe      	b.n	800244e <__aeabi_dsub+0x2f6>
 8002250:	2320      	movs	r3, #32
 8002252:	0010      	movs	r0, r2
 8002254:	0026      	movs	r6, r4
 8002256:	1a5b      	subs	r3, r3, r1
 8002258:	409c      	lsls	r4, r3
 800225a:	4098      	lsls	r0, r3
 800225c:	40ce      	lsrs	r6, r1
 800225e:	40ca      	lsrs	r2, r1
 8002260:	1e63      	subs	r3, r4, #1
 8002262:	419c      	sbcs	r4, r3
 8002264:	4330      	orrs	r0, r6
 8002266:	4692      	mov	sl, r2
 8002268:	2600      	movs	r6, #0
 800226a:	4304      	orrs	r4, r0
 800226c:	0763      	lsls	r3, r4, #29
 800226e:	d009      	beq.n	8002284 <__aeabi_dsub+0x12c>
 8002270:	230f      	movs	r3, #15
 8002272:	4023      	ands	r3, r4
 8002274:	2b04      	cmp	r3, #4
 8002276:	d005      	beq.n	8002284 <__aeabi_dsub+0x12c>
 8002278:	1d23      	adds	r3, r4, #4
 800227a:	42a3      	cmp	r3, r4
 800227c:	41a4      	sbcs	r4, r4
 800227e:	4264      	negs	r4, r4
 8002280:	44a2      	add	sl, r4
 8002282:	001c      	movs	r4, r3
 8002284:	4653      	mov	r3, sl
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	d400      	bmi.n	800228c <__aeabi_dsub+0x134>
 800228a:	e0f2      	b.n	8002472 <__aeabi_dsub+0x31a>
 800228c:	4b8c      	ldr	r3, [pc, #560]	; (80024c0 <__aeabi_dsub+0x368>)
 800228e:	3601      	adds	r6, #1
 8002290:	429e      	cmp	r6, r3
 8002292:	d100      	bne.n	8002296 <__aeabi_dsub+0x13e>
 8002294:	e10f      	b.n	80024b6 <__aeabi_dsub+0x35e>
 8002296:	4653      	mov	r3, sl
 8002298:	498a      	ldr	r1, [pc, #552]	; (80024c4 <__aeabi_dsub+0x36c>)
 800229a:	08e4      	lsrs	r4, r4, #3
 800229c:	400b      	ands	r3, r1
 800229e:	0019      	movs	r1, r3
 80022a0:	075b      	lsls	r3, r3, #29
 80022a2:	4323      	orrs	r3, r4
 80022a4:	0572      	lsls	r2, r6, #21
 80022a6:	024c      	lsls	r4, r1, #9
 80022a8:	0b24      	lsrs	r4, r4, #12
 80022aa:	0d52      	lsrs	r2, r2, #21
 80022ac:	0512      	lsls	r2, r2, #20
 80022ae:	4322      	orrs	r2, r4
 80022b0:	07ed      	lsls	r5, r5, #31
 80022b2:	432a      	orrs	r2, r5
 80022b4:	0018      	movs	r0, r3
 80022b6:	0011      	movs	r1, r2
 80022b8:	b003      	add	sp, #12
 80022ba:	bcf0      	pop	{r4, r5, r6, r7}
 80022bc:	46bb      	mov	fp, r7
 80022be:	46b2      	mov	sl, r6
 80022c0:	46a9      	mov	r9, r5
 80022c2:	46a0      	mov	r8, r4
 80022c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c6:	1ab4      	subs	r4, r6, r2
 80022c8:	46a4      	mov	ip, r4
 80022ca:	2c00      	cmp	r4, #0
 80022cc:	dd59      	ble.n	8002382 <__aeabi_dsub+0x22a>
 80022ce:	2a00      	cmp	r2, #0
 80022d0:	d100      	bne.n	80022d4 <__aeabi_dsub+0x17c>
 80022d2:	e0b0      	b.n	8002436 <__aeabi_dsub+0x2de>
 80022d4:	4556      	cmp	r6, sl
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x182>
 80022d8:	e0fa      	b.n	80024d0 <__aeabi_dsub+0x378>
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	0412      	lsls	r2, r2, #16
 80022de:	4317      	orrs	r7, r2
 80022e0:	4662      	mov	r2, ip
 80022e2:	2a38      	cmp	r2, #56	; 0x38
 80022e4:	dd00      	ble.n	80022e8 <__aeabi_dsub+0x190>
 80022e6:	e0d4      	b.n	8002492 <__aeabi_dsub+0x33a>
 80022e8:	2a1f      	cmp	r2, #31
 80022ea:	dc00      	bgt.n	80022ee <__aeabi_dsub+0x196>
 80022ec:	e1c0      	b.n	8002670 <__aeabi_dsub+0x518>
 80022ee:	0039      	movs	r1, r7
 80022f0:	3a20      	subs	r2, #32
 80022f2:	40d1      	lsrs	r1, r2
 80022f4:	4662      	mov	r2, ip
 80022f6:	2a20      	cmp	r2, #32
 80022f8:	d006      	beq.n	8002308 <__aeabi_dsub+0x1b0>
 80022fa:	4664      	mov	r4, ip
 80022fc:	2240      	movs	r2, #64	; 0x40
 80022fe:	1b12      	subs	r2, r2, r4
 8002300:	003c      	movs	r4, r7
 8002302:	4094      	lsls	r4, r2
 8002304:	4304      	orrs	r4, r0
 8002306:	9401      	str	r4, [sp, #4]
 8002308:	9c01      	ldr	r4, [sp, #4]
 800230a:	1e62      	subs	r2, r4, #1
 800230c:	4194      	sbcs	r4, r2
 800230e:	430c      	orrs	r4, r1
 8002310:	e0c3      	b.n	800249a <__aeabi_dsub+0x342>
 8002312:	003c      	movs	r4, r7
 8002314:	4304      	orrs	r4, r0
 8002316:	d02b      	beq.n	8002370 <__aeabi_dsub+0x218>
 8002318:	468b      	mov	fp, r1
 800231a:	428d      	cmp	r5, r1
 800231c:	d02e      	beq.n	800237c <__aeabi_dsub+0x224>
 800231e:	4c6a      	ldr	r4, [pc, #424]	; (80024c8 <__aeabi_dsub+0x370>)
 8002320:	46a4      	mov	ip, r4
 8002322:	44b4      	add	ip, r6
 8002324:	4664      	mov	r4, ip
 8002326:	2c00      	cmp	r4, #0
 8002328:	d05f      	beq.n	80023ea <__aeabi_dsub+0x292>
 800232a:	1b94      	subs	r4, r2, r6
 800232c:	46a4      	mov	ip, r4
 800232e:	2e00      	cmp	r6, #0
 8002330:	d000      	beq.n	8002334 <__aeabi_dsub+0x1dc>
 8002332:	e120      	b.n	8002576 <__aeabi_dsub+0x41e>
 8002334:	464c      	mov	r4, r9
 8002336:	431c      	orrs	r4, r3
 8002338:	d100      	bne.n	800233c <__aeabi_dsub+0x1e4>
 800233a:	e1c7      	b.n	80026cc <__aeabi_dsub+0x574>
 800233c:	4661      	mov	r1, ip
 800233e:	1e4c      	subs	r4, r1, #1
 8002340:	2901      	cmp	r1, #1
 8002342:	d100      	bne.n	8002346 <__aeabi_dsub+0x1ee>
 8002344:	e223      	b.n	800278e <__aeabi_dsub+0x636>
 8002346:	4d5e      	ldr	r5, [pc, #376]	; (80024c0 <__aeabi_dsub+0x368>)
 8002348:	45ac      	cmp	ip, r5
 800234a:	d100      	bne.n	800234e <__aeabi_dsub+0x1f6>
 800234c:	e1d8      	b.n	8002700 <__aeabi_dsub+0x5a8>
 800234e:	46a4      	mov	ip, r4
 8002350:	e11a      	b.n	8002588 <__aeabi_dsub+0x430>
 8002352:	003a      	movs	r2, r7
 8002354:	4302      	orrs	r2, r0
 8002356:	d100      	bne.n	800235a <__aeabi_dsub+0x202>
 8002358:	e0e4      	b.n	8002524 <__aeabi_dsub+0x3cc>
 800235a:	0022      	movs	r2, r4
 800235c:	3a01      	subs	r2, #1
 800235e:	2c01      	cmp	r4, #1
 8002360:	d100      	bne.n	8002364 <__aeabi_dsub+0x20c>
 8002362:	e1c3      	b.n	80026ec <__aeabi_dsub+0x594>
 8002364:	4956      	ldr	r1, [pc, #344]	; (80024c0 <__aeabi_dsub+0x368>)
 8002366:	428c      	cmp	r4, r1
 8002368:	d100      	bne.n	800236c <__aeabi_dsub+0x214>
 800236a:	e0b1      	b.n	80024d0 <__aeabi_dsub+0x378>
 800236c:	4694      	mov	ip, r2
 800236e:	e72b      	b.n	80021c8 <__aeabi_dsub+0x70>
 8002370:	2401      	movs	r4, #1
 8002372:	4061      	eors	r1, r4
 8002374:	468b      	mov	fp, r1
 8002376:	428d      	cmp	r5, r1
 8002378:	d000      	beq.n	800237c <__aeabi_dsub+0x224>
 800237a:	e716      	b.n	80021aa <__aeabi_dsub+0x52>
 800237c:	4952      	ldr	r1, [pc, #328]	; (80024c8 <__aeabi_dsub+0x370>)
 800237e:	468c      	mov	ip, r1
 8002380:	44b4      	add	ip, r6
 8002382:	4664      	mov	r4, ip
 8002384:	2c00      	cmp	r4, #0
 8002386:	d100      	bne.n	800238a <__aeabi_dsub+0x232>
 8002388:	e0d3      	b.n	8002532 <__aeabi_dsub+0x3da>
 800238a:	1b91      	subs	r1, r2, r6
 800238c:	468c      	mov	ip, r1
 800238e:	2e00      	cmp	r6, #0
 8002390:	d100      	bne.n	8002394 <__aeabi_dsub+0x23c>
 8002392:	e15e      	b.n	8002652 <__aeabi_dsub+0x4fa>
 8002394:	494a      	ldr	r1, [pc, #296]	; (80024c0 <__aeabi_dsub+0x368>)
 8002396:	428a      	cmp	r2, r1
 8002398:	d100      	bne.n	800239c <__aeabi_dsub+0x244>
 800239a:	e1be      	b.n	800271a <__aeabi_dsub+0x5c2>
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	464c      	mov	r4, r9
 80023a0:	0409      	lsls	r1, r1, #16
 80023a2:	430c      	orrs	r4, r1
 80023a4:	46a1      	mov	r9, r4
 80023a6:	4661      	mov	r1, ip
 80023a8:	2938      	cmp	r1, #56	; 0x38
 80023aa:	dd00      	ble.n	80023ae <__aeabi_dsub+0x256>
 80023ac:	e1ba      	b.n	8002724 <__aeabi_dsub+0x5cc>
 80023ae:	291f      	cmp	r1, #31
 80023b0:	dd00      	ble.n	80023b4 <__aeabi_dsub+0x25c>
 80023b2:	e227      	b.n	8002804 <__aeabi_dsub+0x6ac>
 80023b4:	2420      	movs	r4, #32
 80023b6:	1a64      	subs	r4, r4, r1
 80023b8:	4649      	mov	r1, r9
 80023ba:	40a1      	lsls	r1, r4
 80023bc:	001e      	movs	r6, r3
 80023be:	4688      	mov	r8, r1
 80023c0:	4661      	mov	r1, ip
 80023c2:	40a3      	lsls	r3, r4
 80023c4:	40ce      	lsrs	r6, r1
 80023c6:	4641      	mov	r1, r8
 80023c8:	1e5c      	subs	r4, r3, #1
 80023ca:	41a3      	sbcs	r3, r4
 80023cc:	4331      	orrs	r1, r6
 80023ce:	4319      	orrs	r1, r3
 80023d0:	000c      	movs	r4, r1
 80023d2:	4663      	mov	r3, ip
 80023d4:	4649      	mov	r1, r9
 80023d6:	40d9      	lsrs	r1, r3
 80023d8:	187f      	adds	r7, r7, r1
 80023da:	1824      	adds	r4, r4, r0
 80023dc:	4284      	cmp	r4, r0
 80023de:	419b      	sbcs	r3, r3
 80023e0:	425b      	negs	r3, r3
 80023e2:	469a      	mov	sl, r3
 80023e4:	0016      	movs	r6, r2
 80023e6:	44ba      	add	sl, r7
 80023e8:	e05d      	b.n	80024a6 <__aeabi_dsub+0x34e>
 80023ea:	4c38      	ldr	r4, [pc, #224]	; (80024cc <__aeabi_dsub+0x374>)
 80023ec:	1c72      	adds	r2, r6, #1
 80023ee:	4222      	tst	r2, r4
 80023f0:	d000      	beq.n	80023f4 <__aeabi_dsub+0x29c>
 80023f2:	e0df      	b.n	80025b4 <__aeabi_dsub+0x45c>
 80023f4:	464a      	mov	r2, r9
 80023f6:	431a      	orrs	r2, r3
 80023f8:	2e00      	cmp	r6, #0
 80023fa:	d000      	beq.n	80023fe <__aeabi_dsub+0x2a6>
 80023fc:	e15c      	b.n	80026b8 <__aeabi_dsub+0x560>
 80023fe:	2a00      	cmp	r2, #0
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x2ac>
 8002402:	e1cf      	b.n	80027a4 <__aeabi_dsub+0x64c>
 8002404:	003a      	movs	r2, r7
 8002406:	4302      	orrs	r2, r0
 8002408:	d100      	bne.n	800240c <__aeabi_dsub+0x2b4>
 800240a:	e17f      	b.n	800270c <__aeabi_dsub+0x5b4>
 800240c:	1a1c      	subs	r4, r3, r0
 800240e:	464a      	mov	r2, r9
 8002410:	42a3      	cmp	r3, r4
 8002412:	4189      	sbcs	r1, r1
 8002414:	1bd2      	subs	r2, r2, r7
 8002416:	4249      	negs	r1, r1
 8002418:	1a52      	subs	r2, r2, r1
 800241a:	4692      	mov	sl, r2
 800241c:	0212      	lsls	r2, r2, #8
 800241e:	d400      	bmi.n	8002422 <__aeabi_dsub+0x2ca>
 8002420:	e20a      	b.n	8002838 <__aeabi_dsub+0x6e0>
 8002422:	1ac4      	subs	r4, r0, r3
 8002424:	42a0      	cmp	r0, r4
 8002426:	4180      	sbcs	r0, r0
 8002428:	464b      	mov	r3, r9
 800242a:	4240      	negs	r0, r0
 800242c:	1aff      	subs	r7, r7, r3
 800242e:	1a3b      	subs	r3, r7, r0
 8002430:	469a      	mov	sl, r3
 8002432:	465d      	mov	r5, fp
 8002434:	e71a      	b.n	800226c <__aeabi_dsub+0x114>
 8002436:	003a      	movs	r2, r7
 8002438:	4302      	orrs	r2, r0
 800243a:	d073      	beq.n	8002524 <__aeabi_dsub+0x3cc>
 800243c:	0022      	movs	r2, r4
 800243e:	3a01      	subs	r2, #1
 8002440:	2c01      	cmp	r4, #1
 8002442:	d100      	bne.n	8002446 <__aeabi_dsub+0x2ee>
 8002444:	e0cb      	b.n	80025de <__aeabi_dsub+0x486>
 8002446:	4554      	cmp	r4, sl
 8002448:	d042      	beq.n	80024d0 <__aeabi_dsub+0x378>
 800244a:	4694      	mov	ip, r2
 800244c:	e748      	b.n	80022e0 <__aeabi_dsub+0x188>
 800244e:	0010      	movs	r0, r2
 8002450:	3b1f      	subs	r3, #31
 8002452:	40d8      	lsrs	r0, r3
 8002454:	2920      	cmp	r1, #32
 8002456:	d003      	beq.n	8002460 <__aeabi_dsub+0x308>
 8002458:	2340      	movs	r3, #64	; 0x40
 800245a:	1a5b      	subs	r3, r3, r1
 800245c:	409a      	lsls	r2, r3
 800245e:	4314      	orrs	r4, r2
 8002460:	1e63      	subs	r3, r4, #1
 8002462:	419c      	sbcs	r4, r3
 8002464:	2300      	movs	r3, #0
 8002466:	2600      	movs	r6, #0
 8002468:	469a      	mov	sl, r3
 800246a:	4304      	orrs	r4, r0
 800246c:	0763      	lsls	r3, r4, #29
 800246e:	d000      	beq.n	8002472 <__aeabi_dsub+0x31a>
 8002470:	e6fe      	b.n	8002270 <__aeabi_dsub+0x118>
 8002472:	4652      	mov	r2, sl
 8002474:	08e3      	lsrs	r3, r4, #3
 8002476:	0752      	lsls	r2, r2, #29
 8002478:	4313      	orrs	r3, r2
 800247a:	4652      	mov	r2, sl
 800247c:	46b4      	mov	ip, r6
 800247e:	08d2      	lsrs	r2, r2, #3
 8002480:	490f      	ldr	r1, [pc, #60]	; (80024c0 <__aeabi_dsub+0x368>)
 8002482:	458c      	cmp	ip, r1
 8002484:	d02a      	beq.n	80024dc <__aeabi_dsub+0x384>
 8002486:	0312      	lsls	r2, r2, #12
 8002488:	0b14      	lsrs	r4, r2, #12
 800248a:	4662      	mov	r2, ip
 800248c:	0552      	lsls	r2, r2, #21
 800248e:	0d52      	lsrs	r2, r2, #21
 8002490:	e70c      	b.n	80022ac <__aeabi_dsub+0x154>
 8002492:	003c      	movs	r4, r7
 8002494:	4304      	orrs	r4, r0
 8002496:	1e62      	subs	r2, r4, #1
 8002498:	4194      	sbcs	r4, r2
 800249a:	18e4      	adds	r4, r4, r3
 800249c:	429c      	cmp	r4, r3
 800249e:	4192      	sbcs	r2, r2
 80024a0:	4252      	negs	r2, r2
 80024a2:	444a      	add	r2, r9
 80024a4:	4692      	mov	sl, r2
 80024a6:	4653      	mov	r3, sl
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	d5df      	bpl.n	800246c <__aeabi_dsub+0x314>
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <__aeabi_dsub+0x368>)
 80024ae:	3601      	adds	r6, #1
 80024b0:	429e      	cmp	r6, r3
 80024b2:	d000      	beq.n	80024b6 <__aeabi_dsub+0x35e>
 80024b4:	e0a0      	b.n	80025f8 <__aeabi_dsub+0x4a0>
 80024b6:	0032      	movs	r2, r6
 80024b8:	2400      	movs	r4, #0
 80024ba:	2300      	movs	r3, #0
 80024bc:	e6f6      	b.n	80022ac <__aeabi_dsub+0x154>
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	000007ff 	.word	0x000007ff
 80024c4:	ff7fffff 	.word	0xff7fffff
 80024c8:	fffff801 	.word	0xfffff801
 80024cc:	000007fe 	.word	0x000007fe
 80024d0:	08db      	lsrs	r3, r3, #3
 80024d2:	464a      	mov	r2, r9
 80024d4:	0752      	lsls	r2, r2, #29
 80024d6:	4313      	orrs	r3, r2
 80024d8:	464a      	mov	r2, r9
 80024da:	08d2      	lsrs	r2, r2, #3
 80024dc:	0019      	movs	r1, r3
 80024de:	4311      	orrs	r1, r2
 80024e0:	d100      	bne.n	80024e4 <__aeabi_dsub+0x38c>
 80024e2:	e1b5      	b.n	8002850 <__aeabi_dsub+0x6f8>
 80024e4:	2480      	movs	r4, #128	; 0x80
 80024e6:	0324      	lsls	r4, r4, #12
 80024e8:	4314      	orrs	r4, r2
 80024ea:	0324      	lsls	r4, r4, #12
 80024ec:	4ad5      	ldr	r2, [pc, #852]	; (8002844 <__aeabi_dsub+0x6ec>)
 80024ee:	0b24      	lsrs	r4, r4, #12
 80024f0:	e6dc      	b.n	80022ac <__aeabi_dsub+0x154>
 80024f2:	0020      	movs	r0, r4
 80024f4:	f000 faea 	bl	8002acc <__clzsi2>
 80024f8:	0003      	movs	r3, r0
 80024fa:	3318      	adds	r3, #24
 80024fc:	2b1f      	cmp	r3, #31
 80024fe:	dc00      	bgt.n	8002502 <__aeabi_dsub+0x3aa>
 8002500:	e695      	b.n	800222e <__aeabi_dsub+0xd6>
 8002502:	0022      	movs	r2, r4
 8002504:	3808      	subs	r0, #8
 8002506:	4082      	lsls	r2, r0
 8002508:	2400      	movs	r4, #0
 800250a:	429e      	cmp	r6, r3
 800250c:	dc00      	bgt.n	8002510 <__aeabi_dsub+0x3b8>
 800250e:	e69a      	b.n	8002246 <__aeabi_dsub+0xee>
 8002510:	1af6      	subs	r6, r6, r3
 8002512:	4bcd      	ldr	r3, [pc, #820]	; (8002848 <__aeabi_dsub+0x6f0>)
 8002514:	401a      	ands	r2, r3
 8002516:	4692      	mov	sl, r2
 8002518:	e6a8      	b.n	800226c <__aeabi_dsub+0x114>
 800251a:	003c      	movs	r4, r7
 800251c:	4304      	orrs	r4, r0
 800251e:	1e62      	subs	r2, r4, #1
 8002520:	4194      	sbcs	r4, r2
 8002522:	e66c      	b.n	80021fe <__aeabi_dsub+0xa6>
 8002524:	464a      	mov	r2, r9
 8002526:	08db      	lsrs	r3, r3, #3
 8002528:	0752      	lsls	r2, r2, #29
 800252a:	4313      	orrs	r3, r2
 800252c:	464a      	mov	r2, r9
 800252e:	08d2      	lsrs	r2, r2, #3
 8002530:	e7a6      	b.n	8002480 <__aeabi_dsub+0x328>
 8002532:	4cc6      	ldr	r4, [pc, #792]	; (800284c <__aeabi_dsub+0x6f4>)
 8002534:	1c72      	adds	r2, r6, #1
 8002536:	4222      	tst	r2, r4
 8002538:	d000      	beq.n	800253c <__aeabi_dsub+0x3e4>
 800253a:	e0ac      	b.n	8002696 <__aeabi_dsub+0x53e>
 800253c:	464a      	mov	r2, r9
 800253e:	431a      	orrs	r2, r3
 8002540:	2e00      	cmp	r6, #0
 8002542:	d000      	beq.n	8002546 <__aeabi_dsub+0x3ee>
 8002544:	e105      	b.n	8002752 <__aeabi_dsub+0x5fa>
 8002546:	2a00      	cmp	r2, #0
 8002548:	d100      	bne.n	800254c <__aeabi_dsub+0x3f4>
 800254a:	e156      	b.n	80027fa <__aeabi_dsub+0x6a2>
 800254c:	003a      	movs	r2, r7
 800254e:	4302      	orrs	r2, r0
 8002550:	d100      	bne.n	8002554 <__aeabi_dsub+0x3fc>
 8002552:	e0db      	b.n	800270c <__aeabi_dsub+0x5b4>
 8002554:	181c      	adds	r4, r3, r0
 8002556:	429c      	cmp	r4, r3
 8002558:	419b      	sbcs	r3, r3
 800255a:	444f      	add	r7, r9
 800255c:	46ba      	mov	sl, r7
 800255e:	425b      	negs	r3, r3
 8002560:	449a      	add	sl, r3
 8002562:	4653      	mov	r3, sl
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	d400      	bmi.n	800256a <__aeabi_dsub+0x412>
 8002568:	e780      	b.n	800246c <__aeabi_dsub+0x314>
 800256a:	4652      	mov	r2, sl
 800256c:	4bb6      	ldr	r3, [pc, #728]	; (8002848 <__aeabi_dsub+0x6f0>)
 800256e:	2601      	movs	r6, #1
 8002570:	401a      	ands	r2, r3
 8002572:	4692      	mov	sl, r2
 8002574:	e77a      	b.n	800246c <__aeabi_dsub+0x314>
 8002576:	4cb3      	ldr	r4, [pc, #716]	; (8002844 <__aeabi_dsub+0x6ec>)
 8002578:	42a2      	cmp	r2, r4
 800257a:	d100      	bne.n	800257e <__aeabi_dsub+0x426>
 800257c:	e0c0      	b.n	8002700 <__aeabi_dsub+0x5a8>
 800257e:	2480      	movs	r4, #128	; 0x80
 8002580:	464d      	mov	r5, r9
 8002582:	0424      	lsls	r4, r4, #16
 8002584:	4325      	orrs	r5, r4
 8002586:	46a9      	mov	r9, r5
 8002588:	4664      	mov	r4, ip
 800258a:	2c38      	cmp	r4, #56	; 0x38
 800258c:	dc53      	bgt.n	8002636 <__aeabi_dsub+0x4de>
 800258e:	4661      	mov	r1, ip
 8002590:	2c1f      	cmp	r4, #31
 8002592:	dd00      	ble.n	8002596 <__aeabi_dsub+0x43e>
 8002594:	e0cd      	b.n	8002732 <__aeabi_dsub+0x5da>
 8002596:	2520      	movs	r5, #32
 8002598:	001e      	movs	r6, r3
 800259a:	1b2d      	subs	r5, r5, r4
 800259c:	464c      	mov	r4, r9
 800259e:	40ab      	lsls	r3, r5
 80025a0:	40ac      	lsls	r4, r5
 80025a2:	40ce      	lsrs	r6, r1
 80025a4:	1e5d      	subs	r5, r3, #1
 80025a6:	41ab      	sbcs	r3, r5
 80025a8:	4334      	orrs	r4, r6
 80025aa:	4323      	orrs	r3, r4
 80025ac:	464c      	mov	r4, r9
 80025ae:	40cc      	lsrs	r4, r1
 80025b0:	1b3f      	subs	r7, r7, r4
 80025b2:	e045      	b.n	8002640 <__aeabi_dsub+0x4e8>
 80025b4:	464a      	mov	r2, r9
 80025b6:	1a1c      	subs	r4, r3, r0
 80025b8:	1bd1      	subs	r1, r2, r7
 80025ba:	42a3      	cmp	r3, r4
 80025bc:	4192      	sbcs	r2, r2
 80025be:	4252      	negs	r2, r2
 80025c0:	4692      	mov	sl, r2
 80025c2:	000a      	movs	r2, r1
 80025c4:	4651      	mov	r1, sl
 80025c6:	1a52      	subs	r2, r2, r1
 80025c8:	4692      	mov	sl, r2
 80025ca:	0212      	lsls	r2, r2, #8
 80025cc:	d500      	bpl.n	80025d0 <__aeabi_dsub+0x478>
 80025ce:	e083      	b.n	80026d8 <__aeabi_dsub+0x580>
 80025d0:	4653      	mov	r3, sl
 80025d2:	4323      	orrs	r3, r4
 80025d4:	d000      	beq.n	80025d8 <__aeabi_dsub+0x480>
 80025d6:	e621      	b.n	800221c <__aeabi_dsub+0xc4>
 80025d8:	2200      	movs	r2, #0
 80025da:	2500      	movs	r5, #0
 80025dc:	e753      	b.n	8002486 <__aeabi_dsub+0x32e>
 80025de:	181c      	adds	r4, r3, r0
 80025e0:	429c      	cmp	r4, r3
 80025e2:	419b      	sbcs	r3, r3
 80025e4:	444f      	add	r7, r9
 80025e6:	46ba      	mov	sl, r7
 80025e8:	425b      	negs	r3, r3
 80025ea:	449a      	add	sl, r3
 80025ec:	4653      	mov	r3, sl
 80025ee:	2601      	movs	r6, #1
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	d400      	bmi.n	80025f6 <__aeabi_dsub+0x49e>
 80025f4:	e73a      	b.n	800246c <__aeabi_dsub+0x314>
 80025f6:	2602      	movs	r6, #2
 80025f8:	4652      	mov	r2, sl
 80025fa:	4b93      	ldr	r3, [pc, #588]	; (8002848 <__aeabi_dsub+0x6f0>)
 80025fc:	2101      	movs	r1, #1
 80025fe:	401a      	ands	r2, r3
 8002600:	0013      	movs	r3, r2
 8002602:	4021      	ands	r1, r4
 8002604:	0862      	lsrs	r2, r4, #1
 8002606:	430a      	orrs	r2, r1
 8002608:	07dc      	lsls	r4, r3, #31
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	469a      	mov	sl, r3
 800260e:	4314      	orrs	r4, r2
 8002610:	e62c      	b.n	800226c <__aeabi_dsub+0x114>
 8002612:	0039      	movs	r1, r7
 8002614:	3a20      	subs	r2, #32
 8002616:	40d1      	lsrs	r1, r2
 8002618:	4662      	mov	r2, ip
 800261a:	2a20      	cmp	r2, #32
 800261c:	d006      	beq.n	800262c <__aeabi_dsub+0x4d4>
 800261e:	4664      	mov	r4, ip
 8002620:	2240      	movs	r2, #64	; 0x40
 8002622:	1b12      	subs	r2, r2, r4
 8002624:	003c      	movs	r4, r7
 8002626:	4094      	lsls	r4, r2
 8002628:	4304      	orrs	r4, r0
 800262a:	9401      	str	r4, [sp, #4]
 800262c:	9c01      	ldr	r4, [sp, #4]
 800262e:	1e62      	subs	r2, r4, #1
 8002630:	4194      	sbcs	r4, r2
 8002632:	430c      	orrs	r4, r1
 8002634:	e5e3      	b.n	80021fe <__aeabi_dsub+0xa6>
 8002636:	4649      	mov	r1, r9
 8002638:	4319      	orrs	r1, r3
 800263a:	000b      	movs	r3, r1
 800263c:	1e5c      	subs	r4, r3, #1
 800263e:	41a3      	sbcs	r3, r4
 8002640:	1ac4      	subs	r4, r0, r3
 8002642:	42a0      	cmp	r0, r4
 8002644:	419b      	sbcs	r3, r3
 8002646:	425b      	negs	r3, r3
 8002648:	1afb      	subs	r3, r7, r3
 800264a:	469a      	mov	sl, r3
 800264c:	465d      	mov	r5, fp
 800264e:	0016      	movs	r6, r2
 8002650:	e5dc      	b.n	800220c <__aeabi_dsub+0xb4>
 8002652:	4649      	mov	r1, r9
 8002654:	4319      	orrs	r1, r3
 8002656:	d100      	bne.n	800265a <__aeabi_dsub+0x502>
 8002658:	e0ae      	b.n	80027b8 <__aeabi_dsub+0x660>
 800265a:	4661      	mov	r1, ip
 800265c:	4664      	mov	r4, ip
 800265e:	3901      	subs	r1, #1
 8002660:	2c01      	cmp	r4, #1
 8002662:	d100      	bne.n	8002666 <__aeabi_dsub+0x50e>
 8002664:	e0e0      	b.n	8002828 <__aeabi_dsub+0x6d0>
 8002666:	4c77      	ldr	r4, [pc, #476]	; (8002844 <__aeabi_dsub+0x6ec>)
 8002668:	45a4      	cmp	ip, r4
 800266a:	d056      	beq.n	800271a <__aeabi_dsub+0x5c2>
 800266c:	468c      	mov	ip, r1
 800266e:	e69a      	b.n	80023a6 <__aeabi_dsub+0x24e>
 8002670:	4661      	mov	r1, ip
 8002672:	2220      	movs	r2, #32
 8002674:	003c      	movs	r4, r7
 8002676:	1a52      	subs	r2, r2, r1
 8002678:	4094      	lsls	r4, r2
 800267a:	0001      	movs	r1, r0
 800267c:	4090      	lsls	r0, r2
 800267e:	46a0      	mov	r8, r4
 8002680:	4664      	mov	r4, ip
 8002682:	1e42      	subs	r2, r0, #1
 8002684:	4190      	sbcs	r0, r2
 8002686:	4662      	mov	r2, ip
 8002688:	40e1      	lsrs	r1, r4
 800268a:	4644      	mov	r4, r8
 800268c:	40d7      	lsrs	r7, r2
 800268e:	430c      	orrs	r4, r1
 8002690:	4304      	orrs	r4, r0
 8002692:	44b9      	add	r9, r7
 8002694:	e701      	b.n	800249a <__aeabi_dsub+0x342>
 8002696:	496b      	ldr	r1, [pc, #428]	; (8002844 <__aeabi_dsub+0x6ec>)
 8002698:	428a      	cmp	r2, r1
 800269a:	d100      	bne.n	800269e <__aeabi_dsub+0x546>
 800269c:	e70c      	b.n	80024b8 <__aeabi_dsub+0x360>
 800269e:	1818      	adds	r0, r3, r0
 80026a0:	4298      	cmp	r0, r3
 80026a2:	419b      	sbcs	r3, r3
 80026a4:	444f      	add	r7, r9
 80026a6:	425b      	negs	r3, r3
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	07dc      	lsls	r4, r3, #31
 80026ac:	0840      	lsrs	r0, r0, #1
 80026ae:	085b      	lsrs	r3, r3, #1
 80026b0:	469a      	mov	sl, r3
 80026b2:	0016      	movs	r6, r2
 80026b4:	4304      	orrs	r4, r0
 80026b6:	e6d9      	b.n	800246c <__aeabi_dsub+0x314>
 80026b8:	2a00      	cmp	r2, #0
 80026ba:	d000      	beq.n	80026be <__aeabi_dsub+0x566>
 80026bc:	e081      	b.n	80027c2 <__aeabi_dsub+0x66a>
 80026be:	003b      	movs	r3, r7
 80026c0:	4303      	orrs	r3, r0
 80026c2:	d11d      	bne.n	8002700 <__aeabi_dsub+0x5a8>
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	2500      	movs	r5, #0
 80026c8:	0312      	lsls	r2, r2, #12
 80026ca:	e70b      	b.n	80024e4 <__aeabi_dsub+0x38c>
 80026cc:	08c0      	lsrs	r0, r0, #3
 80026ce:	077b      	lsls	r3, r7, #29
 80026d0:	465d      	mov	r5, fp
 80026d2:	4303      	orrs	r3, r0
 80026d4:	08fa      	lsrs	r2, r7, #3
 80026d6:	e6d3      	b.n	8002480 <__aeabi_dsub+0x328>
 80026d8:	1ac4      	subs	r4, r0, r3
 80026da:	42a0      	cmp	r0, r4
 80026dc:	4180      	sbcs	r0, r0
 80026de:	464b      	mov	r3, r9
 80026e0:	4240      	negs	r0, r0
 80026e2:	1aff      	subs	r7, r7, r3
 80026e4:	1a3b      	subs	r3, r7, r0
 80026e6:	469a      	mov	sl, r3
 80026e8:	465d      	mov	r5, fp
 80026ea:	e597      	b.n	800221c <__aeabi_dsub+0xc4>
 80026ec:	1a1c      	subs	r4, r3, r0
 80026ee:	464a      	mov	r2, r9
 80026f0:	42a3      	cmp	r3, r4
 80026f2:	419b      	sbcs	r3, r3
 80026f4:	1bd7      	subs	r7, r2, r7
 80026f6:	425b      	negs	r3, r3
 80026f8:	1afb      	subs	r3, r7, r3
 80026fa:	469a      	mov	sl, r3
 80026fc:	2601      	movs	r6, #1
 80026fe:	e585      	b.n	800220c <__aeabi_dsub+0xb4>
 8002700:	08c0      	lsrs	r0, r0, #3
 8002702:	077b      	lsls	r3, r7, #29
 8002704:	465d      	mov	r5, fp
 8002706:	4303      	orrs	r3, r0
 8002708:	08fa      	lsrs	r2, r7, #3
 800270a:	e6e7      	b.n	80024dc <__aeabi_dsub+0x384>
 800270c:	464a      	mov	r2, r9
 800270e:	08db      	lsrs	r3, r3, #3
 8002710:	0752      	lsls	r2, r2, #29
 8002712:	4313      	orrs	r3, r2
 8002714:	464a      	mov	r2, r9
 8002716:	08d2      	lsrs	r2, r2, #3
 8002718:	e6b5      	b.n	8002486 <__aeabi_dsub+0x32e>
 800271a:	08c0      	lsrs	r0, r0, #3
 800271c:	077b      	lsls	r3, r7, #29
 800271e:	4303      	orrs	r3, r0
 8002720:	08fa      	lsrs	r2, r7, #3
 8002722:	e6db      	b.n	80024dc <__aeabi_dsub+0x384>
 8002724:	4649      	mov	r1, r9
 8002726:	4319      	orrs	r1, r3
 8002728:	000b      	movs	r3, r1
 800272a:	1e59      	subs	r1, r3, #1
 800272c:	418b      	sbcs	r3, r1
 800272e:	001c      	movs	r4, r3
 8002730:	e653      	b.n	80023da <__aeabi_dsub+0x282>
 8002732:	464d      	mov	r5, r9
 8002734:	3c20      	subs	r4, #32
 8002736:	40e5      	lsrs	r5, r4
 8002738:	2920      	cmp	r1, #32
 800273a:	d005      	beq.n	8002748 <__aeabi_dsub+0x5f0>
 800273c:	2440      	movs	r4, #64	; 0x40
 800273e:	1a64      	subs	r4, r4, r1
 8002740:	4649      	mov	r1, r9
 8002742:	40a1      	lsls	r1, r4
 8002744:	430b      	orrs	r3, r1
 8002746:	4698      	mov	r8, r3
 8002748:	4643      	mov	r3, r8
 800274a:	1e5c      	subs	r4, r3, #1
 800274c:	41a3      	sbcs	r3, r4
 800274e:	432b      	orrs	r3, r5
 8002750:	e776      	b.n	8002640 <__aeabi_dsub+0x4e8>
 8002752:	2a00      	cmp	r2, #0
 8002754:	d0e1      	beq.n	800271a <__aeabi_dsub+0x5c2>
 8002756:	003a      	movs	r2, r7
 8002758:	08db      	lsrs	r3, r3, #3
 800275a:	4302      	orrs	r2, r0
 800275c:	d100      	bne.n	8002760 <__aeabi_dsub+0x608>
 800275e:	e6b8      	b.n	80024d2 <__aeabi_dsub+0x37a>
 8002760:	464a      	mov	r2, r9
 8002762:	0752      	lsls	r2, r2, #29
 8002764:	2480      	movs	r4, #128	; 0x80
 8002766:	4313      	orrs	r3, r2
 8002768:	464a      	mov	r2, r9
 800276a:	0324      	lsls	r4, r4, #12
 800276c:	08d2      	lsrs	r2, r2, #3
 800276e:	4222      	tst	r2, r4
 8002770:	d007      	beq.n	8002782 <__aeabi_dsub+0x62a>
 8002772:	08fe      	lsrs	r6, r7, #3
 8002774:	4226      	tst	r6, r4
 8002776:	d104      	bne.n	8002782 <__aeabi_dsub+0x62a>
 8002778:	465d      	mov	r5, fp
 800277a:	0032      	movs	r2, r6
 800277c:	08c3      	lsrs	r3, r0, #3
 800277e:	077f      	lsls	r7, r7, #29
 8002780:	433b      	orrs	r3, r7
 8002782:	0f59      	lsrs	r1, r3, #29
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	0749      	lsls	r1, r1, #29
 8002788:	08db      	lsrs	r3, r3, #3
 800278a:	430b      	orrs	r3, r1
 800278c:	e6a6      	b.n	80024dc <__aeabi_dsub+0x384>
 800278e:	1ac4      	subs	r4, r0, r3
 8002790:	42a0      	cmp	r0, r4
 8002792:	4180      	sbcs	r0, r0
 8002794:	464b      	mov	r3, r9
 8002796:	4240      	negs	r0, r0
 8002798:	1aff      	subs	r7, r7, r3
 800279a:	1a3b      	subs	r3, r7, r0
 800279c:	469a      	mov	sl, r3
 800279e:	465d      	mov	r5, fp
 80027a0:	2601      	movs	r6, #1
 80027a2:	e533      	b.n	800220c <__aeabi_dsub+0xb4>
 80027a4:	003b      	movs	r3, r7
 80027a6:	4303      	orrs	r3, r0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x654>
 80027aa:	e715      	b.n	80025d8 <__aeabi_dsub+0x480>
 80027ac:	08c0      	lsrs	r0, r0, #3
 80027ae:	077b      	lsls	r3, r7, #29
 80027b0:	465d      	mov	r5, fp
 80027b2:	4303      	orrs	r3, r0
 80027b4:	08fa      	lsrs	r2, r7, #3
 80027b6:	e666      	b.n	8002486 <__aeabi_dsub+0x32e>
 80027b8:	08c0      	lsrs	r0, r0, #3
 80027ba:	077b      	lsls	r3, r7, #29
 80027bc:	4303      	orrs	r3, r0
 80027be:	08fa      	lsrs	r2, r7, #3
 80027c0:	e65e      	b.n	8002480 <__aeabi_dsub+0x328>
 80027c2:	003a      	movs	r2, r7
 80027c4:	08db      	lsrs	r3, r3, #3
 80027c6:	4302      	orrs	r2, r0
 80027c8:	d100      	bne.n	80027cc <__aeabi_dsub+0x674>
 80027ca:	e682      	b.n	80024d2 <__aeabi_dsub+0x37a>
 80027cc:	464a      	mov	r2, r9
 80027ce:	0752      	lsls	r2, r2, #29
 80027d0:	2480      	movs	r4, #128	; 0x80
 80027d2:	4313      	orrs	r3, r2
 80027d4:	464a      	mov	r2, r9
 80027d6:	0324      	lsls	r4, r4, #12
 80027d8:	08d2      	lsrs	r2, r2, #3
 80027da:	4222      	tst	r2, r4
 80027dc:	d007      	beq.n	80027ee <__aeabi_dsub+0x696>
 80027de:	08fe      	lsrs	r6, r7, #3
 80027e0:	4226      	tst	r6, r4
 80027e2:	d104      	bne.n	80027ee <__aeabi_dsub+0x696>
 80027e4:	465d      	mov	r5, fp
 80027e6:	0032      	movs	r2, r6
 80027e8:	08c3      	lsrs	r3, r0, #3
 80027ea:	077f      	lsls	r7, r7, #29
 80027ec:	433b      	orrs	r3, r7
 80027ee:	0f59      	lsrs	r1, r3, #29
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	08db      	lsrs	r3, r3, #3
 80027f4:	0749      	lsls	r1, r1, #29
 80027f6:	430b      	orrs	r3, r1
 80027f8:	e670      	b.n	80024dc <__aeabi_dsub+0x384>
 80027fa:	08c0      	lsrs	r0, r0, #3
 80027fc:	077b      	lsls	r3, r7, #29
 80027fe:	4303      	orrs	r3, r0
 8002800:	08fa      	lsrs	r2, r7, #3
 8002802:	e640      	b.n	8002486 <__aeabi_dsub+0x32e>
 8002804:	464c      	mov	r4, r9
 8002806:	3920      	subs	r1, #32
 8002808:	40cc      	lsrs	r4, r1
 800280a:	4661      	mov	r1, ip
 800280c:	2920      	cmp	r1, #32
 800280e:	d006      	beq.n	800281e <__aeabi_dsub+0x6c6>
 8002810:	4666      	mov	r6, ip
 8002812:	2140      	movs	r1, #64	; 0x40
 8002814:	1b89      	subs	r1, r1, r6
 8002816:	464e      	mov	r6, r9
 8002818:	408e      	lsls	r6, r1
 800281a:	4333      	orrs	r3, r6
 800281c:	4698      	mov	r8, r3
 800281e:	4643      	mov	r3, r8
 8002820:	1e59      	subs	r1, r3, #1
 8002822:	418b      	sbcs	r3, r1
 8002824:	431c      	orrs	r4, r3
 8002826:	e5d8      	b.n	80023da <__aeabi_dsub+0x282>
 8002828:	181c      	adds	r4, r3, r0
 800282a:	4284      	cmp	r4, r0
 800282c:	4180      	sbcs	r0, r0
 800282e:	444f      	add	r7, r9
 8002830:	46ba      	mov	sl, r7
 8002832:	4240      	negs	r0, r0
 8002834:	4482      	add	sl, r0
 8002836:	e6d9      	b.n	80025ec <__aeabi_dsub+0x494>
 8002838:	4653      	mov	r3, sl
 800283a:	4323      	orrs	r3, r4
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x6e8>
 800283e:	e6cb      	b.n	80025d8 <__aeabi_dsub+0x480>
 8002840:	e614      	b.n	800246c <__aeabi_dsub+0x314>
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	000007ff 	.word	0x000007ff
 8002848:	ff7fffff 	.word	0xff7fffff
 800284c:	000007fe 	.word	0x000007fe
 8002850:	2300      	movs	r3, #0
 8002852:	4a01      	ldr	r2, [pc, #4]	; (8002858 <__aeabi_dsub+0x700>)
 8002854:	001c      	movs	r4, r3
 8002856:	e529      	b.n	80022ac <__aeabi_dsub+0x154>
 8002858:	000007ff 	.word	0x000007ff

0800285c <__aeabi_i2d>:
 800285c:	b570      	push	{r4, r5, r6, lr}
 800285e:	2800      	cmp	r0, #0
 8002860:	d016      	beq.n	8002890 <__aeabi_i2d+0x34>
 8002862:	17c3      	asrs	r3, r0, #31
 8002864:	18c5      	adds	r5, r0, r3
 8002866:	405d      	eors	r5, r3
 8002868:	0fc4      	lsrs	r4, r0, #31
 800286a:	0028      	movs	r0, r5
 800286c:	f000 f92e 	bl	8002acc <__clzsi2>
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <__aeabi_i2d+0x5c>)
 8002872:	1a1b      	subs	r3, r3, r0
 8002874:	280a      	cmp	r0, #10
 8002876:	dc16      	bgt.n	80028a6 <__aeabi_i2d+0x4a>
 8002878:	0002      	movs	r2, r0
 800287a:	002e      	movs	r6, r5
 800287c:	3215      	adds	r2, #21
 800287e:	4096      	lsls	r6, r2
 8002880:	220b      	movs	r2, #11
 8002882:	1a12      	subs	r2, r2, r0
 8002884:	40d5      	lsrs	r5, r2
 8002886:	055b      	lsls	r3, r3, #21
 8002888:	032d      	lsls	r5, r5, #12
 800288a:	0b2d      	lsrs	r5, r5, #12
 800288c:	0d5b      	lsrs	r3, r3, #21
 800288e:	e003      	b.n	8002898 <__aeabi_i2d+0x3c>
 8002890:	2400      	movs	r4, #0
 8002892:	2300      	movs	r3, #0
 8002894:	2500      	movs	r5, #0
 8002896:	2600      	movs	r6, #0
 8002898:	051b      	lsls	r3, r3, #20
 800289a:	432b      	orrs	r3, r5
 800289c:	07e4      	lsls	r4, r4, #31
 800289e:	4323      	orrs	r3, r4
 80028a0:	0030      	movs	r0, r6
 80028a2:	0019      	movs	r1, r3
 80028a4:	bd70      	pop	{r4, r5, r6, pc}
 80028a6:	380b      	subs	r0, #11
 80028a8:	4085      	lsls	r5, r0
 80028aa:	055b      	lsls	r3, r3, #21
 80028ac:	032d      	lsls	r5, r5, #12
 80028ae:	2600      	movs	r6, #0
 80028b0:	0b2d      	lsrs	r5, r5, #12
 80028b2:	0d5b      	lsrs	r3, r3, #21
 80028b4:	e7f0      	b.n	8002898 <__aeabi_i2d+0x3c>
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	0000041e 	.word	0x0000041e

080028bc <__aeabi_f2d>:
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	0242      	lsls	r2, r0, #9
 80028c0:	0043      	lsls	r3, r0, #1
 80028c2:	0fc4      	lsrs	r4, r0, #31
 80028c4:	20fe      	movs	r0, #254	; 0xfe
 80028c6:	0e1b      	lsrs	r3, r3, #24
 80028c8:	1c59      	adds	r1, r3, #1
 80028ca:	0a55      	lsrs	r5, r2, #9
 80028cc:	4208      	tst	r0, r1
 80028ce:	d00c      	beq.n	80028ea <__aeabi_f2d+0x2e>
 80028d0:	21e0      	movs	r1, #224	; 0xe0
 80028d2:	0089      	lsls	r1, r1, #2
 80028d4:	468c      	mov	ip, r1
 80028d6:	076d      	lsls	r5, r5, #29
 80028d8:	0b12      	lsrs	r2, r2, #12
 80028da:	4463      	add	r3, ip
 80028dc:	051b      	lsls	r3, r3, #20
 80028de:	4313      	orrs	r3, r2
 80028e0:	07e4      	lsls	r4, r4, #31
 80028e2:	4323      	orrs	r3, r4
 80028e4:	0028      	movs	r0, r5
 80028e6:	0019      	movs	r1, r3
 80028e8:	bd70      	pop	{r4, r5, r6, pc}
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d114      	bne.n	8002918 <__aeabi_f2d+0x5c>
 80028ee:	2d00      	cmp	r5, #0
 80028f0:	d01b      	beq.n	800292a <__aeabi_f2d+0x6e>
 80028f2:	0028      	movs	r0, r5
 80028f4:	f000 f8ea 	bl	8002acc <__clzsi2>
 80028f8:	280a      	cmp	r0, #10
 80028fa:	dc1c      	bgt.n	8002936 <__aeabi_f2d+0x7a>
 80028fc:	230b      	movs	r3, #11
 80028fe:	002a      	movs	r2, r5
 8002900:	1a1b      	subs	r3, r3, r0
 8002902:	40da      	lsrs	r2, r3
 8002904:	0003      	movs	r3, r0
 8002906:	3315      	adds	r3, #21
 8002908:	409d      	lsls	r5, r3
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <__aeabi_f2d+0x88>)
 800290c:	0312      	lsls	r2, r2, #12
 800290e:	1a1b      	subs	r3, r3, r0
 8002910:	055b      	lsls	r3, r3, #21
 8002912:	0b12      	lsrs	r2, r2, #12
 8002914:	0d5b      	lsrs	r3, r3, #21
 8002916:	e7e1      	b.n	80028dc <__aeabi_f2d+0x20>
 8002918:	2d00      	cmp	r5, #0
 800291a:	d009      	beq.n	8002930 <__aeabi_f2d+0x74>
 800291c:	0b13      	lsrs	r3, r2, #12
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	0312      	lsls	r2, r2, #12
 8002922:	431a      	orrs	r2, r3
 8002924:	076d      	lsls	r5, r5, #29
 8002926:	4b08      	ldr	r3, [pc, #32]	; (8002948 <__aeabi_f2d+0x8c>)
 8002928:	e7d8      	b.n	80028dc <__aeabi_f2d+0x20>
 800292a:	2300      	movs	r3, #0
 800292c:	2200      	movs	r2, #0
 800292e:	e7d5      	b.n	80028dc <__aeabi_f2d+0x20>
 8002930:	2200      	movs	r2, #0
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <__aeabi_f2d+0x8c>)
 8002934:	e7d2      	b.n	80028dc <__aeabi_f2d+0x20>
 8002936:	0003      	movs	r3, r0
 8002938:	002a      	movs	r2, r5
 800293a:	3b0b      	subs	r3, #11
 800293c:	409a      	lsls	r2, r3
 800293e:	2500      	movs	r5, #0
 8002940:	e7e3      	b.n	800290a <__aeabi_f2d+0x4e>
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	00000389 	.word	0x00000389
 8002948:	000007ff 	.word	0x000007ff

0800294c <__aeabi_d2f>:
 800294c:	0002      	movs	r2, r0
 800294e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002950:	004b      	lsls	r3, r1, #1
 8002952:	030d      	lsls	r5, r1, #12
 8002954:	0f40      	lsrs	r0, r0, #29
 8002956:	0d5b      	lsrs	r3, r3, #21
 8002958:	0fcc      	lsrs	r4, r1, #31
 800295a:	0a6d      	lsrs	r5, r5, #9
 800295c:	493a      	ldr	r1, [pc, #232]	; (8002a48 <__aeabi_d2f+0xfc>)
 800295e:	4305      	orrs	r5, r0
 8002960:	1c58      	adds	r0, r3, #1
 8002962:	00d7      	lsls	r7, r2, #3
 8002964:	4208      	tst	r0, r1
 8002966:	d00a      	beq.n	800297e <__aeabi_d2f+0x32>
 8002968:	4938      	ldr	r1, [pc, #224]	; (8002a4c <__aeabi_d2f+0x100>)
 800296a:	1859      	adds	r1, r3, r1
 800296c:	29fe      	cmp	r1, #254	; 0xfe
 800296e:	dd16      	ble.n	800299e <__aeabi_d2f+0x52>
 8002970:	20ff      	movs	r0, #255	; 0xff
 8002972:	2200      	movs	r2, #0
 8002974:	05c0      	lsls	r0, r0, #23
 8002976:	4310      	orrs	r0, r2
 8002978:	07e4      	lsls	r4, r4, #31
 800297a:	4320      	orrs	r0, r4
 800297c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <__aeabi_d2f+0x44>
 8002982:	433d      	orrs	r5, r7
 8002984:	d026      	beq.n	80029d4 <__aeabi_d2f+0x88>
 8002986:	2205      	movs	r2, #5
 8002988:	0192      	lsls	r2, r2, #6
 800298a:	0a52      	lsrs	r2, r2, #9
 800298c:	b2d8      	uxtb	r0, r3
 800298e:	e7f1      	b.n	8002974 <__aeabi_d2f+0x28>
 8002990:	432f      	orrs	r7, r5
 8002992:	d0ed      	beq.n	8002970 <__aeabi_d2f+0x24>
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	03d2      	lsls	r2, r2, #15
 8002998:	20ff      	movs	r0, #255	; 0xff
 800299a:	432a      	orrs	r2, r5
 800299c:	e7ea      	b.n	8002974 <__aeabi_d2f+0x28>
 800299e:	2900      	cmp	r1, #0
 80029a0:	dd1b      	ble.n	80029da <__aeabi_d2f+0x8e>
 80029a2:	0192      	lsls	r2, r2, #6
 80029a4:	1e50      	subs	r0, r2, #1
 80029a6:	4182      	sbcs	r2, r0
 80029a8:	00ed      	lsls	r5, r5, #3
 80029aa:	0f7f      	lsrs	r7, r7, #29
 80029ac:	432a      	orrs	r2, r5
 80029ae:	433a      	orrs	r2, r7
 80029b0:	0753      	lsls	r3, r2, #29
 80029b2:	d047      	beq.n	8002a44 <__aeabi_d2f+0xf8>
 80029b4:	230f      	movs	r3, #15
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d000      	beq.n	80029be <__aeabi_d2f+0x72>
 80029bc:	3204      	adds	r2, #4
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	04db      	lsls	r3, r3, #19
 80029c2:	4013      	ands	r3, r2
 80029c4:	d03e      	beq.n	8002a44 <__aeabi_d2f+0xf8>
 80029c6:	1c48      	adds	r0, r1, #1
 80029c8:	29fe      	cmp	r1, #254	; 0xfe
 80029ca:	d0d1      	beq.n	8002970 <__aeabi_d2f+0x24>
 80029cc:	0192      	lsls	r2, r2, #6
 80029ce:	0a52      	lsrs	r2, r2, #9
 80029d0:	b2c0      	uxtb	r0, r0
 80029d2:	e7cf      	b.n	8002974 <__aeabi_d2f+0x28>
 80029d4:	2000      	movs	r0, #0
 80029d6:	2200      	movs	r2, #0
 80029d8:	e7cc      	b.n	8002974 <__aeabi_d2f+0x28>
 80029da:	000a      	movs	r2, r1
 80029dc:	3217      	adds	r2, #23
 80029de:	db2f      	blt.n	8002a40 <__aeabi_d2f+0xf4>
 80029e0:	2680      	movs	r6, #128	; 0x80
 80029e2:	0436      	lsls	r6, r6, #16
 80029e4:	432e      	orrs	r6, r5
 80029e6:	251e      	movs	r5, #30
 80029e8:	1a6d      	subs	r5, r5, r1
 80029ea:	2d1f      	cmp	r5, #31
 80029ec:	dd11      	ble.n	8002a12 <__aeabi_d2f+0xc6>
 80029ee:	2202      	movs	r2, #2
 80029f0:	4252      	negs	r2, r2
 80029f2:	1a52      	subs	r2, r2, r1
 80029f4:	0031      	movs	r1, r6
 80029f6:	40d1      	lsrs	r1, r2
 80029f8:	2d20      	cmp	r5, #32
 80029fa:	d004      	beq.n	8002a06 <__aeabi_d2f+0xba>
 80029fc:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <__aeabi_d2f+0x104>)
 80029fe:	4694      	mov	ip, r2
 8002a00:	4463      	add	r3, ip
 8002a02:	409e      	lsls	r6, r3
 8002a04:	4337      	orrs	r7, r6
 8002a06:	003a      	movs	r2, r7
 8002a08:	1e53      	subs	r3, r2, #1
 8002a0a:	419a      	sbcs	r2, r3
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	2100      	movs	r1, #0
 8002a10:	e7ce      	b.n	80029b0 <__aeabi_d2f+0x64>
 8002a12:	4a10      	ldr	r2, [pc, #64]	; (8002a54 <__aeabi_d2f+0x108>)
 8002a14:	0038      	movs	r0, r7
 8002a16:	4694      	mov	ip, r2
 8002a18:	4463      	add	r3, ip
 8002a1a:	4098      	lsls	r0, r3
 8002a1c:	003a      	movs	r2, r7
 8002a1e:	1e41      	subs	r1, r0, #1
 8002a20:	4188      	sbcs	r0, r1
 8002a22:	409e      	lsls	r6, r3
 8002a24:	40ea      	lsrs	r2, r5
 8002a26:	4330      	orrs	r0, r6
 8002a28:	4302      	orrs	r2, r0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	0753      	lsls	r3, r2, #29
 8002a2e:	d1c1      	bne.n	80029b4 <__aeabi_d2f+0x68>
 8002a30:	2180      	movs	r1, #128	; 0x80
 8002a32:	0013      	movs	r3, r2
 8002a34:	04c9      	lsls	r1, r1, #19
 8002a36:	2001      	movs	r0, #1
 8002a38:	400b      	ands	r3, r1
 8002a3a:	420a      	tst	r2, r1
 8002a3c:	d1c6      	bne.n	80029cc <__aeabi_d2f+0x80>
 8002a3e:	e7a3      	b.n	8002988 <__aeabi_d2f+0x3c>
 8002a40:	2300      	movs	r3, #0
 8002a42:	e7a0      	b.n	8002986 <__aeabi_d2f+0x3a>
 8002a44:	000b      	movs	r3, r1
 8002a46:	e79f      	b.n	8002988 <__aeabi_d2f+0x3c>
 8002a48:	000007fe 	.word	0x000007fe
 8002a4c:	fffffc80 	.word	0xfffffc80
 8002a50:	fffffca2 	.word	0xfffffca2
 8002a54:	fffffc82 	.word	0xfffffc82

08002a58 <__aeabi_cfrcmple>:
 8002a58:	4684      	mov	ip, r0
 8002a5a:	0008      	movs	r0, r1
 8002a5c:	4661      	mov	r1, ip
 8002a5e:	e7ff      	b.n	8002a60 <__aeabi_cfcmpeq>

08002a60 <__aeabi_cfcmpeq>:
 8002a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002a62:	f000 f8c9 	bl	8002bf8 <__lesf2>
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d401      	bmi.n	8002a6e <__aeabi_cfcmpeq+0xe>
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	42c8      	cmn	r0, r1
 8002a6e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002a70 <__aeabi_fcmpeq>:
 8002a70:	b510      	push	{r4, lr}
 8002a72:	f000 f855 	bl	8002b20 <__eqsf2>
 8002a76:	4240      	negs	r0, r0
 8002a78:	3001      	adds	r0, #1
 8002a7a:	bd10      	pop	{r4, pc}

08002a7c <__aeabi_fcmplt>:
 8002a7c:	b510      	push	{r4, lr}
 8002a7e:	f000 f8bb 	bl	8002bf8 <__lesf2>
 8002a82:	2800      	cmp	r0, #0
 8002a84:	db01      	blt.n	8002a8a <__aeabi_fcmplt+0xe>
 8002a86:	2000      	movs	r0, #0
 8002a88:	bd10      	pop	{r4, pc}
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	bd10      	pop	{r4, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)

08002a90 <__aeabi_fcmple>:
 8002a90:	b510      	push	{r4, lr}
 8002a92:	f000 f8b1 	bl	8002bf8 <__lesf2>
 8002a96:	2800      	cmp	r0, #0
 8002a98:	dd01      	ble.n	8002a9e <__aeabi_fcmple+0xe>
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	bd10      	pop	{r4, pc}
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	bd10      	pop	{r4, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)

08002aa4 <__aeabi_fcmpgt>:
 8002aa4:	b510      	push	{r4, lr}
 8002aa6:	f000 f861 	bl	8002b6c <__gesf2>
 8002aaa:	2800      	cmp	r0, #0
 8002aac:	dc01      	bgt.n	8002ab2 <__aeabi_fcmpgt+0xe>
 8002aae:	2000      	movs	r0, #0
 8002ab0:	bd10      	pop	{r4, pc}
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	bd10      	pop	{r4, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)

08002ab8 <__aeabi_fcmpge>:
 8002ab8:	b510      	push	{r4, lr}
 8002aba:	f000 f857 	bl	8002b6c <__gesf2>
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	da01      	bge.n	8002ac6 <__aeabi_fcmpge+0xe>
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	bd10      	pop	{r4, pc}
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	bd10      	pop	{r4, pc}
 8002aca:	46c0      	nop			; (mov r8, r8)

08002acc <__clzsi2>:
 8002acc:	211c      	movs	r1, #28
 8002ace:	2301      	movs	r3, #1
 8002ad0:	041b      	lsls	r3, r3, #16
 8002ad2:	4298      	cmp	r0, r3
 8002ad4:	d301      	bcc.n	8002ada <__clzsi2+0xe>
 8002ad6:	0c00      	lsrs	r0, r0, #16
 8002ad8:	3910      	subs	r1, #16
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	4298      	cmp	r0, r3
 8002ade:	d301      	bcc.n	8002ae4 <__clzsi2+0x18>
 8002ae0:	0a00      	lsrs	r0, r0, #8
 8002ae2:	3908      	subs	r1, #8
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	4298      	cmp	r0, r3
 8002ae8:	d301      	bcc.n	8002aee <__clzsi2+0x22>
 8002aea:	0900      	lsrs	r0, r0, #4
 8002aec:	3904      	subs	r1, #4
 8002aee:	a202      	add	r2, pc, #8	; (adr r2, 8002af8 <__clzsi2+0x2c>)
 8002af0:	5c10      	ldrb	r0, [r2, r0]
 8002af2:	1840      	adds	r0, r0, r1
 8002af4:	4770      	bx	lr
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	02020304 	.word	0x02020304
 8002afc:	01010101 	.word	0x01010101
	...

08002b08 <__clzdi2>:
 8002b08:	b510      	push	{r4, lr}
 8002b0a:	2900      	cmp	r1, #0
 8002b0c:	d103      	bne.n	8002b16 <__clzdi2+0xe>
 8002b0e:	f7ff ffdd 	bl	8002acc <__clzsi2>
 8002b12:	3020      	adds	r0, #32
 8002b14:	e002      	b.n	8002b1c <__clzdi2+0x14>
 8002b16:	0008      	movs	r0, r1
 8002b18:	f7ff ffd8 	bl	8002acc <__clzsi2>
 8002b1c:	bd10      	pop	{r4, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)

08002b20 <__eqsf2>:
 8002b20:	b570      	push	{r4, r5, r6, lr}
 8002b22:	0042      	lsls	r2, r0, #1
 8002b24:	0245      	lsls	r5, r0, #9
 8002b26:	024e      	lsls	r6, r1, #9
 8002b28:	004c      	lsls	r4, r1, #1
 8002b2a:	0fc3      	lsrs	r3, r0, #31
 8002b2c:	0a6d      	lsrs	r5, r5, #9
 8002b2e:	2001      	movs	r0, #1
 8002b30:	0e12      	lsrs	r2, r2, #24
 8002b32:	0a76      	lsrs	r6, r6, #9
 8002b34:	0e24      	lsrs	r4, r4, #24
 8002b36:	0fc9      	lsrs	r1, r1, #31
 8002b38:	2aff      	cmp	r2, #255	; 0xff
 8002b3a:	d006      	beq.n	8002b4a <__eqsf2+0x2a>
 8002b3c:	2cff      	cmp	r4, #255	; 0xff
 8002b3e:	d003      	beq.n	8002b48 <__eqsf2+0x28>
 8002b40:	42a2      	cmp	r2, r4
 8002b42:	d101      	bne.n	8002b48 <__eqsf2+0x28>
 8002b44:	42b5      	cmp	r5, r6
 8002b46:	d006      	beq.n	8002b56 <__eqsf2+0x36>
 8002b48:	bd70      	pop	{r4, r5, r6, pc}
 8002b4a:	2d00      	cmp	r5, #0
 8002b4c:	d1fc      	bne.n	8002b48 <__eqsf2+0x28>
 8002b4e:	2cff      	cmp	r4, #255	; 0xff
 8002b50:	d1fa      	bne.n	8002b48 <__eqsf2+0x28>
 8002b52:	2e00      	cmp	r6, #0
 8002b54:	d1f8      	bne.n	8002b48 <__eqsf2+0x28>
 8002b56:	428b      	cmp	r3, r1
 8002b58:	d006      	beq.n	8002b68 <__eqsf2+0x48>
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	2a00      	cmp	r2, #0
 8002b5e:	d1f3      	bne.n	8002b48 <__eqsf2+0x28>
 8002b60:	0028      	movs	r0, r5
 8002b62:	1e43      	subs	r3, r0, #1
 8002b64:	4198      	sbcs	r0, r3
 8002b66:	e7ef      	b.n	8002b48 <__eqsf2+0x28>
 8002b68:	2000      	movs	r0, #0
 8002b6a:	e7ed      	b.n	8002b48 <__eqsf2+0x28>

08002b6c <__gesf2>:
 8002b6c:	b570      	push	{r4, r5, r6, lr}
 8002b6e:	0042      	lsls	r2, r0, #1
 8002b70:	0245      	lsls	r5, r0, #9
 8002b72:	024e      	lsls	r6, r1, #9
 8002b74:	004c      	lsls	r4, r1, #1
 8002b76:	0fc3      	lsrs	r3, r0, #31
 8002b78:	0a6d      	lsrs	r5, r5, #9
 8002b7a:	0e12      	lsrs	r2, r2, #24
 8002b7c:	0a76      	lsrs	r6, r6, #9
 8002b7e:	0e24      	lsrs	r4, r4, #24
 8002b80:	0fc8      	lsrs	r0, r1, #31
 8002b82:	2aff      	cmp	r2, #255	; 0xff
 8002b84:	d01b      	beq.n	8002bbe <__gesf2+0x52>
 8002b86:	2cff      	cmp	r4, #255	; 0xff
 8002b88:	d00e      	beq.n	8002ba8 <__gesf2+0x3c>
 8002b8a:	2a00      	cmp	r2, #0
 8002b8c:	d11b      	bne.n	8002bc6 <__gesf2+0x5a>
 8002b8e:	2c00      	cmp	r4, #0
 8002b90:	d101      	bne.n	8002b96 <__gesf2+0x2a>
 8002b92:	2e00      	cmp	r6, #0
 8002b94:	d01c      	beq.n	8002bd0 <__gesf2+0x64>
 8002b96:	2d00      	cmp	r5, #0
 8002b98:	d00c      	beq.n	8002bb4 <__gesf2+0x48>
 8002b9a:	4283      	cmp	r3, r0
 8002b9c:	d01c      	beq.n	8002bd8 <__gesf2+0x6c>
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	1e58      	subs	r0, r3, #1
 8002ba2:	4008      	ands	r0, r1
 8002ba4:	3801      	subs	r0, #1
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
 8002ba8:	2e00      	cmp	r6, #0
 8002baa:	d122      	bne.n	8002bf2 <__gesf2+0x86>
 8002bac:	2a00      	cmp	r2, #0
 8002bae:	d1f4      	bne.n	8002b9a <__gesf2+0x2e>
 8002bb0:	2d00      	cmp	r5, #0
 8002bb2:	d1f2      	bne.n	8002b9a <__gesf2+0x2e>
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	d1f6      	bne.n	8002ba6 <__gesf2+0x3a>
 8002bb8:	2001      	movs	r0, #1
 8002bba:	4240      	negs	r0, r0
 8002bbc:	e7f3      	b.n	8002ba6 <__gesf2+0x3a>
 8002bbe:	2d00      	cmp	r5, #0
 8002bc0:	d117      	bne.n	8002bf2 <__gesf2+0x86>
 8002bc2:	2cff      	cmp	r4, #255	; 0xff
 8002bc4:	d0f0      	beq.n	8002ba8 <__gesf2+0x3c>
 8002bc6:	2c00      	cmp	r4, #0
 8002bc8:	d1e7      	bne.n	8002b9a <__gesf2+0x2e>
 8002bca:	2e00      	cmp	r6, #0
 8002bcc:	d1e5      	bne.n	8002b9a <__gesf2+0x2e>
 8002bce:	e7e6      	b.n	8002b9e <__gesf2+0x32>
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	2d00      	cmp	r5, #0
 8002bd4:	d0e7      	beq.n	8002ba6 <__gesf2+0x3a>
 8002bd6:	e7e2      	b.n	8002b9e <__gesf2+0x32>
 8002bd8:	42a2      	cmp	r2, r4
 8002bda:	dc05      	bgt.n	8002be8 <__gesf2+0x7c>
 8002bdc:	dbea      	blt.n	8002bb4 <__gesf2+0x48>
 8002bde:	42b5      	cmp	r5, r6
 8002be0:	d802      	bhi.n	8002be8 <__gesf2+0x7c>
 8002be2:	d3e7      	bcc.n	8002bb4 <__gesf2+0x48>
 8002be4:	2000      	movs	r0, #0
 8002be6:	e7de      	b.n	8002ba6 <__gesf2+0x3a>
 8002be8:	4243      	negs	r3, r0
 8002bea:	4158      	adcs	r0, r3
 8002bec:	0040      	lsls	r0, r0, #1
 8002bee:	3801      	subs	r0, #1
 8002bf0:	e7d9      	b.n	8002ba6 <__gesf2+0x3a>
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	4240      	negs	r0, r0
 8002bf6:	e7d6      	b.n	8002ba6 <__gesf2+0x3a>

08002bf8 <__lesf2>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	0042      	lsls	r2, r0, #1
 8002bfc:	0245      	lsls	r5, r0, #9
 8002bfe:	024e      	lsls	r6, r1, #9
 8002c00:	004c      	lsls	r4, r1, #1
 8002c02:	0fc3      	lsrs	r3, r0, #31
 8002c04:	0a6d      	lsrs	r5, r5, #9
 8002c06:	0e12      	lsrs	r2, r2, #24
 8002c08:	0a76      	lsrs	r6, r6, #9
 8002c0a:	0e24      	lsrs	r4, r4, #24
 8002c0c:	0fc8      	lsrs	r0, r1, #31
 8002c0e:	2aff      	cmp	r2, #255	; 0xff
 8002c10:	d00b      	beq.n	8002c2a <__lesf2+0x32>
 8002c12:	2cff      	cmp	r4, #255	; 0xff
 8002c14:	d00d      	beq.n	8002c32 <__lesf2+0x3a>
 8002c16:	2a00      	cmp	r2, #0
 8002c18:	d11f      	bne.n	8002c5a <__lesf2+0x62>
 8002c1a:	2c00      	cmp	r4, #0
 8002c1c:	d116      	bne.n	8002c4c <__lesf2+0x54>
 8002c1e:	2e00      	cmp	r6, #0
 8002c20:	d114      	bne.n	8002c4c <__lesf2+0x54>
 8002c22:	2000      	movs	r0, #0
 8002c24:	2d00      	cmp	r5, #0
 8002c26:	d010      	beq.n	8002c4a <__lesf2+0x52>
 8002c28:	e009      	b.n	8002c3e <__lesf2+0x46>
 8002c2a:	2d00      	cmp	r5, #0
 8002c2c:	d10c      	bne.n	8002c48 <__lesf2+0x50>
 8002c2e:	2cff      	cmp	r4, #255	; 0xff
 8002c30:	d113      	bne.n	8002c5a <__lesf2+0x62>
 8002c32:	2e00      	cmp	r6, #0
 8002c34:	d108      	bne.n	8002c48 <__lesf2+0x50>
 8002c36:	2a00      	cmp	r2, #0
 8002c38:	d008      	beq.n	8002c4c <__lesf2+0x54>
 8002c3a:	4283      	cmp	r3, r0
 8002c3c:	d012      	beq.n	8002c64 <__lesf2+0x6c>
 8002c3e:	2102      	movs	r1, #2
 8002c40:	1e58      	subs	r0, r3, #1
 8002c42:	4008      	ands	r0, r1
 8002c44:	3801      	subs	r0, #1
 8002c46:	e000      	b.n	8002c4a <__lesf2+0x52>
 8002c48:	2002      	movs	r0, #2
 8002c4a:	bd70      	pop	{r4, r5, r6, pc}
 8002c4c:	2d00      	cmp	r5, #0
 8002c4e:	d1f4      	bne.n	8002c3a <__lesf2+0x42>
 8002c50:	2800      	cmp	r0, #0
 8002c52:	d1fa      	bne.n	8002c4a <__lesf2+0x52>
 8002c54:	2001      	movs	r0, #1
 8002c56:	4240      	negs	r0, r0
 8002c58:	e7f7      	b.n	8002c4a <__lesf2+0x52>
 8002c5a:	2c00      	cmp	r4, #0
 8002c5c:	d1ed      	bne.n	8002c3a <__lesf2+0x42>
 8002c5e:	2e00      	cmp	r6, #0
 8002c60:	d1eb      	bne.n	8002c3a <__lesf2+0x42>
 8002c62:	e7ec      	b.n	8002c3e <__lesf2+0x46>
 8002c64:	42a2      	cmp	r2, r4
 8002c66:	dc05      	bgt.n	8002c74 <__lesf2+0x7c>
 8002c68:	dbf2      	blt.n	8002c50 <__lesf2+0x58>
 8002c6a:	42b5      	cmp	r5, r6
 8002c6c:	d802      	bhi.n	8002c74 <__lesf2+0x7c>
 8002c6e:	d3ef      	bcc.n	8002c50 <__lesf2+0x58>
 8002c70:	2000      	movs	r0, #0
 8002c72:	e7ea      	b.n	8002c4a <__lesf2+0x52>
 8002c74:	4243      	negs	r3, r0
 8002c76:	4158      	adcs	r0, r3
 8002c78:	0040      	lsls	r0, r0, #1
 8002c7a:	3801      	subs	r0, #1
 8002c7c:	e7e5      	b.n	8002c4a <__lesf2+0x52>
 8002c7e:	46c0      	nop			; (mov r8, r8)

08002c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c82:	46de      	mov	lr, fp
 8002c84:	4657      	mov	r7, sl
 8002c86:	464e      	mov	r6, r9
 8002c88:	4645      	mov	r5, r8
 8002c8a:	b5e0      	push	{r5, r6, r7, lr}
 8002c8c:	b0a5      	sub	sp, #148	; 0x94
 8002c8e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c90:	f000 fc6a 	bl	8003568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c94:	f000 f880 	bl	8002d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c98:	f000 f962 	bl	8002f60 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002c9c:	f000 f930 	bl	8002f00 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8002ca0:	f000 f8ee 	bl	8002e80 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  SHT2x_Init(&hi2c2);
 8002ca4:	4b39      	ldr	r3, [pc, #228]	; (8002d8c <main+0x10c>)
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f000 fb16 	bl	80032d8 <SHT2x_Init>
  i2c_scan();
 8002cac:	f000 f992 	bl	8002fd4 <i2c_scan>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  unsigned char buffer[100] = { 0 };
 8002cb0:	1d3b      	adds	r3, r7, #4
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	2260      	movs	r2, #96	; 0x60
 8002cba:	2100      	movs	r1, #0
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f003 fb57 	bl	8006370 <memset>
	 	  		/* Gets current temperature & relative humidity. */
	 	  		float cel = SHT2x_GetTemperature(1);
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	f000 fb4a 	bl	800335c <SHT2x_GetTemperature>
 8002cc8:	1c03      	adds	r3, r0, #0
 8002cca:	677b      	str	r3, [r7, #116]	; 0x74
	 	  		/* Converts temperature to degrees Fahrenheit and Kelvin */
	 	  		float fah = SHT2x_CelsiusToFahrenheit(cel);
 8002ccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cce:	1c18      	adds	r0, r3, #0
 8002cd0:	f000 fbc4 	bl	800345c <SHT2x_CelsiusToFahrenheit>
 8002cd4:	1c03      	adds	r3, r0, #0
 8002cd6:	673b      	str	r3, [r7, #112]	; 0x70
	 	  		float kel = SHT2x_CelsiusToKelvin(cel);
 8002cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cda:	1c18      	adds	r0, r3, #0
 8002cdc:	f000 fbe2 	bl	80034a4 <SHT2x_CelsiusToKelvin>
 8002ce0:	1c03      	adds	r3, r0, #0
 8002ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
	 	  		float rh = SHT2x_GetRelativeHumidity(1);
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	f000 fb7b 	bl	80033e0 <SHT2x_GetRelativeHumidity>
 8002cea:	1c03      	adds	r3, r0, #0
 8002cec:	66bb      	str	r3, [r7, #104]	; 0x68

	 	  		SHT2x_GetInteger(cel);
 8002cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf0:	1c18      	adds	r0, r3, #0
 8002cf2:	f000 fbe7 	bl	80034c4 <SHT2x_GetInteger>
	 	  		/* May show warning below. Ignore and proceed. */
	 	  		sprintf(buffer,"%d.%dºC, %d.%dºF, %d.%d K, %d.%d%% RH\n",
 8002cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf8:	1c18      	adds	r0, r3, #0
 8002cfa:	f000 fbe3 	bl	80034c4 <SHT2x_GetInteger>
 8002cfe:	4682      	mov	sl, r0
 8002d00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d02:	2101      	movs	r1, #1
 8002d04:	1c18      	adds	r0, r3, #0
 8002d06:	f000 fbe9 	bl	80034dc <SHT2x_GetDecimal>
 8002d0a:	4683      	mov	fp, r0
 8002d0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d0e:	1c18      	adds	r0, r3, #0
 8002d10:	f000 fbd8 	bl	80034c4 <SHT2x_GetInteger>
 8002d14:	0004      	movs	r4, r0
 8002d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d18:	2101      	movs	r1, #1
 8002d1a:	1c18      	adds	r0, r3, #0
 8002d1c:	f000 fbde 	bl	80034dc <SHT2x_GetDecimal>
 8002d20:	0005      	movs	r5, r0
 8002d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d24:	1c18      	adds	r0, r3, #0
 8002d26:	f000 fbcd 	bl	80034c4 <SHT2x_GetInteger>
 8002d2a:	0006      	movs	r6, r0
 8002d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d2e:	2101      	movs	r1, #1
 8002d30:	1c18      	adds	r0, r3, #0
 8002d32:	f000 fbd3 	bl	80034dc <SHT2x_GetDecimal>
 8002d36:	4680      	mov	r8, r0
 8002d38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d3a:	1c18      	adds	r0, r3, #0
 8002d3c:	f000 fbc2 	bl	80034c4 <SHT2x_GetInteger>
 8002d40:	4681      	mov	r9, r0
 8002d42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d44:	2101      	movs	r1, #1
 8002d46:	1c18      	adds	r0, r3, #0
 8002d48:	f000 fbc8 	bl	80034dc <SHT2x_GetDecimal>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	4910      	ldr	r1, [pc, #64]	; (8002d90 <main+0x110>)
 8002d50:	1d38      	adds	r0, r7, #4
 8002d52:	9305      	str	r3, [sp, #20]
 8002d54:	464b      	mov	r3, r9
 8002d56:	9304      	str	r3, [sp, #16]
 8002d58:	4643      	mov	r3, r8
 8002d5a:	9303      	str	r3, [sp, #12]
 8002d5c:	9602      	str	r6, [sp, #8]
 8002d5e:	9501      	str	r5, [sp, #4]
 8002d60:	9400      	str	r4, [sp, #0]
 8002d62:	465b      	mov	r3, fp
 8002d64:	4652      	mov	r2, sl
 8002d66:	f003 fae3 	bl	8006330 <siprintf>
	 	  				SHT2x_GetInteger(cel), SHT2x_GetDecimal(cel, 1),
	 	  				SHT2x_GetInteger(fah), SHT2x_GetDecimal(fah, 1),
	 	  				SHT2x_GetInteger(kel), SHT2x_GetDecimal(kel, 1),
	 	  				SHT2x_GetInteger(rh), SHT2x_GetDecimal(rh, 1));
	 	  		HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 1000);
 8002d6a:	1d3b      	adds	r3, r7, #4
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f7fd f9cb 	bl	8000108 <strlen>
 8002d72:	0003      	movs	r3, r0
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	23fa      	movs	r3, #250	; 0xfa
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	1d39      	adds	r1, r7, #4
 8002d7c:	4805      	ldr	r0, [pc, #20]	; (8002d94 <main+0x114>)
 8002d7e:	f002 fd89 	bl	8005894 <HAL_UART_Transmit>
	 	  		HAL_Delay(250);
 8002d82:	20fa      	movs	r0, #250	; 0xfa
 8002d84:	f000 fc60 	bl	8003648 <HAL_Delay>
  {
 8002d88:	e792      	b.n	8002cb0 <main+0x30>
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	200000a4 	.word	0x200000a4
 8002d90:	08006c94 	.word	0x08006c94
 8002d94:	200000f8 	.word	0x200000f8

08002d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b09d      	sub	sp, #116	; 0x74
 8002d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d9e:	2438      	movs	r4, #56	; 0x38
 8002da0:	193b      	adds	r3, r7, r4
 8002da2:	0018      	movs	r0, r3
 8002da4:	2338      	movs	r3, #56	; 0x38
 8002da6:	001a      	movs	r2, r3
 8002da8:	2100      	movs	r1, #0
 8002daa:	f003 fae1 	bl	8006370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dae:	2324      	movs	r3, #36	; 0x24
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	0018      	movs	r0, r3
 8002db4:	2314      	movs	r3, #20
 8002db6:	001a      	movs	r2, r3
 8002db8:	2100      	movs	r1, #0
 8002dba:	f003 fad9 	bl	8006370 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dbe:	003b      	movs	r3, r7
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	2324      	movs	r3, #36	; 0x24
 8002dc4:	001a      	movs	r2, r3
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	f003 fad2 	bl	8006370 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dcc:	4b2a      	ldr	r3, [pc, #168]	; (8002e78 <SystemClock_Config+0xe0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a2a      	ldr	r2, [pc, #168]	; (8002e7c <SystemClock_Config+0xe4>)
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	4b28      	ldr	r3, [pc, #160]	; (8002e78 <SystemClock_Config+0xe0>)
 8002dd6:	2180      	movs	r1, #128	; 0x80
 8002dd8:	0109      	lsls	r1, r1, #4
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dde:	0021      	movs	r1, r4
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	2202      	movs	r2, #2
 8002de4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	2201      	movs	r2, #1
 8002dea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002dec:	187b      	adds	r3, r7, r1
 8002dee:	2210      	movs	r2, #16
 8002df0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	2202      	movs	r2, #2
 8002df6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	2280      	movs	r2, #128	; 0x80
 8002e02:	02d2      	lsls	r2, r2, #11
 8002e04:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002e06:	187b      	adds	r3, r7, r1
 8002e08:	2280      	movs	r2, #128	; 0x80
 8002e0a:	03d2      	lsls	r2, r2, #15
 8002e0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e0e:	187b      	adds	r3, r7, r1
 8002e10:	0018      	movs	r0, r3
 8002e12:	f001 fd75 	bl	8004900 <HAL_RCC_OscConfig>
 8002e16:	1e03      	subs	r3, r0, #0
 8002e18:	d001      	beq.n	8002e1e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002e1a:	f000 f93b 	bl	8003094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e1e:	2124      	movs	r1, #36	; 0x24
 8002e20:	187b      	adds	r3, r7, r1
 8002e22:	220f      	movs	r2, #15
 8002e24:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e26:	187b      	adds	r3, r7, r1
 8002e28:	2203      	movs	r2, #3
 8002e2a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e2c:	187b      	adds	r3, r7, r1
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e32:	187b      	adds	r3, r7, r1
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	00d2      	lsls	r2, r2, #3
 8002e38:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e3a:	187b      	adds	r3, r7, r1
 8002e3c:	2280      	movs	r2, #128	; 0x80
 8002e3e:	00d2      	lsls	r2, r2, #3
 8002e40:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002e42:	187b      	adds	r3, r7, r1
 8002e44:	2101      	movs	r1, #1
 8002e46:	0018      	movs	r0, r3
 8002e48:	f002 f91e 	bl	8005088 <HAL_RCC_ClockConfig>
 8002e4c:	1e03      	subs	r3, r0, #0
 8002e4e:	d001      	beq.n	8002e54 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002e50:	f000 f920 	bl	8003094 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e54:	003b      	movs	r3, r7
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e5a:	003b      	movs	r3, r7
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e60:	003b      	movs	r3, r7
 8002e62:	0018      	movs	r0, r3
 8002e64:	f002 fb34 	bl	80054d0 <HAL_RCCEx_PeriphCLKConfig>
 8002e68:	1e03      	subs	r3, r0, #0
 8002e6a:	d001      	beq.n	8002e70 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8002e6c:	f000 f912 	bl	8003094 <Error_Handler>
  }
}
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b01d      	add	sp, #116	; 0x74
 8002e76:	bd90      	pop	{r4, r7, pc}
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	ffffe7ff 	.word	0xffffe7ff

08002e80 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <MX_I2C2_Init+0x74>)
 8002e86:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <MX_I2C2_Init+0x78>)
 8002e88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <MX_I2C2_Init+0x74>)
 8002e8c:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <MX_I2C2_Init+0x7c>)
 8002e8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <MX_I2C2_Init+0x74>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e96:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <MX_I2C2_Init+0x74>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e9c:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <MX_I2C2_Init+0x74>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002ea2:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <MX_I2C2_Init+0x74>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <MX_I2C2_Init+0x74>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002eae:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <MX_I2C2_Init+0x74>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <MX_I2C2_Init+0x74>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002eba:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <MX_I2C2_Init+0x74>)
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f000 fe11 	bl	8003ae4 <HAL_I2C_Init>
 8002ec2:	1e03      	subs	r3, r0, #0
 8002ec4:	d001      	beq.n	8002eca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002ec6:	f000 f8e5 	bl	8003094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <MX_I2C2_Init+0x74>)
 8002ecc:	2100      	movs	r1, #0
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f001 fc7e 	bl	80047d0 <HAL_I2CEx_ConfigAnalogFilter>
 8002ed4:	1e03      	subs	r3, r0, #0
 8002ed6:	d001      	beq.n	8002edc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002ed8:	f000 f8dc 	bl	8003094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <MX_I2C2_Init+0x74>)
 8002ede:	2100      	movs	r1, #0
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f001 fcc1 	bl	8004868 <HAL_I2CEx_ConfigDigitalFilter>
 8002ee6:	1e03      	subs	r3, r0, #0
 8002ee8:	d001      	beq.n	8002eee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002eea:	f000 f8d3 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	200000a4 	.word	0x200000a4
 8002ef8:	40005800 	.word	0x40005800
 8002efc:	00303d5b 	.word	0x00303d5b

08002f00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f04:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <MX_USART1_UART_Init+0x58>)
 8002f06:	4a15      	ldr	r2, [pc, #84]	; (8002f5c <MX_USART1_UART_Init+0x5c>)
 8002f08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <MX_USART1_UART_Init+0x58>)
 8002f0c:	22e1      	movs	r2, #225	; 0xe1
 8002f0e:	0252      	lsls	r2, r2, #9
 8002f10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <MX_USART1_UART_Init+0x58>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f18:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <MX_USART1_UART_Init+0x58>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <MX_USART1_UART_Init+0x58>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <MX_USART1_UART_Init+0x58>)
 8002f26:	220c      	movs	r2, #12
 8002f28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <MX_USART1_UART_Init+0x58>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <MX_USART1_UART_Init+0x58>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <MX_USART1_UART_Init+0x58>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <MX_USART1_UART_Init+0x58>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <MX_USART1_UART_Init+0x58>)
 8002f44:	0018      	movs	r0, r3
 8002f46:	f002 fc51 	bl	80057ec <HAL_UART_Init>
 8002f4a:	1e03      	subs	r3, r0, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002f4e:	f000 f8a1 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	200000f8 	.word	0x200000f8
 8002f5c:	40013800 	.word	0x40013800

08002f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f66:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <MX_GPIO_Init+0x70>)
 8002f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6a:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <MX_GPIO_Init+0x70>)
 8002f6c:	2104      	movs	r1, #4
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f72:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <MX_GPIO_Init+0x70>)
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	2204      	movs	r2, #4
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f7e:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <MX_GPIO_Init+0x70>)
 8002f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f82:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <MX_GPIO_Init+0x70>)
 8002f84:	2180      	movs	r1, #128	; 0x80
 8002f86:	430a      	orrs	r2, r1
 8002f88:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <MX_GPIO_Init+0x70>)
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	2280      	movs	r2, #128	; 0x80
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <MX_GPIO_Init+0x70>)
 8002f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <MX_GPIO_Init+0x70>)
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <MX_GPIO_Init+0x70>)
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	4013      	ands	r3, r2
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <MX_GPIO_Init+0x70>)
 8002fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <MX_GPIO_Init+0x70>)
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <MX_GPIO_Init+0x70>)
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b004      	add	sp, #16
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	40021000 	.word	0x40021000

08002fd4 <i2c_scan>:

/* USER CODE BEGIN 4 */
void i2c_scan(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, StartMSG, sizeof(StartMSG), 10000);
 8002fd8:	4b24      	ldr	r3, [pc, #144]	; (800306c <i2c_scan+0x98>)
 8002fda:	4925      	ldr	r1, [pc, #148]	; (8003070 <i2c_scan+0x9c>)
 8002fdc:	4825      	ldr	r0, [pc, #148]	; (8003074 <i2c_scan+0xa0>)
 8002fde:	221a      	movs	r2, #26
 8002fe0:	f002 fc58 	bl	8005894 <HAL_UART_Transmit>

	for(i=0; i<128; i++)
 8002fe4:	4b24      	ldr	r3, [pc, #144]	; (8003078 <i2c_scan+0xa4>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e030      	b.n	800304e <i2c_scan+0x7a>
	    {
	        ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 8002fec:	4b22      	ldr	r3, [pc, #136]	; (8003078 <i2c_scan+0xa4>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	18db      	adds	r3, r3, r3
 8002ff4:	b299      	uxth	r1, r3
 8002ff6:	4821      	ldr	r0, [pc, #132]	; (800307c <i2c_scan+0xa8>)
 8002ff8:	2305      	movs	r3, #5
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	f001 f818 	bl	8004030 <HAL_I2C_IsDeviceReady>
 8003000:	0003      	movs	r3, r0
 8003002:	001a      	movs	r2, r3
 8003004:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <i2c_scan+0xac>)
 8003006:	601a      	str	r2, [r3, #0]
	        if (ret != HAL_OK) /* No ACK Received At That Address */
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <i2c_scan+0xac>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d006      	beq.n	800301e <i2c_scan+0x4a>
	        {
	            HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
 8003010:	4b16      	ldr	r3, [pc, #88]	; (800306c <i2c_scan+0x98>)
 8003012:	491c      	ldr	r1, [pc, #112]	; (8003084 <i2c_scan+0xb0>)
 8003014:	4817      	ldr	r0, [pc, #92]	; (8003074 <i2c_scan+0xa0>)
 8003016:	2204      	movs	r2, #4
 8003018:	f002 fc3c 	bl	8005894 <HAL_UART_Transmit>
 800301c:	e011      	b.n	8003042 <i2c_scan+0x6e>
	        }
	        else if(ret == HAL_OK)
 800301e:	4b18      	ldr	r3, [pc, #96]	; (8003080 <i2c_scan+0xac>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10d      	bne.n	8003042 <i2c_scan+0x6e>
	        {
	            sprintf(Buffer, "0x%X", i);
 8003026:	4b14      	ldr	r3, [pc, #80]	; (8003078 <i2c_scan+0xa4>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	001a      	movs	r2, r3
 800302c:	4916      	ldr	r1, [pc, #88]	; (8003088 <i2c_scan+0xb4>)
 800302e:	4b17      	ldr	r3, [pc, #92]	; (800308c <i2c_scan+0xb8>)
 8003030:	0018      	movs	r0, r3
 8003032:	f003 f97d 	bl	8006330 <siprintf>
	            HAL_UART_Transmit(&huart1, (uint8_t *)Buffer, sizeof(Buffer), 10000);
 8003036:	4b0d      	ldr	r3, [pc, #52]	; (800306c <i2c_scan+0x98>)
 8003038:	4914      	ldr	r1, [pc, #80]	; (800308c <i2c_scan+0xb8>)
 800303a:	480e      	ldr	r0, [pc, #56]	; (8003074 <i2c_scan+0xa0>)
 800303c:	2219      	movs	r2, #25
 800303e:	f002 fc29 	bl	8005894 <HAL_UART_Transmit>
	for(i=0; i<128; i++)
 8003042:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <i2c_scan+0xa4>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	3301      	adds	r3, #1
 8003048:	b2da      	uxtb	r2, r3
 800304a:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <i2c_scan+0xa4>)
 800304c:	701a      	strb	r2, [r3, #0]
 800304e:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <i2c_scan+0xa4>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	b25b      	sxtb	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	dac9      	bge.n	8002fec <i2c_scan+0x18>
	        }
	    }
	    HAL_UART_Transmit(&huart1, EndMSG, sizeof(EndMSG), 10000);
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <i2c_scan+0x98>)
 800305a:	490d      	ldr	r1, [pc, #52]	; (8003090 <i2c_scan+0xbc>)
 800305c:	4805      	ldr	r0, [pc, #20]	; (8003074 <i2c_scan+0xa0>)
 800305e:	220b      	movs	r2, #11
 8003060:	f002 fc18 	bl	8005894 <HAL_UART_Transmit>
}
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	00002710 	.word	0x00002710
 8003070:	20000004 	.word	0x20000004
 8003074:	200000f8 	.word	0x200000f8
 8003078:	20000199 	.word	0x20000199
 800307c:	200000a4 	.word	0x200000a4
 8003080:	2000019c 	.word	0x2000019c
 8003084:	20000000 	.word	0x20000000
 8003088:	08006cc0 	.word	0x08006cc0
 800308c:	20000180 	.word	0x20000180
 8003090:	20000020 	.word	0x20000020

08003094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003098:	b672      	cpsid	i
}
 800309a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800309c:	e7fe      	b.n	800309c <Error_Handler+0x8>
	...

080030a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a4:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <HAL_MspInit+0x24>)
 80030a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <HAL_MspInit+0x24>)
 80030aa:	2101      	movs	r1, #1
 80030ac:	430a      	orrs	r2, r1
 80030ae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80030b0:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <HAL_MspInit+0x24>)
 80030b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <HAL_MspInit+0x24>)
 80030b6:	2180      	movs	r1, #128	; 0x80
 80030b8:	0549      	lsls	r1, r1, #21
 80030ba:	430a      	orrs	r2, r1
 80030bc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40021000 	.word	0x40021000

080030c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	240c      	movs	r4, #12
 80030d2:	193b      	adds	r3, r7, r4
 80030d4:	0018      	movs	r0, r3
 80030d6:	2314      	movs	r3, #20
 80030d8:	001a      	movs	r2, r3
 80030da:	2100      	movs	r1, #0
 80030dc:	f003 f948 	bl	8006370 <memset>
  if(hi2c->Instance==I2C2)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a18      	ldr	r2, [pc, #96]	; (8003148 <HAL_I2C_MspInit+0x80>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d129      	bne.n	800313e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <HAL_I2C_MspInit+0x84>)
 80030ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ee:	4b17      	ldr	r3, [pc, #92]	; (800314c <HAL_I2C_MspInit+0x84>)
 80030f0:	2102      	movs	r1, #2
 80030f2:	430a      	orrs	r2, r1
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <HAL_I2C_MspInit+0x84>)
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	2202      	movs	r2, #2
 80030fc:	4013      	ands	r3, r2
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003102:	193b      	adds	r3, r7, r4
 8003104:	22c0      	movs	r2, #192	; 0xc0
 8003106:	0112      	lsls	r2, r2, #4
 8003108:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800310a:	0021      	movs	r1, r4
 800310c:	187b      	adds	r3, r7, r1
 800310e:	2212      	movs	r2, #18
 8003110:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003112:	187b      	adds	r3, r7, r1
 8003114:	2201      	movs	r2, #1
 8003116:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003118:	187b      	adds	r3, r7, r1
 800311a:	2203      	movs	r2, #3
 800311c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800311e:	187b      	adds	r3, r7, r1
 8003120:	2206      	movs	r2, #6
 8003122:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003124:	187b      	adds	r3, r7, r1
 8003126:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <HAL_I2C_MspInit+0x88>)
 8003128:	0019      	movs	r1, r3
 800312a:	0010      	movs	r0, r2
 800312c:	f000 fb64 	bl	80037f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_I2C_MspInit+0x84>)
 8003132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003134:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_I2C_MspInit+0x84>)
 8003136:	2180      	movs	r1, #128	; 0x80
 8003138:	03c9      	lsls	r1, r1, #15
 800313a:	430a      	orrs	r2, r1
 800313c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	46bd      	mov	sp, r7
 8003142:	b009      	add	sp, #36	; 0x24
 8003144:	bd90      	pop	{r4, r7, pc}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	40005800 	.word	0x40005800
 800314c:	40021000 	.word	0x40021000
 8003150:	50000400 	.word	0x50000400

08003154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003154:	b590      	push	{r4, r7, lr}
 8003156:	b089      	sub	sp, #36	; 0x24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315c:	240c      	movs	r4, #12
 800315e:	193b      	adds	r3, r7, r4
 8003160:	0018      	movs	r0, r3
 8003162:	2314      	movs	r3, #20
 8003164:	001a      	movs	r2, r3
 8003166:	2100      	movs	r1, #0
 8003168:	f003 f902 	bl	8006370 <memset>
  if(huart->Instance==USART1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a18      	ldr	r2, [pc, #96]	; (80031d4 <HAL_UART_MspInit+0x80>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d12a      	bne.n	80031cc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003176:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <HAL_UART_MspInit+0x84>)
 8003178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800317a:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <HAL_UART_MspInit+0x84>)
 800317c:	2180      	movs	r1, #128	; 0x80
 800317e:	01c9      	lsls	r1, r1, #7
 8003180:	430a      	orrs	r2, r1
 8003182:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003184:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <HAL_UART_MspInit+0x84>)
 8003186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003188:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <HAL_UART_MspInit+0x84>)
 800318a:	2101      	movs	r1, #1
 800318c:	430a      	orrs	r2, r1
 800318e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_UART_MspInit+0x84>)
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	2201      	movs	r2, #1
 8003196:	4013      	ands	r3, r2
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 800319c:	193b      	adds	r3, r7, r4
 800319e:	22c0      	movs	r2, #192	; 0xc0
 80031a0:	00d2      	lsls	r2, r2, #3
 80031a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a4:	0021      	movs	r1, r4
 80031a6:	187b      	adds	r3, r7, r1
 80031a8:	2202      	movs	r2, #2
 80031aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	187b      	adds	r3, r7, r1
 80031ae:	2200      	movs	r2, #0
 80031b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b2:	187b      	adds	r3, r7, r1
 80031b4:	2203      	movs	r2, #3
 80031b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80031b8:	187b      	adds	r3, r7, r1
 80031ba:	2204      	movs	r2, #4
 80031bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031be:	187a      	adds	r2, r7, r1
 80031c0:	23a0      	movs	r3, #160	; 0xa0
 80031c2:	05db      	lsls	r3, r3, #23
 80031c4:	0011      	movs	r1, r2
 80031c6:	0018      	movs	r0, r3
 80031c8:	f000 fb16 	bl	80037f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b009      	add	sp, #36	; 0x24
 80031d2:	bd90      	pop	{r4, r7, pc}
 80031d4:	40013800 	.word	0x40013800
 80031d8:	40021000 	.word	0x40021000

080031dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031e0:	e7fe      	b.n	80031e0 <NMI_Handler+0x4>

080031e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031e6:	e7fe      	b.n	80031e6 <HardFault_Handler+0x4>

080031e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003200:	f000 fa06 	bl	8003610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003204:	46c0      	nop			; (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003214:	4a14      	ldr	r2, [pc, #80]	; (8003268 <_sbrk+0x5c>)
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <_sbrk+0x60>)
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003220:	4b13      	ldr	r3, [pc, #76]	; (8003270 <_sbrk+0x64>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d102      	bne.n	800322e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003228:	4b11      	ldr	r3, [pc, #68]	; (8003270 <_sbrk+0x64>)
 800322a:	4a12      	ldr	r2, [pc, #72]	; (8003274 <_sbrk+0x68>)
 800322c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800322e:	4b10      	ldr	r3, [pc, #64]	; (8003270 <_sbrk+0x64>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	18d3      	adds	r3, r2, r3
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	429a      	cmp	r2, r3
 800323a:	d207      	bcs.n	800324c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800323c:	f003 f8a0 	bl	8006380 <__errno>
 8003240:	0003      	movs	r3, r0
 8003242:	220c      	movs	r2, #12
 8003244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003246:	2301      	movs	r3, #1
 8003248:	425b      	negs	r3, r3
 800324a:	e009      	b.n	8003260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800324c:	4b08      	ldr	r3, [pc, #32]	; (8003270 <_sbrk+0x64>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003252:	4b07      	ldr	r3, [pc, #28]	; (8003270 <_sbrk+0x64>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	18d2      	adds	r2, r2, r3
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <_sbrk+0x64>)
 800325c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800325e:	68fb      	ldr	r3, [r7, #12]
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	b006      	add	sp, #24
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20002000 	.word	0x20002000
 800326c:	00000400 	.word	0x00000400
 8003270:	200001a0 	.word	0x200001a0
 8003274:	200002f8 	.word	0x200002f8

08003278 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003284:	480d      	ldr	r0, [pc, #52]	; (80032bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003286:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003288:	f7ff fff6 	bl	8003278 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800328c:	480c      	ldr	r0, [pc, #48]	; (80032c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800328e:	490d      	ldr	r1, [pc, #52]	; (80032c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003290:	4a0d      	ldr	r2, [pc, #52]	; (80032c8 <LoopForever+0xe>)
  movs r3, #0
 8003292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003294:	e002      	b.n	800329c <LoopCopyDataInit>

08003296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800329a:	3304      	adds	r3, #4

0800329c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800329c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800329e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032a0:	d3f9      	bcc.n	8003296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032a2:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80032a4:	4c0a      	ldr	r4, [pc, #40]	; (80032d0 <LoopForever+0x16>)
  movs r3, #0
 80032a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032a8:	e001      	b.n	80032ae <LoopFillZerobss>

080032aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032ac:	3204      	adds	r2, #4

080032ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032b0:	d3fb      	bcc.n	80032aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032b2:	f003 f86b 	bl	800638c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032b6:	f7ff fce3 	bl	8002c80 <main>

080032ba <LoopForever>:

LoopForever:
    b LoopForever
 80032ba:	e7fe      	b.n	80032ba <LoopForever>
  ldr   r0, =_estack
 80032bc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80032c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032c4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80032c8:	08006dbc 	.word	0x08006dbc
  ldr r2, =_sbss
 80032cc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80032d0:	200002f4 	.word	0x200002f4

080032d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032d4:	e7fe      	b.n	80032d4 <ADC1_COMP_IRQHandler>
	...

080032d8 <SHT2x_Init>:
	
/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 80032e0:	4b03      	ldr	r3, [pc, #12]	; (80032f0 <SHT2x_Init+0x18>)
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	601a      	str	r2, [r3, #0]
}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b002      	add	sp, #8
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	200001a4 	.word	0x200001a4

080032f4 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	0002      	movs	r2, r0
 80032fc:	1dfb      	adds	r3, r7, #7
 80032fe:	701a      	strb	r2, [r3, #0]
	uint8_t val[3] = { 0 };
 8003300:	240c      	movs	r4, #12
 8003302:	193b      	adds	r3, r7, r4
 8003304:	4a13      	ldr	r2, [pc, #76]	; (8003354 <SHT2x_GetRaw+0x60>)
 8003306:	8812      	ldrh	r2, [r2, #0]
 8003308:	801a      	strh	r2, [r3, #0]
 800330a:	2202      	movs	r2, #2
 800330c:	2100      	movs	r1, #0
 800330e:	5499      	strb	r1, [r3, r2]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <SHT2x_GetRaw+0x64>)
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	1dfa      	adds	r2, r7, #7
 8003316:	23fa      	movs	r3, #250	; 0xfa
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2301      	movs	r3, #1
 800331e:	2180      	movs	r1, #128	; 0x80
 8003320:	f000 fc76 	bl	8003c10 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <SHT2x_GetRaw+0x64>)
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	193a      	adds	r2, r7, r4
 800332a:	23fa      	movs	r3, #250	; 0xfa
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	2303      	movs	r3, #3
 8003332:	2180      	movs	r1, #128	; 0x80
 8003334:	f000 fd74 	bl	8003e20 <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 8003338:	193b      	adds	r3, r7, r4
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	b21a      	sxth	r2, r3
 8003340:	193b      	adds	r3, r7, r4
 8003342:	785b      	ldrb	r3, [r3, #1]
 8003344:	b21b      	sxth	r3, r3
 8003346:	4313      	orrs	r3, r2
 8003348:	b21b      	sxth	r3, r3
 800334a:	b29b      	uxth	r3, r3
}
 800334c:	0018      	movs	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	b005      	add	sp, #20
 8003352:	bd90      	pop	{r4, r7, pc}
 8003354:	08006cc8 	.word	0x08006cc8
 8003358:	200001a4 	.word	0x200001a4

0800335c <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	0002      	movs	r2, r0
 8003364:	1dfb      	adds	r3, r7, #7
 8003366:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 8003368:	1dfb      	adds	r3, r7, #7
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <SHT2x_GetTemperature+0x18>
 8003370:	22e3      	movs	r2, #227	; 0xe3
 8003372:	e000      	b.n	8003376 <SHT2x_GetTemperature+0x1a>
 8003374:	22f3      	movs	r2, #243	; 0xf3
 8003376:	210f      	movs	r1, #15
 8003378:	187b      	adds	r3, r7, r1
 800337a:	701a      	strb	r2, [r3, #0]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 800337c:	187b      	adds	r3, r7, r1
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	0018      	movs	r0, r3
 8003382:	f7ff ffb7 	bl	80032f4 <SHT2x_GetRaw>
 8003386:	0003      	movs	r3, r0
 8003388:	0018      	movs	r0, r3
 800338a:	f7ff fa67 	bl	800285c <__aeabi_i2d>
 800338e:	2200      	movs	r2, #0
 8003390:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <SHT2x_GetTemperature+0x70>)
 8003392:	f7fe f931 	bl	80015f8 <__aeabi_ddiv>
 8003396:	0002      	movs	r2, r0
 8003398:	000b      	movs	r3, r1
 800339a:	0010      	movs	r0, r2
 800339c:	0019      	movs	r1, r3
 800339e:	4a0c      	ldr	r2, [pc, #48]	; (80033d0 <SHT2x_GetTemperature+0x74>)
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <SHT2x_GetTemperature+0x78>)
 80033a2:	f7fe fc17 	bl	8001bd4 <__aeabi_dmul>
 80033a6:	0002      	movs	r2, r0
 80033a8:	000b      	movs	r3, r1
 80033aa:	0010      	movs	r0, r2
 80033ac:	0019      	movs	r1, r3
 80033ae:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <SHT2x_GetTemperature+0x7c>)
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <SHT2x_GetTemperature+0x80>)
 80033b2:	f7fe fed1 	bl	8002158 <__aeabi_dsub>
 80033b6:	0002      	movs	r2, r0
 80033b8:	000b      	movs	r3, r1
 80033ba:	0010      	movs	r0, r2
 80033bc:	0019      	movs	r1, r3
 80033be:	f7ff fac5 	bl	800294c <__aeabi_d2f>
 80033c2:	1c03      	adds	r3, r0, #0
}
 80033c4:	1c18      	adds	r0, r3, #0
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b004      	add	sp, #16
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40f00000 	.word	0x40f00000
 80033d0:	3d70a3d7 	.word	0x3d70a3d7
 80033d4:	4065f70a 	.word	0x4065f70a
 80033d8:	cccccccd 	.word	0xcccccccd
 80033dc:	40476ccc 	.word	0x40476ccc

080033e0 <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	0002      	movs	r2, r0
 80033e8:	1dfb      	adds	r3, r7, #7
 80033ea:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 80033ec:	1dfb      	adds	r3, r7, #7
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <SHT2x_GetRelativeHumidity+0x18>
 80033f4:	22e5      	movs	r2, #229	; 0xe5
 80033f6:	e000      	b.n	80033fa <SHT2x_GetRelativeHumidity+0x1a>
 80033f8:	22f5      	movs	r2, #245	; 0xf5
 80033fa:	210f      	movs	r1, #15
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	701a      	strb	r2, [r3, #0]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 8003400:	187b      	adds	r3, r7, r1
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	0018      	movs	r0, r3
 8003406:	f7ff ff75 	bl	80032f4 <SHT2x_GetRaw>
 800340a:	0003      	movs	r3, r0
 800340c:	0018      	movs	r0, r3
 800340e:	f7ff fa25 	bl	800285c <__aeabi_i2d>
 8003412:	2200      	movs	r2, #0
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <SHT2x_GetRelativeHumidity+0x70>)
 8003416:	f7fe f8ef 	bl	80015f8 <__aeabi_ddiv>
 800341a:	0002      	movs	r2, r0
 800341c:	000b      	movs	r3, r1
 800341e:	0010      	movs	r0, r2
 8003420:	0019      	movs	r1, r3
 8003422:	2200      	movs	r2, #0
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <SHT2x_GetRelativeHumidity+0x74>)
 8003426:	f7fe fbd5 	bl	8001bd4 <__aeabi_dmul>
 800342a:	0002      	movs	r2, r0
 800342c:	000b      	movs	r3, r1
 800342e:	0010      	movs	r0, r2
 8003430:	0019      	movs	r1, r3
 8003432:	2200      	movs	r2, #0
 8003434:	4b08      	ldr	r3, [pc, #32]	; (8003458 <SHT2x_GetRelativeHumidity+0x78>)
 8003436:	f7fe fe8f 	bl	8002158 <__aeabi_dsub>
 800343a:	0002      	movs	r2, r0
 800343c:	000b      	movs	r3, r1
 800343e:	0010      	movs	r0, r2
 8003440:	0019      	movs	r1, r3
 8003442:	f7ff fa83 	bl	800294c <__aeabi_d2f>
 8003446:	1c03      	adds	r3, r0, #0
}
 8003448:	1c18      	adds	r0, r3, #0
 800344a:	46bd      	mov	sp, r7
 800344c:	b004      	add	sp, #16
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40f00000 	.word	0x40f00000
 8003454:	405f4000 	.word	0x405f4000
 8003458:	40180000 	.word	0x40180000

0800345c <SHT2x_CelsiusToFahrenheit>:
/**
 * @brief Converts degrees Celsius to degrees Fahrenheit.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in degrees Fahrenheit.
 */
float SHT2x_CelsiusToFahrenheit(float celsius) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	return (9.0 / 5.0) * celsius + 32;
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff fa29 	bl	80028bc <__aeabi_f2d>
 800346a:	4a0b      	ldr	r2, [pc, #44]	; (8003498 <SHT2x_CelsiusToFahrenheit+0x3c>)
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <SHT2x_CelsiusToFahrenheit+0x40>)
 800346e:	f7fe fbb1 	bl	8001bd4 <__aeabi_dmul>
 8003472:	0002      	movs	r2, r0
 8003474:	000b      	movs	r3, r1
 8003476:	0010      	movs	r0, r2
 8003478:	0019      	movs	r1, r3
 800347a:	2200      	movs	r2, #0
 800347c:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <SHT2x_CelsiusToFahrenheit+0x44>)
 800347e:	f7fd fd5b 	bl	8000f38 <__aeabi_dadd>
 8003482:	0002      	movs	r2, r0
 8003484:	000b      	movs	r3, r1
 8003486:	0010      	movs	r0, r2
 8003488:	0019      	movs	r1, r3
 800348a:	f7ff fa5f 	bl	800294c <__aeabi_d2f>
 800348e:	1c03      	adds	r3, r0, #0
}
 8003490:	1c18      	adds	r0, r3, #0
 8003492:	46bd      	mov	sp, r7
 8003494:	b002      	add	sp, #8
 8003496:	bd80      	pop	{r7, pc}
 8003498:	cccccccd 	.word	0xcccccccd
 800349c:	3ffccccc 	.word	0x3ffccccc
 80034a0:	40400000 	.word	0x40400000

080034a4 <SHT2x_CelsiusToKelvin>:
/**
 * @brief Converts degrees Celsius to Kelvin.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in Kelvin.
 */
float SHT2x_CelsiusToKelvin(float celsius) {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
	return celsius + 273;
 80034ac:	4904      	ldr	r1, [pc, #16]	; (80034c0 <SHT2x_CelsiusToKelvin+0x1c>)
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fc fffa 	bl	80004a8 <__aeabi_fadd>
 80034b4:	1c03      	adds	r3, r0, #0
}
 80034b6:	1c18      	adds	r0, r3, #0
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b002      	add	sp, #8
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	43888000 	.word	0x43888000

080034c4 <SHT2x_GetInteger>:
 * @brief Gets the integer part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Integer part of floating point number.
 */
int32_t SHT2x_GetInteger(float num) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	return num / 1;
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7fd fc79 	bl	8000dc4 <__aeabi_f2iz>
 80034d2:	0003      	movs	r3, r0
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b002      	add	sp, #8
 80034da:	bd80      	pop	{r7, pc}

080034dc <SHT2x_GetDecimal>:
 * @brief Gets the decimal part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Decimal part of floating point number.
 */
uint32_t SHT2x_GetDecimal(float num, int digits) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
	float postDec = num - SHT2x_GetInteger(num);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	1c18      	adds	r0, r3, #0
 80034ea:	f7ff ffeb 	bl	80034c4 <SHT2x_GetInteger>
 80034ee:	0003      	movs	r3, r0
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7fd fc87 	bl	8000e04 <__aeabi_i2f>
 80034f6:	1c03      	adds	r3, r0, #0
 80034f8:	1c19      	adds	r1, r3, #0
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fd fac2 	bl	8000a84 <__aeabi_fsub>
 8003500:	1c03      	adds	r3, r0, #0
 8003502:	60fb      	str	r3, [r7, #12]
	return postDec * SHT2x_Ipow(10, digits);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	0019      	movs	r1, r3
 8003508:	200a      	movs	r0, #10
 800350a:	f000 f812 	bl	8003532 <SHT2x_Ipow>
 800350e:	0003      	movs	r3, r0
 8003510:	0018      	movs	r0, r3
 8003512:	f7fd fcc9 	bl	8000ea8 <__aeabi_ui2f>
 8003516:	1c03      	adds	r3, r0, #0
 8003518:	68f9      	ldr	r1, [r7, #12]
 800351a:	1c18      	adds	r0, r3, #0
 800351c:	f7fd f964 	bl	80007e8 <__aeabi_fmul>
 8003520:	1c03      	adds	r3, r0, #0
 8003522:	1c18      	adds	r0, r3, #0
 8003524:	f7fc fedc 	bl	80002e0 <__aeabi_f2uiz>
 8003528:	0003      	movs	r3, r0
}
 800352a:	0018      	movs	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	b004      	add	sp, #16
 8003530:	bd80      	pop	{r7, pc}

08003532 <SHT2x_Ipow>:
 * @brief Integer equivalent of pow() in math.h.
 * @param base Base.
 * @param power Power.
 * @return
 */
uint32_t SHT2x_Ipow(uint32_t base, uint32_t power) {
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]
	uint32_t temp = base;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 8003540:	2301      	movs	r3, #1
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	e006      	b.n	8003554 <SHT2x_Ipow+0x22>
		temp *= base;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4353      	muls	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3301      	adds	r3, #1
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d3f4      	bcc.n	8003546 <SHT2x_Ipow+0x14>
	return temp;
 800355c:	68fb      	ldr	r3, [r7, #12]
}
 800355e:	0018      	movs	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	b004      	add	sp, #16
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800356e:	1dfb      	adds	r3, r7, #7
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003574:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <HAL_Init+0x3c>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <HAL_Init+0x3c>)
 800357a:	2140      	movs	r1, #64	; 0x40
 800357c:	430a      	orrs	r2, r1
 800357e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003580:	2000      	movs	r0, #0
 8003582:	f000 f811 	bl	80035a8 <HAL_InitTick>
 8003586:	1e03      	subs	r3, r0, #0
 8003588:	d003      	beq.n	8003592 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800358a:	1dfb      	adds	r3, r7, #7
 800358c:	2201      	movs	r2, #1
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	e001      	b.n	8003596 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003592:	f7ff fd85 	bl	80030a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003596:	1dfb      	adds	r3, r7, #7
 8003598:	781b      	ldrb	r3, [r3, #0]
}
 800359a:	0018      	movs	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	b002      	add	sp, #8
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	40022000 	.word	0x40022000

080035a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035a8:	b590      	push	{r4, r7, lr}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035b0:	4b14      	ldr	r3, [pc, #80]	; (8003604 <HAL_InitTick+0x5c>)
 80035b2:	681c      	ldr	r4, [r3, #0]
 80035b4:	4b14      	ldr	r3, [pc, #80]	; (8003608 <HAL_InitTick+0x60>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	0019      	movs	r1, r3
 80035ba:	23fa      	movs	r3, #250	; 0xfa
 80035bc:	0098      	lsls	r0, r3, #2
 80035be:	f7fc fdb5 	bl	800012c <__udivsi3>
 80035c2:	0003      	movs	r3, r0
 80035c4:	0019      	movs	r1, r3
 80035c6:	0020      	movs	r0, r4
 80035c8:	f7fc fdb0 	bl	800012c <__udivsi3>
 80035cc:	0003      	movs	r3, r0
 80035ce:	0018      	movs	r0, r3
 80035d0:	f000 f905 	bl	80037de <HAL_SYSTICK_Config>
 80035d4:	1e03      	subs	r3, r0, #0
 80035d6:	d001      	beq.n	80035dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e00f      	b.n	80035fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d80b      	bhi.n	80035fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	2301      	movs	r3, #1
 80035e6:	425b      	negs	r3, r3
 80035e8:	2200      	movs	r2, #0
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 f8e2 	bl	80037b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_InitTick+0x64>)
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e000      	b.n	80035fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
}
 80035fc:	0018      	movs	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	b003      	add	sp, #12
 8003602:	bd90      	pop	{r4, r7, pc}
 8003604:	2000002c 	.word	0x2000002c
 8003608:	20000034 	.word	0x20000034
 800360c:	20000030 	.word	0x20000030

08003610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_IncTick+0x1c>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	001a      	movs	r2, r3
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_IncTick+0x20>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	18d2      	adds	r2, r2, r3
 8003620:	4b03      	ldr	r3, [pc, #12]	; (8003630 <HAL_IncTick+0x20>)
 8003622:	601a      	str	r2, [r3, #0]
}
 8003624:	46c0      	nop			; (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	20000034 	.word	0x20000034
 8003630:	200001a8 	.word	0x200001a8

08003634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  return uwTick;
 8003638:	4b02      	ldr	r3, [pc, #8]	; (8003644 <HAL_GetTick+0x10>)
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	0018      	movs	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	200001a8 	.word	0x200001a8

08003648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003650:	f7ff fff0 	bl	8003634 <HAL_GetTick>
 8003654:	0003      	movs	r3, r0
 8003656:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3301      	adds	r3, #1
 8003660:	d005      	beq.n	800366e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003662:	4b0a      	ldr	r3, [pc, #40]	; (800368c <HAL_Delay+0x44>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	001a      	movs	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	189b      	adds	r3, r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	f7ff ffe0 	bl	8003634 <HAL_GetTick>
 8003674:	0002      	movs	r2, r0
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	429a      	cmp	r2, r3
 800367e:	d8f7      	bhi.n	8003670 <HAL_Delay+0x28>
  {
  }
}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	46bd      	mov	sp, r7
 8003686:	b004      	add	sp, #16
 8003688:	bd80      	pop	{r7, pc}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	20000034 	.word	0x20000034

08003690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003690:	b590      	push	{r4, r7, lr}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	0002      	movs	r2, r0
 8003698:	6039      	str	r1, [r7, #0]
 800369a:	1dfb      	adds	r3, r7, #7
 800369c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800369e:	1dfb      	adds	r3, r7, #7
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b7f      	cmp	r3, #127	; 0x7f
 80036a4:	d828      	bhi.n	80036f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036a6:	4a2f      	ldr	r2, [pc, #188]	; (8003764 <__NVIC_SetPriority+0xd4>)
 80036a8:	1dfb      	adds	r3, r7, #7
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	b25b      	sxtb	r3, r3
 80036ae:	089b      	lsrs	r3, r3, #2
 80036b0:	33c0      	adds	r3, #192	; 0xc0
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	589b      	ldr	r3, [r3, r2]
 80036b6:	1dfa      	adds	r2, r7, #7
 80036b8:	7812      	ldrb	r2, [r2, #0]
 80036ba:	0011      	movs	r1, r2
 80036bc:	2203      	movs	r2, #3
 80036be:	400a      	ands	r2, r1
 80036c0:	00d2      	lsls	r2, r2, #3
 80036c2:	21ff      	movs	r1, #255	; 0xff
 80036c4:	4091      	lsls	r1, r2
 80036c6:	000a      	movs	r2, r1
 80036c8:	43d2      	mvns	r2, r2
 80036ca:	401a      	ands	r2, r3
 80036cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	019b      	lsls	r3, r3, #6
 80036d2:	22ff      	movs	r2, #255	; 0xff
 80036d4:	401a      	ands	r2, r3
 80036d6:	1dfb      	adds	r3, r7, #7
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	0018      	movs	r0, r3
 80036dc:	2303      	movs	r3, #3
 80036de:	4003      	ands	r3, r0
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036e4:	481f      	ldr	r0, [pc, #124]	; (8003764 <__NVIC_SetPriority+0xd4>)
 80036e6:	1dfb      	adds	r3, r7, #7
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	b25b      	sxtb	r3, r3
 80036ec:	089b      	lsrs	r3, r3, #2
 80036ee:	430a      	orrs	r2, r1
 80036f0:	33c0      	adds	r3, #192	; 0xc0
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80036f6:	e031      	b.n	800375c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036f8:	4a1b      	ldr	r2, [pc, #108]	; (8003768 <__NVIC_SetPriority+0xd8>)
 80036fa:	1dfb      	adds	r3, r7, #7
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	0019      	movs	r1, r3
 8003700:	230f      	movs	r3, #15
 8003702:	400b      	ands	r3, r1
 8003704:	3b08      	subs	r3, #8
 8003706:	089b      	lsrs	r3, r3, #2
 8003708:	3306      	adds	r3, #6
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	18d3      	adds	r3, r2, r3
 800370e:	3304      	adds	r3, #4
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	1dfa      	adds	r2, r7, #7
 8003714:	7812      	ldrb	r2, [r2, #0]
 8003716:	0011      	movs	r1, r2
 8003718:	2203      	movs	r2, #3
 800371a:	400a      	ands	r2, r1
 800371c:	00d2      	lsls	r2, r2, #3
 800371e:	21ff      	movs	r1, #255	; 0xff
 8003720:	4091      	lsls	r1, r2
 8003722:	000a      	movs	r2, r1
 8003724:	43d2      	mvns	r2, r2
 8003726:	401a      	ands	r2, r3
 8003728:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	019b      	lsls	r3, r3, #6
 800372e:	22ff      	movs	r2, #255	; 0xff
 8003730:	401a      	ands	r2, r3
 8003732:	1dfb      	adds	r3, r7, #7
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	0018      	movs	r0, r3
 8003738:	2303      	movs	r3, #3
 800373a:	4003      	ands	r3, r0
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003740:	4809      	ldr	r0, [pc, #36]	; (8003768 <__NVIC_SetPriority+0xd8>)
 8003742:	1dfb      	adds	r3, r7, #7
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	001c      	movs	r4, r3
 8003748:	230f      	movs	r3, #15
 800374a:	4023      	ands	r3, r4
 800374c:	3b08      	subs	r3, #8
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	430a      	orrs	r2, r1
 8003752:	3306      	adds	r3, #6
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	18c3      	adds	r3, r0, r3
 8003758:	3304      	adds	r3, #4
 800375a:	601a      	str	r2, [r3, #0]
}
 800375c:	46c0      	nop			; (mov r8, r8)
 800375e:	46bd      	mov	sp, r7
 8003760:	b003      	add	sp, #12
 8003762:	bd90      	pop	{r4, r7, pc}
 8003764:	e000e100 	.word	0xe000e100
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	1e5a      	subs	r2, r3, #1
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	045b      	lsls	r3, r3, #17
 800377c:	429a      	cmp	r2, r3
 800377e:	d301      	bcc.n	8003784 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003780:	2301      	movs	r3, #1
 8003782:	e010      	b.n	80037a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <SysTick_Config+0x44>)
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	3a01      	subs	r2, #1
 800378a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800378c:	2301      	movs	r3, #1
 800378e:	425b      	negs	r3, r3
 8003790:	2103      	movs	r1, #3
 8003792:	0018      	movs	r0, r3
 8003794:	f7ff ff7c 	bl	8003690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <SysTick_Config+0x44>)
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <SysTick_Config+0x44>)
 80037a0:	2207      	movs	r2, #7
 80037a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	0018      	movs	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b002      	add	sp, #8
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	e000e010 	.word	0xe000e010

080037b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	607a      	str	r2, [r7, #4]
 80037be:	210f      	movs	r1, #15
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	1c02      	adds	r2, r0, #0
 80037c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	187b      	adds	r3, r7, r1
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	b25b      	sxtb	r3, r3
 80037ce:	0011      	movs	r1, r2
 80037d0:	0018      	movs	r0, r3
 80037d2:	f7ff ff5d 	bl	8003690 <__NVIC_SetPriority>
}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	46bd      	mov	sp, r7
 80037da:	b004      	add	sp, #16
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7ff ffbf 	bl	800376c <SysTick_Config>
 80037ee:	0003      	movs	r3, r0
}
 80037f0:	0018      	movs	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b002      	add	sp, #8
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800380e:	e14f      	b.n	8003ab0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2101      	movs	r1, #1
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4091      	lsls	r1, r2
 800381a:	000a      	movs	r2, r1
 800381c:	4013      	ands	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d100      	bne.n	8003828 <HAL_GPIO_Init+0x30>
 8003826:	e140      	b.n	8003aaa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2203      	movs	r2, #3
 800382e:	4013      	ands	r3, r2
 8003830:	2b01      	cmp	r3, #1
 8003832:	d005      	beq.n	8003840 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2203      	movs	r2, #3
 800383a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800383c:	2b02      	cmp	r3, #2
 800383e:	d130      	bne.n	80038a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	2203      	movs	r2, #3
 800384c:	409a      	lsls	r2, r3
 800384e:	0013      	movs	r3, r2
 8003850:	43da      	mvns	r2, r3
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4013      	ands	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	409a      	lsls	r2, r3
 8003862:	0013      	movs	r3, r2
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003876:	2201      	movs	r2, #1
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	409a      	lsls	r2, r3
 800387c:	0013      	movs	r3, r2
 800387e:	43da      	mvns	r2, r3
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	2201      	movs	r2, #1
 800388e:	401a      	ands	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	409a      	lsls	r2, r3
 8003894:	0013      	movs	r3, r2
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2203      	movs	r2, #3
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d017      	beq.n	80038de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	2203      	movs	r2, #3
 80038ba:	409a      	lsls	r2, r3
 80038bc:	0013      	movs	r3, r2
 80038be:	43da      	mvns	r2, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4013      	ands	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	409a      	lsls	r2, r3
 80038d0:	0013      	movs	r3, r2
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2203      	movs	r2, #3
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d123      	bne.n	8003932 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	08da      	lsrs	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3208      	adds	r2, #8
 80038f2:	0092      	lsls	r2, r2, #2
 80038f4:	58d3      	ldr	r3, [r2, r3]
 80038f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2207      	movs	r2, #7
 80038fc:	4013      	ands	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	220f      	movs	r2, #15
 8003902:	409a      	lsls	r2, r3
 8003904:	0013      	movs	r3, r2
 8003906:	43da      	mvns	r2, r3
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4013      	ands	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2107      	movs	r1, #7
 8003916:	400b      	ands	r3, r1
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	409a      	lsls	r2, r3
 800391c:	0013      	movs	r3, r2
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	08da      	lsrs	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3208      	adds	r2, #8
 800392c:	0092      	lsls	r2, r2, #2
 800392e:	6939      	ldr	r1, [r7, #16]
 8003930:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	2203      	movs	r2, #3
 800393e:	409a      	lsls	r2, r3
 8003940:	0013      	movs	r3, r2
 8003942:	43da      	mvns	r2, r3
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4013      	ands	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2203      	movs	r2, #3
 8003950:	401a      	ands	r2, r3
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	409a      	lsls	r2, r3
 8003958:	0013      	movs	r3, r2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	23c0      	movs	r3, #192	; 0xc0
 800396c:	029b      	lsls	r3, r3, #10
 800396e:	4013      	ands	r3, r2
 8003970:	d100      	bne.n	8003974 <HAL_GPIO_Init+0x17c>
 8003972:	e09a      	b.n	8003aaa <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003974:	4b54      	ldr	r3, [pc, #336]	; (8003ac8 <HAL_GPIO_Init+0x2d0>)
 8003976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003978:	4b53      	ldr	r3, [pc, #332]	; (8003ac8 <HAL_GPIO_Init+0x2d0>)
 800397a:	2101      	movs	r1, #1
 800397c:	430a      	orrs	r2, r1
 800397e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003980:	4a52      	ldr	r2, [pc, #328]	; (8003acc <HAL_GPIO_Init+0x2d4>)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	089b      	lsrs	r3, r3, #2
 8003986:	3302      	adds	r3, #2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	589b      	ldr	r3, [r3, r2]
 800398c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2203      	movs	r2, #3
 8003992:	4013      	ands	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	220f      	movs	r2, #15
 8003998:	409a      	lsls	r2, r3
 800399a:	0013      	movs	r3, r2
 800399c:	43da      	mvns	r2, r3
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4013      	ands	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	23a0      	movs	r3, #160	; 0xa0
 80039a8:	05db      	lsls	r3, r3, #23
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d019      	beq.n	80039e2 <HAL_GPIO_Init+0x1ea>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a47      	ldr	r2, [pc, #284]	; (8003ad0 <HAL_GPIO_Init+0x2d8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <HAL_GPIO_Init+0x1e6>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a46      	ldr	r2, [pc, #280]	; (8003ad4 <HAL_GPIO_Init+0x2dc>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00d      	beq.n	80039da <HAL_GPIO_Init+0x1e2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a45      	ldr	r2, [pc, #276]	; (8003ad8 <HAL_GPIO_Init+0x2e0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d007      	beq.n	80039d6 <HAL_GPIO_Init+0x1de>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a44      	ldr	r2, [pc, #272]	; (8003adc <HAL_GPIO_Init+0x2e4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d101      	bne.n	80039d2 <HAL_GPIO_Init+0x1da>
 80039ce:	2305      	movs	r3, #5
 80039d0:	e008      	b.n	80039e4 <HAL_GPIO_Init+0x1ec>
 80039d2:	2306      	movs	r3, #6
 80039d4:	e006      	b.n	80039e4 <HAL_GPIO_Init+0x1ec>
 80039d6:	2303      	movs	r3, #3
 80039d8:	e004      	b.n	80039e4 <HAL_GPIO_Init+0x1ec>
 80039da:	2302      	movs	r3, #2
 80039dc:	e002      	b.n	80039e4 <HAL_GPIO_Init+0x1ec>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <HAL_GPIO_Init+0x1ec>
 80039e2:	2300      	movs	r3, #0
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	2103      	movs	r1, #3
 80039e8:	400a      	ands	r2, r1
 80039ea:	0092      	lsls	r2, r2, #2
 80039ec:	4093      	lsls	r3, r2
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039f4:	4935      	ldr	r1, [pc, #212]	; (8003acc <HAL_GPIO_Init+0x2d4>)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	3302      	adds	r3, #2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a02:	4b37      	ldr	r3, [pc, #220]	; (8003ae0 <HAL_GPIO_Init+0x2e8>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	43da      	mvns	r2, r3
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	035b      	lsls	r3, r3, #13
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a26:	4b2e      	ldr	r3, [pc, #184]	; (8003ae0 <HAL_GPIO_Init+0x2e8>)
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003a2c:	4b2c      	ldr	r3, [pc, #176]	; (8003ae0 <HAL_GPIO_Init+0x2e8>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	43da      	mvns	r2, r3
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	2380      	movs	r3, #128	; 0x80
 8003a42:	039b      	lsls	r3, r3, #14
 8003a44:	4013      	ands	r3, r2
 8003a46:	d003      	beq.n	8003a50 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a50:	4b23      	ldr	r3, [pc, #140]	; (8003ae0 <HAL_GPIO_Init+0x2e8>)
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003a56:	4b22      	ldr	r3, [pc, #136]	; (8003ae0 <HAL_GPIO_Init+0x2e8>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	43da      	mvns	r2, r3
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	2380      	movs	r3, #128	; 0x80
 8003a6c:	029b      	lsls	r3, r3, #10
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a7a:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <HAL_GPIO_Init+0x2e8>)
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a80:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <HAL_GPIO_Init+0x2e8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	43da      	mvns	r2, r3
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	2380      	movs	r3, #128	; 0x80
 8003a96:	025b      	lsls	r3, r3, #9
 8003a98:	4013      	ands	r3, r2
 8003a9a:	d003      	beq.n	8003aa4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003aa4:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <HAL_GPIO_Init+0x2e8>)
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	3301      	adds	r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	40da      	lsrs	r2, r3
 8003ab8:	1e13      	subs	r3, r2, #0
 8003aba:	d000      	beq.n	8003abe <HAL_GPIO_Init+0x2c6>
 8003abc:	e6a8      	b.n	8003810 <HAL_GPIO_Init+0x18>
  }
}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	46c0      	nop			; (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b006      	add	sp, #24
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	40010000 	.word	0x40010000
 8003ad0:	50000400 	.word	0x50000400
 8003ad4:	50000800 	.word	0x50000800
 8003ad8:	50000c00 	.word	0x50000c00
 8003adc:	50001c00 	.word	0x50001c00
 8003ae0:	40010400 	.word	0x40010400

08003ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e082      	b.n	8003bfc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2241      	movs	r2, #65	; 0x41
 8003afa:	5c9b      	ldrb	r3, [r3, r2]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d107      	bne.n	8003b12 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2240      	movs	r2, #64	; 0x40
 8003b06:	2100      	movs	r1, #0
 8003b08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f7ff fadb 	bl	80030c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2241      	movs	r2, #65	; 0x41
 8003b16:	2124      	movs	r1, #36	; 0x24
 8003b18:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2101      	movs	r1, #1
 8003b26:	438a      	bics	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4934      	ldr	r1, [pc, #208]	; (8003c04 <HAL_I2C_Init+0x120>)
 8003b34:	400a      	ands	r2, r1
 8003b36:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4931      	ldr	r1, [pc, #196]	; (8003c08 <HAL_I2C_Init+0x124>)
 8003b44:	400a      	ands	r2, r1
 8003b46:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d108      	bne.n	8003b62 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2180      	movs	r1, #128	; 0x80
 8003b5a:	0209      	lsls	r1, r1, #8
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	e007      	b.n	8003b72 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2184      	movs	r1, #132	; 0x84
 8003b6c:	0209      	lsls	r1, r1, #8
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d104      	bne.n	8003b84 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2280      	movs	r2, #128	; 0x80
 8003b80:	0112      	lsls	r2, r2, #4
 8003b82:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	491f      	ldr	r1, [pc, #124]	; (8003c0c <HAL_I2C_Init+0x128>)
 8003b90:	430a      	orrs	r2, r1
 8003b92:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	491a      	ldr	r1, [pc, #104]	; (8003c08 <HAL_I2C_Init+0x124>)
 8003ba0:	400a      	ands	r2, r1
 8003ba2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69d9      	ldr	r1, [r3, #28]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1a      	ldr	r2, [r3, #32]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2101      	movs	r1, #1
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2241      	movs	r2, #65	; 0x41
 8003be8:	2120      	movs	r1, #32
 8003bea:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2242      	movs	r2, #66	; 0x42
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b002      	add	sp, #8
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	f0ffffff 	.word	0xf0ffffff
 8003c08:	ffff7fff 	.word	0xffff7fff
 8003c0c:	02008000 	.word	0x02008000

08003c10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c10:	b590      	push	{r4, r7, lr}
 8003c12:	b089      	sub	sp, #36	; 0x24
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	0008      	movs	r0, r1
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	230a      	movs	r3, #10
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	1c02      	adds	r2, r0, #0
 8003c24:	801a      	strh	r2, [r3, #0]
 8003c26:	2308      	movs	r3, #8
 8003c28:	18fb      	adds	r3, r7, r3
 8003c2a:	1c0a      	adds	r2, r1, #0
 8003c2c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2241      	movs	r2, #65	; 0x41
 8003c32:	5c9b      	ldrb	r3, [r3, r2]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	d000      	beq.n	8003c3c <HAL_I2C_Master_Transmit+0x2c>
 8003c3a:	e0e7      	b.n	8003e0c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2240      	movs	r2, #64	; 0x40
 8003c40:	5c9b      	ldrb	r3, [r3, r2]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_I2C_Master_Transmit+0x3a>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e0e1      	b.n	8003e0e <HAL_I2C_Master_Transmit+0x1fe>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2240      	movs	r2, #64	; 0x40
 8003c4e:	2101      	movs	r1, #1
 8003c50:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c52:	f7ff fcef 	bl	8003634 <HAL_GetTick>
 8003c56:	0003      	movs	r3, r0
 8003c58:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	0219      	lsls	r1, r3, #8
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	2319      	movs	r3, #25
 8003c66:	2201      	movs	r2, #1
 8003c68:	f000 fb1e 	bl	80042a8 <I2C_WaitOnFlagUntilTimeout>
 8003c6c:	1e03      	subs	r3, r0, #0
 8003c6e:	d001      	beq.n	8003c74 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0cc      	b.n	8003e0e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2241      	movs	r2, #65	; 0x41
 8003c78:	2121      	movs	r1, #33	; 0x21
 8003c7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2242      	movs	r2, #66	; 0x42
 8003c80:	2110      	movs	r1, #16
 8003c82:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2208      	movs	r2, #8
 8003c94:	18ba      	adds	r2, r7, r2
 8003c96:	8812      	ldrh	r2, [r2, #0]
 8003c98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2bff      	cmp	r3, #255	; 0xff
 8003ca8:	d911      	bls.n	8003cce <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	22ff      	movs	r2, #255	; 0xff
 8003cae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	045c      	lsls	r4, r3, #17
 8003cba:	230a      	movs	r3, #10
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	8819      	ldrh	r1, [r3, #0]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	4b55      	ldr	r3, [pc, #340]	; (8003e18 <HAL_I2C_Master_Transmit+0x208>)
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	0023      	movs	r3, r4
 8003cc8:	f000 fd48 	bl	800475c <I2C_TransferConfig>
 8003ccc:	e075      	b.n	8003dba <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	2380      	movs	r3, #128	; 0x80
 8003ce0:	049c      	lsls	r4, r3, #18
 8003ce2:	230a      	movs	r3, #10
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	8819      	ldrh	r1, [r3, #0]
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	4b4b      	ldr	r3, [pc, #300]	; (8003e18 <HAL_I2C_Master_Transmit+0x208>)
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	0023      	movs	r3, r4
 8003cf0:	f000 fd34 	bl	800475c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003cf4:	e061      	b.n	8003dba <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f000 fb21 	bl	8004344 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d02:	1e03      	subs	r3, r0, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e081      	b.n	8003e0e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	781a      	ldrb	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d03a      	beq.n	8003dba <HAL_I2C_Master_Transmit+0x1aa>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d136      	bne.n	8003dba <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	0013      	movs	r3, r2
 8003d56:	2200      	movs	r2, #0
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	f000 faa5 	bl	80042a8 <I2C_WaitOnFlagUntilTimeout>
 8003d5e:	1e03      	subs	r3, r0, #0
 8003d60:	d001      	beq.n	8003d66 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e053      	b.n	8003e0e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2bff      	cmp	r3, #255	; 0xff
 8003d6e:	d911      	bls.n	8003d94 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	22ff      	movs	r2, #255	; 0xff
 8003d74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	045c      	lsls	r4, r3, #17
 8003d80:	230a      	movs	r3, #10
 8003d82:	18fb      	adds	r3, r7, r3
 8003d84:	8819      	ldrh	r1, [r3, #0]
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	0023      	movs	r3, r4
 8003d8e:	f000 fce5 	bl	800475c <I2C_TransferConfig>
 8003d92:	e012      	b.n	8003dba <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	049c      	lsls	r4, r3, #18
 8003da8:	230a      	movs	r3, #10
 8003daa:	18fb      	adds	r3, r7, r3
 8003dac:	8819      	ldrh	r1, [r3, #0]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	2300      	movs	r3, #0
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	0023      	movs	r3, r4
 8003db6:	f000 fcd1 	bl	800475c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d198      	bne.n	8003cf6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f000 fb00 	bl	80043d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dd0:	1e03      	subs	r3, r0, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e01a      	b.n	8003e0e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	490c      	ldr	r1, [pc, #48]	; (8003e1c <HAL_I2C_Master_Transmit+0x20c>)
 8003dec:	400a      	ands	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2241      	movs	r2, #65	; 0x41
 8003df4:	2120      	movs	r1, #32
 8003df6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2242      	movs	r2, #66	; 0x42
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2240      	movs	r2, #64	; 0x40
 8003e04:	2100      	movs	r1, #0
 8003e06:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e000      	b.n	8003e0e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
  }
}
 8003e0e:	0018      	movs	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	b007      	add	sp, #28
 8003e14:	bd90      	pop	{r4, r7, pc}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	80002000 	.word	0x80002000
 8003e1c:	fe00e800 	.word	0xfe00e800

08003e20 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	b089      	sub	sp, #36	; 0x24
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	0008      	movs	r0, r1
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	0019      	movs	r1, r3
 8003e2e:	230a      	movs	r3, #10
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	1c02      	adds	r2, r0, #0
 8003e34:	801a      	strh	r2, [r3, #0]
 8003e36:	2308      	movs	r3, #8
 8003e38:	18fb      	adds	r3, r7, r3
 8003e3a:	1c0a      	adds	r2, r1, #0
 8003e3c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2241      	movs	r2, #65	; 0x41
 8003e42:	5c9b      	ldrb	r3, [r3, r2]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	d000      	beq.n	8003e4c <HAL_I2C_Master_Receive+0x2c>
 8003e4a:	e0e8      	b.n	800401e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2240      	movs	r2, #64	; 0x40
 8003e50:	5c9b      	ldrb	r3, [r3, r2]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_I2C_Master_Receive+0x3a>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e0e2      	b.n	8004020 <HAL_I2C_Master_Receive+0x200>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2240      	movs	r2, #64	; 0x40
 8003e5e:	2101      	movs	r1, #1
 8003e60:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e62:	f7ff fbe7 	bl	8003634 <HAL_GetTick>
 8003e66:	0003      	movs	r3, r0
 8003e68:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	0219      	lsls	r1, r3, #8
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	2319      	movs	r3, #25
 8003e76:	2201      	movs	r2, #1
 8003e78:	f000 fa16 	bl	80042a8 <I2C_WaitOnFlagUntilTimeout>
 8003e7c:	1e03      	subs	r3, r0, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0cd      	b.n	8004020 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2241      	movs	r2, #65	; 0x41
 8003e88:	2122      	movs	r1, #34	; 0x22
 8003e8a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2242      	movs	r2, #66	; 0x42
 8003e90:	2110      	movs	r1, #16
 8003e92:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	18ba      	adds	r2, r7, r2
 8003ea6:	8812      	ldrh	r2, [r2, #0]
 8003ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2bff      	cmp	r3, #255	; 0xff
 8003eb8:	d911      	bls.n	8003ede <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	22ff      	movs	r2, #255	; 0xff
 8003ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	045c      	lsls	r4, r3, #17
 8003eca:	230a      	movs	r3, #10
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	8819      	ldrh	r1, [r3, #0]
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	4b55      	ldr	r3, [pc, #340]	; (8004028 <HAL_I2C_Master_Receive+0x208>)
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	0023      	movs	r3, r4
 8003ed8:	f000 fc40 	bl	800475c <I2C_TransferConfig>
 8003edc:	e076      	b.n	8003fcc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	2380      	movs	r3, #128	; 0x80
 8003ef0:	049c      	lsls	r4, r3, #18
 8003ef2:	230a      	movs	r3, #10
 8003ef4:	18fb      	adds	r3, r7, r3
 8003ef6:	8819      	ldrh	r1, [r3, #0]
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	4b4b      	ldr	r3, [pc, #300]	; (8004028 <HAL_I2C_Master_Receive+0x208>)
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	0023      	movs	r3, r4
 8003f00:	f000 fc2c 	bl	800475c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003f04:	e062      	b.n	8003fcc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f000 faa3 	bl	8004458 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f12:	1e03      	subs	r3, r0, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e082      	b.n	8004020 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d03a      	beq.n	8003fcc <HAL_I2C_Master_Receive+0x1ac>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d136      	bne.n	8003fcc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	0013      	movs	r3, r2
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2180      	movs	r1, #128	; 0x80
 8003f6c:	f000 f99c 	bl	80042a8 <I2C_WaitOnFlagUntilTimeout>
 8003f70:	1e03      	subs	r3, r0, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e053      	b.n	8004020 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2bff      	cmp	r3, #255	; 0xff
 8003f80:	d911      	bls.n	8003fa6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	22ff      	movs	r2, #255	; 0xff
 8003f86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	2380      	movs	r3, #128	; 0x80
 8003f90:	045c      	lsls	r4, r3, #17
 8003f92:	230a      	movs	r3, #10
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	8819      	ldrh	r1, [r3, #0]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	0023      	movs	r3, r4
 8003fa0:	f000 fbdc 	bl	800475c <I2C_TransferConfig>
 8003fa4:	e012      	b.n	8003fcc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	049c      	lsls	r4, r3, #18
 8003fba:	230a      	movs	r3, #10
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	8819      	ldrh	r1, [r3, #0]
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	0023      	movs	r3, r4
 8003fc8:	f000 fbc8 	bl	800475c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d197      	bne.n	8003f06 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f000 f9f7 	bl	80043d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fe2:	1e03      	subs	r3, r0, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e01a      	b.n	8004020 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	490b      	ldr	r1, [pc, #44]	; (800402c <HAL_I2C_Master_Receive+0x20c>)
 8003ffe:	400a      	ands	r2, r1
 8004000:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2241      	movs	r2, #65	; 0x41
 8004006:	2120      	movs	r1, #32
 8004008:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2242      	movs	r2, #66	; 0x42
 800400e:	2100      	movs	r1, #0
 8004010:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2240      	movs	r2, #64	; 0x40
 8004016:	2100      	movs	r1, #0
 8004018:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	e000      	b.n	8004020 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800401e:	2302      	movs	r3, #2
  }
}
 8004020:	0018      	movs	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	b007      	add	sp, #28
 8004026:	bd90      	pop	{r4, r7, pc}
 8004028:	80002400 	.word	0x80002400
 800402c:	fe00e800 	.word	0xfe00e800

08004030 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	230a      	movs	r3, #10
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	1c0a      	adds	r2, r1, #0
 8004042:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2241      	movs	r2, #65	; 0x41
 800404c:	5c9b      	ldrb	r3, [r3, r2]
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b20      	cmp	r3, #32
 8004052:	d000      	beq.n	8004056 <HAL_I2C_IsDeviceReady+0x26>
 8004054:	e0fd      	b.n	8004252 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699a      	ldr	r2, [r3, #24]
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	401a      	ands	r2, r3
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	429a      	cmp	r2, r3
 8004068:	d101      	bne.n	800406e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800406a:	2302      	movs	r3, #2
 800406c:	e0f2      	b.n	8004254 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2240      	movs	r2, #64	; 0x40
 8004072:	5c9b      	ldrb	r3, [r3, r2]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_I2C_IsDeviceReady+0x4c>
 8004078:	2302      	movs	r3, #2
 800407a:	e0eb      	b.n	8004254 <HAL_I2C_IsDeviceReady+0x224>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2240      	movs	r2, #64	; 0x40
 8004080:	2101      	movs	r1, #1
 8004082:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2241      	movs	r2, #65	; 0x41
 8004088:	2124      	movs	r1, #36	; 0x24
 800408a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d107      	bne.n	80040aa <HAL_I2C_IsDeviceReady+0x7a>
 800409a:	230a      	movs	r3, #10
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	059b      	lsls	r3, r3, #22
 80040a2:	0d9b      	lsrs	r3, r3, #22
 80040a4:	4a6d      	ldr	r2, [pc, #436]	; (800425c <HAL_I2C_IsDeviceReady+0x22c>)
 80040a6:	431a      	orrs	r2, r3
 80040a8:	e006      	b.n	80040b8 <HAL_I2C_IsDeviceReady+0x88>
 80040aa:	230a      	movs	r3, #10
 80040ac:	18fb      	adds	r3, r7, r3
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	059b      	lsls	r3, r3, #22
 80040b2:	0d9b      	lsrs	r3, r3, #22
 80040b4:	4a6a      	ldr	r2, [pc, #424]	; (8004260 <HAL_I2C_IsDeviceReady+0x230>)
 80040b6:	431a      	orrs	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80040be:	f7ff fab9 	bl	8003634 <HAL_GetTick>
 80040c2:	0003      	movs	r3, r0
 80040c4:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	2220      	movs	r2, #32
 80040ce:	4013      	ands	r3, r2
 80040d0:	3b20      	subs	r3, #32
 80040d2:	425a      	negs	r2, r3
 80040d4:	4153      	adcs	r3, r2
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	231f      	movs	r3, #31
 80040da:	18fb      	adds	r3, r7, r3
 80040dc:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	2210      	movs	r2, #16
 80040e6:	4013      	ands	r3, r2
 80040e8:	3b10      	subs	r3, #16
 80040ea:	425a      	negs	r2, r3
 80040ec:	4153      	adcs	r3, r2
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	231e      	movs	r3, #30
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80040f6:	e035      	b.n	8004164 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	3301      	adds	r3, #1
 80040fc:	d01a      	beq.n	8004134 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040fe:	f7ff fa99 	bl	8003634 <HAL_GetTick>
 8004102:	0002      	movs	r2, r0
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d302      	bcc.n	8004114 <HAL_I2C_IsDeviceReady+0xe4>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10f      	bne.n	8004134 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2241      	movs	r2, #65	; 0x41
 8004118:	2120      	movs	r1, #32
 800411a:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004120:	2220      	movs	r2, #32
 8004122:	431a      	orrs	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2240      	movs	r2, #64	; 0x40
 800412c:	2100      	movs	r1, #0
 800412e:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e08f      	b.n	8004254 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2220      	movs	r2, #32
 800413c:	4013      	ands	r3, r2
 800413e:	3b20      	subs	r3, #32
 8004140:	425a      	negs	r2, r3
 8004142:	4153      	adcs	r3, r2
 8004144:	b2da      	uxtb	r2, r3
 8004146:	231f      	movs	r3, #31
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	2210      	movs	r2, #16
 8004154:	4013      	ands	r3, r2
 8004156:	3b10      	subs	r3, #16
 8004158:	425a      	negs	r2, r3
 800415a:	4153      	adcs	r3, r2
 800415c:	b2da      	uxtb	r2, r3
 800415e:	231e      	movs	r3, #30
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004164:	231f      	movs	r3, #31
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d104      	bne.n	8004178 <HAL_I2C_IsDeviceReady+0x148>
 800416e:	231e      	movs	r3, #30
 8004170:	18fb      	adds	r3, r7, r3
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0bf      	beq.n	80040f8 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2210      	movs	r2, #16
 8004180:	4013      	ands	r3, r2
 8004182:	2b10      	cmp	r3, #16
 8004184:	d01a      	beq.n	80041bc <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	0013      	movs	r3, r2
 8004190:	2200      	movs	r2, #0
 8004192:	2120      	movs	r1, #32
 8004194:	f000 f888 	bl	80042a8 <I2C_WaitOnFlagUntilTimeout>
 8004198:	1e03      	subs	r3, r0, #0
 800419a:	d001      	beq.n	80041a0 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e059      	b.n	8004254 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2220      	movs	r2, #32
 80041a6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2241      	movs	r2, #65	; 0x41
 80041ac:	2120      	movs	r1, #32
 80041ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2240      	movs	r2, #64	; 0x40
 80041b4:	2100      	movs	r1, #0
 80041b6:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	e04b      	b.n	8004254 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	0013      	movs	r3, r2
 80041c6:	2200      	movs	r2, #0
 80041c8:	2120      	movs	r1, #32
 80041ca:	f000 f86d 	bl	80042a8 <I2C_WaitOnFlagUntilTimeout>
 80041ce:	1e03      	subs	r3, r0, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e03e      	b.n	8004254 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2210      	movs	r2, #16
 80041dc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2220      	movs	r2, #32
 80041e4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d119      	bne.n	8004222 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	01c9      	lsls	r1, r1, #7
 80041fc:	430a      	orrs	r2, r1
 80041fe:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	0013      	movs	r3, r2
 800420a:	2200      	movs	r2, #0
 800420c:	2120      	movs	r1, #32
 800420e:	f000 f84b 	bl	80042a8 <I2C_WaitOnFlagUntilTimeout>
 8004212:	1e03      	subs	r3, r0, #0
 8004214:	d001      	beq.n	800421a <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e01c      	b.n	8004254 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2220      	movs	r2, #32
 8004220:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	3301      	adds	r3, #1
 8004226:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	429a      	cmp	r2, r3
 800422e:	d900      	bls.n	8004232 <HAL_I2C_IsDeviceReady+0x202>
 8004230:	e72f      	b.n	8004092 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2241      	movs	r2, #65	; 0x41
 8004236:	2120      	movs	r1, #32
 8004238:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	2220      	movs	r2, #32
 8004240:	431a      	orrs	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2240      	movs	r2, #64	; 0x40
 800424a:	2100      	movs	r1, #0
 800424c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004252:	2302      	movs	r3, #2
  }
}
 8004254:	0018      	movs	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	b008      	add	sp, #32
 800425a:	bd80      	pop	{r7, pc}
 800425c:	02002000 	.word	0x02002000
 8004260:	02002800 	.word	0x02002800

08004264 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2202      	movs	r2, #2
 8004274:	4013      	ands	r3, r2
 8004276:	2b02      	cmp	r3, #2
 8004278:	d103      	bne.n	8004282 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2200      	movs	r2, #0
 8004280:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	2201      	movs	r2, #1
 800428a:	4013      	ands	r3, r2
 800428c:	2b01      	cmp	r3, #1
 800428e:	d007      	beq.n	80042a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2101      	movs	r1, #1
 800429c:	430a      	orrs	r2, r1
 800429e:	619a      	str	r2, [r3, #24]
  }
}
 80042a0:	46c0      	nop			; (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b002      	add	sp, #8
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	1dfb      	adds	r3, r7, #7
 80042b6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b8:	e030      	b.n	800431c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	3301      	adds	r3, #1
 80042be:	d02d      	beq.n	800431c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c0:	f7ff f9b8 	bl	8003634 <HAL_GetTick>
 80042c4:	0002      	movs	r2, r0
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d302      	bcc.n	80042d6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d122      	bne.n	800431c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	4013      	ands	r3, r2
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	425a      	negs	r2, r3
 80042e6:	4153      	adcs	r3, r2
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	001a      	movs	r2, r3
 80042ec:	1dfb      	adds	r3, r7, #7
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d113      	bne.n	800431c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f8:	2220      	movs	r2, #32
 80042fa:	431a      	orrs	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2241      	movs	r2, #65	; 0x41
 8004304:	2120      	movs	r1, #32
 8004306:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2242      	movs	r2, #66	; 0x42
 800430c:	2100      	movs	r1, #0
 800430e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2240      	movs	r2, #64	; 0x40
 8004314:	2100      	movs	r1, #0
 8004316:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e00f      	b.n	800433c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	4013      	ands	r3, r2
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	425a      	negs	r2, r3
 800432c:	4153      	adcs	r3, r2
 800432e:	b2db      	uxtb	r3, r3
 8004330:	001a      	movs	r2, r3
 8004332:	1dfb      	adds	r3, r7, #7
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d0bf      	beq.n	80042ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	0018      	movs	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	b004      	add	sp, #16
 8004342:	bd80      	pop	{r7, pc}

08004344 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004350:	e032      	b.n	80043b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	0018      	movs	r0, r3
 800435a:	f000 f8ff 	bl	800455c <I2C_IsErrorOccurred>
 800435e:	1e03      	subs	r3, r0, #0
 8004360:	d001      	beq.n	8004366 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e030      	b.n	80043c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	3301      	adds	r3, #1
 800436a:	d025      	beq.n	80043b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800436c:	f7ff f962 	bl	8003634 <HAL_GetTick>
 8004370:	0002      	movs	r2, r0
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	429a      	cmp	r2, r3
 800437a:	d302      	bcc.n	8004382 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d11a      	bne.n	80043b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2202      	movs	r2, #2
 800438a:	4013      	ands	r3, r2
 800438c:	2b02      	cmp	r3, #2
 800438e:	d013      	beq.n	80043b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004394:	2220      	movs	r2, #32
 8004396:	431a      	orrs	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2241      	movs	r2, #65	; 0x41
 80043a0:	2120      	movs	r1, #32
 80043a2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2242      	movs	r2, #66	; 0x42
 80043a8:	2100      	movs	r1, #0
 80043aa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2240      	movs	r2, #64	; 0x40
 80043b0:	2100      	movs	r1, #0
 80043b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e007      	b.n	80043c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	2202      	movs	r2, #2
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d1c5      	bne.n	8004352 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	0018      	movs	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b004      	add	sp, #16
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043dc:	e02f      	b.n	800443e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	0018      	movs	r0, r3
 80043e6:	f000 f8b9 	bl	800455c <I2C_IsErrorOccurred>
 80043ea:	1e03      	subs	r3, r0, #0
 80043ec:	d001      	beq.n	80043f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e02d      	b.n	800444e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f2:	f7ff f91f 	bl	8003634 <HAL_GetTick>
 80043f6:	0002      	movs	r2, r0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d302      	bcc.n	8004408 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d11a      	bne.n	800443e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2220      	movs	r2, #32
 8004410:	4013      	ands	r3, r2
 8004412:	2b20      	cmp	r3, #32
 8004414:	d013      	beq.n	800443e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	2220      	movs	r2, #32
 800441c:	431a      	orrs	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2241      	movs	r2, #65	; 0x41
 8004426:	2120      	movs	r1, #32
 8004428:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2242      	movs	r2, #66	; 0x42
 800442e:	2100      	movs	r1, #0
 8004430:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2240      	movs	r2, #64	; 0x40
 8004436:	2100      	movs	r1, #0
 8004438:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e007      	b.n	800444e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	2220      	movs	r2, #32
 8004446:	4013      	ands	r3, r2
 8004448:	2b20      	cmp	r3, #32
 800444a:	d1c8      	bne.n	80043de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	0018      	movs	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	b004      	add	sp, #16
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004464:	e06b      	b.n	800453e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	0018      	movs	r0, r3
 800446e:	f000 f875 	bl	800455c <I2C_IsErrorOccurred>
 8004472:	1e03      	subs	r3, r0, #0
 8004474:	d001      	beq.n	800447a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e069      	b.n	800454e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2220      	movs	r2, #32
 8004482:	4013      	ands	r3, r2
 8004484:	2b20      	cmp	r3, #32
 8004486:	d138      	bne.n	80044fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	2204      	movs	r2, #4
 8004490:	4013      	ands	r3, r2
 8004492:	2b04      	cmp	r3, #4
 8004494:	d105      	bne.n	80044a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	e055      	b.n	800454e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	2210      	movs	r2, #16
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d107      	bne.n	80044c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2210      	movs	r2, #16
 80044b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2204      	movs	r2, #4
 80044bc:	645a      	str	r2, [r3, #68]	; 0x44
 80044be:	e002      	b.n	80044c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2220      	movs	r2, #32
 80044cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	491f      	ldr	r1, [pc, #124]	; (8004558 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80044da:	400a      	ands	r2, r1
 80044dc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2241      	movs	r2, #65	; 0x41
 80044e2:	2120      	movs	r1, #32
 80044e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2242      	movs	r2, #66	; 0x42
 80044ea:	2100      	movs	r1, #0
 80044ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2240      	movs	r2, #64	; 0x40
 80044f2:	2100      	movs	r1, #0
 80044f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e029      	b.n	800454e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fa:	f7ff f89b 	bl	8003634 <HAL_GetTick>
 80044fe:	0002      	movs	r2, r0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	429a      	cmp	r2, r3
 8004508:	d302      	bcc.n	8004510 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d116      	bne.n	800453e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	2204      	movs	r2, #4
 8004518:	4013      	ands	r3, r2
 800451a:	2b04      	cmp	r3, #4
 800451c:	d00f      	beq.n	800453e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004522:	2220      	movs	r2, #32
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2241      	movs	r2, #65	; 0x41
 800452e:	2120      	movs	r1, #32
 8004530:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2240      	movs	r2, #64	; 0x40
 8004536:	2100      	movs	r1, #0
 8004538:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e007      	b.n	800454e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2204      	movs	r2, #4
 8004546:	4013      	ands	r3, r2
 8004548:	2b04      	cmp	r3, #4
 800454a:	d18c      	bne.n	8004466 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	0018      	movs	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	b004      	add	sp, #16
 8004554:	bd80      	pop	{r7, pc}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	fe00e800 	.word	0xfe00e800

0800455c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800455c:	b590      	push	{r4, r7, lr}
 800455e:	b08b      	sub	sp, #44	; 0x2c
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004568:	2327      	movs	r3, #39	; 0x27
 800456a:	18fb      	adds	r3, r7, r3
 800456c:	2200      	movs	r2, #0
 800456e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2210      	movs	r2, #16
 8004584:	4013      	ands	r3, r2
 8004586:	d100      	bne.n	800458a <I2C_IsErrorOccurred+0x2e>
 8004588:	e082      	b.n	8004690 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2210      	movs	r2, #16
 8004590:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004592:	e060      	b.n	8004656 <I2C_IsErrorOccurred+0xfa>
 8004594:	2427      	movs	r4, #39	; 0x27
 8004596:	193b      	adds	r3, r7, r4
 8004598:	193a      	adds	r2, r7, r4
 800459a:	7812      	ldrb	r2, [r2, #0]
 800459c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	3301      	adds	r3, #1
 80045a2:	d058      	beq.n	8004656 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045a4:	f7ff f846 	bl	8003634 <HAL_GetTick>
 80045a8:	0002      	movs	r2, r0
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d306      	bcc.n	80045c2 <I2C_IsErrorOccurred+0x66>
 80045b4:	193b      	adds	r3, r7, r4
 80045b6:	193a      	adds	r2, r7, r4
 80045b8:	7812      	ldrb	r2, [r2, #0]
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d149      	bne.n	8004656 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	2380      	movs	r3, #128	; 0x80
 80045ca:	01db      	lsls	r3, r3, #7
 80045cc:	4013      	ands	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80045d0:	2013      	movs	r0, #19
 80045d2:	183b      	adds	r3, r7, r0
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	2142      	movs	r1, #66	; 0x42
 80045d8:	5c52      	ldrb	r2, [r2, r1]
 80045da:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	2380      	movs	r3, #128	; 0x80
 80045e4:	021b      	lsls	r3, r3, #8
 80045e6:	401a      	ands	r2, r3
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d126      	bne.n	800463e <I2C_IsErrorOccurred+0xe2>
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	2380      	movs	r3, #128	; 0x80
 80045f4:	01db      	lsls	r3, r3, #7
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d021      	beq.n	800463e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80045fa:	183b      	adds	r3, r7, r0
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b20      	cmp	r3, #32
 8004600:	d01d      	beq.n	800463e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2180      	movs	r1, #128	; 0x80
 800460e:	01c9      	lsls	r1, r1, #7
 8004610:	430a      	orrs	r2, r1
 8004612:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004614:	f7ff f80e 	bl	8003634 <HAL_GetTick>
 8004618:	0003      	movs	r3, r0
 800461a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800461c:	e00f      	b.n	800463e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800461e:	f7ff f809 	bl	8003634 <HAL_GetTick>
 8004622:	0002      	movs	r2, r0
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b19      	cmp	r3, #25
 800462a:	d908      	bls.n	800463e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	2220      	movs	r2, #32
 8004630:	4313      	orrs	r3, r2
 8004632:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004634:	2327      	movs	r3, #39	; 0x27
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	2201      	movs	r2, #1
 800463a:	701a      	strb	r2, [r3, #0]

              break;
 800463c:	e00b      	b.n	8004656 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	2220      	movs	r2, #32
 8004646:	4013      	ands	r3, r2
 8004648:	2127      	movs	r1, #39	; 0x27
 800464a:	187a      	adds	r2, r7, r1
 800464c:	1879      	adds	r1, r7, r1
 800464e:	7809      	ldrb	r1, [r1, #0]
 8004650:	7011      	strb	r1, [r2, #0]
 8004652:	2b20      	cmp	r3, #32
 8004654:	d1e3      	bne.n	800461e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	2220      	movs	r2, #32
 800465e:	4013      	ands	r3, r2
 8004660:	2b20      	cmp	r3, #32
 8004662:	d004      	beq.n	800466e <I2C_IsErrorOccurred+0x112>
 8004664:	2327      	movs	r3, #39	; 0x27
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d092      	beq.n	8004594 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800466e:	2327      	movs	r3, #39	; 0x27
 8004670:	18fb      	adds	r3, r7, r3
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d103      	bne.n	8004680 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2220      	movs	r2, #32
 800467e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	2204      	movs	r2, #4
 8004684:	4313      	orrs	r3, r2
 8004686:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004688:	2327      	movs	r3, #39	; 0x27
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	2201      	movs	r2, #1
 800468e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	2380      	movs	r3, #128	; 0x80
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	4013      	ands	r3, r2
 80046a0:	d00c      	beq.n	80046bc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	2201      	movs	r2, #1
 80046a6:	4313      	orrs	r3, r2
 80046a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2280      	movs	r2, #128	; 0x80
 80046b0:	0052      	lsls	r2, r2, #1
 80046b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046b4:	2327      	movs	r3, #39	; 0x27
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	2201      	movs	r2, #1
 80046ba:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	2380      	movs	r3, #128	; 0x80
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4013      	ands	r3, r2
 80046c4:	d00c      	beq.n	80046e0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	2208      	movs	r2, #8
 80046ca:	4313      	orrs	r3, r2
 80046cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2280      	movs	r2, #128	; 0x80
 80046d4:	00d2      	lsls	r2, r2, #3
 80046d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046d8:	2327      	movs	r3, #39	; 0x27
 80046da:	18fb      	adds	r3, r7, r3
 80046dc:	2201      	movs	r2, #1
 80046de:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4013      	ands	r3, r2
 80046e8:	d00c      	beq.n	8004704 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	2202      	movs	r2, #2
 80046ee:	4313      	orrs	r3, r2
 80046f0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2280      	movs	r2, #128	; 0x80
 80046f8:	0092      	lsls	r2, r2, #2
 80046fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046fc:	2327      	movs	r3, #39	; 0x27
 80046fe:	18fb      	adds	r3, r7, r3
 8004700:	2201      	movs	r2, #1
 8004702:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004704:	2327      	movs	r3, #39	; 0x27
 8004706:	18fb      	adds	r3, r7, r3
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d01d      	beq.n	800474a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	0018      	movs	r0, r3
 8004712:	f7ff fda7 	bl	8004264 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	490d      	ldr	r1, [pc, #52]	; (8004758 <I2C_IsErrorOccurred+0x1fc>)
 8004722:	400a      	ands	r2, r1
 8004724:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	431a      	orrs	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2241      	movs	r2, #65	; 0x41
 8004736:	2120      	movs	r1, #32
 8004738:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2242      	movs	r2, #66	; 0x42
 800473e:	2100      	movs	r1, #0
 8004740:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2240      	movs	r2, #64	; 0x40
 8004746:	2100      	movs	r1, #0
 8004748:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800474a:	2327      	movs	r3, #39	; 0x27
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	781b      	ldrb	r3, [r3, #0]
}
 8004750:	0018      	movs	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	b00b      	add	sp, #44	; 0x2c
 8004756:	bd90      	pop	{r4, r7, pc}
 8004758:	fe00e800 	.word	0xfe00e800

0800475c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800475c:	b590      	push	{r4, r7, lr}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	0008      	movs	r0, r1
 8004766:	0011      	movs	r1, r2
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	240a      	movs	r4, #10
 800476c:	193b      	adds	r3, r7, r4
 800476e:	1c02      	adds	r2, r0, #0
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	2009      	movs	r0, #9
 8004774:	183b      	adds	r3, r7, r0
 8004776:	1c0a      	adds	r2, r1, #0
 8004778:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800477a:	193b      	adds	r3, r7, r4
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	059b      	lsls	r3, r3, #22
 8004780:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004782:	183b      	adds	r3, r7, r0
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	0419      	lsls	r1, r3, #16
 8004788:	23ff      	movs	r3, #255	; 0xff
 800478a:	041b      	lsls	r3, r3, #16
 800478c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800478e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004796:	4313      	orrs	r3, r2
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	085b      	lsrs	r3, r3, #1
 800479c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047a6:	0d51      	lsrs	r1, r2, #21
 80047a8:	2280      	movs	r2, #128	; 0x80
 80047aa:	00d2      	lsls	r2, r2, #3
 80047ac:	400a      	ands	r2, r1
 80047ae:	4907      	ldr	r1, [pc, #28]	; (80047cc <I2C_TransferConfig+0x70>)
 80047b0:	430a      	orrs	r2, r1
 80047b2:	43d2      	mvns	r2, r2
 80047b4:	401a      	ands	r2, r3
 80047b6:	0011      	movs	r1, r2
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	46bd      	mov	sp, r7
 80047c6:	b007      	add	sp, #28
 80047c8:	bd90      	pop	{r4, r7, pc}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	03ff63ff 	.word	0x03ff63ff

080047d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2241      	movs	r2, #65	; 0x41
 80047de:	5c9b      	ldrb	r3, [r3, r2]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	d138      	bne.n	8004858 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2240      	movs	r2, #64	; 0x40
 80047ea:	5c9b      	ldrb	r3, [r3, r2]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e032      	b.n	800485a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2240      	movs	r2, #64	; 0x40
 80047f8:	2101      	movs	r1, #1
 80047fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2241      	movs	r2, #65	; 0x41
 8004800:	2124      	movs	r1, #36	; 0x24
 8004802:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2101      	movs	r1, #1
 8004810:	438a      	bics	r2, r1
 8004812:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4911      	ldr	r1, [pc, #68]	; (8004864 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004820:	400a      	ands	r2, r1
 8004822:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6819      	ldr	r1, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2101      	movs	r1, #1
 8004840:	430a      	orrs	r2, r1
 8004842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2241      	movs	r2, #65	; 0x41
 8004848:	2120      	movs	r1, #32
 800484a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2240      	movs	r2, #64	; 0x40
 8004850:	2100      	movs	r1, #0
 8004852:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	e000      	b.n	800485a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004858:	2302      	movs	r3, #2
  }
}
 800485a:	0018      	movs	r0, r3
 800485c:	46bd      	mov	sp, r7
 800485e:	b002      	add	sp, #8
 8004860:	bd80      	pop	{r7, pc}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	ffffefff 	.word	0xffffefff

08004868 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2241      	movs	r2, #65	; 0x41
 8004876:	5c9b      	ldrb	r3, [r3, r2]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b20      	cmp	r3, #32
 800487c:	d139      	bne.n	80048f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2240      	movs	r2, #64	; 0x40
 8004882:	5c9b      	ldrb	r3, [r3, r2]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004888:	2302      	movs	r3, #2
 800488a:	e033      	b.n	80048f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2240      	movs	r2, #64	; 0x40
 8004890:	2101      	movs	r1, #1
 8004892:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2241      	movs	r2, #65	; 0x41
 8004898:	2124      	movs	r1, #36	; 0x24
 800489a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2101      	movs	r1, #1
 80048a8:	438a      	bics	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a11      	ldr	r2, [pc, #68]	; (80048fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	021b      	lsls	r3, r3, #8
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2101      	movs	r1, #1
 80048da:	430a      	orrs	r2, r1
 80048dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2241      	movs	r2, #65	; 0x41
 80048e2:	2120      	movs	r1, #32
 80048e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2240      	movs	r2, #64	; 0x40
 80048ea:	2100      	movs	r1, #0
 80048ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e000      	b.n	80048f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048f2:	2302      	movs	r3, #2
  }
}
 80048f4:	0018      	movs	r0, r3
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b004      	add	sp, #16
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	fffff0ff 	.word	0xfffff0ff

08004900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004900:	b5b0      	push	{r4, r5, r7, lr}
 8004902:	b08a      	sub	sp, #40	; 0x28
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	f000 fbaf 	bl	8005072 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004914:	4bcf      	ldr	r3, [pc, #828]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	220c      	movs	r2, #12
 800491a:	4013      	ands	r3, r2
 800491c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800491e:	4bcd      	ldr	r3, [pc, #820]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	2380      	movs	r3, #128	; 0x80
 8004924:	025b      	lsls	r3, r3, #9
 8004926:	4013      	ands	r3, r2
 8004928:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2201      	movs	r2, #1
 8004930:	4013      	ands	r3, r2
 8004932:	d100      	bne.n	8004936 <HAL_RCC_OscConfig+0x36>
 8004934:	e07e      	b.n	8004a34 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	2b08      	cmp	r3, #8
 800493a:	d007      	beq.n	800494c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	2b0c      	cmp	r3, #12
 8004940:	d112      	bne.n	8004968 <HAL_RCC_OscConfig+0x68>
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	025b      	lsls	r3, r3, #9
 8004948:	429a      	cmp	r2, r3
 800494a:	d10d      	bne.n	8004968 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800494c:	4bc1      	ldr	r3, [pc, #772]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	2380      	movs	r3, #128	; 0x80
 8004952:	029b      	lsls	r3, r3, #10
 8004954:	4013      	ands	r3, r2
 8004956:	d100      	bne.n	800495a <HAL_RCC_OscConfig+0x5a>
 8004958:	e06b      	b.n	8004a32 <HAL_RCC_OscConfig+0x132>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d167      	bne.n	8004a32 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f000 fb85 	bl	8005072 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	025b      	lsls	r3, r3, #9
 8004970:	429a      	cmp	r2, r3
 8004972:	d107      	bne.n	8004984 <HAL_RCC_OscConfig+0x84>
 8004974:	4bb7      	ldr	r3, [pc, #732]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	4bb6      	ldr	r3, [pc, #728]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 800497a:	2180      	movs	r1, #128	; 0x80
 800497c:	0249      	lsls	r1, r1, #9
 800497e:	430a      	orrs	r2, r1
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	e027      	b.n	80049d4 <HAL_RCC_OscConfig+0xd4>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	23a0      	movs	r3, #160	; 0xa0
 800498a:	02db      	lsls	r3, r3, #11
 800498c:	429a      	cmp	r2, r3
 800498e:	d10e      	bne.n	80049ae <HAL_RCC_OscConfig+0xae>
 8004990:	4bb0      	ldr	r3, [pc, #704]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	4baf      	ldr	r3, [pc, #700]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004996:	2180      	movs	r1, #128	; 0x80
 8004998:	02c9      	lsls	r1, r1, #11
 800499a:	430a      	orrs	r2, r1
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	4bad      	ldr	r3, [pc, #692]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	4bac      	ldr	r3, [pc, #688]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 80049a4:	2180      	movs	r1, #128	; 0x80
 80049a6:	0249      	lsls	r1, r1, #9
 80049a8:	430a      	orrs	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	e012      	b.n	80049d4 <HAL_RCC_OscConfig+0xd4>
 80049ae:	4ba9      	ldr	r3, [pc, #676]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4ba8      	ldr	r3, [pc, #672]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 80049b4:	49a8      	ldr	r1, [pc, #672]	; (8004c58 <HAL_RCC_OscConfig+0x358>)
 80049b6:	400a      	ands	r2, r1
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	4ba6      	ldr	r3, [pc, #664]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	025b      	lsls	r3, r3, #9
 80049c2:	4013      	ands	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4ba2      	ldr	r3, [pc, #648]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4ba1      	ldr	r3, [pc, #644]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 80049ce:	49a3      	ldr	r1, [pc, #652]	; (8004c5c <HAL_RCC_OscConfig+0x35c>)
 80049d0:	400a      	ands	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d015      	beq.n	8004a08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049dc:	f7fe fe2a 	bl	8003634 <HAL_GetTick>
 80049e0:	0003      	movs	r3, r0
 80049e2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049e4:	e009      	b.n	80049fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e6:	f7fe fe25 	bl	8003634 <HAL_GetTick>
 80049ea:	0002      	movs	r2, r0
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b64      	cmp	r3, #100	; 0x64
 80049f2:	d902      	bls.n	80049fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	f000 fb3c 	bl	8005072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049fa:	4b96      	ldr	r3, [pc, #600]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	2380      	movs	r3, #128	; 0x80
 8004a00:	029b      	lsls	r3, r3, #10
 8004a02:	4013      	ands	r3, r2
 8004a04:	d0ef      	beq.n	80049e6 <HAL_RCC_OscConfig+0xe6>
 8004a06:	e015      	b.n	8004a34 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a08:	f7fe fe14 	bl	8003634 <HAL_GetTick>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a12:	f7fe fe0f 	bl	8003634 <HAL_GetTick>
 8004a16:	0002      	movs	r2, r0
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b64      	cmp	r3, #100	; 0x64
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e326      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a24:	4b8b      	ldr	r3, [pc, #556]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	029b      	lsls	r3, r3, #10
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d1f0      	bne.n	8004a12 <HAL_RCC_OscConfig+0x112>
 8004a30:	e000      	b.n	8004a34 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a32:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d100      	bne.n	8004a40 <HAL_RCC_OscConfig+0x140>
 8004a3e:	e08b      	b.n	8004b58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	2b0c      	cmp	r3, #12
 8004a50:	d13e      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x1d0>
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d13b      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004a58:	4b7e      	ldr	r3, [pc, #504]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2204      	movs	r2, #4
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d004      	beq.n	8004a6c <HAL_RCC_OscConfig+0x16c>
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e302      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6c:	4b79      	ldr	r3, [pc, #484]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	4a7b      	ldr	r2, [pc, #492]	; (8004c60 <HAL_RCC_OscConfig+0x360>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	0019      	movs	r1, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	021a      	lsls	r2, r3, #8
 8004a7c:	4b75      	ldr	r3, [pc, #468]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004a82:	4b74      	ldr	r3, [pc, #464]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2209      	movs	r2, #9
 8004a88:	4393      	bics	r3, r2
 8004a8a:	0019      	movs	r1, r3
 8004a8c:	4b71      	ldr	r3, [pc, #452]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a94:	f000 fc40 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 8004a98:	0001      	movs	r1, r0
 8004a9a:	4b6e      	ldr	r3, [pc, #440]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	091b      	lsrs	r3, r3, #4
 8004aa0:	220f      	movs	r2, #15
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	4a6f      	ldr	r2, [pc, #444]	; (8004c64 <HAL_RCC_OscConfig+0x364>)
 8004aa6:	5cd3      	ldrb	r3, [r2, r3]
 8004aa8:	000a      	movs	r2, r1
 8004aaa:	40da      	lsrs	r2, r3
 8004aac:	4b6e      	ldr	r3, [pc, #440]	; (8004c68 <HAL_RCC_OscConfig+0x368>)
 8004aae:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004ab0:	4b6e      	ldr	r3, [pc, #440]	; (8004c6c <HAL_RCC_OscConfig+0x36c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2513      	movs	r5, #19
 8004ab6:	197c      	adds	r4, r7, r5
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f7fe fd75 	bl	80035a8 <HAL_InitTick>
 8004abe:	0003      	movs	r3, r0
 8004ac0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004ac2:	197b      	adds	r3, r7, r5
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d046      	beq.n	8004b58 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8004aca:	197b      	adds	r3, r7, r5
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	e2d0      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d027      	beq.n	8004b26 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004ad6:	4b5f      	ldr	r3, [pc, #380]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2209      	movs	r2, #9
 8004adc:	4393      	bics	r3, r2
 8004ade:	0019      	movs	r1, r3
 8004ae0:	4b5c      	ldr	r3, [pc, #368]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae8:	f7fe fda4 	bl	8003634 <HAL_GetTick>
 8004aec:	0003      	movs	r3, r0
 8004aee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af2:	f7fe fd9f 	bl	8003634 <HAL_GetTick>
 8004af6:	0002      	movs	r2, r0
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e2b6      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b04:	4b53      	ldr	r3, [pc, #332]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2204      	movs	r2, #4
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	d0f1      	beq.n	8004af2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0e:	4b51      	ldr	r3, [pc, #324]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4a53      	ldr	r2, [pc, #332]	; (8004c60 <HAL_RCC_OscConfig+0x360>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	0019      	movs	r1, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	021a      	lsls	r2, r3, #8
 8004b1e:	4b4d      	ldr	r3, [pc, #308]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004b20:	430a      	orrs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]
 8004b24:	e018      	b.n	8004b58 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b26:	4b4b      	ldr	r3, [pc, #300]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4b4a      	ldr	r3, [pc, #296]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	438a      	bics	r2, r1
 8004b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b32:	f7fe fd7f 	bl	8003634 <HAL_GetTick>
 8004b36:	0003      	movs	r3, r0
 8004b38:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b3c:	f7fe fd7a 	bl	8003634 <HAL_GetTick>
 8004b40:	0002      	movs	r2, r0
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e291      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b4e:	4b41      	ldr	r3, [pc, #260]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2204      	movs	r2, #4
 8004b54:	4013      	ands	r3, r2
 8004b56:	d1f1      	bne.n	8004b3c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2210      	movs	r2, #16
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d100      	bne.n	8004b64 <HAL_RCC_OscConfig+0x264>
 8004b62:	e0a1      	b.n	8004ca8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d140      	bne.n	8004bec <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b6a:	4b3a      	ldr	r3, [pc, #232]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	2380      	movs	r3, #128	; 0x80
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4013      	ands	r3, r2
 8004b74:	d005      	beq.n	8004b82 <HAL_RCC_OscConfig+0x282>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e277      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b82:	4b34      	ldr	r3, [pc, #208]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	4a3a      	ldr	r2, [pc, #232]	; (8004c70 <HAL_RCC_OscConfig+0x370>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	0019      	movs	r1, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b90:	4b30      	ldr	r3, [pc, #192]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004b92:	430a      	orrs	r2, r1
 8004b94:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b96:	4b2f      	ldr	r3, [pc, #188]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	0a19      	lsrs	r1, r3, #8
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	061a      	lsls	r2, r3, #24
 8004ba4:	4b2b      	ldr	r3, [pc, #172]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	0b5b      	lsrs	r3, r3, #13
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	2280      	movs	r2, #128	; 0x80
 8004bb4:	0212      	lsls	r2, r2, #8
 8004bb6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004bb8:	4b26      	ldr	r3, [pc, #152]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	091b      	lsrs	r3, r3, #4
 8004bbe:	210f      	movs	r1, #15
 8004bc0:	400b      	ands	r3, r1
 8004bc2:	4928      	ldr	r1, [pc, #160]	; (8004c64 <HAL_RCC_OscConfig+0x364>)
 8004bc4:	5ccb      	ldrb	r3, [r1, r3]
 8004bc6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004bc8:	4b27      	ldr	r3, [pc, #156]	; (8004c68 <HAL_RCC_OscConfig+0x368>)
 8004bca:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004bcc:	4b27      	ldr	r3, [pc, #156]	; (8004c6c <HAL_RCC_OscConfig+0x36c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2513      	movs	r5, #19
 8004bd2:	197c      	adds	r4, r7, r5
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f7fe fce7 	bl	80035a8 <HAL_InitTick>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004bde:	197b      	adds	r3, r7, r5
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d060      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8004be6:	197b      	adds	r3, r7, r5
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	e242      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d03f      	beq.n	8004c74 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004bf4:	4b17      	ldr	r3, [pc, #92]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	4b16      	ldr	r3, [pc, #88]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004bfa:	2180      	movs	r1, #128	; 0x80
 8004bfc:	0049      	lsls	r1, r1, #1
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c02:	f7fe fd17 	bl	8003634 <HAL_GetTick>
 8004c06:	0003      	movs	r3, r0
 8004c08:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c0c:	f7fe fd12 	bl	8003634 <HAL_GetTick>
 8004c10:	0002      	movs	r2, r0
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e229      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	2380      	movs	r3, #128	; 0x80
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4013      	ands	r3, r2
 8004c28:	d0f0      	beq.n	8004c0c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c2a:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	4a10      	ldr	r2, [pc, #64]	; (8004c70 <HAL_RCC_OscConfig+0x370>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	0019      	movs	r1, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	0a19      	lsrs	r1, r3, #8
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	061a      	lsls	r2, r3, #24
 8004c4c:	4b01      	ldr	r3, [pc, #4]	; (8004c54 <HAL_RCC_OscConfig+0x354>)
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	605a      	str	r2, [r3, #4]
 8004c52:	e029      	b.n	8004ca8 <HAL_RCC_OscConfig+0x3a8>
 8004c54:	40021000 	.word	0x40021000
 8004c58:	fffeffff 	.word	0xfffeffff
 8004c5c:	fffbffff 	.word	0xfffbffff
 8004c60:	ffffe0ff 	.word	0xffffe0ff
 8004c64:	08006d0c 	.word	0x08006d0c
 8004c68:	2000002c 	.word	0x2000002c
 8004c6c:	20000030 	.word	0x20000030
 8004c70:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c74:	4bbd      	ldr	r3, [pc, #756]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	4bbc      	ldr	r3, [pc, #752]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004c7a:	49bd      	ldr	r1, [pc, #756]	; (8004f70 <HAL_RCC_OscConfig+0x670>)
 8004c7c:	400a      	ands	r2, r1
 8004c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7fe fcd8 	bl	8003634 <HAL_GetTick>
 8004c84:	0003      	movs	r3, r0
 8004c86:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c8a:	f7fe fcd3 	bl	8003634 <HAL_GetTick>
 8004c8e:	0002      	movs	r2, r0
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e1ea      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004c9c:	4bb3      	ldr	r3, [pc, #716]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	2380      	movs	r3, #128	; 0x80
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d1f0      	bne.n	8004c8a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2208      	movs	r2, #8
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d036      	beq.n	8004d20 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d019      	beq.n	8004cee <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cba:	4bac      	ldr	r3, [pc, #688]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004cbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cbe:	4bab      	ldr	r3, [pc, #684]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc6:	f7fe fcb5 	bl	8003634 <HAL_GetTick>
 8004cca:	0003      	movs	r3, r0
 8004ccc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cd0:	f7fe fcb0 	bl	8003634 <HAL_GetTick>
 8004cd4:	0002      	movs	r2, r0
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e1c7      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ce2:	4ba2      	ldr	r3, [pc, #648]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d0f1      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x3d0>
 8004cec:	e018      	b.n	8004d20 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cee:	4b9f      	ldr	r3, [pc, #636]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004cf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cf2:	4b9e      	ldr	r3, [pc, #632]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	438a      	bics	r2, r1
 8004cf8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cfa:	f7fe fc9b 	bl	8003634 <HAL_GetTick>
 8004cfe:	0003      	movs	r3, r0
 8004d00:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d04:	f7fe fc96 	bl	8003634 <HAL_GetTick>
 8004d08:	0002      	movs	r2, r0
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e1ad      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d16:	4b95      	ldr	r3, [pc, #596]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d1f1      	bne.n	8004d04 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2204      	movs	r2, #4
 8004d26:	4013      	ands	r3, r2
 8004d28:	d100      	bne.n	8004d2c <HAL_RCC_OscConfig+0x42c>
 8004d2a:	e0ae      	b.n	8004e8a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d2c:	2027      	movs	r0, #39	; 0x27
 8004d2e:	183b      	adds	r3, r7, r0
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d34:	4b8d      	ldr	r3, [pc, #564]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d38:	2380      	movs	r3, #128	; 0x80
 8004d3a:	055b      	lsls	r3, r3, #21
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d109      	bne.n	8004d54 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d40:	4b8a      	ldr	r3, [pc, #552]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d44:	4b89      	ldr	r3, [pc, #548]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004d46:	2180      	movs	r1, #128	; 0x80
 8004d48:	0549      	lsls	r1, r1, #21
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004d4e:	183b      	adds	r3, r7, r0
 8004d50:	2201      	movs	r2, #1
 8004d52:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d54:	4b87      	ldr	r3, [pc, #540]	; (8004f74 <HAL_RCC_OscConfig+0x674>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	2380      	movs	r3, #128	; 0x80
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d11a      	bne.n	8004d96 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d60:	4b84      	ldr	r3, [pc, #528]	; (8004f74 <HAL_RCC_OscConfig+0x674>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	4b83      	ldr	r3, [pc, #524]	; (8004f74 <HAL_RCC_OscConfig+0x674>)
 8004d66:	2180      	movs	r1, #128	; 0x80
 8004d68:	0049      	lsls	r1, r1, #1
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d6e:	f7fe fc61 	bl	8003634 <HAL_GetTick>
 8004d72:	0003      	movs	r3, r0
 8004d74:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d78:	f7fe fc5c 	bl	8003634 <HAL_GetTick>
 8004d7c:	0002      	movs	r2, r0
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b64      	cmp	r3, #100	; 0x64
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e173      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8a:	4b7a      	ldr	r3, [pc, #488]	; (8004f74 <HAL_RCC_OscConfig+0x674>)
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	2380      	movs	r3, #128	; 0x80
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	4013      	ands	r3, r2
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d107      	bne.n	8004db2 <HAL_RCC_OscConfig+0x4b2>
 8004da2:	4b72      	ldr	r3, [pc, #456]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004da4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004da6:	4b71      	ldr	r3, [pc, #452]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004da8:	2180      	movs	r1, #128	; 0x80
 8004daa:	0049      	lsls	r1, r1, #1
 8004dac:	430a      	orrs	r2, r1
 8004dae:	651a      	str	r2, [r3, #80]	; 0x50
 8004db0:	e031      	b.n	8004e16 <HAL_RCC_OscConfig+0x516>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10c      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x4d4>
 8004dba:	4b6c      	ldr	r3, [pc, #432]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dbe:	4b6b      	ldr	r3, [pc, #428]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004dc0:	496b      	ldr	r1, [pc, #428]	; (8004f70 <HAL_RCC_OscConfig+0x670>)
 8004dc2:	400a      	ands	r2, r1
 8004dc4:	651a      	str	r2, [r3, #80]	; 0x50
 8004dc6:	4b69      	ldr	r3, [pc, #420]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004dc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dca:	4b68      	ldr	r3, [pc, #416]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004dcc:	496a      	ldr	r1, [pc, #424]	; (8004f78 <HAL_RCC_OscConfig+0x678>)
 8004dce:	400a      	ands	r2, r1
 8004dd0:	651a      	str	r2, [r3, #80]	; 0x50
 8004dd2:	e020      	b.n	8004e16 <HAL_RCC_OscConfig+0x516>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	23a0      	movs	r3, #160	; 0xa0
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d10e      	bne.n	8004dfe <HAL_RCC_OscConfig+0x4fe>
 8004de0:	4b62      	ldr	r3, [pc, #392]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004de2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004de4:	4b61      	ldr	r3, [pc, #388]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004de6:	2180      	movs	r1, #128	; 0x80
 8004de8:	00c9      	lsls	r1, r1, #3
 8004dea:	430a      	orrs	r2, r1
 8004dec:	651a      	str	r2, [r3, #80]	; 0x50
 8004dee:	4b5f      	ldr	r3, [pc, #380]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004df0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004df2:	4b5e      	ldr	r3, [pc, #376]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004df4:	2180      	movs	r1, #128	; 0x80
 8004df6:	0049      	lsls	r1, r1, #1
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	651a      	str	r2, [r3, #80]	; 0x50
 8004dfc:	e00b      	b.n	8004e16 <HAL_RCC_OscConfig+0x516>
 8004dfe:	4b5b      	ldr	r3, [pc, #364]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004e00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e02:	4b5a      	ldr	r3, [pc, #360]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004e04:	495a      	ldr	r1, [pc, #360]	; (8004f70 <HAL_RCC_OscConfig+0x670>)
 8004e06:	400a      	ands	r2, r1
 8004e08:	651a      	str	r2, [r3, #80]	; 0x50
 8004e0a:	4b58      	ldr	r3, [pc, #352]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e0e:	4b57      	ldr	r3, [pc, #348]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004e10:	4959      	ldr	r1, [pc, #356]	; (8004f78 <HAL_RCC_OscConfig+0x678>)
 8004e12:	400a      	ands	r2, r1
 8004e14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d015      	beq.n	8004e4a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1e:	f7fe fc09 	bl	8003634 <HAL_GetTick>
 8004e22:	0003      	movs	r3, r0
 8004e24:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e26:	e009      	b.n	8004e3c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e28:	f7fe fc04 	bl	8003634 <HAL_GetTick>
 8004e2c:	0002      	movs	r2, r0
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	4a52      	ldr	r2, [pc, #328]	; (8004f7c <HAL_RCC_OscConfig+0x67c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e11a      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e3c:	4b4b      	ldr	r3, [pc, #300]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004e3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e40:	2380      	movs	r3, #128	; 0x80
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4013      	ands	r3, r2
 8004e46:	d0ef      	beq.n	8004e28 <HAL_RCC_OscConfig+0x528>
 8004e48:	e014      	b.n	8004e74 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4a:	f7fe fbf3 	bl	8003634 <HAL_GetTick>
 8004e4e:	0003      	movs	r3, r0
 8004e50:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e52:	e009      	b.n	8004e68 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e54:	f7fe fbee 	bl	8003634 <HAL_GetTick>
 8004e58:	0002      	movs	r2, r0
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	4a47      	ldr	r2, [pc, #284]	; (8004f7c <HAL_RCC_OscConfig+0x67c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e104      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e68:	4b40      	ldr	r3, [pc, #256]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004e6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e6c:	2380      	movs	r3, #128	; 0x80
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4013      	ands	r3, r2
 8004e72:	d1ef      	bne.n	8004e54 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e74:	2327      	movs	r3, #39	; 0x27
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d105      	bne.n	8004e8a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7e:	4b3b      	ldr	r3, [pc, #236]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e82:	4b3a      	ldr	r3, [pc, #232]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004e84:	493e      	ldr	r1, [pc, #248]	; (8004f80 <HAL_RCC_OscConfig+0x680>)
 8004e86:	400a      	ands	r2, r1
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	4013      	ands	r3, r2
 8004e92:	d049      	beq.n	8004f28 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d026      	beq.n	8004eea <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004e9c:	4b33      	ldr	r3, [pc, #204]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	4b32      	ldr	r3, [pc, #200]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	609a      	str	r2, [r3, #8]
 8004ea8:	4b30      	ldr	r3, [pc, #192]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eac:	4b2f      	ldr	r3, [pc, #188]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004eae:	2101      	movs	r1, #1
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	635a      	str	r2, [r3, #52]	; 0x34
 8004eb4:	4b33      	ldr	r3, [pc, #204]	; (8004f84 <HAL_RCC_OscConfig+0x684>)
 8004eb6:	6a1a      	ldr	r2, [r3, #32]
 8004eb8:	4b32      	ldr	r3, [pc, #200]	; (8004f84 <HAL_RCC_OscConfig+0x684>)
 8004eba:	2180      	movs	r1, #128	; 0x80
 8004ebc:	0189      	lsls	r1, r1, #6
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec2:	f7fe fbb7 	bl	8003634 <HAL_GetTick>
 8004ec6:	0003      	movs	r3, r0
 8004ec8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ecc:	f7fe fbb2 	bl	8003634 <HAL_GetTick>
 8004ed0:	0002      	movs	r2, r0
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e0c9      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ede:	4b23      	ldr	r3, [pc, #140]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d0f1      	beq.n	8004ecc <HAL_RCC_OscConfig+0x5cc>
 8004ee8:	e01e      	b.n	8004f28 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004eea:	4b20      	ldr	r3, [pc, #128]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	4b1f      	ldr	r3, [pc, #124]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	438a      	bics	r2, r1
 8004ef4:	609a      	str	r2, [r3, #8]
 8004ef6:	4b23      	ldr	r3, [pc, #140]	; (8004f84 <HAL_RCC_OscConfig+0x684>)
 8004ef8:	6a1a      	ldr	r2, [r3, #32]
 8004efa:	4b22      	ldr	r3, [pc, #136]	; (8004f84 <HAL_RCC_OscConfig+0x684>)
 8004efc:	4922      	ldr	r1, [pc, #136]	; (8004f88 <HAL_RCC_OscConfig+0x688>)
 8004efe:	400a      	ands	r2, r1
 8004f00:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f02:	f7fe fb97 	bl	8003634 <HAL_GetTick>
 8004f06:	0003      	movs	r3, r0
 8004f08:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f0c:	f7fe fb92 	bl	8003634 <HAL_GetTick>
 8004f10:	0002      	movs	r2, r0
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e0a9      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f1e:	4b13      	ldr	r3, [pc, #76]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	2202      	movs	r2, #2
 8004f24:	4013      	ands	r3, r2
 8004f26:	d1f1      	bne.n	8004f0c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d100      	bne.n	8004f32 <HAL_RCC_OscConfig+0x632>
 8004f30:	e09e      	b.n	8005070 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	2b0c      	cmp	r3, #12
 8004f36:	d100      	bne.n	8004f3a <HAL_RCC_OscConfig+0x63a>
 8004f38:	e077      	b.n	800502a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d158      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f42:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <HAL_RCC_OscConfig+0x66c>)
 8004f48:	4910      	ldr	r1, [pc, #64]	; (8004f8c <HAL_RCC_OscConfig+0x68c>)
 8004f4a:	400a      	ands	r2, r1
 8004f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4e:	f7fe fb71 	bl	8003634 <HAL_GetTick>
 8004f52:	0003      	movs	r3, r0
 8004f54:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f56:	e01b      	b.n	8004f90 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f58:	f7fe fb6c 	bl	8003634 <HAL_GetTick>
 8004f5c:	0002      	movs	r2, r0
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d914      	bls.n	8004f90 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e083      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	fffffeff 	.word	0xfffffeff
 8004f74:	40007000 	.word	0x40007000
 8004f78:	fffffbff 	.word	0xfffffbff
 8004f7c:	00001388 	.word	0x00001388
 8004f80:	efffffff 	.word	0xefffffff
 8004f84:	40010000 	.word	0x40010000
 8004f88:	ffffdfff 	.word	0xffffdfff
 8004f8c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f90:	4b3a      	ldr	r3, [pc, #232]	; (800507c <HAL_RCC_OscConfig+0x77c>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	2380      	movs	r3, #128	; 0x80
 8004f96:	049b      	lsls	r3, r3, #18
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d1dd      	bne.n	8004f58 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f9c:	4b37      	ldr	r3, [pc, #220]	; (800507c <HAL_RCC_OscConfig+0x77c>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	4a37      	ldr	r2, [pc, #220]	; (8005080 <HAL_RCC_OscConfig+0x780>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	0019      	movs	r1, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	4b31      	ldr	r3, [pc, #196]	; (800507c <HAL_RCC_OscConfig+0x77c>)
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fbc:	4b2f      	ldr	r3, [pc, #188]	; (800507c <HAL_RCC_OscConfig+0x77c>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	4b2e      	ldr	r3, [pc, #184]	; (800507c <HAL_RCC_OscConfig+0x77c>)
 8004fc2:	2180      	movs	r1, #128	; 0x80
 8004fc4:	0449      	lsls	r1, r1, #17
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fca:	f7fe fb33 	bl	8003634 <HAL_GetTick>
 8004fce:	0003      	movs	r3, r0
 8004fd0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd4:	f7fe fb2e 	bl	8003634 <HAL_GetTick>
 8004fd8:	0002      	movs	r2, r0
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e045      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004fe6:	4b25      	ldr	r3, [pc, #148]	; (800507c <HAL_RCC_OscConfig+0x77c>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	2380      	movs	r3, #128	; 0x80
 8004fec:	049b      	lsls	r3, r3, #18
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d0f0      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x6d4>
 8004ff2:	e03d      	b.n	8005070 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff4:	4b21      	ldr	r3, [pc, #132]	; (800507c <HAL_RCC_OscConfig+0x77c>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4b20      	ldr	r3, [pc, #128]	; (800507c <HAL_RCC_OscConfig+0x77c>)
 8004ffa:	4922      	ldr	r1, [pc, #136]	; (8005084 <HAL_RCC_OscConfig+0x784>)
 8004ffc:	400a      	ands	r2, r1
 8004ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005000:	f7fe fb18 	bl	8003634 <HAL_GetTick>
 8005004:	0003      	movs	r3, r0
 8005006:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800500a:	f7fe fb13 	bl	8003634 <HAL_GetTick>
 800500e:	0002      	movs	r2, r0
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e02a      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800501c:	4b17      	ldr	r3, [pc, #92]	; (800507c <HAL_RCC_OscConfig+0x77c>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	049b      	lsls	r3, r3, #18
 8005024:	4013      	ands	r3, r2
 8005026:	d1f0      	bne.n	800500a <HAL_RCC_OscConfig+0x70a>
 8005028:	e022      	b.n	8005070 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e01d      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005036:	4b11      	ldr	r3, [pc, #68]	; (800507c <HAL_RCC_OscConfig+0x77c>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	2380      	movs	r3, #128	; 0x80
 8005040:	025b      	lsls	r3, r3, #9
 8005042:	401a      	ands	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	429a      	cmp	r2, r3
 800504a:	d10f      	bne.n	800506c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	23f0      	movs	r3, #240	; 0xf0
 8005050:	039b      	lsls	r3, r3, #14
 8005052:	401a      	ands	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005058:	429a      	cmp	r2, r3
 800505a:	d107      	bne.n	800506c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	23c0      	movs	r3, #192	; 0xc0
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	401a      	ands	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005068:	429a      	cmp	r2, r3
 800506a:	d001      	beq.n	8005070 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	0018      	movs	r0, r3
 8005074:	46bd      	mov	sp, r7
 8005076:	b00a      	add	sp, #40	; 0x28
 8005078:	bdb0      	pop	{r4, r5, r7, pc}
 800507a:	46c0      	nop			; (mov r8, r8)
 800507c:	40021000 	.word	0x40021000
 8005080:	ff02ffff 	.word	0xff02ffff
 8005084:	feffffff 	.word	0xfeffffff

08005088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005088:	b5b0      	push	{r4, r5, r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e128      	b.n	80052ee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800509c:	4b96      	ldr	r3, [pc, #600]	; (80052f8 <HAL_RCC_ClockConfig+0x270>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2201      	movs	r2, #1
 80050a2:	4013      	ands	r3, r2
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d91e      	bls.n	80050e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050aa:	4b93      	ldr	r3, [pc, #588]	; (80052f8 <HAL_RCC_ClockConfig+0x270>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2201      	movs	r2, #1
 80050b0:	4393      	bics	r3, r2
 80050b2:	0019      	movs	r1, r3
 80050b4:	4b90      	ldr	r3, [pc, #576]	; (80052f8 <HAL_RCC_ClockConfig+0x270>)
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050bc:	f7fe faba 	bl	8003634 <HAL_GetTick>
 80050c0:	0003      	movs	r3, r0
 80050c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c4:	e009      	b.n	80050da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c6:	f7fe fab5 	bl	8003634 <HAL_GetTick>
 80050ca:	0002      	movs	r2, r0
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	4a8a      	ldr	r2, [pc, #552]	; (80052fc <HAL_RCC_ClockConfig+0x274>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e109      	b.n	80052ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050da:	4b87      	ldr	r3, [pc, #540]	; (80052f8 <HAL_RCC_ClockConfig+0x270>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2201      	movs	r2, #1
 80050e0:	4013      	ands	r3, r2
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d1ee      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2202      	movs	r2, #2
 80050ee:	4013      	ands	r3, r2
 80050f0:	d009      	beq.n	8005106 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050f2:	4b83      	ldr	r3, [pc, #524]	; (8005300 <HAL_RCC_ClockConfig+0x278>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	22f0      	movs	r2, #240	; 0xf0
 80050f8:	4393      	bics	r3, r2
 80050fa:	0019      	movs	r1, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	4b7f      	ldr	r3, [pc, #508]	; (8005300 <HAL_RCC_ClockConfig+0x278>)
 8005102:	430a      	orrs	r2, r1
 8005104:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2201      	movs	r2, #1
 800510c:	4013      	ands	r3, r2
 800510e:	d100      	bne.n	8005112 <HAL_RCC_ClockConfig+0x8a>
 8005110:	e089      	b.n	8005226 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d107      	bne.n	800512a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800511a:	4b79      	ldr	r3, [pc, #484]	; (8005300 <HAL_RCC_ClockConfig+0x278>)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	2380      	movs	r3, #128	; 0x80
 8005120:	029b      	lsls	r3, r3, #10
 8005122:	4013      	ands	r3, r2
 8005124:	d120      	bne.n	8005168 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e0e1      	b.n	80052ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b03      	cmp	r3, #3
 8005130:	d107      	bne.n	8005142 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005132:	4b73      	ldr	r3, [pc, #460]	; (8005300 <HAL_RCC_ClockConfig+0x278>)
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	2380      	movs	r3, #128	; 0x80
 8005138:	049b      	lsls	r3, r3, #18
 800513a:	4013      	ands	r3, r2
 800513c:	d114      	bne.n	8005168 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e0d5      	b.n	80052ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d106      	bne.n	8005158 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800514a:	4b6d      	ldr	r3, [pc, #436]	; (8005300 <HAL_RCC_ClockConfig+0x278>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2204      	movs	r2, #4
 8005150:	4013      	ands	r3, r2
 8005152:	d109      	bne.n	8005168 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0ca      	b.n	80052ee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005158:	4b69      	ldr	r3, [pc, #420]	; (8005300 <HAL_RCC_ClockConfig+0x278>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	2380      	movs	r3, #128	; 0x80
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4013      	ands	r3, r2
 8005162:	d101      	bne.n	8005168 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0c2      	b.n	80052ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005168:	4b65      	ldr	r3, [pc, #404]	; (8005300 <HAL_RCC_ClockConfig+0x278>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	2203      	movs	r2, #3
 800516e:	4393      	bics	r3, r2
 8005170:	0019      	movs	r1, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	4b62      	ldr	r3, [pc, #392]	; (8005300 <HAL_RCC_ClockConfig+0x278>)
 8005178:	430a      	orrs	r2, r1
 800517a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800517c:	f7fe fa5a 	bl	8003634 <HAL_GetTick>
 8005180:	0003      	movs	r3, r0
 8005182:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d111      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800518c:	e009      	b.n	80051a2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800518e:	f7fe fa51 	bl	8003634 <HAL_GetTick>
 8005192:	0002      	movs	r2, r0
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	4a58      	ldr	r2, [pc, #352]	; (80052fc <HAL_RCC_ClockConfig+0x274>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e0a5      	b.n	80052ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80051a2:	4b57      	ldr	r3, [pc, #348]	; (8005300 <HAL_RCC_ClockConfig+0x278>)
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	220c      	movs	r2, #12
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d1ef      	bne.n	800518e <HAL_RCC_ClockConfig+0x106>
 80051ae:	e03a      	b.n	8005226 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b03      	cmp	r3, #3
 80051b6:	d111      	bne.n	80051dc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051b8:	e009      	b.n	80051ce <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ba:	f7fe fa3b 	bl	8003634 <HAL_GetTick>
 80051be:	0002      	movs	r2, r0
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	4a4d      	ldr	r2, [pc, #308]	; (80052fc <HAL_RCC_ClockConfig+0x274>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e08f      	b.n	80052ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051ce:	4b4c      	ldr	r3, [pc, #304]	; (8005300 <HAL_RCC_ClockConfig+0x278>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	220c      	movs	r2, #12
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b0c      	cmp	r3, #12
 80051d8:	d1ef      	bne.n	80051ba <HAL_RCC_ClockConfig+0x132>
 80051da:	e024      	b.n	8005226 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d11b      	bne.n	800521c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051e4:	e009      	b.n	80051fa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e6:	f7fe fa25 	bl	8003634 <HAL_GetTick>
 80051ea:	0002      	movs	r2, r0
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	4a42      	ldr	r2, [pc, #264]	; (80052fc <HAL_RCC_ClockConfig+0x274>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e079      	b.n	80052ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051fa:	4b41      	ldr	r3, [pc, #260]	; (8005300 <HAL_RCC_ClockConfig+0x278>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	220c      	movs	r2, #12
 8005200:	4013      	ands	r3, r2
 8005202:	2b04      	cmp	r3, #4
 8005204:	d1ef      	bne.n	80051e6 <HAL_RCC_ClockConfig+0x15e>
 8005206:	e00e      	b.n	8005226 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005208:	f7fe fa14 	bl	8003634 <HAL_GetTick>
 800520c:	0002      	movs	r2, r0
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	4a3a      	ldr	r2, [pc, #232]	; (80052fc <HAL_RCC_ClockConfig+0x274>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d901      	bls.n	800521c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e068      	b.n	80052ee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800521c:	4b38      	ldr	r3, [pc, #224]	; (8005300 <HAL_RCC_ClockConfig+0x278>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	220c      	movs	r2, #12
 8005222:	4013      	ands	r3, r2
 8005224:	d1f0      	bne.n	8005208 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005226:	4b34      	ldr	r3, [pc, #208]	; (80052f8 <HAL_RCC_ClockConfig+0x270>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2201      	movs	r2, #1
 800522c:	4013      	ands	r3, r2
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d21e      	bcs.n	8005272 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005234:	4b30      	ldr	r3, [pc, #192]	; (80052f8 <HAL_RCC_ClockConfig+0x270>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2201      	movs	r2, #1
 800523a:	4393      	bics	r3, r2
 800523c:	0019      	movs	r1, r3
 800523e:	4b2e      	ldr	r3, [pc, #184]	; (80052f8 <HAL_RCC_ClockConfig+0x270>)
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005246:	f7fe f9f5 	bl	8003634 <HAL_GetTick>
 800524a:	0003      	movs	r3, r0
 800524c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800524e:	e009      	b.n	8005264 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005250:	f7fe f9f0 	bl	8003634 <HAL_GetTick>
 8005254:	0002      	movs	r2, r0
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	4a28      	ldr	r2, [pc, #160]	; (80052fc <HAL_RCC_ClockConfig+0x274>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e044      	b.n	80052ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005264:	4b24      	ldr	r3, [pc, #144]	; (80052f8 <HAL_RCC_ClockConfig+0x270>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2201      	movs	r2, #1
 800526a:	4013      	ands	r3, r2
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d1ee      	bne.n	8005250 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2204      	movs	r2, #4
 8005278:	4013      	ands	r3, r2
 800527a:	d009      	beq.n	8005290 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800527c:	4b20      	ldr	r3, [pc, #128]	; (8005300 <HAL_RCC_ClockConfig+0x278>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	4a20      	ldr	r2, [pc, #128]	; (8005304 <HAL_RCC_ClockConfig+0x27c>)
 8005282:	4013      	ands	r3, r2
 8005284:	0019      	movs	r1, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	4b1d      	ldr	r3, [pc, #116]	; (8005300 <HAL_RCC_ClockConfig+0x278>)
 800528c:	430a      	orrs	r2, r1
 800528e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2208      	movs	r2, #8
 8005296:	4013      	ands	r3, r2
 8005298:	d00a      	beq.n	80052b0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800529a:	4b19      	ldr	r3, [pc, #100]	; (8005300 <HAL_RCC_ClockConfig+0x278>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	4a1a      	ldr	r2, [pc, #104]	; (8005308 <HAL_RCC_ClockConfig+0x280>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	0019      	movs	r1, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	00da      	lsls	r2, r3, #3
 80052aa:	4b15      	ldr	r3, [pc, #84]	; (8005300 <HAL_RCC_ClockConfig+0x278>)
 80052ac:	430a      	orrs	r2, r1
 80052ae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052b0:	f000 f832 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 80052b4:	0001      	movs	r1, r0
 80052b6:	4b12      	ldr	r3, [pc, #72]	; (8005300 <HAL_RCC_ClockConfig+0x278>)
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	091b      	lsrs	r3, r3, #4
 80052bc:	220f      	movs	r2, #15
 80052be:	4013      	ands	r3, r2
 80052c0:	4a12      	ldr	r2, [pc, #72]	; (800530c <HAL_RCC_ClockConfig+0x284>)
 80052c2:	5cd3      	ldrb	r3, [r2, r3]
 80052c4:	000a      	movs	r2, r1
 80052c6:	40da      	lsrs	r2, r3
 80052c8:	4b11      	ldr	r3, [pc, #68]	; (8005310 <HAL_RCC_ClockConfig+0x288>)
 80052ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052cc:	4b11      	ldr	r3, [pc, #68]	; (8005314 <HAL_RCC_ClockConfig+0x28c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	250b      	movs	r5, #11
 80052d2:	197c      	adds	r4, r7, r5
 80052d4:	0018      	movs	r0, r3
 80052d6:	f7fe f967 	bl	80035a8 <HAL_InitTick>
 80052da:	0003      	movs	r3, r0
 80052dc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80052de:	197b      	adds	r3, r7, r5
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80052e6:	197b      	adds	r3, r7, r5
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	e000      	b.n	80052ee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	0018      	movs	r0, r3
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b004      	add	sp, #16
 80052f4:	bdb0      	pop	{r4, r5, r7, pc}
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	40022000 	.word	0x40022000
 80052fc:	00001388 	.word	0x00001388
 8005300:	40021000 	.word	0x40021000
 8005304:	fffff8ff 	.word	0xfffff8ff
 8005308:	ffffc7ff 	.word	0xffffc7ff
 800530c:	08006d0c 	.word	0x08006d0c
 8005310:	2000002c 	.word	0x2000002c
 8005314:	20000030 	.word	0x20000030

08005318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005318:	b5b0      	push	{r4, r5, r7, lr}
 800531a:	b08e      	sub	sp, #56	; 0x38
 800531c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800531e:	4b4c      	ldr	r3, [pc, #304]	; (8005450 <HAL_RCC_GetSysClockFreq+0x138>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005326:	230c      	movs	r3, #12
 8005328:	4013      	ands	r3, r2
 800532a:	2b0c      	cmp	r3, #12
 800532c:	d014      	beq.n	8005358 <HAL_RCC_GetSysClockFreq+0x40>
 800532e:	d900      	bls.n	8005332 <HAL_RCC_GetSysClockFreq+0x1a>
 8005330:	e07b      	b.n	800542a <HAL_RCC_GetSysClockFreq+0x112>
 8005332:	2b04      	cmp	r3, #4
 8005334:	d002      	beq.n	800533c <HAL_RCC_GetSysClockFreq+0x24>
 8005336:	2b08      	cmp	r3, #8
 8005338:	d00b      	beq.n	8005352 <HAL_RCC_GetSysClockFreq+0x3a>
 800533a:	e076      	b.n	800542a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800533c:	4b44      	ldr	r3, [pc, #272]	; (8005450 <HAL_RCC_GetSysClockFreq+0x138>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2210      	movs	r2, #16
 8005342:	4013      	ands	r3, r2
 8005344:	d002      	beq.n	800534c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005346:	4b43      	ldr	r3, [pc, #268]	; (8005454 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005348:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800534a:	e07c      	b.n	8005446 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800534c:	4b42      	ldr	r3, [pc, #264]	; (8005458 <HAL_RCC_GetSysClockFreq+0x140>)
 800534e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005350:	e079      	b.n	8005446 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005352:	4b42      	ldr	r3, [pc, #264]	; (800545c <HAL_RCC_GetSysClockFreq+0x144>)
 8005354:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005356:	e076      	b.n	8005446 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	0c9a      	lsrs	r2, r3, #18
 800535c:	230f      	movs	r3, #15
 800535e:	401a      	ands	r2, r3
 8005360:	4b3f      	ldr	r3, [pc, #252]	; (8005460 <HAL_RCC_GetSysClockFreq+0x148>)
 8005362:	5c9b      	ldrb	r3, [r3, r2]
 8005364:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005368:	0d9a      	lsrs	r2, r3, #22
 800536a:	2303      	movs	r3, #3
 800536c:	4013      	ands	r3, r2
 800536e:	3301      	adds	r3, #1
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005372:	4b37      	ldr	r3, [pc, #220]	; (8005450 <HAL_RCC_GetSysClockFreq+0x138>)
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	025b      	lsls	r3, r3, #9
 800537a:	4013      	ands	r3, r2
 800537c:	d01a      	beq.n	80053b4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	2300      	movs	r3, #0
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	4a35      	ldr	r2, [pc, #212]	; (800545c <HAL_RCC_GetSysClockFreq+0x144>)
 8005388:	2300      	movs	r3, #0
 800538a:	69b8      	ldr	r0, [r7, #24]
 800538c:	69f9      	ldr	r1, [r7, #28]
 800538e:	f7fa ff79 	bl	8000284 <__aeabi_lmul>
 8005392:	0002      	movs	r2, r0
 8005394:	000b      	movs	r3, r1
 8005396:	0010      	movs	r0, r2
 8005398:	0019      	movs	r1, r3
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f7fa ff4d 	bl	8000244 <__aeabi_uldivmod>
 80053aa:	0002      	movs	r2, r0
 80053ac:	000b      	movs	r3, r1
 80053ae:	0013      	movs	r3, r2
 80053b0:	637b      	str	r3, [r7, #52]	; 0x34
 80053b2:	e037      	b.n	8005424 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80053b4:	4b26      	ldr	r3, [pc, #152]	; (8005450 <HAL_RCC_GetSysClockFreq+0x138>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2210      	movs	r2, #16
 80053ba:	4013      	ands	r3, r2
 80053bc:	d01a      	beq.n	80053f4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c0:	60bb      	str	r3, [r7, #8]
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	4a23      	ldr	r2, [pc, #140]	; (8005454 <HAL_RCC_GetSysClockFreq+0x13c>)
 80053c8:	2300      	movs	r3, #0
 80053ca:	68b8      	ldr	r0, [r7, #8]
 80053cc:	68f9      	ldr	r1, [r7, #12]
 80053ce:	f7fa ff59 	bl	8000284 <__aeabi_lmul>
 80053d2:	0002      	movs	r2, r0
 80053d4:	000b      	movs	r3, r1
 80053d6:	0010      	movs	r0, r2
 80053d8:	0019      	movs	r1, r3
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	603b      	str	r3, [r7, #0]
 80053de:	2300      	movs	r3, #0
 80053e0:	607b      	str	r3, [r7, #4]
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f7fa ff2d 	bl	8000244 <__aeabi_uldivmod>
 80053ea:	0002      	movs	r2, r0
 80053ec:	000b      	movs	r3, r1
 80053ee:	0013      	movs	r3, r2
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
 80053f2:	e017      	b.n	8005424 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	0018      	movs	r0, r3
 80053f8:	2300      	movs	r3, #0
 80053fa:	0019      	movs	r1, r3
 80053fc:	4a16      	ldr	r2, [pc, #88]	; (8005458 <HAL_RCC_GetSysClockFreq+0x140>)
 80053fe:	2300      	movs	r3, #0
 8005400:	f7fa ff40 	bl	8000284 <__aeabi_lmul>
 8005404:	0002      	movs	r2, r0
 8005406:	000b      	movs	r3, r1
 8005408:	0010      	movs	r0, r2
 800540a:	0019      	movs	r1, r3
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	001c      	movs	r4, r3
 8005410:	2300      	movs	r3, #0
 8005412:	001d      	movs	r5, r3
 8005414:	0022      	movs	r2, r4
 8005416:	002b      	movs	r3, r5
 8005418:	f7fa ff14 	bl	8000244 <__aeabi_uldivmod>
 800541c:	0002      	movs	r2, r0
 800541e:	000b      	movs	r3, r1
 8005420:	0013      	movs	r3, r2
 8005422:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005426:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005428:	e00d      	b.n	8005446 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800542a:	4b09      	ldr	r3, [pc, #36]	; (8005450 <HAL_RCC_GetSysClockFreq+0x138>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	0b5b      	lsrs	r3, r3, #13
 8005430:	2207      	movs	r2, #7
 8005432:	4013      	ands	r3, r2
 8005434:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	3301      	adds	r3, #1
 800543a:	2280      	movs	r2, #128	; 0x80
 800543c:	0212      	lsls	r2, r2, #8
 800543e:	409a      	lsls	r2, r3
 8005440:	0013      	movs	r3, r2
 8005442:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005444:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005448:	0018      	movs	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	b00e      	add	sp, #56	; 0x38
 800544e:	bdb0      	pop	{r4, r5, r7, pc}
 8005450:	40021000 	.word	0x40021000
 8005454:	003d0900 	.word	0x003d0900
 8005458:	00f42400 	.word	0x00f42400
 800545c:	007a1200 	.word	0x007a1200
 8005460:	08006d24 	.word	0x08006d24

08005464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005468:	4b02      	ldr	r3, [pc, #8]	; (8005474 <HAL_RCC_GetHCLKFreq+0x10>)
 800546a:	681b      	ldr	r3, [r3, #0]
}
 800546c:	0018      	movs	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	2000002c 	.word	0x2000002c

08005478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800547c:	f7ff fff2 	bl	8005464 <HAL_RCC_GetHCLKFreq>
 8005480:	0001      	movs	r1, r0
 8005482:	4b06      	ldr	r3, [pc, #24]	; (800549c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	0a1b      	lsrs	r3, r3, #8
 8005488:	2207      	movs	r2, #7
 800548a:	4013      	ands	r3, r2
 800548c:	4a04      	ldr	r2, [pc, #16]	; (80054a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800548e:	5cd3      	ldrb	r3, [r2, r3]
 8005490:	40d9      	lsrs	r1, r3
 8005492:	000b      	movs	r3, r1
}
 8005494:	0018      	movs	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	40021000 	.word	0x40021000
 80054a0:	08006d1c 	.word	0x08006d1c

080054a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054a8:	f7ff ffdc 	bl	8005464 <HAL_RCC_GetHCLKFreq>
 80054ac:	0001      	movs	r1, r0
 80054ae:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	0adb      	lsrs	r3, r3, #11
 80054b4:	2207      	movs	r2, #7
 80054b6:	4013      	ands	r3, r2
 80054b8:	4a04      	ldr	r2, [pc, #16]	; (80054cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80054ba:	5cd3      	ldrb	r3, [r2, r3]
 80054bc:	40d9      	lsrs	r1, r3
 80054be:	000b      	movs	r3, r1
}
 80054c0:	0018      	movs	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	40021000 	.word	0x40021000
 80054cc:	08006d1c 	.word	0x08006d1c

080054d0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80054d8:	2317      	movs	r3, #23
 80054da:	18fb      	adds	r3, r7, r3
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2220      	movs	r2, #32
 80054e6:	4013      	ands	r3, r2
 80054e8:	d106      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	2380      	movs	r3, #128	; 0x80
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	4013      	ands	r3, r2
 80054f4:	d100      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80054f6:	e104      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054f8:	4bb1      	ldr	r3, [pc, #708]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054fc:	2380      	movs	r3, #128	; 0x80
 80054fe:	055b      	lsls	r3, r3, #21
 8005500:	4013      	ands	r3, r2
 8005502:	d10a      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005504:	4bae      	ldr	r3, [pc, #696]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005508:	4bad      	ldr	r3, [pc, #692]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800550a:	2180      	movs	r1, #128	; 0x80
 800550c:	0549      	lsls	r1, r1, #21
 800550e:	430a      	orrs	r2, r1
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005512:	2317      	movs	r3, #23
 8005514:	18fb      	adds	r3, r7, r3
 8005516:	2201      	movs	r2, #1
 8005518:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551a:	4baa      	ldr	r3, [pc, #680]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	2380      	movs	r3, #128	; 0x80
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	4013      	ands	r3, r2
 8005524:	d11a      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005526:	4ba7      	ldr	r3, [pc, #668]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	4ba6      	ldr	r3, [pc, #664]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800552c:	2180      	movs	r1, #128	; 0x80
 800552e:	0049      	lsls	r1, r1, #1
 8005530:	430a      	orrs	r2, r1
 8005532:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005534:	f7fe f87e 	bl	8003634 <HAL_GetTick>
 8005538:	0003      	movs	r3, r0
 800553a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800553c:	e008      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800553e:	f7fe f879 	bl	8003634 <HAL_GetTick>
 8005542:	0002      	movs	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b64      	cmp	r3, #100	; 0x64
 800554a:	d901      	bls.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e133      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005550:	4b9c      	ldr	r3, [pc, #624]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	2380      	movs	r3, #128	; 0x80
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	4013      	ands	r3, r2
 800555a:	d0f0      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800555c:	4b98      	ldr	r3, [pc, #608]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	23c0      	movs	r3, #192	; 0xc0
 8005562:	039b      	lsls	r3, r3, #14
 8005564:	4013      	ands	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	23c0      	movs	r3, #192	; 0xc0
 800556e:	039b      	lsls	r3, r3, #14
 8005570:	4013      	ands	r3, r2
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	429a      	cmp	r2, r3
 8005576:	d107      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	23c0      	movs	r3, #192	; 0xc0
 800557e:	039b      	lsls	r3, r3, #14
 8005580:	4013      	ands	r3, r2
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	429a      	cmp	r2, r3
 8005586:	d013      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	23c0      	movs	r3, #192	; 0xc0
 800558e:	029b      	lsls	r3, r3, #10
 8005590:	401a      	ands	r2, r3
 8005592:	23c0      	movs	r3, #192	; 0xc0
 8005594:	029b      	lsls	r3, r3, #10
 8005596:	429a      	cmp	r2, r3
 8005598:	d10a      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800559a:	4b89      	ldr	r3, [pc, #548]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	2380      	movs	r3, #128	; 0x80
 80055a0:	029b      	lsls	r3, r3, #10
 80055a2:	401a      	ands	r2, r3
 80055a4:	2380      	movs	r3, #128	; 0x80
 80055a6:	029b      	lsls	r3, r3, #10
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d101      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e103      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80055b0:	4b83      	ldr	r3, [pc, #524]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055b4:	23c0      	movs	r3, #192	; 0xc0
 80055b6:	029b      	lsls	r3, r3, #10
 80055b8:	4013      	ands	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d049      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	23c0      	movs	r3, #192	; 0xc0
 80055c8:	029b      	lsls	r3, r3, #10
 80055ca:	4013      	ands	r3, r2
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d004      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2220      	movs	r2, #32
 80055d8:	4013      	ands	r3, r2
 80055da:	d10d      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	23c0      	movs	r3, #192	; 0xc0
 80055e2:	029b      	lsls	r3, r3, #10
 80055e4:	4013      	ands	r3, r2
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d034      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	2380      	movs	r3, #128	; 0x80
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	4013      	ands	r3, r2
 80055f6:	d02e      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80055f8:	4b71      	ldr	r3, [pc, #452]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fc:	4a72      	ldr	r2, [pc, #456]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80055fe:	4013      	ands	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005602:	4b6f      	ldr	r3, [pc, #444]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005606:	4b6e      	ldr	r3, [pc, #440]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005608:	2180      	movs	r1, #128	; 0x80
 800560a:	0309      	lsls	r1, r1, #12
 800560c:	430a      	orrs	r2, r1
 800560e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005610:	4b6b      	ldr	r3, [pc, #428]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005612:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005614:	4b6a      	ldr	r3, [pc, #424]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005616:	496d      	ldr	r1, [pc, #436]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005618:	400a      	ands	r2, r1
 800561a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800561c:	4b68      	ldr	r3, [pc, #416]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	2380      	movs	r3, #128	; 0x80
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	4013      	ands	r3, r2
 800562a:	d014      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562c:	f7fe f802 	bl	8003634 <HAL_GetTick>
 8005630:	0003      	movs	r3, r0
 8005632:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005634:	e009      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005636:	f7fd fffd 	bl	8003634 <HAL_GetTick>
 800563a:	0002      	movs	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	4a63      	ldr	r2, [pc, #396]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d901      	bls.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e0b6      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800564a:	4b5d      	ldr	r3, [pc, #372]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800564c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800564e:	2380      	movs	r3, #128	; 0x80
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4013      	ands	r3, r2
 8005654:	d0ef      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	2380      	movs	r3, #128	; 0x80
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	4013      	ands	r3, r2
 8005660:	d01f      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	23c0      	movs	r3, #192	; 0xc0
 8005668:	029b      	lsls	r3, r3, #10
 800566a:	401a      	ands	r2, r3
 800566c:	23c0      	movs	r3, #192	; 0xc0
 800566e:	029b      	lsls	r3, r3, #10
 8005670:	429a      	cmp	r2, r3
 8005672:	d10c      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005674:	4b52      	ldr	r3, [pc, #328]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a56      	ldr	r2, [pc, #344]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800567a:	4013      	ands	r3, r2
 800567c:	0019      	movs	r1, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	23c0      	movs	r3, #192	; 0xc0
 8005684:	039b      	lsls	r3, r3, #14
 8005686:	401a      	ands	r2, r3
 8005688:	4b4d      	ldr	r3, [pc, #308]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800568a:	430a      	orrs	r2, r1
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	4b4c      	ldr	r3, [pc, #304]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005690:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	23c0      	movs	r3, #192	; 0xc0
 8005698:	029b      	lsls	r3, r3, #10
 800569a:	401a      	ands	r2, r3
 800569c:	4b48      	ldr	r3, [pc, #288]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800569e:	430a      	orrs	r2, r1
 80056a0:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2220      	movs	r2, #32
 80056a8:	4013      	ands	r3, r2
 80056aa:	d01f      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	23c0      	movs	r3, #192	; 0xc0
 80056b2:	029b      	lsls	r3, r3, #10
 80056b4:	401a      	ands	r2, r3
 80056b6:	23c0      	movs	r3, #192	; 0xc0
 80056b8:	029b      	lsls	r3, r3, #10
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d10c      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80056be:	4b40      	ldr	r3, [pc, #256]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a44      	ldr	r2, [pc, #272]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	0019      	movs	r1, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	23c0      	movs	r3, #192	; 0xc0
 80056ce:	039b      	lsls	r3, r3, #14
 80056d0:	401a      	ands	r2, r3
 80056d2:	4b3b      	ldr	r3, [pc, #236]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056d4:	430a      	orrs	r2, r1
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	4b39      	ldr	r3, [pc, #228]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056da:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	23c0      	movs	r3, #192	; 0xc0
 80056e2:	029b      	lsls	r3, r3, #10
 80056e4:	401a      	ands	r2, r3
 80056e6:	4b36      	ldr	r3, [pc, #216]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056e8:	430a      	orrs	r2, r1
 80056ea:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80056ec:	2317      	movs	r3, #23
 80056ee:	18fb      	adds	r3, r7, r3
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d105      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056f6:	4b32      	ldr	r3, [pc, #200]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056fa:	4b31      	ldr	r3, [pc, #196]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056fc:	4936      	ldr	r1, [pc, #216]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80056fe:	400a      	ands	r2, r1
 8005700:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2201      	movs	r2, #1
 8005708:	4013      	ands	r3, r2
 800570a:	d009      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800570c:	4b2c      	ldr	r3, [pc, #176]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800570e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005710:	2203      	movs	r2, #3
 8005712:	4393      	bics	r3, r2
 8005714:	0019      	movs	r1, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	4b29      	ldr	r3, [pc, #164]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800571c:	430a      	orrs	r2, r1
 800571e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2202      	movs	r2, #2
 8005726:	4013      	ands	r3, r2
 8005728:	d009      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800572a:	4b25      	ldr	r3, [pc, #148]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800572c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800572e:	220c      	movs	r2, #12
 8005730:	4393      	bics	r3, r2
 8005732:	0019      	movs	r1, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800573a:	430a      	orrs	r2, r1
 800573c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2204      	movs	r2, #4
 8005744:	4013      	ands	r3, r2
 8005746:	d009      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005748:	4b1d      	ldr	r3, [pc, #116]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800574a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574c:	4a23      	ldr	r2, [pc, #140]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800574e:	4013      	ands	r3, r2
 8005750:	0019      	movs	r1, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695a      	ldr	r2, [r3, #20]
 8005756:	4b1a      	ldr	r3, [pc, #104]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005758:	430a      	orrs	r2, r1
 800575a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2208      	movs	r2, #8
 8005762:	4013      	ands	r3, r2
 8005764:	d009      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005766:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576a:	4a1d      	ldr	r2, [pc, #116]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800576c:	4013      	ands	r3, r2
 800576e:	0019      	movs	r1, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699a      	ldr	r2, [r3, #24]
 8005774:	4b12      	ldr	r3, [pc, #72]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005776:	430a      	orrs	r2, r1
 8005778:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2240      	movs	r2, #64	; 0x40
 8005780:	4013      	ands	r3, r2
 8005782:	d009      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005784:	4b0e      	ldr	r3, [pc, #56]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005788:	4a16      	ldr	r2, [pc, #88]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800578a:	4013      	ands	r3, r2
 800578c:	0019      	movs	r1, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1a      	ldr	r2, [r3, #32]
 8005792:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005794:	430a      	orrs	r2, r1
 8005796:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2280      	movs	r2, #128	; 0x80
 800579e:	4013      	ands	r3, r2
 80057a0:	d009      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80057a2:	4b07      	ldr	r3, [pc, #28]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a6:	4a10      	ldr	r2, [pc, #64]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	0019      	movs	r1, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	4b03      	ldr	r3, [pc, #12]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057b2:	430a      	orrs	r2, r1
 80057b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	0018      	movs	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	b006      	add	sp, #24
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40021000 	.word	0x40021000
 80057c4:	40007000 	.word	0x40007000
 80057c8:	fffcffff 	.word	0xfffcffff
 80057cc:	fff7ffff 	.word	0xfff7ffff
 80057d0:	00001388 	.word	0x00001388
 80057d4:	ffcfffff 	.word	0xffcfffff
 80057d8:	efffffff 	.word	0xefffffff
 80057dc:	fffff3ff 	.word	0xfffff3ff
 80057e0:	ffffcfff 	.word	0xffffcfff
 80057e4:	fbffffff 	.word	0xfbffffff
 80057e8:	fff3ffff 	.word	0xfff3ffff

080057ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e044      	b.n	8005888 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005802:	2b00      	cmp	r3, #0
 8005804:	d107      	bne.n	8005816 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2278      	movs	r2, #120	; 0x78
 800580a:	2100      	movs	r1, #0
 800580c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	0018      	movs	r0, r3
 8005812:	f7fd fc9f 	bl	8003154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2224      	movs	r2, #36	; 0x24
 800581a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2101      	movs	r1, #1
 8005828:	438a      	bics	r2, r1
 800582a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	0018      	movs	r0, r3
 8005830:	f000 f8d0 	bl	80059d4 <UART_SetConfig>
 8005834:	0003      	movs	r3, r0
 8005836:	2b01      	cmp	r3, #1
 8005838:	d101      	bne.n	800583e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e024      	b.n	8005888 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	0018      	movs	r0, r3
 800584a:	f000 fb47 	bl	8005edc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	490d      	ldr	r1, [pc, #52]	; (8005890 <HAL_UART_Init+0xa4>)
 800585a:	400a      	ands	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	212a      	movs	r1, #42	; 0x2a
 800586a:	438a      	bics	r2, r1
 800586c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2101      	movs	r1, #1
 800587a:	430a      	orrs	r2, r1
 800587c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	0018      	movs	r0, r3
 8005882:	f000 fbdf 	bl	8006044 <UART_CheckIdleState>
 8005886:	0003      	movs	r3, r0
}
 8005888:	0018      	movs	r0, r3
 800588a:	46bd      	mov	sp, r7
 800588c:	b002      	add	sp, #8
 800588e:	bd80      	pop	{r7, pc}
 8005890:	ffffb7ff 	.word	0xffffb7ff

08005894 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08a      	sub	sp, #40	; 0x28
 8005898:	af02      	add	r7, sp, #8
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	1dbb      	adds	r3, r7, #6
 80058a2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	d000      	beq.n	80058ae <HAL_UART_Transmit+0x1a>
 80058ac:	e08c      	b.n	80059c8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <HAL_UART_Transmit+0x28>
 80058b4:	1dbb      	adds	r3, r7, #6
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e084      	b.n	80059ca <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	2380      	movs	r3, #128	; 0x80
 80058c6:	015b      	lsls	r3, r3, #5
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d109      	bne.n	80058e0 <HAL_UART_Transmit+0x4c>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d105      	bne.n	80058e0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2201      	movs	r2, #1
 80058d8:	4013      	ands	r3, r2
 80058da:	d001      	beq.n	80058e0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e074      	b.n	80059ca <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2284      	movs	r2, #132	; 0x84
 80058e4:	2100      	movs	r1, #0
 80058e6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2221      	movs	r2, #33	; 0x21
 80058ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058ee:	f7fd fea1 	bl	8003634 <HAL_GetTick>
 80058f2:	0003      	movs	r3, r0
 80058f4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	1dba      	adds	r2, r7, #6
 80058fa:	2150      	movs	r1, #80	; 0x50
 80058fc:	8812      	ldrh	r2, [r2, #0]
 80058fe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	1dba      	adds	r2, r7, #6
 8005904:	2152      	movs	r1, #82	; 0x52
 8005906:	8812      	ldrh	r2, [r2, #0]
 8005908:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	2380      	movs	r3, #128	; 0x80
 8005910:	015b      	lsls	r3, r3, #5
 8005912:	429a      	cmp	r2, r3
 8005914:	d108      	bne.n	8005928 <HAL_UART_Transmit+0x94>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d104      	bne.n	8005928 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800591e:	2300      	movs	r3, #0
 8005920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	e003      	b.n	8005930 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800592c:	2300      	movs	r3, #0
 800592e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005930:	e02f      	b.n	8005992 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	0013      	movs	r3, r2
 800593c:	2200      	movs	r2, #0
 800593e:	2180      	movs	r1, #128	; 0x80
 8005940:	f000 fc28 	bl	8006194 <UART_WaitOnFlagUntilTimeout>
 8005944:	1e03      	subs	r3, r0, #0
 8005946:	d004      	beq.n	8005952 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e03b      	b.n	80059ca <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10b      	bne.n	8005970 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	001a      	movs	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	05d2      	lsls	r2, r2, #23
 8005964:	0dd2      	lsrs	r2, r2, #23
 8005966:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	3302      	adds	r3, #2
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	e007      	b.n	8005980 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	781a      	ldrb	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	3301      	adds	r3, #1
 800597e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2252      	movs	r2, #82	; 0x52
 8005984:	5a9b      	ldrh	r3, [r3, r2]
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b299      	uxth	r1, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2252      	movs	r2, #82	; 0x52
 8005990:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2252      	movs	r2, #82	; 0x52
 8005996:	5a9b      	ldrh	r3, [r3, r2]
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1c9      	bne.n	8005932 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	0013      	movs	r3, r2
 80059a8:	2200      	movs	r2, #0
 80059aa:	2140      	movs	r1, #64	; 0x40
 80059ac:	f000 fbf2 	bl	8006194 <UART_WaitOnFlagUntilTimeout>
 80059b0:	1e03      	subs	r3, r0, #0
 80059b2:	d004      	beq.n	80059be <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e005      	b.n	80059ca <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2220      	movs	r2, #32
 80059c2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	e000      	b.n	80059ca <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80059c8:	2302      	movs	r3, #2
  }
}
 80059ca:	0018      	movs	r0, r3
 80059cc:	46bd      	mov	sp, r7
 80059ce:	b008      	add	sp, #32
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d4:	b5b0      	push	{r4, r5, r7, lr}
 80059d6:	b08e      	sub	sp, #56	; 0x38
 80059d8:	af00      	add	r7, sp, #0
 80059da:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059dc:	231a      	movs	r3, #26
 80059de:	2218      	movs	r2, #24
 80059e0:	189b      	adds	r3, r3, r2
 80059e2:	19db      	adds	r3, r3, r7
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	431a      	orrs	r2, r3
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4ac6      	ldr	r2, [pc, #792]	; (8005d20 <UART_SetConfig+0x34c>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a12:	430a      	orrs	r2, r1
 8005a14:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	4ac1      	ldr	r2, [pc, #772]	; (8005d24 <UART_SetConfig+0x350>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	0019      	movs	r1, r3
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4abb      	ldr	r2, [pc, #748]	; (8005d28 <UART_SetConfig+0x354>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a44:	4313      	orrs	r3, r2
 8005a46:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	4ab7      	ldr	r2, [pc, #732]	; (8005d2c <UART_SetConfig+0x358>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	0019      	movs	r1, r3
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4ab3      	ldr	r2, [pc, #716]	; (8005d30 <UART_SetConfig+0x35c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d131      	bne.n	8005acc <UART_SetConfig+0xf8>
 8005a68:	4bb2      	ldr	r3, [pc, #712]	; (8005d34 <UART_SetConfig+0x360>)
 8005a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	4013      	ands	r3, r2
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d01d      	beq.n	8005ab0 <UART_SetConfig+0xdc>
 8005a74:	d823      	bhi.n	8005abe <UART_SetConfig+0xea>
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d00c      	beq.n	8005a94 <UART_SetConfig+0xc0>
 8005a7a:	d820      	bhi.n	8005abe <UART_SetConfig+0xea>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <UART_SetConfig+0xb2>
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d00e      	beq.n	8005aa2 <UART_SetConfig+0xce>
 8005a84:	e01b      	b.n	8005abe <UART_SetConfig+0xea>
 8005a86:	231b      	movs	r3, #27
 8005a88:	2218      	movs	r2, #24
 8005a8a:	189b      	adds	r3, r3, r2
 8005a8c:	19db      	adds	r3, r3, r7
 8005a8e:	2201      	movs	r2, #1
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	e09c      	b.n	8005bce <UART_SetConfig+0x1fa>
 8005a94:	231b      	movs	r3, #27
 8005a96:	2218      	movs	r2, #24
 8005a98:	189b      	adds	r3, r3, r2
 8005a9a:	19db      	adds	r3, r3, r7
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	701a      	strb	r2, [r3, #0]
 8005aa0:	e095      	b.n	8005bce <UART_SetConfig+0x1fa>
 8005aa2:	231b      	movs	r3, #27
 8005aa4:	2218      	movs	r2, #24
 8005aa6:	189b      	adds	r3, r3, r2
 8005aa8:	19db      	adds	r3, r3, r7
 8005aaa:	2204      	movs	r2, #4
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	e08e      	b.n	8005bce <UART_SetConfig+0x1fa>
 8005ab0:	231b      	movs	r3, #27
 8005ab2:	2218      	movs	r2, #24
 8005ab4:	189b      	adds	r3, r3, r2
 8005ab6:	19db      	adds	r3, r3, r7
 8005ab8:	2208      	movs	r2, #8
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	e087      	b.n	8005bce <UART_SetConfig+0x1fa>
 8005abe:	231b      	movs	r3, #27
 8005ac0:	2218      	movs	r2, #24
 8005ac2:	189b      	adds	r3, r3, r2
 8005ac4:	19db      	adds	r3, r3, r7
 8005ac6:	2210      	movs	r2, #16
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	e080      	b.n	8005bce <UART_SetConfig+0x1fa>
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a99      	ldr	r2, [pc, #612]	; (8005d38 <UART_SetConfig+0x364>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d131      	bne.n	8005b3a <UART_SetConfig+0x166>
 8005ad6:	4b97      	ldr	r3, [pc, #604]	; (8005d34 <UART_SetConfig+0x360>)
 8005ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ada:	220c      	movs	r2, #12
 8005adc:	4013      	ands	r3, r2
 8005ade:	2b0c      	cmp	r3, #12
 8005ae0:	d01d      	beq.n	8005b1e <UART_SetConfig+0x14a>
 8005ae2:	d823      	bhi.n	8005b2c <UART_SetConfig+0x158>
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d00c      	beq.n	8005b02 <UART_SetConfig+0x12e>
 8005ae8:	d820      	bhi.n	8005b2c <UART_SetConfig+0x158>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <UART_SetConfig+0x120>
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d00e      	beq.n	8005b10 <UART_SetConfig+0x13c>
 8005af2:	e01b      	b.n	8005b2c <UART_SetConfig+0x158>
 8005af4:	231b      	movs	r3, #27
 8005af6:	2218      	movs	r2, #24
 8005af8:	189b      	adds	r3, r3, r2
 8005afa:	19db      	adds	r3, r3, r7
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	e065      	b.n	8005bce <UART_SetConfig+0x1fa>
 8005b02:	231b      	movs	r3, #27
 8005b04:	2218      	movs	r2, #24
 8005b06:	189b      	adds	r3, r3, r2
 8005b08:	19db      	adds	r3, r3, r7
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	701a      	strb	r2, [r3, #0]
 8005b0e:	e05e      	b.n	8005bce <UART_SetConfig+0x1fa>
 8005b10:	231b      	movs	r3, #27
 8005b12:	2218      	movs	r2, #24
 8005b14:	189b      	adds	r3, r3, r2
 8005b16:	19db      	adds	r3, r3, r7
 8005b18:	2204      	movs	r2, #4
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	e057      	b.n	8005bce <UART_SetConfig+0x1fa>
 8005b1e:	231b      	movs	r3, #27
 8005b20:	2218      	movs	r2, #24
 8005b22:	189b      	adds	r3, r3, r2
 8005b24:	19db      	adds	r3, r3, r7
 8005b26:	2208      	movs	r2, #8
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	e050      	b.n	8005bce <UART_SetConfig+0x1fa>
 8005b2c:	231b      	movs	r3, #27
 8005b2e:	2218      	movs	r2, #24
 8005b30:	189b      	adds	r3, r3, r2
 8005b32:	19db      	adds	r3, r3, r7
 8005b34:	2210      	movs	r2, #16
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	e049      	b.n	8005bce <UART_SetConfig+0x1fa>
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a7a      	ldr	r2, [pc, #488]	; (8005d28 <UART_SetConfig+0x354>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d13e      	bne.n	8005bc2 <UART_SetConfig+0x1ee>
 8005b44:	4b7b      	ldr	r3, [pc, #492]	; (8005d34 <UART_SetConfig+0x360>)
 8005b46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b48:	23c0      	movs	r3, #192	; 0xc0
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	22c0      	movs	r2, #192	; 0xc0
 8005b50:	0112      	lsls	r2, r2, #4
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d027      	beq.n	8005ba6 <UART_SetConfig+0x1d2>
 8005b56:	22c0      	movs	r2, #192	; 0xc0
 8005b58:	0112      	lsls	r2, r2, #4
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d82a      	bhi.n	8005bb4 <UART_SetConfig+0x1e0>
 8005b5e:	2280      	movs	r2, #128	; 0x80
 8005b60:	0112      	lsls	r2, r2, #4
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d011      	beq.n	8005b8a <UART_SetConfig+0x1b6>
 8005b66:	2280      	movs	r2, #128	; 0x80
 8005b68:	0112      	lsls	r2, r2, #4
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d822      	bhi.n	8005bb4 <UART_SetConfig+0x1e0>
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <UART_SetConfig+0x1a8>
 8005b72:	2280      	movs	r2, #128	; 0x80
 8005b74:	00d2      	lsls	r2, r2, #3
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00e      	beq.n	8005b98 <UART_SetConfig+0x1c4>
 8005b7a:	e01b      	b.n	8005bb4 <UART_SetConfig+0x1e0>
 8005b7c:	231b      	movs	r3, #27
 8005b7e:	2218      	movs	r2, #24
 8005b80:	189b      	adds	r3, r3, r2
 8005b82:	19db      	adds	r3, r3, r7
 8005b84:	2200      	movs	r2, #0
 8005b86:	701a      	strb	r2, [r3, #0]
 8005b88:	e021      	b.n	8005bce <UART_SetConfig+0x1fa>
 8005b8a:	231b      	movs	r3, #27
 8005b8c:	2218      	movs	r2, #24
 8005b8e:	189b      	adds	r3, r3, r2
 8005b90:	19db      	adds	r3, r3, r7
 8005b92:	2202      	movs	r2, #2
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e01a      	b.n	8005bce <UART_SetConfig+0x1fa>
 8005b98:	231b      	movs	r3, #27
 8005b9a:	2218      	movs	r2, #24
 8005b9c:	189b      	adds	r3, r3, r2
 8005b9e:	19db      	adds	r3, r3, r7
 8005ba0:	2204      	movs	r2, #4
 8005ba2:	701a      	strb	r2, [r3, #0]
 8005ba4:	e013      	b.n	8005bce <UART_SetConfig+0x1fa>
 8005ba6:	231b      	movs	r3, #27
 8005ba8:	2218      	movs	r2, #24
 8005baa:	189b      	adds	r3, r3, r2
 8005bac:	19db      	adds	r3, r3, r7
 8005bae:	2208      	movs	r2, #8
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	e00c      	b.n	8005bce <UART_SetConfig+0x1fa>
 8005bb4:	231b      	movs	r3, #27
 8005bb6:	2218      	movs	r2, #24
 8005bb8:	189b      	adds	r3, r3, r2
 8005bba:	19db      	adds	r3, r3, r7
 8005bbc:	2210      	movs	r2, #16
 8005bbe:	701a      	strb	r2, [r3, #0]
 8005bc0:	e005      	b.n	8005bce <UART_SetConfig+0x1fa>
 8005bc2:	231b      	movs	r3, #27
 8005bc4:	2218      	movs	r2, #24
 8005bc6:	189b      	adds	r3, r3, r2
 8005bc8:	19db      	adds	r3, r3, r7
 8005bca:	2210      	movs	r2, #16
 8005bcc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a55      	ldr	r2, [pc, #340]	; (8005d28 <UART_SetConfig+0x354>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d000      	beq.n	8005bda <UART_SetConfig+0x206>
 8005bd8:	e084      	b.n	8005ce4 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bda:	231b      	movs	r3, #27
 8005bdc:	2218      	movs	r2, #24
 8005bde:	189b      	adds	r3, r3, r2
 8005be0:	19db      	adds	r3, r3, r7
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d01d      	beq.n	8005c24 <UART_SetConfig+0x250>
 8005be8:	dc20      	bgt.n	8005c2c <UART_SetConfig+0x258>
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d015      	beq.n	8005c1a <UART_SetConfig+0x246>
 8005bee:	dc1d      	bgt.n	8005c2c <UART_SetConfig+0x258>
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <UART_SetConfig+0x226>
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d005      	beq.n	8005c04 <UART_SetConfig+0x230>
 8005bf8:	e018      	b.n	8005c2c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bfa:	f7ff fc3d 	bl	8005478 <HAL_RCC_GetPCLK1Freq>
 8005bfe:	0003      	movs	r3, r0
 8005c00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c02:	e01c      	b.n	8005c3e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c04:	4b4b      	ldr	r3, [pc, #300]	; (8005d34 <UART_SetConfig+0x360>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2210      	movs	r2, #16
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	d002      	beq.n	8005c14 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005c0e:	4b4b      	ldr	r3, [pc, #300]	; (8005d3c <UART_SetConfig+0x368>)
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c12:	e014      	b.n	8005c3e <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8005c14:	4b4a      	ldr	r3, [pc, #296]	; (8005d40 <UART_SetConfig+0x36c>)
 8005c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c18:	e011      	b.n	8005c3e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c1a:	f7ff fb7d 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 8005c1e:	0003      	movs	r3, r0
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c22:	e00c      	b.n	8005c3e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c24:	2380      	movs	r3, #128	; 0x80
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c2a:	e008      	b.n	8005c3e <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005c30:	231a      	movs	r3, #26
 8005c32:	2218      	movs	r2, #24
 8005c34:	189b      	adds	r3, r3, r2
 8005c36:	19db      	adds	r3, r3, r7
 8005c38:	2201      	movs	r2, #1
 8005c3a:	701a      	strb	r2, [r3, #0]
        break;
 8005c3c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d100      	bne.n	8005c46 <UART_SetConfig+0x272>
 8005c44:	e132      	b.n	8005eac <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	0013      	movs	r3, r2
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	189b      	adds	r3, r3, r2
 8005c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d305      	bcc.n	8005c62 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d906      	bls.n	8005c70 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8005c62:	231a      	movs	r3, #26
 8005c64:	2218      	movs	r2, #24
 8005c66:	189b      	adds	r3, r3, r2
 8005c68:	19db      	adds	r3, r3, r7
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	701a      	strb	r2, [r3, #0]
 8005c6e:	e11d      	b.n	8005eac <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	2300      	movs	r3, #0
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	6939      	ldr	r1, [r7, #16]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	000b      	movs	r3, r1
 8005c7e:	0e1b      	lsrs	r3, r3, #24
 8005c80:	0010      	movs	r0, r2
 8005c82:	0205      	lsls	r5, r0, #8
 8005c84:	431d      	orrs	r5, r3
 8005c86:	000b      	movs	r3, r1
 8005c88:	021c      	lsls	r4, r3, #8
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	085b      	lsrs	r3, r3, #1
 8005c90:	60bb      	str	r3, [r7, #8]
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	68b8      	ldr	r0, [r7, #8]
 8005c98:	68f9      	ldr	r1, [r7, #12]
 8005c9a:	1900      	adds	r0, r0, r4
 8005c9c:	4169      	adcs	r1, r5
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	607b      	str	r3, [r7, #4]
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f7fa faca 	bl	8000244 <__aeabi_uldivmod>
 8005cb0:	0002      	movs	r2, r0
 8005cb2:	000b      	movs	r3, r1
 8005cb4:	0013      	movs	r3, r2
 8005cb6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cba:	23c0      	movs	r3, #192	; 0xc0
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d309      	bcc.n	8005cd6 <UART_SetConfig+0x302>
 8005cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cc4:	2380      	movs	r3, #128	; 0x80
 8005cc6:	035b      	lsls	r3, r3, #13
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d204      	bcs.n	8005cd6 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cd2:	60da      	str	r2, [r3, #12]
 8005cd4:	e0ea      	b.n	8005eac <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8005cd6:	231a      	movs	r3, #26
 8005cd8:	2218      	movs	r2, #24
 8005cda:	189b      	adds	r3, r3, r2
 8005cdc:	19db      	adds	r3, r3, r7
 8005cde:	2201      	movs	r2, #1
 8005ce0:	701a      	strb	r2, [r3, #0]
 8005ce2:	e0e3      	b.n	8005eac <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	69da      	ldr	r2, [r3, #28]
 8005ce8:	2380      	movs	r3, #128	; 0x80
 8005cea:	021b      	lsls	r3, r3, #8
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d000      	beq.n	8005cf2 <UART_SetConfig+0x31e>
 8005cf0:	e085      	b.n	8005dfe <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8005cf2:	231b      	movs	r3, #27
 8005cf4:	2218      	movs	r2, #24
 8005cf6:	189b      	adds	r3, r3, r2
 8005cf8:	19db      	adds	r3, r3, r7
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d837      	bhi.n	8005d70 <UART_SetConfig+0x39c>
 8005d00:	009a      	lsls	r2, r3, #2
 8005d02:	4b10      	ldr	r3, [pc, #64]	; (8005d44 <UART_SetConfig+0x370>)
 8005d04:	18d3      	adds	r3, r2, r3
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d0a:	f7ff fbb5 	bl	8005478 <HAL_RCC_GetPCLK1Freq>
 8005d0e:	0003      	movs	r3, r0
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d12:	e036      	b.n	8005d82 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d14:	f7ff fbc6 	bl	80054a4 <HAL_RCC_GetPCLK2Freq>
 8005d18:	0003      	movs	r3, r0
 8005d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d1c:	e031      	b.n	8005d82 <UART_SetConfig+0x3ae>
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	efff69f3 	.word	0xefff69f3
 8005d24:	ffffcfff 	.word	0xffffcfff
 8005d28:	40004800 	.word	0x40004800
 8005d2c:	fffff4ff 	.word	0xfffff4ff
 8005d30:	40013800 	.word	0x40013800
 8005d34:	40021000 	.word	0x40021000
 8005d38:	40004400 	.word	0x40004400
 8005d3c:	003d0900 	.word	0x003d0900
 8005d40:	00f42400 	.word	0x00f42400
 8005d44:	08006d30 	.word	0x08006d30
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d48:	4b60      	ldr	r3, [pc, #384]	; (8005ecc <UART_SetConfig+0x4f8>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2210      	movs	r2, #16
 8005d4e:	4013      	ands	r3, r2
 8005d50:	d002      	beq.n	8005d58 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005d52:	4b5f      	ldr	r3, [pc, #380]	; (8005ed0 <UART_SetConfig+0x4fc>)
 8005d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d56:	e014      	b.n	8005d82 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8005d58:	4b5e      	ldr	r3, [pc, #376]	; (8005ed4 <UART_SetConfig+0x500>)
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d5c:	e011      	b.n	8005d82 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d5e:	f7ff fadb 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 8005d62:	0003      	movs	r3, r0
 8005d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d66:	e00c      	b.n	8005d82 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d68:	2380      	movs	r3, #128	; 0x80
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d6e:	e008      	b.n	8005d82 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005d74:	231a      	movs	r3, #26
 8005d76:	2218      	movs	r2, #24
 8005d78:	189b      	adds	r3, r3, r2
 8005d7a:	19db      	adds	r3, r3, r7
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	701a      	strb	r2, [r3, #0]
        break;
 8005d80:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d100      	bne.n	8005d8a <UART_SetConfig+0x3b6>
 8005d88:	e090      	b.n	8005eac <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	005a      	lsls	r2, r3, #1
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	085b      	lsrs	r3, r3, #1
 8005d94:	18d2      	adds	r2, r2, r3
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	0019      	movs	r1, r3
 8005d9c:	0010      	movs	r0, r2
 8005d9e:	f7fa f9c5 	bl	800012c <__udivsi3>
 8005da2:	0003      	movs	r3, r0
 8005da4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	2b0f      	cmp	r3, #15
 8005daa:	d921      	bls.n	8005df0 <UART_SetConfig+0x41c>
 8005dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dae:	2380      	movs	r3, #128	; 0x80
 8005db0:	025b      	lsls	r3, r3, #9
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d21c      	bcs.n	8005df0 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	200e      	movs	r0, #14
 8005dbc:	2418      	movs	r4, #24
 8005dbe:	1903      	adds	r3, r0, r4
 8005dc0:	19db      	adds	r3, r3, r7
 8005dc2:	210f      	movs	r1, #15
 8005dc4:	438a      	bics	r2, r1
 8005dc6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2207      	movs	r2, #7
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	b299      	uxth	r1, r3
 8005dd4:	1903      	adds	r3, r0, r4
 8005dd6:	19db      	adds	r3, r3, r7
 8005dd8:	1902      	adds	r2, r0, r4
 8005dda:	19d2      	adds	r2, r2, r7
 8005ddc:	8812      	ldrh	r2, [r2, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	1902      	adds	r2, r0, r4
 8005de8:	19d2      	adds	r2, r2, r7
 8005dea:	8812      	ldrh	r2, [r2, #0]
 8005dec:	60da      	str	r2, [r3, #12]
 8005dee:	e05d      	b.n	8005eac <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8005df0:	231a      	movs	r3, #26
 8005df2:	2218      	movs	r2, #24
 8005df4:	189b      	adds	r3, r3, r2
 8005df6:	19db      	adds	r3, r3, r7
 8005df8:	2201      	movs	r2, #1
 8005dfa:	701a      	strb	r2, [r3, #0]
 8005dfc:	e056      	b.n	8005eac <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dfe:	231b      	movs	r3, #27
 8005e00:	2218      	movs	r2, #24
 8005e02:	189b      	adds	r3, r3, r2
 8005e04:	19db      	adds	r3, r3, r7
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d822      	bhi.n	8005e52 <UART_SetConfig+0x47e>
 8005e0c:	009a      	lsls	r2, r3, #2
 8005e0e:	4b32      	ldr	r3, [pc, #200]	; (8005ed8 <UART_SetConfig+0x504>)
 8005e10:	18d3      	adds	r3, r2, r3
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e16:	f7ff fb2f 	bl	8005478 <HAL_RCC_GetPCLK1Freq>
 8005e1a:	0003      	movs	r3, r0
 8005e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e1e:	e021      	b.n	8005e64 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e20:	f7ff fb40 	bl	80054a4 <HAL_RCC_GetPCLK2Freq>
 8005e24:	0003      	movs	r3, r0
 8005e26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e28:	e01c      	b.n	8005e64 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e2a:	4b28      	ldr	r3, [pc, #160]	; (8005ecc <UART_SetConfig+0x4f8>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2210      	movs	r2, #16
 8005e30:	4013      	ands	r3, r2
 8005e32:	d002      	beq.n	8005e3a <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005e34:	4b26      	ldr	r3, [pc, #152]	; (8005ed0 <UART_SetConfig+0x4fc>)
 8005e36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e38:	e014      	b.n	8005e64 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8005e3a:	4b26      	ldr	r3, [pc, #152]	; (8005ed4 <UART_SetConfig+0x500>)
 8005e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e3e:	e011      	b.n	8005e64 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e40:	f7ff fa6a 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 8005e44:	0003      	movs	r3, r0
 8005e46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e48:	e00c      	b.n	8005e64 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e4a:	2380      	movs	r3, #128	; 0x80
 8005e4c:	021b      	lsls	r3, r3, #8
 8005e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e50:	e008      	b.n	8005e64 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005e56:	231a      	movs	r3, #26
 8005e58:	2218      	movs	r2, #24
 8005e5a:	189b      	adds	r3, r3, r2
 8005e5c:	19db      	adds	r3, r3, r7
 8005e5e:	2201      	movs	r2, #1
 8005e60:	701a      	strb	r2, [r3, #0]
        break;
 8005e62:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d020      	beq.n	8005eac <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	085a      	lsrs	r2, r3, #1
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	18d2      	adds	r2, r2, r3
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	0019      	movs	r1, r3
 8005e7a:	0010      	movs	r0, r2
 8005e7c:	f7fa f956 	bl	800012c <__udivsi3>
 8005e80:	0003      	movs	r3, r0
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	2b0f      	cmp	r3, #15
 8005e88:	d90a      	bls.n	8005ea0 <UART_SetConfig+0x4cc>
 8005e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e8c:	2380      	movs	r3, #128	; 0x80
 8005e8e:	025b      	lsls	r3, r3, #9
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d205      	bcs.n	8005ea0 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	60da      	str	r2, [r3, #12]
 8005e9e:	e005      	b.n	8005eac <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8005ea0:	231a      	movs	r3, #26
 8005ea2:	2218      	movs	r2, #24
 8005ea4:	189b      	adds	r3, r3, r2
 8005ea6:	19db      	adds	r3, r3, r7
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005eb8:	231a      	movs	r3, #26
 8005eba:	2218      	movs	r2, #24
 8005ebc:	189b      	adds	r3, r3, r2
 8005ebe:	19db      	adds	r3, r3, r7
 8005ec0:	781b      	ldrb	r3, [r3, #0]
}
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	b00e      	add	sp, #56	; 0x38
 8005ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8005eca:	46c0      	nop			; (mov r8, r8)
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	003d0900 	.word	0x003d0900
 8005ed4:	00f42400 	.word	0x00f42400
 8005ed8:	08006d54 	.word	0x08006d54

08005edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	2201      	movs	r2, #1
 8005eea:	4013      	ands	r3, r2
 8005eec:	d00b      	beq.n	8005f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	4a4a      	ldr	r2, [pc, #296]	; (8006020 <UART_AdvFeatureConfig+0x144>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	0019      	movs	r1, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	d00b      	beq.n	8005f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	4a43      	ldr	r2, [pc, #268]	; (8006024 <UART_AdvFeatureConfig+0x148>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	0019      	movs	r1, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	2204      	movs	r2, #4
 8005f2e:	4013      	ands	r3, r2
 8005f30:	d00b      	beq.n	8005f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	4a3b      	ldr	r2, [pc, #236]	; (8006028 <UART_AdvFeatureConfig+0x14c>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	0019      	movs	r1, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	2208      	movs	r2, #8
 8005f50:	4013      	ands	r3, r2
 8005f52:	d00b      	beq.n	8005f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	4a34      	ldr	r2, [pc, #208]	; (800602c <UART_AdvFeatureConfig+0x150>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	0019      	movs	r1, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	2210      	movs	r2, #16
 8005f72:	4013      	ands	r3, r2
 8005f74:	d00b      	beq.n	8005f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	4a2c      	ldr	r2, [pc, #176]	; (8006030 <UART_AdvFeatureConfig+0x154>)
 8005f7e:	4013      	ands	r3, r2
 8005f80:	0019      	movs	r1, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	2220      	movs	r2, #32
 8005f94:	4013      	ands	r3, r2
 8005f96:	d00b      	beq.n	8005fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	4a25      	ldr	r2, [pc, #148]	; (8006034 <UART_AdvFeatureConfig+0x158>)
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	0019      	movs	r1, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	2240      	movs	r2, #64	; 0x40
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	d01d      	beq.n	8005ff6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	4a1d      	ldr	r2, [pc, #116]	; (8006038 <UART_AdvFeatureConfig+0x15c>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	0019      	movs	r1, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fd6:	2380      	movs	r3, #128	; 0x80
 8005fd8:	035b      	lsls	r3, r3, #13
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d10b      	bne.n	8005ff6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	4a15      	ldr	r2, [pc, #84]	; (800603c <UART_AdvFeatureConfig+0x160>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	0019      	movs	r1, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	2280      	movs	r2, #128	; 0x80
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	d00b      	beq.n	8006018 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	4a0e      	ldr	r2, [pc, #56]	; (8006040 <UART_AdvFeatureConfig+0x164>)
 8006008:	4013      	ands	r3, r2
 800600a:	0019      	movs	r1, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	605a      	str	r2, [r3, #4]
  }
}
 8006018:	46c0      	nop			; (mov r8, r8)
 800601a:	46bd      	mov	sp, r7
 800601c:	b002      	add	sp, #8
 800601e:	bd80      	pop	{r7, pc}
 8006020:	fffdffff 	.word	0xfffdffff
 8006024:	fffeffff 	.word	0xfffeffff
 8006028:	fffbffff 	.word	0xfffbffff
 800602c:	ffff7fff 	.word	0xffff7fff
 8006030:	ffffefff 	.word	0xffffefff
 8006034:	ffffdfff 	.word	0xffffdfff
 8006038:	ffefffff 	.word	0xffefffff
 800603c:	ff9fffff 	.word	0xff9fffff
 8006040:	fff7ffff 	.word	0xfff7ffff

08006044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b092      	sub	sp, #72	; 0x48
 8006048:	af02      	add	r7, sp, #8
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2284      	movs	r2, #132	; 0x84
 8006050:	2100      	movs	r1, #0
 8006052:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006054:	f7fd faee 	bl	8003634 <HAL_GetTick>
 8006058:	0003      	movs	r3, r0
 800605a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2208      	movs	r2, #8
 8006064:	4013      	ands	r3, r2
 8006066:	2b08      	cmp	r3, #8
 8006068:	d12c      	bne.n	80060c4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800606a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606c:	2280      	movs	r2, #128	; 0x80
 800606e:	0391      	lsls	r1, r2, #14
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	4a46      	ldr	r2, [pc, #280]	; (800618c <UART_CheckIdleState+0x148>)
 8006074:	9200      	str	r2, [sp, #0]
 8006076:	2200      	movs	r2, #0
 8006078:	f000 f88c 	bl	8006194 <UART_WaitOnFlagUntilTimeout>
 800607c:	1e03      	subs	r3, r0, #0
 800607e:	d021      	beq.n	80060c4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006080:	f3ef 8310 	mrs	r3, PRIMASK
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006088:	63bb      	str	r3, [r7, #56]	; 0x38
 800608a:	2301      	movs	r3, #1
 800608c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	f383 8810 	msr	PRIMASK, r3
}
 8006094:	46c0      	nop			; (mov r8, r8)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2180      	movs	r1, #128	; 0x80
 80060a2:	438a      	bics	r2, r1
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	f383 8810 	msr	PRIMASK, r3
}
 80060b0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2278      	movs	r2, #120	; 0x78
 80060bc:	2100      	movs	r1, #0
 80060be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e05f      	b.n	8006184 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2204      	movs	r2, #4
 80060cc:	4013      	ands	r3, r2
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d146      	bne.n	8006160 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d4:	2280      	movs	r2, #128	; 0x80
 80060d6:	03d1      	lsls	r1, r2, #15
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4a2c      	ldr	r2, [pc, #176]	; (800618c <UART_CheckIdleState+0x148>)
 80060dc:	9200      	str	r2, [sp, #0]
 80060de:	2200      	movs	r2, #0
 80060e0:	f000 f858 	bl	8006194 <UART_WaitOnFlagUntilTimeout>
 80060e4:	1e03      	subs	r3, r0, #0
 80060e6:	d03b      	beq.n	8006160 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060e8:	f3ef 8310 	mrs	r3, PRIMASK
 80060ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80060ee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060f0:	637b      	str	r3, [r7, #52]	; 0x34
 80060f2:	2301      	movs	r3, #1
 80060f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f383 8810 	msr	PRIMASK, r3
}
 80060fc:	46c0      	nop			; (mov r8, r8)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4921      	ldr	r1, [pc, #132]	; (8006190 <UART_CheckIdleState+0x14c>)
 800610a:	400a      	ands	r2, r1
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006110:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f383 8810 	msr	PRIMASK, r3
}
 8006118:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800611a:	f3ef 8310 	mrs	r3, PRIMASK
 800611e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006120:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006122:	633b      	str	r3, [r7, #48]	; 0x30
 8006124:	2301      	movs	r3, #1
 8006126:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	f383 8810 	msr	PRIMASK, r3
}
 800612e:	46c0      	nop			; (mov r8, r8)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2101      	movs	r1, #1
 800613c:	438a      	bics	r2, r1
 800613e:	609a      	str	r2, [r3, #8]
 8006140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006142:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	f383 8810 	msr	PRIMASK, r3
}
 800614a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2280      	movs	r2, #128	; 0x80
 8006150:	2120      	movs	r1, #32
 8006152:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2278      	movs	r2, #120	; 0x78
 8006158:	2100      	movs	r1, #0
 800615a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e011      	b.n	8006184 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2280      	movs	r2, #128	; 0x80
 800616a:	2120      	movs	r1, #32
 800616c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2278      	movs	r2, #120	; 0x78
 800617e:	2100      	movs	r1, #0
 8006180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	0018      	movs	r0, r3
 8006186:	46bd      	mov	sp, r7
 8006188:	b010      	add	sp, #64	; 0x40
 800618a:	bd80      	pop	{r7, pc}
 800618c:	01ffffff 	.word	0x01ffffff
 8006190:	fffffedf 	.word	0xfffffedf

08006194 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	603b      	str	r3, [r7, #0]
 80061a0:	1dfb      	adds	r3, r7, #7
 80061a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a4:	e04b      	b.n	800623e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	3301      	adds	r3, #1
 80061aa:	d048      	beq.n	800623e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ac:	f7fd fa42 	bl	8003634 <HAL_GetTick>
 80061b0:	0002      	movs	r2, r0
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d302      	bcc.n	80061c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e04b      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2204      	movs	r2, #4
 80061ce:	4013      	ands	r3, r2
 80061d0:	d035      	beq.n	800623e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	2208      	movs	r2, #8
 80061da:	4013      	ands	r3, r2
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d111      	bne.n	8006204 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2208      	movs	r2, #8
 80061e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	0018      	movs	r0, r3
 80061ec:	f000 f83c 	bl	8006268 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2284      	movs	r2, #132	; 0x84
 80061f4:	2108      	movs	r1, #8
 80061f6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2278      	movs	r2, #120	; 0x78
 80061fc:	2100      	movs	r1, #0
 80061fe:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e02c      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69da      	ldr	r2, [r3, #28]
 800620a:	2380      	movs	r3, #128	; 0x80
 800620c:	011b      	lsls	r3, r3, #4
 800620e:	401a      	ands	r2, r3
 8006210:	2380      	movs	r3, #128	; 0x80
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	429a      	cmp	r2, r3
 8006216:	d112      	bne.n	800623e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2280      	movs	r2, #128	; 0x80
 800621e:	0112      	lsls	r2, r2, #4
 8006220:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	0018      	movs	r0, r3
 8006226:	f000 f81f 	bl	8006268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2284      	movs	r2, #132	; 0x84
 800622e:	2120      	movs	r1, #32
 8006230:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2278      	movs	r2, #120	; 0x78
 8006236:	2100      	movs	r1, #0
 8006238:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e00f      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	4013      	ands	r3, r2
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	425a      	negs	r2, r3
 800624e:	4153      	adcs	r3, r2
 8006250:	b2db      	uxtb	r3, r3
 8006252:	001a      	movs	r2, r3
 8006254:	1dfb      	adds	r3, r7, #7
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d0a4      	beq.n	80061a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	0018      	movs	r0, r3
 8006260:	46bd      	mov	sp, r7
 8006262:	b004      	add	sp, #16
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b08e      	sub	sp, #56	; 0x38
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006270:	f3ef 8310 	mrs	r3, PRIMASK
 8006274:	617b      	str	r3, [r7, #20]
  return(result);
 8006276:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006278:	637b      	str	r3, [r7, #52]	; 0x34
 800627a:	2301      	movs	r3, #1
 800627c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	f383 8810 	msr	PRIMASK, r3
}
 8006284:	46c0      	nop			; (mov r8, r8)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4926      	ldr	r1, [pc, #152]	; (800632c <UART_EndRxTransfer+0xc4>)
 8006292:	400a      	ands	r2, r1
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006298:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	f383 8810 	msr	PRIMASK, r3
}
 80062a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062a2:	f3ef 8310 	mrs	r3, PRIMASK
 80062a6:	623b      	str	r3, [r7, #32]
  return(result);
 80062a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062aa:	633b      	str	r3, [r7, #48]	; 0x30
 80062ac:	2301      	movs	r3, #1
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	f383 8810 	msr	PRIMASK, r3
}
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2101      	movs	r1, #1
 80062c4:	438a      	bics	r2, r1
 80062c6:	609a      	str	r2, [r3, #8]
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	f383 8810 	msr	PRIMASK, r3
}
 80062d2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d118      	bne.n	800630e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062dc:	f3ef 8310 	mrs	r3, PRIMASK
 80062e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80062e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062e6:	2301      	movs	r3, #1
 80062e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f383 8810 	msr	PRIMASK, r3
}
 80062f0:	46c0      	nop			; (mov r8, r8)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2110      	movs	r1, #16
 80062fe:	438a      	bics	r2, r1
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f383 8810 	msr	PRIMASK, r3
}
 800630c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2280      	movs	r2, #128	; 0x80
 8006312:	2120      	movs	r1, #32
 8006314:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006322:	46c0      	nop			; (mov r8, r8)
 8006324:	46bd      	mov	sp, r7
 8006326:	b00e      	add	sp, #56	; 0x38
 8006328:	bd80      	pop	{r7, pc}
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	fffffedf 	.word	0xfffffedf

08006330 <siprintf>:
 8006330:	b40e      	push	{r1, r2, r3}
 8006332:	b500      	push	{lr}
 8006334:	490b      	ldr	r1, [pc, #44]	; (8006364 <siprintf+0x34>)
 8006336:	b09c      	sub	sp, #112	; 0x70
 8006338:	ab1d      	add	r3, sp, #116	; 0x74
 800633a:	9002      	str	r0, [sp, #8]
 800633c:	9006      	str	r0, [sp, #24]
 800633e:	9107      	str	r1, [sp, #28]
 8006340:	9104      	str	r1, [sp, #16]
 8006342:	4809      	ldr	r0, [pc, #36]	; (8006368 <siprintf+0x38>)
 8006344:	4909      	ldr	r1, [pc, #36]	; (800636c <siprintf+0x3c>)
 8006346:	cb04      	ldmia	r3!, {r2}
 8006348:	9105      	str	r1, [sp, #20]
 800634a:	6800      	ldr	r0, [r0, #0]
 800634c:	a902      	add	r1, sp, #8
 800634e:	9301      	str	r3, [sp, #4]
 8006350:	f000 f9a2 	bl	8006698 <_svfiprintf_r>
 8006354:	2200      	movs	r2, #0
 8006356:	9b02      	ldr	r3, [sp, #8]
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	b01c      	add	sp, #112	; 0x70
 800635c:	bc08      	pop	{r3}
 800635e:	b003      	add	sp, #12
 8006360:	4718      	bx	r3
 8006362:	46c0      	nop			; (mov r8, r8)
 8006364:	7fffffff 	.word	0x7fffffff
 8006368:	20000084 	.word	0x20000084
 800636c:	ffff0208 	.word	0xffff0208

08006370 <memset>:
 8006370:	0003      	movs	r3, r0
 8006372:	1882      	adds	r2, r0, r2
 8006374:	4293      	cmp	r3, r2
 8006376:	d100      	bne.n	800637a <memset+0xa>
 8006378:	4770      	bx	lr
 800637a:	7019      	strb	r1, [r3, #0]
 800637c:	3301      	adds	r3, #1
 800637e:	e7f9      	b.n	8006374 <memset+0x4>

08006380 <__errno>:
 8006380:	4b01      	ldr	r3, [pc, #4]	; (8006388 <__errno+0x8>)
 8006382:	6818      	ldr	r0, [r3, #0]
 8006384:	4770      	bx	lr
 8006386:	46c0      	nop			; (mov r8, r8)
 8006388:	20000084 	.word	0x20000084

0800638c <__libc_init_array>:
 800638c:	b570      	push	{r4, r5, r6, lr}
 800638e:	2600      	movs	r6, #0
 8006390:	4c0c      	ldr	r4, [pc, #48]	; (80063c4 <__libc_init_array+0x38>)
 8006392:	4d0d      	ldr	r5, [pc, #52]	; (80063c8 <__libc_init_array+0x3c>)
 8006394:	1b64      	subs	r4, r4, r5
 8006396:	10a4      	asrs	r4, r4, #2
 8006398:	42a6      	cmp	r6, r4
 800639a:	d109      	bne.n	80063b0 <__libc_init_array+0x24>
 800639c:	2600      	movs	r6, #0
 800639e:	f000 fc6d 	bl	8006c7c <_init>
 80063a2:	4c0a      	ldr	r4, [pc, #40]	; (80063cc <__libc_init_array+0x40>)
 80063a4:	4d0a      	ldr	r5, [pc, #40]	; (80063d0 <__libc_init_array+0x44>)
 80063a6:	1b64      	subs	r4, r4, r5
 80063a8:	10a4      	asrs	r4, r4, #2
 80063aa:	42a6      	cmp	r6, r4
 80063ac:	d105      	bne.n	80063ba <__libc_init_array+0x2e>
 80063ae:	bd70      	pop	{r4, r5, r6, pc}
 80063b0:	00b3      	lsls	r3, r6, #2
 80063b2:	58eb      	ldr	r3, [r5, r3]
 80063b4:	4798      	blx	r3
 80063b6:	3601      	adds	r6, #1
 80063b8:	e7ee      	b.n	8006398 <__libc_init_array+0xc>
 80063ba:	00b3      	lsls	r3, r6, #2
 80063bc:	58eb      	ldr	r3, [r5, r3]
 80063be:	4798      	blx	r3
 80063c0:	3601      	adds	r6, #1
 80063c2:	e7f2      	b.n	80063aa <__libc_init_array+0x1e>
 80063c4:	08006db4 	.word	0x08006db4
 80063c8:	08006db4 	.word	0x08006db4
 80063cc:	08006db8 	.word	0x08006db8
 80063d0:	08006db4 	.word	0x08006db4

080063d4 <__retarget_lock_acquire_recursive>:
 80063d4:	4770      	bx	lr

080063d6 <__retarget_lock_release_recursive>:
 80063d6:	4770      	bx	lr

080063d8 <_free_r>:
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	0005      	movs	r5, r0
 80063dc:	2900      	cmp	r1, #0
 80063de:	d010      	beq.n	8006402 <_free_r+0x2a>
 80063e0:	1f0c      	subs	r4, r1, #4
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	da00      	bge.n	80063ea <_free_r+0x12>
 80063e8:	18e4      	adds	r4, r4, r3
 80063ea:	0028      	movs	r0, r5
 80063ec:	f000 f8e2 	bl	80065b4 <__malloc_lock>
 80063f0:	4a1d      	ldr	r2, [pc, #116]	; (8006468 <_free_r+0x90>)
 80063f2:	6813      	ldr	r3, [r2, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d105      	bne.n	8006404 <_free_r+0x2c>
 80063f8:	6063      	str	r3, [r4, #4]
 80063fa:	6014      	str	r4, [r2, #0]
 80063fc:	0028      	movs	r0, r5
 80063fe:	f000 f8e1 	bl	80065c4 <__malloc_unlock>
 8006402:	bd70      	pop	{r4, r5, r6, pc}
 8006404:	42a3      	cmp	r3, r4
 8006406:	d908      	bls.n	800641a <_free_r+0x42>
 8006408:	6820      	ldr	r0, [r4, #0]
 800640a:	1821      	adds	r1, r4, r0
 800640c:	428b      	cmp	r3, r1
 800640e:	d1f3      	bne.n	80063f8 <_free_r+0x20>
 8006410:	6819      	ldr	r1, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	1809      	adds	r1, r1, r0
 8006416:	6021      	str	r1, [r4, #0]
 8006418:	e7ee      	b.n	80063f8 <_free_r+0x20>
 800641a:	001a      	movs	r2, r3
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <_free_r+0x4e>
 8006422:	42a3      	cmp	r3, r4
 8006424:	d9f9      	bls.n	800641a <_free_r+0x42>
 8006426:	6811      	ldr	r1, [r2, #0]
 8006428:	1850      	adds	r0, r2, r1
 800642a:	42a0      	cmp	r0, r4
 800642c:	d10b      	bne.n	8006446 <_free_r+0x6e>
 800642e:	6820      	ldr	r0, [r4, #0]
 8006430:	1809      	adds	r1, r1, r0
 8006432:	1850      	adds	r0, r2, r1
 8006434:	6011      	str	r1, [r2, #0]
 8006436:	4283      	cmp	r3, r0
 8006438:	d1e0      	bne.n	80063fc <_free_r+0x24>
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	1841      	adds	r1, r0, r1
 8006440:	6011      	str	r1, [r2, #0]
 8006442:	6053      	str	r3, [r2, #4]
 8006444:	e7da      	b.n	80063fc <_free_r+0x24>
 8006446:	42a0      	cmp	r0, r4
 8006448:	d902      	bls.n	8006450 <_free_r+0x78>
 800644a:	230c      	movs	r3, #12
 800644c:	602b      	str	r3, [r5, #0]
 800644e:	e7d5      	b.n	80063fc <_free_r+0x24>
 8006450:	6820      	ldr	r0, [r4, #0]
 8006452:	1821      	adds	r1, r4, r0
 8006454:	428b      	cmp	r3, r1
 8006456:	d103      	bne.n	8006460 <_free_r+0x88>
 8006458:	6819      	ldr	r1, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	1809      	adds	r1, r1, r0
 800645e:	6021      	str	r1, [r4, #0]
 8006460:	6063      	str	r3, [r4, #4]
 8006462:	6054      	str	r4, [r2, #4]
 8006464:	e7ca      	b.n	80063fc <_free_r+0x24>
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	200002ec 	.word	0x200002ec

0800646c <sbrk_aligned>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	4e0f      	ldr	r6, [pc, #60]	; (80064ac <sbrk_aligned+0x40>)
 8006470:	000d      	movs	r5, r1
 8006472:	6831      	ldr	r1, [r6, #0]
 8006474:	0004      	movs	r4, r0
 8006476:	2900      	cmp	r1, #0
 8006478:	d102      	bne.n	8006480 <sbrk_aligned+0x14>
 800647a:	f000 fba1 	bl	8006bc0 <_sbrk_r>
 800647e:	6030      	str	r0, [r6, #0]
 8006480:	0029      	movs	r1, r5
 8006482:	0020      	movs	r0, r4
 8006484:	f000 fb9c 	bl	8006bc0 <_sbrk_r>
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	d00a      	beq.n	80064a2 <sbrk_aligned+0x36>
 800648c:	2303      	movs	r3, #3
 800648e:	1cc5      	adds	r5, r0, #3
 8006490:	439d      	bics	r5, r3
 8006492:	42a8      	cmp	r0, r5
 8006494:	d007      	beq.n	80064a6 <sbrk_aligned+0x3a>
 8006496:	1a29      	subs	r1, r5, r0
 8006498:	0020      	movs	r0, r4
 800649a:	f000 fb91 	bl	8006bc0 <_sbrk_r>
 800649e:	3001      	adds	r0, #1
 80064a0:	d101      	bne.n	80064a6 <sbrk_aligned+0x3a>
 80064a2:	2501      	movs	r5, #1
 80064a4:	426d      	negs	r5, r5
 80064a6:	0028      	movs	r0, r5
 80064a8:	bd70      	pop	{r4, r5, r6, pc}
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	200002f0 	.word	0x200002f0

080064b0 <_malloc_r>:
 80064b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064b2:	2203      	movs	r2, #3
 80064b4:	1ccb      	adds	r3, r1, #3
 80064b6:	4393      	bics	r3, r2
 80064b8:	3308      	adds	r3, #8
 80064ba:	0006      	movs	r6, r0
 80064bc:	001f      	movs	r7, r3
 80064be:	2b0c      	cmp	r3, #12
 80064c0:	d238      	bcs.n	8006534 <_malloc_r+0x84>
 80064c2:	270c      	movs	r7, #12
 80064c4:	42b9      	cmp	r1, r7
 80064c6:	d837      	bhi.n	8006538 <_malloc_r+0x88>
 80064c8:	0030      	movs	r0, r6
 80064ca:	f000 f873 	bl	80065b4 <__malloc_lock>
 80064ce:	4b38      	ldr	r3, [pc, #224]	; (80065b0 <_malloc_r+0x100>)
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	001c      	movs	r4, r3
 80064d6:	2c00      	cmp	r4, #0
 80064d8:	d133      	bne.n	8006542 <_malloc_r+0x92>
 80064da:	0039      	movs	r1, r7
 80064dc:	0030      	movs	r0, r6
 80064de:	f7ff ffc5 	bl	800646c <sbrk_aligned>
 80064e2:	0004      	movs	r4, r0
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d15e      	bne.n	80065a6 <_malloc_r+0xf6>
 80064e8:	9b00      	ldr	r3, [sp, #0]
 80064ea:	681c      	ldr	r4, [r3, #0]
 80064ec:	0025      	movs	r5, r4
 80064ee:	2d00      	cmp	r5, #0
 80064f0:	d14e      	bne.n	8006590 <_malloc_r+0xe0>
 80064f2:	2c00      	cmp	r4, #0
 80064f4:	d051      	beq.n	800659a <_malloc_r+0xea>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	0029      	movs	r1, r5
 80064fa:	18e3      	adds	r3, r4, r3
 80064fc:	0030      	movs	r0, r6
 80064fe:	9301      	str	r3, [sp, #4]
 8006500:	f000 fb5e 	bl	8006bc0 <_sbrk_r>
 8006504:	9b01      	ldr	r3, [sp, #4]
 8006506:	4283      	cmp	r3, r0
 8006508:	d147      	bne.n	800659a <_malloc_r+0xea>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	0030      	movs	r0, r6
 800650e:	1aff      	subs	r7, r7, r3
 8006510:	0039      	movs	r1, r7
 8006512:	f7ff ffab 	bl	800646c <sbrk_aligned>
 8006516:	3001      	adds	r0, #1
 8006518:	d03f      	beq.n	800659a <_malloc_r+0xea>
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	19db      	adds	r3, r3, r7
 800651e:	6023      	str	r3, [r4, #0]
 8006520:	9b00      	ldr	r3, [sp, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d040      	beq.n	80065aa <_malloc_r+0xfa>
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	42a2      	cmp	r2, r4
 800652c:	d133      	bne.n	8006596 <_malloc_r+0xe6>
 800652e:	2200      	movs	r2, #0
 8006530:	605a      	str	r2, [r3, #4]
 8006532:	e014      	b.n	800655e <_malloc_r+0xae>
 8006534:	2b00      	cmp	r3, #0
 8006536:	dac5      	bge.n	80064c4 <_malloc_r+0x14>
 8006538:	230c      	movs	r3, #12
 800653a:	2500      	movs	r5, #0
 800653c:	6033      	str	r3, [r6, #0]
 800653e:	0028      	movs	r0, r5
 8006540:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006542:	6821      	ldr	r1, [r4, #0]
 8006544:	1bc9      	subs	r1, r1, r7
 8006546:	d420      	bmi.n	800658a <_malloc_r+0xda>
 8006548:	290b      	cmp	r1, #11
 800654a:	d918      	bls.n	800657e <_malloc_r+0xce>
 800654c:	19e2      	adds	r2, r4, r7
 800654e:	6027      	str	r7, [r4, #0]
 8006550:	42a3      	cmp	r3, r4
 8006552:	d112      	bne.n	800657a <_malloc_r+0xca>
 8006554:	9b00      	ldr	r3, [sp, #0]
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	6863      	ldr	r3, [r4, #4]
 800655a:	6011      	str	r1, [r2, #0]
 800655c:	6053      	str	r3, [r2, #4]
 800655e:	0030      	movs	r0, r6
 8006560:	0025      	movs	r5, r4
 8006562:	f000 f82f 	bl	80065c4 <__malloc_unlock>
 8006566:	2207      	movs	r2, #7
 8006568:	350b      	adds	r5, #11
 800656a:	1d23      	adds	r3, r4, #4
 800656c:	4395      	bics	r5, r2
 800656e:	1aea      	subs	r2, r5, r3
 8006570:	429d      	cmp	r5, r3
 8006572:	d0e4      	beq.n	800653e <_malloc_r+0x8e>
 8006574:	1b5b      	subs	r3, r3, r5
 8006576:	50a3      	str	r3, [r4, r2]
 8006578:	e7e1      	b.n	800653e <_malloc_r+0x8e>
 800657a:	605a      	str	r2, [r3, #4]
 800657c:	e7ec      	b.n	8006558 <_malloc_r+0xa8>
 800657e:	6862      	ldr	r2, [r4, #4]
 8006580:	42a3      	cmp	r3, r4
 8006582:	d1d5      	bne.n	8006530 <_malloc_r+0x80>
 8006584:	9b00      	ldr	r3, [sp, #0]
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	e7e9      	b.n	800655e <_malloc_r+0xae>
 800658a:	0023      	movs	r3, r4
 800658c:	6864      	ldr	r4, [r4, #4]
 800658e:	e7a2      	b.n	80064d6 <_malloc_r+0x26>
 8006590:	002c      	movs	r4, r5
 8006592:	686d      	ldr	r5, [r5, #4]
 8006594:	e7ab      	b.n	80064ee <_malloc_r+0x3e>
 8006596:	0013      	movs	r3, r2
 8006598:	e7c4      	b.n	8006524 <_malloc_r+0x74>
 800659a:	230c      	movs	r3, #12
 800659c:	0030      	movs	r0, r6
 800659e:	6033      	str	r3, [r6, #0]
 80065a0:	f000 f810 	bl	80065c4 <__malloc_unlock>
 80065a4:	e7cb      	b.n	800653e <_malloc_r+0x8e>
 80065a6:	6027      	str	r7, [r4, #0]
 80065a8:	e7d9      	b.n	800655e <_malloc_r+0xae>
 80065aa:	605b      	str	r3, [r3, #4]
 80065ac:	deff      	udf	#255	; 0xff
 80065ae:	46c0      	nop			; (mov r8, r8)
 80065b0:	200002ec 	.word	0x200002ec

080065b4 <__malloc_lock>:
 80065b4:	b510      	push	{r4, lr}
 80065b6:	4802      	ldr	r0, [pc, #8]	; (80065c0 <__malloc_lock+0xc>)
 80065b8:	f7ff ff0c 	bl	80063d4 <__retarget_lock_acquire_recursive>
 80065bc:	bd10      	pop	{r4, pc}
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	200002e8 	.word	0x200002e8

080065c4 <__malloc_unlock>:
 80065c4:	b510      	push	{r4, lr}
 80065c6:	4802      	ldr	r0, [pc, #8]	; (80065d0 <__malloc_unlock+0xc>)
 80065c8:	f7ff ff05 	bl	80063d6 <__retarget_lock_release_recursive>
 80065cc:	bd10      	pop	{r4, pc}
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	200002e8 	.word	0x200002e8

080065d4 <__ssputs_r>:
 80065d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065d6:	b085      	sub	sp, #20
 80065d8:	9301      	str	r3, [sp, #4]
 80065da:	9203      	str	r2, [sp, #12]
 80065dc:	688e      	ldr	r6, [r1, #8]
 80065de:	9a01      	ldr	r2, [sp, #4]
 80065e0:	0007      	movs	r7, r0
 80065e2:	000c      	movs	r4, r1
 80065e4:	680b      	ldr	r3, [r1, #0]
 80065e6:	4296      	cmp	r6, r2
 80065e8:	d831      	bhi.n	800664e <__ssputs_r+0x7a>
 80065ea:	898a      	ldrh	r2, [r1, #12]
 80065ec:	2190      	movs	r1, #144	; 0x90
 80065ee:	00c9      	lsls	r1, r1, #3
 80065f0:	420a      	tst	r2, r1
 80065f2:	d029      	beq.n	8006648 <__ssputs_r+0x74>
 80065f4:	2003      	movs	r0, #3
 80065f6:	6921      	ldr	r1, [r4, #16]
 80065f8:	1a5b      	subs	r3, r3, r1
 80065fa:	9302      	str	r3, [sp, #8]
 80065fc:	6963      	ldr	r3, [r4, #20]
 80065fe:	4343      	muls	r3, r0
 8006600:	0fdd      	lsrs	r5, r3, #31
 8006602:	18ed      	adds	r5, r5, r3
 8006604:	9b01      	ldr	r3, [sp, #4]
 8006606:	9802      	ldr	r0, [sp, #8]
 8006608:	3301      	adds	r3, #1
 800660a:	181b      	adds	r3, r3, r0
 800660c:	106d      	asrs	r5, r5, #1
 800660e:	42ab      	cmp	r3, r5
 8006610:	d900      	bls.n	8006614 <__ssputs_r+0x40>
 8006612:	001d      	movs	r5, r3
 8006614:	0552      	lsls	r2, r2, #21
 8006616:	d529      	bpl.n	800666c <__ssputs_r+0x98>
 8006618:	0029      	movs	r1, r5
 800661a:	0038      	movs	r0, r7
 800661c:	f7ff ff48 	bl	80064b0 <_malloc_r>
 8006620:	1e06      	subs	r6, r0, #0
 8006622:	d02d      	beq.n	8006680 <__ssputs_r+0xac>
 8006624:	9a02      	ldr	r2, [sp, #8]
 8006626:	6921      	ldr	r1, [r4, #16]
 8006628:	f000 fae7 	bl	8006bfa <memcpy>
 800662c:	89a2      	ldrh	r2, [r4, #12]
 800662e:	4b19      	ldr	r3, [pc, #100]	; (8006694 <__ssputs_r+0xc0>)
 8006630:	401a      	ands	r2, r3
 8006632:	2380      	movs	r3, #128	; 0x80
 8006634:	4313      	orrs	r3, r2
 8006636:	81a3      	strh	r3, [r4, #12]
 8006638:	9b02      	ldr	r3, [sp, #8]
 800663a:	6126      	str	r6, [r4, #16]
 800663c:	18f6      	adds	r6, r6, r3
 800663e:	6026      	str	r6, [r4, #0]
 8006640:	6165      	str	r5, [r4, #20]
 8006642:	9e01      	ldr	r6, [sp, #4]
 8006644:	1aed      	subs	r5, r5, r3
 8006646:	60a5      	str	r5, [r4, #8]
 8006648:	9b01      	ldr	r3, [sp, #4]
 800664a:	429e      	cmp	r6, r3
 800664c:	d900      	bls.n	8006650 <__ssputs_r+0x7c>
 800664e:	9e01      	ldr	r6, [sp, #4]
 8006650:	0032      	movs	r2, r6
 8006652:	9903      	ldr	r1, [sp, #12]
 8006654:	6820      	ldr	r0, [r4, #0]
 8006656:	f000 fa9f 	bl	8006b98 <memmove>
 800665a:	2000      	movs	r0, #0
 800665c:	68a3      	ldr	r3, [r4, #8]
 800665e:	1b9b      	subs	r3, r3, r6
 8006660:	60a3      	str	r3, [r4, #8]
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	199b      	adds	r3, r3, r6
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	b005      	add	sp, #20
 800666a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800666c:	002a      	movs	r2, r5
 800666e:	0038      	movs	r0, r7
 8006670:	f000 facc 	bl	8006c0c <_realloc_r>
 8006674:	1e06      	subs	r6, r0, #0
 8006676:	d1df      	bne.n	8006638 <__ssputs_r+0x64>
 8006678:	0038      	movs	r0, r7
 800667a:	6921      	ldr	r1, [r4, #16]
 800667c:	f7ff feac 	bl	80063d8 <_free_r>
 8006680:	230c      	movs	r3, #12
 8006682:	2001      	movs	r0, #1
 8006684:	603b      	str	r3, [r7, #0]
 8006686:	89a2      	ldrh	r2, [r4, #12]
 8006688:	3334      	adds	r3, #52	; 0x34
 800668a:	4313      	orrs	r3, r2
 800668c:	81a3      	strh	r3, [r4, #12]
 800668e:	4240      	negs	r0, r0
 8006690:	e7ea      	b.n	8006668 <__ssputs_r+0x94>
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	fffffb7f 	.word	0xfffffb7f

08006698 <_svfiprintf_r>:
 8006698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800669a:	b0a1      	sub	sp, #132	; 0x84
 800669c:	9003      	str	r0, [sp, #12]
 800669e:	001d      	movs	r5, r3
 80066a0:	898b      	ldrh	r3, [r1, #12]
 80066a2:	000f      	movs	r7, r1
 80066a4:	0016      	movs	r6, r2
 80066a6:	061b      	lsls	r3, r3, #24
 80066a8:	d511      	bpl.n	80066ce <_svfiprintf_r+0x36>
 80066aa:	690b      	ldr	r3, [r1, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10e      	bne.n	80066ce <_svfiprintf_r+0x36>
 80066b0:	2140      	movs	r1, #64	; 0x40
 80066b2:	f7ff fefd 	bl	80064b0 <_malloc_r>
 80066b6:	6038      	str	r0, [r7, #0]
 80066b8:	6138      	str	r0, [r7, #16]
 80066ba:	2800      	cmp	r0, #0
 80066bc:	d105      	bne.n	80066ca <_svfiprintf_r+0x32>
 80066be:	230c      	movs	r3, #12
 80066c0:	9a03      	ldr	r2, [sp, #12]
 80066c2:	3801      	subs	r0, #1
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	b021      	add	sp, #132	; 0x84
 80066c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ca:	2340      	movs	r3, #64	; 0x40
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	2300      	movs	r3, #0
 80066d0:	ac08      	add	r4, sp, #32
 80066d2:	6163      	str	r3, [r4, #20]
 80066d4:	3320      	adds	r3, #32
 80066d6:	7663      	strb	r3, [r4, #25]
 80066d8:	3310      	adds	r3, #16
 80066da:	76a3      	strb	r3, [r4, #26]
 80066dc:	9507      	str	r5, [sp, #28]
 80066de:	0035      	movs	r5, r6
 80066e0:	782b      	ldrb	r3, [r5, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <_svfiprintf_r+0x52>
 80066e6:	2b25      	cmp	r3, #37	; 0x25
 80066e8:	d148      	bne.n	800677c <_svfiprintf_r+0xe4>
 80066ea:	1bab      	subs	r3, r5, r6
 80066ec:	9305      	str	r3, [sp, #20]
 80066ee:	42b5      	cmp	r5, r6
 80066f0:	d00b      	beq.n	800670a <_svfiprintf_r+0x72>
 80066f2:	0032      	movs	r2, r6
 80066f4:	0039      	movs	r1, r7
 80066f6:	9803      	ldr	r0, [sp, #12]
 80066f8:	f7ff ff6c 	bl	80065d4 <__ssputs_r>
 80066fc:	3001      	adds	r0, #1
 80066fe:	d100      	bne.n	8006702 <_svfiprintf_r+0x6a>
 8006700:	e0af      	b.n	8006862 <_svfiprintf_r+0x1ca>
 8006702:	6963      	ldr	r3, [r4, #20]
 8006704:	9a05      	ldr	r2, [sp, #20]
 8006706:	189b      	adds	r3, r3, r2
 8006708:	6163      	str	r3, [r4, #20]
 800670a:	782b      	ldrb	r3, [r5, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d100      	bne.n	8006712 <_svfiprintf_r+0x7a>
 8006710:	e0a7      	b.n	8006862 <_svfiprintf_r+0x1ca>
 8006712:	2201      	movs	r2, #1
 8006714:	2300      	movs	r3, #0
 8006716:	4252      	negs	r2, r2
 8006718:	6062      	str	r2, [r4, #4]
 800671a:	a904      	add	r1, sp, #16
 800671c:	3254      	adds	r2, #84	; 0x54
 800671e:	1852      	adds	r2, r2, r1
 8006720:	1c6e      	adds	r6, r5, #1
 8006722:	6023      	str	r3, [r4, #0]
 8006724:	60e3      	str	r3, [r4, #12]
 8006726:	60a3      	str	r3, [r4, #8]
 8006728:	7013      	strb	r3, [r2, #0]
 800672a:	65a3      	str	r3, [r4, #88]	; 0x58
 800672c:	4b55      	ldr	r3, [pc, #340]	; (8006884 <_svfiprintf_r+0x1ec>)
 800672e:	2205      	movs	r2, #5
 8006730:	0018      	movs	r0, r3
 8006732:	7831      	ldrb	r1, [r6, #0]
 8006734:	9305      	str	r3, [sp, #20]
 8006736:	f000 fa55 	bl	8006be4 <memchr>
 800673a:	1c75      	adds	r5, r6, #1
 800673c:	2800      	cmp	r0, #0
 800673e:	d11f      	bne.n	8006780 <_svfiprintf_r+0xe8>
 8006740:	6822      	ldr	r2, [r4, #0]
 8006742:	06d3      	lsls	r3, r2, #27
 8006744:	d504      	bpl.n	8006750 <_svfiprintf_r+0xb8>
 8006746:	2353      	movs	r3, #83	; 0x53
 8006748:	a904      	add	r1, sp, #16
 800674a:	185b      	adds	r3, r3, r1
 800674c:	2120      	movs	r1, #32
 800674e:	7019      	strb	r1, [r3, #0]
 8006750:	0713      	lsls	r3, r2, #28
 8006752:	d504      	bpl.n	800675e <_svfiprintf_r+0xc6>
 8006754:	2353      	movs	r3, #83	; 0x53
 8006756:	a904      	add	r1, sp, #16
 8006758:	185b      	adds	r3, r3, r1
 800675a:	212b      	movs	r1, #43	; 0x2b
 800675c:	7019      	strb	r1, [r3, #0]
 800675e:	7833      	ldrb	r3, [r6, #0]
 8006760:	2b2a      	cmp	r3, #42	; 0x2a
 8006762:	d016      	beq.n	8006792 <_svfiprintf_r+0xfa>
 8006764:	0035      	movs	r5, r6
 8006766:	2100      	movs	r1, #0
 8006768:	200a      	movs	r0, #10
 800676a:	68e3      	ldr	r3, [r4, #12]
 800676c:	782a      	ldrb	r2, [r5, #0]
 800676e:	1c6e      	adds	r6, r5, #1
 8006770:	3a30      	subs	r2, #48	; 0x30
 8006772:	2a09      	cmp	r2, #9
 8006774:	d94e      	bls.n	8006814 <_svfiprintf_r+0x17c>
 8006776:	2900      	cmp	r1, #0
 8006778:	d111      	bne.n	800679e <_svfiprintf_r+0x106>
 800677a:	e017      	b.n	80067ac <_svfiprintf_r+0x114>
 800677c:	3501      	adds	r5, #1
 800677e:	e7af      	b.n	80066e0 <_svfiprintf_r+0x48>
 8006780:	9b05      	ldr	r3, [sp, #20]
 8006782:	6822      	ldr	r2, [r4, #0]
 8006784:	1ac0      	subs	r0, r0, r3
 8006786:	2301      	movs	r3, #1
 8006788:	4083      	lsls	r3, r0
 800678a:	4313      	orrs	r3, r2
 800678c:	002e      	movs	r6, r5
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	e7cc      	b.n	800672c <_svfiprintf_r+0x94>
 8006792:	9b07      	ldr	r3, [sp, #28]
 8006794:	1d19      	adds	r1, r3, #4
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	9107      	str	r1, [sp, #28]
 800679a:	2b00      	cmp	r3, #0
 800679c:	db01      	blt.n	80067a2 <_svfiprintf_r+0x10a>
 800679e:	930b      	str	r3, [sp, #44]	; 0x2c
 80067a0:	e004      	b.n	80067ac <_svfiprintf_r+0x114>
 80067a2:	425b      	negs	r3, r3
 80067a4:	60e3      	str	r3, [r4, #12]
 80067a6:	2302      	movs	r3, #2
 80067a8:	4313      	orrs	r3, r2
 80067aa:	6023      	str	r3, [r4, #0]
 80067ac:	782b      	ldrb	r3, [r5, #0]
 80067ae:	2b2e      	cmp	r3, #46	; 0x2e
 80067b0:	d10a      	bne.n	80067c8 <_svfiprintf_r+0x130>
 80067b2:	786b      	ldrb	r3, [r5, #1]
 80067b4:	2b2a      	cmp	r3, #42	; 0x2a
 80067b6:	d135      	bne.n	8006824 <_svfiprintf_r+0x18c>
 80067b8:	9b07      	ldr	r3, [sp, #28]
 80067ba:	3502      	adds	r5, #2
 80067bc:	1d1a      	adds	r2, r3, #4
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	9207      	str	r2, [sp, #28]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	db2b      	blt.n	800681e <_svfiprintf_r+0x186>
 80067c6:	9309      	str	r3, [sp, #36]	; 0x24
 80067c8:	4e2f      	ldr	r6, [pc, #188]	; (8006888 <_svfiprintf_r+0x1f0>)
 80067ca:	2203      	movs	r2, #3
 80067cc:	0030      	movs	r0, r6
 80067ce:	7829      	ldrb	r1, [r5, #0]
 80067d0:	f000 fa08 	bl	8006be4 <memchr>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d006      	beq.n	80067e6 <_svfiprintf_r+0x14e>
 80067d8:	2340      	movs	r3, #64	; 0x40
 80067da:	1b80      	subs	r0, r0, r6
 80067dc:	4083      	lsls	r3, r0
 80067de:	6822      	ldr	r2, [r4, #0]
 80067e0:	3501      	adds	r5, #1
 80067e2:	4313      	orrs	r3, r2
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	7829      	ldrb	r1, [r5, #0]
 80067e8:	2206      	movs	r2, #6
 80067ea:	4828      	ldr	r0, [pc, #160]	; (800688c <_svfiprintf_r+0x1f4>)
 80067ec:	1c6e      	adds	r6, r5, #1
 80067ee:	7621      	strb	r1, [r4, #24]
 80067f0:	f000 f9f8 	bl	8006be4 <memchr>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d03c      	beq.n	8006872 <_svfiprintf_r+0x1da>
 80067f8:	4b25      	ldr	r3, [pc, #148]	; (8006890 <_svfiprintf_r+0x1f8>)
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d125      	bne.n	800684a <_svfiprintf_r+0x1b2>
 80067fe:	2207      	movs	r2, #7
 8006800:	9b07      	ldr	r3, [sp, #28]
 8006802:	3307      	adds	r3, #7
 8006804:	4393      	bics	r3, r2
 8006806:	3308      	adds	r3, #8
 8006808:	9307      	str	r3, [sp, #28]
 800680a:	6963      	ldr	r3, [r4, #20]
 800680c:	9a04      	ldr	r2, [sp, #16]
 800680e:	189b      	adds	r3, r3, r2
 8006810:	6163      	str	r3, [r4, #20]
 8006812:	e764      	b.n	80066de <_svfiprintf_r+0x46>
 8006814:	4343      	muls	r3, r0
 8006816:	0035      	movs	r5, r6
 8006818:	2101      	movs	r1, #1
 800681a:	189b      	adds	r3, r3, r2
 800681c:	e7a6      	b.n	800676c <_svfiprintf_r+0xd4>
 800681e:	2301      	movs	r3, #1
 8006820:	425b      	negs	r3, r3
 8006822:	e7d0      	b.n	80067c6 <_svfiprintf_r+0x12e>
 8006824:	2300      	movs	r3, #0
 8006826:	200a      	movs	r0, #10
 8006828:	001a      	movs	r2, r3
 800682a:	3501      	adds	r5, #1
 800682c:	6063      	str	r3, [r4, #4]
 800682e:	7829      	ldrb	r1, [r5, #0]
 8006830:	1c6e      	adds	r6, r5, #1
 8006832:	3930      	subs	r1, #48	; 0x30
 8006834:	2909      	cmp	r1, #9
 8006836:	d903      	bls.n	8006840 <_svfiprintf_r+0x1a8>
 8006838:	2b00      	cmp	r3, #0
 800683a:	d0c5      	beq.n	80067c8 <_svfiprintf_r+0x130>
 800683c:	9209      	str	r2, [sp, #36]	; 0x24
 800683e:	e7c3      	b.n	80067c8 <_svfiprintf_r+0x130>
 8006840:	4342      	muls	r2, r0
 8006842:	0035      	movs	r5, r6
 8006844:	2301      	movs	r3, #1
 8006846:	1852      	adds	r2, r2, r1
 8006848:	e7f1      	b.n	800682e <_svfiprintf_r+0x196>
 800684a:	aa07      	add	r2, sp, #28
 800684c:	9200      	str	r2, [sp, #0]
 800684e:	0021      	movs	r1, r4
 8006850:	003a      	movs	r2, r7
 8006852:	4b10      	ldr	r3, [pc, #64]	; (8006894 <_svfiprintf_r+0x1fc>)
 8006854:	9803      	ldr	r0, [sp, #12]
 8006856:	e000      	b.n	800685a <_svfiprintf_r+0x1c2>
 8006858:	bf00      	nop
 800685a:	9004      	str	r0, [sp, #16]
 800685c:	9b04      	ldr	r3, [sp, #16]
 800685e:	3301      	adds	r3, #1
 8006860:	d1d3      	bne.n	800680a <_svfiprintf_r+0x172>
 8006862:	89bb      	ldrh	r3, [r7, #12]
 8006864:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006866:	065b      	lsls	r3, r3, #25
 8006868:	d400      	bmi.n	800686c <_svfiprintf_r+0x1d4>
 800686a:	e72c      	b.n	80066c6 <_svfiprintf_r+0x2e>
 800686c:	2001      	movs	r0, #1
 800686e:	4240      	negs	r0, r0
 8006870:	e729      	b.n	80066c6 <_svfiprintf_r+0x2e>
 8006872:	aa07      	add	r2, sp, #28
 8006874:	9200      	str	r2, [sp, #0]
 8006876:	0021      	movs	r1, r4
 8006878:	003a      	movs	r2, r7
 800687a:	4b06      	ldr	r3, [pc, #24]	; (8006894 <_svfiprintf_r+0x1fc>)
 800687c:	9803      	ldr	r0, [sp, #12]
 800687e:	f000 f87b 	bl	8006978 <_printf_i>
 8006882:	e7ea      	b.n	800685a <_svfiprintf_r+0x1c2>
 8006884:	08006d78 	.word	0x08006d78
 8006888:	08006d7e 	.word	0x08006d7e
 800688c:	08006d82 	.word	0x08006d82
 8006890:	00000000 	.word	0x00000000
 8006894:	080065d5 	.word	0x080065d5

08006898 <_printf_common>:
 8006898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800689a:	0016      	movs	r6, r2
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	688a      	ldr	r2, [r1, #8]
 80068a0:	690b      	ldr	r3, [r1, #16]
 80068a2:	000c      	movs	r4, r1
 80068a4:	9000      	str	r0, [sp, #0]
 80068a6:	4293      	cmp	r3, r2
 80068a8:	da00      	bge.n	80068ac <_printf_common+0x14>
 80068aa:	0013      	movs	r3, r2
 80068ac:	0022      	movs	r2, r4
 80068ae:	6033      	str	r3, [r6, #0]
 80068b0:	3243      	adds	r2, #67	; 0x43
 80068b2:	7812      	ldrb	r2, [r2, #0]
 80068b4:	2a00      	cmp	r2, #0
 80068b6:	d001      	beq.n	80068bc <_printf_common+0x24>
 80068b8:	3301      	adds	r3, #1
 80068ba:	6033      	str	r3, [r6, #0]
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	069b      	lsls	r3, r3, #26
 80068c0:	d502      	bpl.n	80068c8 <_printf_common+0x30>
 80068c2:	6833      	ldr	r3, [r6, #0]
 80068c4:	3302      	adds	r3, #2
 80068c6:	6033      	str	r3, [r6, #0]
 80068c8:	6822      	ldr	r2, [r4, #0]
 80068ca:	2306      	movs	r3, #6
 80068cc:	0015      	movs	r5, r2
 80068ce:	401d      	ands	r5, r3
 80068d0:	421a      	tst	r2, r3
 80068d2:	d027      	beq.n	8006924 <_printf_common+0x8c>
 80068d4:	0023      	movs	r3, r4
 80068d6:	3343      	adds	r3, #67	; 0x43
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	1e5a      	subs	r2, r3, #1
 80068dc:	4193      	sbcs	r3, r2
 80068de:	6822      	ldr	r2, [r4, #0]
 80068e0:	0692      	lsls	r2, r2, #26
 80068e2:	d430      	bmi.n	8006946 <_printf_common+0xae>
 80068e4:	0022      	movs	r2, r4
 80068e6:	9901      	ldr	r1, [sp, #4]
 80068e8:	9800      	ldr	r0, [sp, #0]
 80068ea:	9d08      	ldr	r5, [sp, #32]
 80068ec:	3243      	adds	r2, #67	; 0x43
 80068ee:	47a8      	blx	r5
 80068f0:	3001      	adds	r0, #1
 80068f2:	d025      	beq.n	8006940 <_printf_common+0xa8>
 80068f4:	2206      	movs	r2, #6
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	2500      	movs	r5, #0
 80068fa:	4013      	ands	r3, r2
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d105      	bne.n	800690c <_printf_common+0x74>
 8006900:	6833      	ldr	r3, [r6, #0]
 8006902:	68e5      	ldr	r5, [r4, #12]
 8006904:	1aed      	subs	r5, r5, r3
 8006906:	43eb      	mvns	r3, r5
 8006908:	17db      	asrs	r3, r3, #31
 800690a:	401d      	ands	r5, r3
 800690c:	68a3      	ldr	r3, [r4, #8]
 800690e:	6922      	ldr	r2, [r4, #16]
 8006910:	4293      	cmp	r3, r2
 8006912:	dd01      	ble.n	8006918 <_printf_common+0x80>
 8006914:	1a9b      	subs	r3, r3, r2
 8006916:	18ed      	adds	r5, r5, r3
 8006918:	2600      	movs	r6, #0
 800691a:	42b5      	cmp	r5, r6
 800691c:	d120      	bne.n	8006960 <_printf_common+0xc8>
 800691e:	2000      	movs	r0, #0
 8006920:	e010      	b.n	8006944 <_printf_common+0xac>
 8006922:	3501      	adds	r5, #1
 8006924:	68e3      	ldr	r3, [r4, #12]
 8006926:	6832      	ldr	r2, [r6, #0]
 8006928:	1a9b      	subs	r3, r3, r2
 800692a:	42ab      	cmp	r3, r5
 800692c:	ddd2      	ble.n	80068d4 <_printf_common+0x3c>
 800692e:	0022      	movs	r2, r4
 8006930:	2301      	movs	r3, #1
 8006932:	9901      	ldr	r1, [sp, #4]
 8006934:	9800      	ldr	r0, [sp, #0]
 8006936:	9f08      	ldr	r7, [sp, #32]
 8006938:	3219      	adds	r2, #25
 800693a:	47b8      	blx	r7
 800693c:	3001      	adds	r0, #1
 800693e:	d1f0      	bne.n	8006922 <_printf_common+0x8a>
 8006940:	2001      	movs	r0, #1
 8006942:	4240      	negs	r0, r0
 8006944:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006946:	2030      	movs	r0, #48	; 0x30
 8006948:	18e1      	adds	r1, r4, r3
 800694a:	3143      	adds	r1, #67	; 0x43
 800694c:	7008      	strb	r0, [r1, #0]
 800694e:	0021      	movs	r1, r4
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	3145      	adds	r1, #69	; 0x45
 8006954:	7809      	ldrb	r1, [r1, #0]
 8006956:	18a2      	adds	r2, r4, r2
 8006958:	3243      	adds	r2, #67	; 0x43
 800695a:	3302      	adds	r3, #2
 800695c:	7011      	strb	r1, [r2, #0]
 800695e:	e7c1      	b.n	80068e4 <_printf_common+0x4c>
 8006960:	0022      	movs	r2, r4
 8006962:	2301      	movs	r3, #1
 8006964:	9901      	ldr	r1, [sp, #4]
 8006966:	9800      	ldr	r0, [sp, #0]
 8006968:	9f08      	ldr	r7, [sp, #32]
 800696a:	321a      	adds	r2, #26
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	d0e6      	beq.n	8006940 <_printf_common+0xa8>
 8006972:	3601      	adds	r6, #1
 8006974:	e7d1      	b.n	800691a <_printf_common+0x82>
	...

08006978 <_printf_i>:
 8006978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800697a:	b08b      	sub	sp, #44	; 0x2c
 800697c:	9206      	str	r2, [sp, #24]
 800697e:	000a      	movs	r2, r1
 8006980:	3243      	adds	r2, #67	; 0x43
 8006982:	9307      	str	r3, [sp, #28]
 8006984:	9005      	str	r0, [sp, #20]
 8006986:	9204      	str	r2, [sp, #16]
 8006988:	7e0a      	ldrb	r2, [r1, #24]
 800698a:	000c      	movs	r4, r1
 800698c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800698e:	2a78      	cmp	r2, #120	; 0x78
 8006990:	d809      	bhi.n	80069a6 <_printf_i+0x2e>
 8006992:	2a62      	cmp	r2, #98	; 0x62
 8006994:	d80b      	bhi.n	80069ae <_printf_i+0x36>
 8006996:	2a00      	cmp	r2, #0
 8006998:	d100      	bne.n	800699c <_printf_i+0x24>
 800699a:	e0be      	b.n	8006b1a <_printf_i+0x1a2>
 800699c:	497c      	ldr	r1, [pc, #496]	; (8006b90 <_printf_i+0x218>)
 800699e:	9103      	str	r1, [sp, #12]
 80069a0:	2a58      	cmp	r2, #88	; 0x58
 80069a2:	d100      	bne.n	80069a6 <_printf_i+0x2e>
 80069a4:	e093      	b.n	8006ace <_printf_i+0x156>
 80069a6:	0026      	movs	r6, r4
 80069a8:	3642      	adds	r6, #66	; 0x42
 80069aa:	7032      	strb	r2, [r6, #0]
 80069ac:	e022      	b.n	80069f4 <_printf_i+0x7c>
 80069ae:	0010      	movs	r0, r2
 80069b0:	3863      	subs	r0, #99	; 0x63
 80069b2:	2815      	cmp	r0, #21
 80069b4:	d8f7      	bhi.n	80069a6 <_printf_i+0x2e>
 80069b6:	f7f9 fbaf 	bl	8000118 <__gnu_thumb1_case_shi>
 80069ba:	0016      	.short	0x0016
 80069bc:	fff6001f 	.word	0xfff6001f
 80069c0:	fff6fff6 	.word	0xfff6fff6
 80069c4:	001ffff6 	.word	0x001ffff6
 80069c8:	fff6fff6 	.word	0xfff6fff6
 80069cc:	fff6fff6 	.word	0xfff6fff6
 80069d0:	003600a3 	.word	0x003600a3
 80069d4:	fff60083 	.word	0xfff60083
 80069d8:	00b4fff6 	.word	0x00b4fff6
 80069dc:	0036fff6 	.word	0x0036fff6
 80069e0:	fff6fff6 	.word	0xfff6fff6
 80069e4:	0087      	.short	0x0087
 80069e6:	0026      	movs	r6, r4
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	3642      	adds	r6, #66	; 0x42
 80069ec:	1d11      	adds	r1, r2, #4
 80069ee:	6019      	str	r1, [r3, #0]
 80069f0:	6813      	ldr	r3, [r2, #0]
 80069f2:	7033      	strb	r3, [r6, #0]
 80069f4:	2301      	movs	r3, #1
 80069f6:	e0a2      	b.n	8006b3e <_printf_i+0x1c6>
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	6809      	ldr	r1, [r1, #0]
 80069fc:	1d02      	adds	r2, r0, #4
 80069fe:	060d      	lsls	r5, r1, #24
 8006a00:	d50b      	bpl.n	8006a1a <_printf_i+0xa2>
 8006a02:	6805      	ldr	r5, [r0, #0]
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	2d00      	cmp	r5, #0
 8006a08:	da03      	bge.n	8006a12 <_printf_i+0x9a>
 8006a0a:	232d      	movs	r3, #45	; 0x2d
 8006a0c:	9a04      	ldr	r2, [sp, #16]
 8006a0e:	426d      	negs	r5, r5
 8006a10:	7013      	strb	r3, [r2, #0]
 8006a12:	4b5f      	ldr	r3, [pc, #380]	; (8006b90 <_printf_i+0x218>)
 8006a14:	270a      	movs	r7, #10
 8006a16:	9303      	str	r3, [sp, #12]
 8006a18:	e01b      	b.n	8006a52 <_printf_i+0xda>
 8006a1a:	6805      	ldr	r5, [r0, #0]
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	0649      	lsls	r1, r1, #25
 8006a20:	d5f1      	bpl.n	8006a06 <_printf_i+0x8e>
 8006a22:	b22d      	sxth	r5, r5
 8006a24:	e7ef      	b.n	8006a06 <_printf_i+0x8e>
 8006a26:	680d      	ldr	r5, [r1, #0]
 8006a28:	6819      	ldr	r1, [r3, #0]
 8006a2a:	1d08      	adds	r0, r1, #4
 8006a2c:	6018      	str	r0, [r3, #0]
 8006a2e:	062e      	lsls	r6, r5, #24
 8006a30:	d501      	bpl.n	8006a36 <_printf_i+0xbe>
 8006a32:	680d      	ldr	r5, [r1, #0]
 8006a34:	e003      	b.n	8006a3e <_printf_i+0xc6>
 8006a36:	066d      	lsls	r5, r5, #25
 8006a38:	d5fb      	bpl.n	8006a32 <_printf_i+0xba>
 8006a3a:	680d      	ldr	r5, [r1, #0]
 8006a3c:	b2ad      	uxth	r5, r5
 8006a3e:	4b54      	ldr	r3, [pc, #336]	; (8006b90 <_printf_i+0x218>)
 8006a40:	2708      	movs	r7, #8
 8006a42:	9303      	str	r3, [sp, #12]
 8006a44:	2a6f      	cmp	r2, #111	; 0x6f
 8006a46:	d000      	beq.n	8006a4a <_printf_i+0xd2>
 8006a48:	3702      	adds	r7, #2
 8006a4a:	0023      	movs	r3, r4
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	3343      	adds	r3, #67	; 0x43
 8006a50:	701a      	strb	r2, [r3, #0]
 8006a52:	6863      	ldr	r3, [r4, #4]
 8006a54:	60a3      	str	r3, [r4, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	db03      	blt.n	8006a62 <_printf_i+0xea>
 8006a5a:	2104      	movs	r1, #4
 8006a5c:	6822      	ldr	r2, [r4, #0]
 8006a5e:	438a      	bics	r2, r1
 8006a60:	6022      	str	r2, [r4, #0]
 8006a62:	2d00      	cmp	r5, #0
 8006a64:	d102      	bne.n	8006a6c <_printf_i+0xf4>
 8006a66:	9e04      	ldr	r6, [sp, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00c      	beq.n	8006a86 <_printf_i+0x10e>
 8006a6c:	9e04      	ldr	r6, [sp, #16]
 8006a6e:	0028      	movs	r0, r5
 8006a70:	0039      	movs	r1, r7
 8006a72:	f7f9 fbe1 	bl	8000238 <__aeabi_uidivmod>
 8006a76:	9b03      	ldr	r3, [sp, #12]
 8006a78:	3e01      	subs	r6, #1
 8006a7a:	5c5b      	ldrb	r3, [r3, r1]
 8006a7c:	7033      	strb	r3, [r6, #0]
 8006a7e:	002b      	movs	r3, r5
 8006a80:	0005      	movs	r5, r0
 8006a82:	429f      	cmp	r7, r3
 8006a84:	d9f3      	bls.n	8006a6e <_printf_i+0xf6>
 8006a86:	2f08      	cmp	r7, #8
 8006a88:	d109      	bne.n	8006a9e <_printf_i+0x126>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	07db      	lsls	r3, r3, #31
 8006a8e:	d506      	bpl.n	8006a9e <_printf_i+0x126>
 8006a90:	6862      	ldr	r2, [r4, #4]
 8006a92:	6923      	ldr	r3, [r4, #16]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	dc02      	bgt.n	8006a9e <_printf_i+0x126>
 8006a98:	2330      	movs	r3, #48	; 0x30
 8006a9a:	3e01      	subs	r6, #1
 8006a9c:	7033      	strb	r3, [r6, #0]
 8006a9e:	9b04      	ldr	r3, [sp, #16]
 8006aa0:	1b9b      	subs	r3, r3, r6
 8006aa2:	6123      	str	r3, [r4, #16]
 8006aa4:	9b07      	ldr	r3, [sp, #28]
 8006aa6:	0021      	movs	r1, r4
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	9805      	ldr	r0, [sp, #20]
 8006aac:	9b06      	ldr	r3, [sp, #24]
 8006aae:	aa09      	add	r2, sp, #36	; 0x24
 8006ab0:	f7ff fef2 	bl	8006898 <_printf_common>
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d147      	bne.n	8006b48 <_printf_i+0x1d0>
 8006ab8:	2001      	movs	r0, #1
 8006aba:	4240      	negs	r0, r0
 8006abc:	b00b      	add	sp, #44	; 0x2c
 8006abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	6809      	ldr	r1, [r1, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	6022      	str	r2, [r4, #0]
 8006ac8:	2278      	movs	r2, #120	; 0x78
 8006aca:	4932      	ldr	r1, [pc, #200]	; (8006b94 <_printf_i+0x21c>)
 8006acc:	9103      	str	r1, [sp, #12]
 8006ace:	0021      	movs	r1, r4
 8006ad0:	3145      	adds	r1, #69	; 0x45
 8006ad2:	700a      	strb	r2, [r1, #0]
 8006ad4:	6819      	ldr	r1, [r3, #0]
 8006ad6:	6822      	ldr	r2, [r4, #0]
 8006ad8:	c920      	ldmia	r1!, {r5}
 8006ada:	0610      	lsls	r0, r2, #24
 8006adc:	d402      	bmi.n	8006ae4 <_printf_i+0x16c>
 8006ade:	0650      	lsls	r0, r2, #25
 8006ae0:	d500      	bpl.n	8006ae4 <_printf_i+0x16c>
 8006ae2:	b2ad      	uxth	r5, r5
 8006ae4:	6019      	str	r1, [r3, #0]
 8006ae6:	07d3      	lsls	r3, r2, #31
 8006ae8:	d502      	bpl.n	8006af0 <_printf_i+0x178>
 8006aea:	2320      	movs	r3, #32
 8006aec:	4313      	orrs	r3, r2
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	2710      	movs	r7, #16
 8006af2:	2d00      	cmp	r5, #0
 8006af4:	d1a9      	bne.n	8006a4a <_printf_i+0xd2>
 8006af6:	2220      	movs	r2, #32
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	4393      	bics	r3, r2
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	e7a4      	b.n	8006a4a <_printf_i+0xd2>
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	680d      	ldr	r5, [r1, #0]
 8006b04:	1d10      	adds	r0, r2, #4
 8006b06:	6949      	ldr	r1, [r1, #20]
 8006b08:	6018      	str	r0, [r3, #0]
 8006b0a:	6813      	ldr	r3, [r2, #0]
 8006b0c:	062e      	lsls	r6, r5, #24
 8006b0e:	d501      	bpl.n	8006b14 <_printf_i+0x19c>
 8006b10:	6019      	str	r1, [r3, #0]
 8006b12:	e002      	b.n	8006b1a <_printf_i+0x1a2>
 8006b14:	066d      	lsls	r5, r5, #25
 8006b16:	d5fb      	bpl.n	8006b10 <_printf_i+0x198>
 8006b18:	8019      	strh	r1, [r3, #0]
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	9e04      	ldr	r6, [sp, #16]
 8006b1e:	6123      	str	r3, [r4, #16]
 8006b20:	e7c0      	b.n	8006aa4 <_printf_i+0x12c>
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	1d11      	adds	r1, r2, #4
 8006b26:	6019      	str	r1, [r3, #0]
 8006b28:	6816      	ldr	r6, [r2, #0]
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	0030      	movs	r0, r6
 8006b2e:	6862      	ldr	r2, [r4, #4]
 8006b30:	f000 f858 	bl	8006be4 <memchr>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d001      	beq.n	8006b3c <_printf_i+0x1c4>
 8006b38:	1b80      	subs	r0, r0, r6
 8006b3a:	6060      	str	r0, [r4, #4]
 8006b3c:	6863      	ldr	r3, [r4, #4]
 8006b3e:	6123      	str	r3, [r4, #16]
 8006b40:	2300      	movs	r3, #0
 8006b42:	9a04      	ldr	r2, [sp, #16]
 8006b44:	7013      	strb	r3, [r2, #0]
 8006b46:	e7ad      	b.n	8006aa4 <_printf_i+0x12c>
 8006b48:	0032      	movs	r2, r6
 8006b4a:	6923      	ldr	r3, [r4, #16]
 8006b4c:	9906      	ldr	r1, [sp, #24]
 8006b4e:	9805      	ldr	r0, [sp, #20]
 8006b50:	9d07      	ldr	r5, [sp, #28]
 8006b52:	47a8      	blx	r5
 8006b54:	3001      	adds	r0, #1
 8006b56:	d0af      	beq.n	8006ab8 <_printf_i+0x140>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	079b      	lsls	r3, r3, #30
 8006b5c:	d415      	bmi.n	8006b8a <_printf_i+0x212>
 8006b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b60:	68e0      	ldr	r0, [r4, #12]
 8006b62:	4298      	cmp	r0, r3
 8006b64:	daaa      	bge.n	8006abc <_printf_i+0x144>
 8006b66:	0018      	movs	r0, r3
 8006b68:	e7a8      	b.n	8006abc <_printf_i+0x144>
 8006b6a:	0022      	movs	r2, r4
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	9906      	ldr	r1, [sp, #24]
 8006b70:	9805      	ldr	r0, [sp, #20]
 8006b72:	9e07      	ldr	r6, [sp, #28]
 8006b74:	3219      	adds	r2, #25
 8006b76:	47b0      	blx	r6
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d09d      	beq.n	8006ab8 <_printf_i+0x140>
 8006b7c:	3501      	adds	r5, #1
 8006b7e:	68e3      	ldr	r3, [r4, #12]
 8006b80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b82:	1a9b      	subs	r3, r3, r2
 8006b84:	42ab      	cmp	r3, r5
 8006b86:	dcf0      	bgt.n	8006b6a <_printf_i+0x1f2>
 8006b88:	e7e9      	b.n	8006b5e <_printf_i+0x1e6>
 8006b8a:	2500      	movs	r5, #0
 8006b8c:	e7f7      	b.n	8006b7e <_printf_i+0x206>
 8006b8e:	46c0      	nop			; (mov r8, r8)
 8006b90:	08006d89 	.word	0x08006d89
 8006b94:	08006d9a 	.word	0x08006d9a

08006b98 <memmove>:
 8006b98:	b510      	push	{r4, lr}
 8006b9a:	4288      	cmp	r0, r1
 8006b9c:	d902      	bls.n	8006ba4 <memmove+0xc>
 8006b9e:	188b      	adds	r3, r1, r2
 8006ba0:	4298      	cmp	r0, r3
 8006ba2:	d303      	bcc.n	8006bac <memmove+0x14>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e007      	b.n	8006bb8 <memmove+0x20>
 8006ba8:	5c8b      	ldrb	r3, [r1, r2]
 8006baa:	5483      	strb	r3, [r0, r2]
 8006bac:	3a01      	subs	r2, #1
 8006bae:	d2fb      	bcs.n	8006ba8 <memmove+0x10>
 8006bb0:	bd10      	pop	{r4, pc}
 8006bb2:	5ccc      	ldrb	r4, [r1, r3]
 8006bb4:	54c4      	strb	r4, [r0, r3]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d1fa      	bne.n	8006bb2 <memmove+0x1a>
 8006bbc:	e7f8      	b.n	8006bb0 <memmove+0x18>
	...

08006bc0 <_sbrk_r>:
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	b570      	push	{r4, r5, r6, lr}
 8006bc4:	4d06      	ldr	r5, [pc, #24]	; (8006be0 <_sbrk_r+0x20>)
 8006bc6:	0004      	movs	r4, r0
 8006bc8:	0008      	movs	r0, r1
 8006bca:	602b      	str	r3, [r5, #0]
 8006bcc:	f7fc fb1e 	bl	800320c <_sbrk>
 8006bd0:	1c43      	adds	r3, r0, #1
 8006bd2:	d103      	bne.n	8006bdc <_sbrk_r+0x1c>
 8006bd4:	682b      	ldr	r3, [r5, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d000      	beq.n	8006bdc <_sbrk_r+0x1c>
 8006bda:	6023      	str	r3, [r4, #0]
 8006bdc:	bd70      	pop	{r4, r5, r6, pc}
 8006bde:	46c0      	nop			; (mov r8, r8)
 8006be0:	200002e4 	.word	0x200002e4

08006be4 <memchr>:
 8006be4:	b2c9      	uxtb	r1, r1
 8006be6:	1882      	adds	r2, r0, r2
 8006be8:	4290      	cmp	r0, r2
 8006bea:	d101      	bne.n	8006bf0 <memchr+0xc>
 8006bec:	2000      	movs	r0, #0
 8006bee:	4770      	bx	lr
 8006bf0:	7803      	ldrb	r3, [r0, #0]
 8006bf2:	428b      	cmp	r3, r1
 8006bf4:	d0fb      	beq.n	8006bee <memchr+0xa>
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	e7f6      	b.n	8006be8 <memchr+0x4>

08006bfa <memcpy>:
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	b510      	push	{r4, lr}
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d100      	bne.n	8006c04 <memcpy+0xa>
 8006c02:	bd10      	pop	{r4, pc}
 8006c04:	5ccc      	ldrb	r4, [r1, r3]
 8006c06:	54c4      	strb	r4, [r0, r3]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	e7f8      	b.n	8006bfe <memcpy+0x4>

08006c0c <_realloc_r>:
 8006c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c0e:	0007      	movs	r7, r0
 8006c10:	000e      	movs	r6, r1
 8006c12:	0014      	movs	r4, r2
 8006c14:	2900      	cmp	r1, #0
 8006c16:	d105      	bne.n	8006c24 <_realloc_r+0x18>
 8006c18:	0011      	movs	r1, r2
 8006c1a:	f7ff fc49 	bl	80064b0 <_malloc_r>
 8006c1e:	0005      	movs	r5, r0
 8006c20:	0028      	movs	r0, r5
 8006c22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c24:	2a00      	cmp	r2, #0
 8006c26:	d103      	bne.n	8006c30 <_realloc_r+0x24>
 8006c28:	f7ff fbd6 	bl	80063d8 <_free_r>
 8006c2c:	0025      	movs	r5, r4
 8006c2e:	e7f7      	b.n	8006c20 <_realloc_r+0x14>
 8006c30:	f000 f81b 	bl	8006c6a <_malloc_usable_size_r>
 8006c34:	9001      	str	r0, [sp, #4]
 8006c36:	4284      	cmp	r4, r0
 8006c38:	d803      	bhi.n	8006c42 <_realloc_r+0x36>
 8006c3a:	0035      	movs	r5, r6
 8006c3c:	0843      	lsrs	r3, r0, #1
 8006c3e:	42a3      	cmp	r3, r4
 8006c40:	d3ee      	bcc.n	8006c20 <_realloc_r+0x14>
 8006c42:	0021      	movs	r1, r4
 8006c44:	0038      	movs	r0, r7
 8006c46:	f7ff fc33 	bl	80064b0 <_malloc_r>
 8006c4a:	1e05      	subs	r5, r0, #0
 8006c4c:	d0e8      	beq.n	8006c20 <_realloc_r+0x14>
 8006c4e:	9b01      	ldr	r3, [sp, #4]
 8006c50:	0022      	movs	r2, r4
 8006c52:	429c      	cmp	r4, r3
 8006c54:	d900      	bls.n	8006c58 <_realloc_r+0x4c>
 8006c56:	001a      	movs	r2, r3
 8006c58:	0031      	movs	r1, r6
 8006c5a:	0028      	movs	r0, r5
 8006c5c:	f7ff ffcd 	bl	8006bfa <memcpy>
 8006c60:	0031      	movs	r1, r6
 8006c62:	0038      	movs	r0, r7
 8006c64:	f7ff fbb8 	bl	80063d8 <_free_r>
 8006c68:	e7da      	b.n	8006c20 <_realloc_r+0x14>

08006c6a <_malloc_usable_size_r>:
 8006c6a:	1f0b      	subs	r3, r1, #4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	1f18      	subs	r0, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	da01      	bge.n	8006c78 <_malloc_usable_size_r+0xe>
 8006c74:	580b      	ldr	r3, [r1, r0]
 8006c76:	18c0      	adds	r0, r0, r3
 8006c78:	4770      	bx	lr
	...

08006c7c <_init>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	46c0      	nop			; (mov r8, r8)
 8006c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c82:	bc08      	pop	{r3}
 8006c84:	469e      	mov	lr, r3
 8006c86:	4770      	bx	lr

08006c88 <_fini>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	46c0      	nop			; (mov r8, r8)
 8006c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8e:	bc08      	pop	{r3}
 8006c90:	469e      	mov	lr, r3
 8006c92:	4770      	bx	lr
