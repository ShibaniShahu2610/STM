
16_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800296c  0800296c  0001296c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002988  08002988  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002988  08002988  00012988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002990  08002990  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002990  08002990  00012990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002994  08002994  00012994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080029a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080029a4  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004a9c  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000128c  00000000  00000000  00024b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004c8  00000000  00000000  00025da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000383  00000000  00000000  00026268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001279f  00000000  00000000  000265eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006297  00000000  00000000  00038d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007296b  00000000  00000000  0003f021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001090  00000000  00000000  000b198c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000b2a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002954 	.word	0x08002954

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002954 	.word	0x08002954

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 fc46 	bl	8000b6c <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 fc41 	bl	8000b6c <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__aeabi_dmul>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4645      	mov	r5, r8
 8000458:	46de      	mov	lr, fp
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	001f      	movs	r7, r3
 8000462:	030b      	lsls	r3, r1, #12
 8000464:	0b1b      	lsrs	r3, r3, #12
 8000466:	469b      	mov	fp, r3
 8000468:	004d      	lsls	r5, r1, #1
 800046a:	0fcb      	lsrs	r3, r1, #31
 800046c:	0004      	movs	r4, r0
 800046e:	4691      	mov	r9, r2
 8000470:	4698      	mov	r8, r3
 8000472:	b087      	sub	sp, #28
 8000474:	0d6d      	lsrs	r5, r5, #21
 8000476:	d100      	bne.n	800047a <__aeabi_dmul+0x26>
 8000478:	e1cd      	b.n	8000816 <__aeabi_dmul+0x3c2>
 800047a:	4bce      	ldr	r3, [pc, #824]	; (80007b4 <__aeabi_dmul+0x360>)
 800047c:	429d      	cmp	r5, r3
 800047e:	d100      	bne.n	8000482 <__aeabi_dmul+0x2e>
 8000480:	e1e9      	b.n	8000856 <__aeabi_dmul+0x402>
 8000482:	465a      	mov	r2, fp
 8000484:	0f43      	lsrs	r3, r0, #29
 8000486:	00d2      	lsls	r2, r2, #3
 8000488:	4313      	orrs	r3, r2
 800048a:	2280      	movs	r2, #128	; 0x80
 800048c:	0412      	lsls	r2, r2, #16
 800048e:	431a      	orrs	r2, r3
 8000490:	00c3      	lsls	r3, r0, #3
 8000492:	469a      	mov	sl, r3
 8000494:	4bc8      	ldr	r3, [pc, #800]	; (80007b8 <__aeabi_dmul+0x364>)
 8000496:	4693      	mov	fp, r2
 8000498:	469c      	mov	ip, r3
 800049a:	2300      	movs	r3, #0
 800049c:	2600      	movs	r6, #0
 800049e:	4465      	add	r5, ip
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	033c      	lsls	r4, r7, #12
 80004a4:	007b      	lsls	r3, r7, #1
 80004a6:	4648      	mov	r0, r9
 80004a8:	0b24      	lsrs	r4, r4, #12
 80004aa:	0d5b      	lsrs	r3, r3, #21
 80004ac:	0fff      	lsrs	r7, r7, #31
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d100      	bne.n	80004b4 <__aeabi_dmul+0x60>
 80004b2:	e189      	b.n	80007c8 <__aeabi_dmul+0x374>
 80004b4:	4abf      	ldr	r2, [pc, #764]	; (80007b4 <__aeabi_dmul+0x360>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d019      	beq.n	80004ee <__aeabi_dmul+0x9a>
 80004ba:	0f42      	lsrs	r2, r0, #29
 80004bc:	00e4      	lsls	r4, r4, #3
 80004be:	4322      	orrs	r2, r4
 80004c0:	2480      	movs	r4, #128	; 0x80
 80004c2:	0424      	lsls	r4, r4, #16
 80004c4:	4314      	orrs	r4, r2
 80004c6:	4abc      	ldr	r2, [pc, #752]	; (80007b8 <__aeabi_dmul+0x364>)
 80004c8:	2100      	movs	r1, #0
 80004ca:	4694      	mov	ip, r2
 80004cc:	4642      	mov	r2, r8
 80004ce:	4463      	add	r3, ip
 80004d0:	195b      	adds	r3, r3, r5
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	9b01      	ldr	r3, [sp, #4]
 80004d6:	407a      	eors	r2, r7
 80004d8:	3301      	adds	r3, #1
 80004da:	00c0      	lsls	r0, r0, #3
 80004dc:	b2d2      	uxtb	r2, r2
 80004de:	9302      	str	r3, [sp, #8]
 80004e0:	2e0a      	cmp	r6, #10
 80004e2:	dd1c      	ble.n	800051e <__aeabi_dmul+0xca>
 80004e4:	003a      	movs	r2, r7
 80004e6:	2e0b      	cmp	r6, #11
 80004e8:	d05e      	beq.n	80005a8 <__aeabi_dmul+0x154>
 80004ea:	4647      	mov	r7, r8
 80004ec:	e056      	b.n	800059c <__aeabi_dmul+0x148>
 80004ee:	4649      	mov	r1, r9
 80004f0:	4bb0      	ldr	r3, [pc, #704]	; (80007b4 <__aeabi_dmul+0x360>)
 80004f2:	4321      	orrs	r1, r4
 80004f4:	18eb      	adds	r3, r5, r3
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	2900      	cmp	r1, #0
 80004fa:	d12a      	bne.n	8000552 <__aeabi_dmul+0xfe>
 80004fc:	2080      	movs	r0, #128	; 0x80
 80004fe:	2202      	movs	r2, #2
 8000500:	0100      	lsls	r0, r0, #4
 8000502:	002b      	movs	r3, r5
 8000504:	4684      	mov	ip, r0
 8000506:	4316      	orrs	r6, r2
 8000508:	4642      	mov	r2, r8
 800050a:	4463      	add	r3, ip
 800050c:	407a      	eors	r2, r7
 800050e:	b2d2      	uxtb	r2, r2
 8000510:	9302      	str	r3, [sp, #8]
 8000512:	2e0a      	cmp	r6, #10
 8000514:	dd00      	ble.n	8000518 <__aeabi_dmul+0xc4>
 8000516:	e231      	b.n	800097c <__aeabi_dmul+0x528>
 8000518:	2000      	movs	r0, #0
 800051a:	2400      	movs	r4, #0
 800051c:	2102      	movs	r1, #2
 800051e:	2e02      	cmp	r6, #2
 8000520:	dc26      	bgt.n	8000570 <__aeabi_dmul+0x11c>
 8000522:	3e01      	subs	r6, #1
 8000524:	2e01      	cmp	r6, #1
 8000526:	d852      	bhi.n	80005ce <__aeabi_dmul+0x17a>
 8000528:	2902      	cmp	r1, #2
 800052a:	d04c      	beq.n	80005c6 <__aeabi_dmul+0x172>
 800052c:	2901      	cmp	r1, #1
 800052e:	d000      	beq.n	8000532 <__aeabi_dmul+0xde>
 8000530:	e118      	b.n	8000764 <__aeabi_dmul+0x310>
 8000532:	2300      	movs	r3, #0
 8000534:	2400      	movs	r4, #0
 8000536:	2500      	movs	r5, #0
 8000538:	051b      	lsls	r3, r3, #20
 800053a:	4323      	orrs	r3, r4
 800053c:	07d2      	lsls	r2, r2, #31
 800053e:	4313      	orrs	r3, r2
 8000540:	0028      	movs	r0, r5
 8000542:	0019      	movs	r1, r3
 8000544:	b007      	add	sp, #28
 8000546:	bcf0      	pop	{r4, r5, r6, r7}
 8000548:	46bb      	mov	fp, r7
 800054a:	46b2      	mov	sl, r6
 800054c:	46a9      	mov	r9, r5
 800054e:	46a0      	mov	r8, r4
 8000550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000552:	2180      	movs	r1, #128	; 0x80
 8000554:	2203      	movs	r2, #3
 8000556:	0109      	lsls	r1, r1, #4
 8000558:	002b      	movs	r3, r5
 800055a:	468c      	mov	ip, r1
 800055c:	4316      	orrs	r6, r2
 800055e:	4642      	mov	r2, r8
 8000560:	4463      	add	r3, ip
 8000562:	407a      	eors	r2, r7
 8000564:	b2d2      	uxtb	r2, r2
 8000566:	9302      	str	r3, [sp, #8]
 8000568:	2e0a      	cmp	r6, #10
 800056a:	dd00      	ble.n	800056e <__aeabi_dmul+0x11a>
 800056c:	e228      	b.n	80009c0 <__aeabi_dmul+0x56c>
 800056e:	2103      	movs	r1, #3
 8000570:	2501      	movs	r5, #1
 8000572:	40b5      	lsls	r5, r6
 8000574:	46ac      	mov	ip, r5
 8000576:	26a6      	movs	r6, #166	; 0xa6
 8000578:	4663      	mov	r3, ip
 800057a:	00f6      	lsls	r6, r6, #3
 800057c:	4035      	ands	r5, r6
 800057e:	4233      	tst	r3, r6
 8000580:	d10b      	bne.n	800059a <__aeabi_dmul+0x146>
 8000582:	2690      	movs	r6, #144	; 0x90
 8000584:	00b6      	lsls	r6, r6, #2
 8000586:	4233      	tst	r3, r6
 8000588:	d118      	bne.n	80005bc <__aeabi_dmul+0x168>
 800058a:	3eb9      	subs	r6, #185	; 0xb9
 800058c:	3eff      	subs	r6, #255	; 0xff
 800058e:	421e      	tst	r6, r3
 8000590:	d01d      	beq.n	80005ce <__aeabi_dmul+0x17a>
 8000592:	46a3      	mov	fp, r4
 8000594:	4682      	mov	sl, r0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	e000      	b.n	800059c <__aeabi_dmul+0x148>
 800059a:	0017      	movs	r7, r2
 800059c:	9900      	ldr	r1, [sp, #0]
 800059e:	003a      	movs	r2, r7
 80005a0:	2902      	cmp	r1, #2
 80005a2:	d010      	beq.n	80005c6 <__aeabi_dmul+0x172>
 80005a4:	465c      	mov	r4, fp
 80005a6:	4650      	mov	r0, sl
 80005a8:	2903      	cmp	r1, #3
 80005aa:	d1bf      	bne.n	800052c <__aeabi_dmul+0xd8>
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	031b      	lsls	r3, r3, #12
 80005b0:	431c      	orrs	r4, r3
 80005b2:	0324      	lsls	r4, r4, #12
 80005b4:	0005      	movs	r5, r0
 80005b6:	4b7f      	ldr	r3, [pc, #508]	; (80007b4 <__aeabi_dmul+0x360>)
 80005b8:	0b24      	lsrs	r4, r4, #12
 80005ba:	e7bd      	b.n	8000538 <__aeabi_dmul+0xe4>
 80005bc:	2480      	movs	r4, #128	; 0x80
 80005be:	2200      	movs	r2, #0
 80005c0:	4b7c      	ldr	r3, [pc, #496]	; (80007b4 <__aeabi_dmul+0x360>)
 80005c2:	0324      	lsls	r4, r4, #12
 80005c4:	e7b8      	b.n	8000538 <__aeabi_dmul+0xe4>
 80005c6:	2400      	movs	r4, #0
 80005c8:	2500      	movs	r5, #0
 80005ca:	4b7a      	ldr	r3, [pc, #488]	; (80007b4 <__aeabi_dmul+0x360>)
 80005cc:	e7b4      	b.n	8000538 <__aeabi_dmul+0xe4>
 80005ce:	4653      	mov	r3, sl
 80005d0:	041e      	lsls	r6, r3, #16
 80005d2:	0c36      	lsrs	r6, r6, #16
 80005d4:	0c1f      	lsrs	r7, r3, #16
 80005d6:	0033      	movs	r3, r6
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	0400      	lsls	r0, r0, #16
 80005dc:	0c00      	lsrs	r0, r0, #16
 80005de:	4343      	muls	r3, r0
 80005e0:	4698      	mov	r8, r3
 80005e2:	0003      	movs	r3, r0
 80005e4:	437b      	muls	r3, r7
 80005e6:	4699      	mov	r9, r3
 80005e8:	0033      	movs	r3, r6
 80005ea:	434b      	muls	r3, r1
 80005ec:	469c      	mov	ip, r3
 80005ee:	4643      	mov	r3, r8
 80005f0:	000d      	movs	r5, r1
 80005f2:	0c1b      	lsrs	r3, r3, #16
 80005f4:	469a      	mov	sl, r3
 80005f6:	437d      	muls	r5, r7
 80005f8:	44cc      	add	ip, r9
 80005fa:	44d4      	add	ip, sl
 80005fc:	9500      	str	r5, [sp, #0]
 80005fe:	45e1      	cmp	r9, ip
 8000600:	d904      	bls.n	800060c <__aeabi_dmul+0x1b8>
 8000602:	2380      	movs	r3, #128	; 0x80
 8000604:	025b      	lsls	r3, r3, #9
 8000606:	4699      	mov	r9, r3
 8000608:	444d      	add	r5, r9
 800060a:	9500      	str	r5, [sp, #0]
 800060c:	4663      	mov	r3, ip
 800060e:	0c1b      	lsrs	r3, r3, #16
 8000610:	001d      	movs	r5, r3
 8000612:	4663      	mov	r3, ip
 8000614:	041b      	lsls	r3, r3, #16
 8000616:	469c      	mov	ip, r3
 8000618:	4643      	mov	r3, r8
 800061a:	041b      	lsls	r3, r3, #16
 800061c:	0c1b      	lsrs	r3, r3, #16
 800061e:	4698      	mov	r8, r3
 8000620:	4663      	mov	r3, ip
 8000622:	4443      	add	r3, r8
 8000624:	9303      	str	r3, [sp, #12]
 8000626:	0c23      	lsrs	r3, r4, #16
 8000628:	4698      	mov	r8, r3
 800062a:	0033      	movs	r3, r6
 800062c:	0424      	lsls	r4, r4, #16
 800062e:	0c24      	lsrs	r4, r4, #16
 8000630:	4363      	muls	r3, r4
 8000632:	469c      	mov	ip, r3
 8000634:	0023      	movs	r3, r4
 8000636:	437b      	muls	r3, r7
 8000638:	4699      	mov	r9, r3
 800063a:	4643      	mov	r3, r8
 800063c:	435e      	muls	r6, r3
 800063e:	435f      	muls	r7, r3
 8000640:	444e      	add	r6, r9
 8000642:	4663      	mov	r3, ip
 8000644:	46b2      	mov	sl, r6
 8000646:	0c1e      	lsrs	r6, r3, #16
 8000648:	4456      	add	r6, sl
 800064a:	45b1      	cmp	r9, r6
 800064c:	d903      	bls.n	8000656 <__aeabi_dmul+0x202>
 800064e:	2380      	movs	r3, #128	; 0x80
 8000650:	025b      	lsls	r3, r3, #9
 8000652:	4699      	mov	r9, r3
 8000654:	444f      	add	r7, r9
 8000656:	0c33      	lsrs	r3, r6, #16
 8000658:	4699      	mov	r9, r3
 800065a:	003b      	movs	r3, r7
 800065c:	444b      	add	r3, r9
 800065e:	9305      	str	r3, [sp, #20]
 8000660:	4663      	mov	r3, ip
 8000662:	46ac      	mov	ip, r5
 8000664:	041f      	lsls	r7, r3, #16
 8000666:	0c3f      	lsrs	r7, r7, #16
 8000668:	0436      	lsls	r6, r6, #16
 800066a:	19f6      	adds	r6, r6, r7
 800066c:	44b4      	add	ip, r6
 800066e:	4663      	mov	r3, ip
 8000670:	9304      	str	r3, [sp, #16]
 8000672:	465b      	mov	r3, fp
 8000674:	0c1b      	lsrs	r3, r3, #16
 8000676:	469c      	mov	ip, r3
 8000678:	465b      	mov	r3, fp
 800067a:	041f      	lsls	r7, r3, #16
 800067c:	0c3f      	lsrs	r7, r7, #16
 800067e:	003b      	movs	r3, r7
 8000680:	4343      	muls	r3, r0
 8000682:	4699      	mov	r9, r3
 8000684:	4663      	mov	r3, ip
 8000686:	4343      	muls	r3, r0
 8000688:	469a      	mov	sl, r3
 800068a:	464b      	mov	r3, r9
 800068c:	4660      	mov	r0, ip
 800068e:	0c1b      	lsrs	r3, r3, #16
 8000690:	469b      	mov	fp, r3
 8000692:	4348      	muls	r0, r1
 8000694:	4379      	muls	r1, r7
 8000696:	4451      	add	r1, sl
 8000698:	4459      	add	r1, fp
 800069a:	458a      	cmp	sl, r1
 800069c:	d903      	bls.n	80006a6 <__aeabi_dmul+0x252>
 800069e:	2380      	movs	r3, #128	; 0x80
 80006a0:	025b      	lsls	r3, r3, #9
 80006a2:	469a      	mov	sl, r3
 80006a4:	4450      	add	r0, sl
 80006a6:	0c0b      	lsrs	r3, r1, #16
 80006a8:	469a      	mov	sl, r3
 80006aa:	464b      	mov	r3, r9
 80006ac:	041b      	lsls	r3, r3, #16
 80006ae:	0c1b      	lsrs	r3, r3, #16
 80006b0:	4699      	mov	r9, r3
 80006b2:	003b      	movs	r3, r7
 80006b4:	4363      	muls	r3, r4
 80006b6:	0409      	lsls	r1, r1, #16
 80006b8:	4645      	mov	r5, r8
 80006ba:	4449      	add	r1, r9
 80006bc:	4699      	mov	r9, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	435c      	muls	r4, r3
 80006c2:	436b      	muls	r3, r5
 80006c4:	469c      	mov	ip, r3
 80006c6:	464b      	mov	r3, r9
 80006c8:	0c1b      	lsrs	r3, r3, #16
 80006ca:	4698      	mov	r8, r3
 80006cc:	436f      	muls	r7, r5
 80006ce:	193f      	adds	r7, r7, r4
 80006d0:	4447      	add	r7, r8
 80006d2:	4450      	add	r0, sl
 80006d4:	42bc      	cmp	r4, r7
 80006d6:	d903      	bls.n	80006e0 <__aeabi_dmul+0x28c>
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	025b      	lsls	r3, r3, #9
 80006dc:	4698      	mov	r8, r3
 80006de:	44c4      	add	ip, r8
 80006e0:	9b04      	ldr	r3, [sp, #16]
 80006e2:	9d00      	ldr	r5, [sp, #0]
 80006e4:	4698      	mov	r8, r3
 80006e6:	4445      	add	r5, r8
 80006e8:	42b5      	cmp	r5, r6
 80006ea:	41b6      	sbcs	r6, r6
 80006ec:	4273      	negs	r3, r6
 80006ee:	4698      	mov	r8, r3
 80006f0:	464b      	mov	r3, r9
 80006f2:	041e      	lsls	r6, r3, #16
 80006f4:	9b05      	ldr	r3, [sp, #20]
 80006f6:	043c      	lsls	r4, r7, #16
 80006f8:	4699      	mov	r9, r3
 80006fa:	0c36      	lsrs	r6, r6, #16
 80006fc:	19a4      	adds	r4, r4, r6
 80006fe:	444c      	add	r4, r9
 8000700:	46a1      	mov	r9, r4
 8000702:	4683      	mov	fp, r0
 8000704:	186e      	adds	r6, r5, r1
 8000706:	44c1      	add	r9, r8
 8000708:	428e      	cmp	r6, r1
 800070a:	4189      	sbcs	r1, r1
 800070c:	44cb      	add	fp, r9
 800070e:	465d      	mov	r5, fp
 8000710:	4249      	negs	r1, r1
 8000712:	186d      	adds	r5, r5, r1
 8000714:	429c      	cmp	r4, r3
 8000716:	41a4      	sbcs	r4, r4
 8000718:	45c1      	cmp	r9, r8
 800071a:	419b      	sbcs	r3, r3
 800071c:	4583      	cmp	fp, r0
 800071e:	4180      	sbcs	r0, r0
 8000720:	428d      	cmp	r5, r1
 8000722:	4189      	sbcs	r1, r1
 8000724:	425b      	negs	r3, r3
 8000726:	4264      	negs	r4, r4
 8000728:	431c      	orrs	r4, r3
 800072a:	4240      	negs	r0, r0
 800072c:	9b03      	ldr	r3, [sp, #12]
 800072e:	4249      	negs	r1, r1
 8000730:	4301      	orrs	r1, r0
 8000732:	0270      	lsls	r0, r6, #9
 8000734:	0c3f      	lsrs	r7, r7, #16
 8000736:	4318      	orrs	r0, r3
 8000738:	19e4      	adds	r4, r4, r7
 800073a:	1e47      	subs	r7, r0, #1
 800073c:	41b8      	sbcs	r0, r7
 800073e:	1864      	adds	r4, r4, r1
 8000740:	4464      	add	r4, ip
 8000742:	0df6      	lsrs	r6, r6, #23
 8000744:	0261      	lsls	r1, r4, #9
 8000746:	4330      	orrs	r0, r6
 8000748:	0dec      	lsrs	r4, r5, #23
 800074a:	026e      	lsls	r6, r5, #9
 800074c:	430c      	orrs	r4, r1
 800074e:	4330      	orrs	r0, r6
 8000750:	01c9      	lsls	r1, r1, #7
 8000752:	d400      	bmi.n	8000756 <__aeabi_dmul+0x302>
 8000754:	e0f1      	b.n	800093a <__aeabi_dmul+0x4e6>
 8000756:	2101      	movs	r1, #1
 8000758:	0843      	lsrs	r3, r0, #1
 800075a:	4001      	ands	r1, r0
 800075c:	430b      	orrs	r3, r1
 800075e:	07e0      	lsls	r0, r4, #31
 8000760:	4318      	orrs	r0, r3
 8000762:	0864      	lsrs	r4, r4, #1
 8000764:	4915      	ldr	r1, [pc, #84]	; (80007bc <__aeabi_dmul+0x368>)
 8000766:	9b02      	ldr	r3, [sp, #8]
 8000768:	468c      	mov	ip, r1
 800076a:	4463      	add	r3, ip
 800076c:	2b00      	cmp	r3, #0
 800076e:	dc00      	bgt.n	8000772 <__aeabi_dmul+0x31e>
 8000770:	e097      	b.n	80008a2 <__aeabi_dmul+0x44e>
 8000772:	0741      	lsls	r1, r0, #29
 8000774:	d009      	beq.n	800078a <__aeabi_dmul+0x336>
 8000776:	210f      	movs	r1, #15
 8000778:	4001      	ands	r1, r0
 800077a:	2904      	cmp	r1, #4
 800077c:	d005      	beq.n	800078a <__aeabi_dmul+0x336>
 800077e:	1d01      	adds	r1, r0, #4
 8000780:	4281      	cmp	r1, r0
 8000782:	4180      	sbcs	r0, r0
 8000784:	4240      	negs	r0, r0
 8000786:	1824      	adds	r4, r4, r0
 8000788:	0008      	movs	r0, r1
 800078a:	01e1      	lsls	r1, r4, #7
 800078c:	d506      	bpl.n	800079c <__aeabi_dmul+0x348>
 800078e:	2180      	movs	r1, #128	; 0x80
 8000790:	00c9      	lsls	r1, r1, #3
 8000792:	468c      	mov	ip, r1
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <__aeabi_dmul+0x36c>)
 8000796:	401c      	ands	r4, r3
 8000798:	9b02      	ldr	r3, [sp, #8]
 800079a:	4463      	add	r3, ip
 800079c:	4909      	ldr	r1, [pc, #36]	; (80007c4 <__aeabi_dmul+0x370>)
 800079e:	428b      	cmp	r3, r1
 80007a0:	dd00      	ble.n	80007a4 <__aeabi_dmul+0x350>
 80007a2:	e710      	b.n	80005c6 <__aeabi_dmul+0x172>
 80007a4:	0761      	lsls	r1, r4, #29
 80007a6:	08c5      	lsrs	r5, r0, #3
 80007a8:	0264      	lsls	r4, r4, #9
 80007aa:	055b      	lsls	r3, r3, #21
 80007ac:	430d      	orrs	r5, r1
 80007ae:	0b24      	lsrs	r4, r4, #12
 80007b0:	0d5b      	lsrs	r3, r3, #21
 80007b2:	e6c1      	b.n	8000538 <__aeabi_dmul+0xe4>
 80007b4:	000007ff 	.word	0x000007ff
 80007b8:	fffffc01 	.word	0xfffffc01
 80007bc:	000003ff 	.word	0x000003ff
 80007c0:	feffffff 	.word	0xfeffffff
 80007c4:	000007fe 	.word	0x000007fe
 80007c8:	464b      	mov	r3, r9
 80007ca:	4323      	orrs	r3, r4
 80007cc:	d059      	beq.n	8000882 <__aeabi_dmul+0x42e>
 80007ce:	2c00      	cmp	r4, #0
 80007d0:	d100      	bne.n	80007d4 <__aeabi_dmul+0x380>
 80007d2:	e0a3      	b.n	800091c <__aeabi_dmul+0x4c8>
 80007d4:	0020      	movs	r0, r4
 80007d6:	f000 f9ab 	bl	8000b30 <__clzsi2>
 80007da:	0001      	movs	r1, r0
 80007dc:	0003      	movs	r3, r0
 80007de:	390b      	subs	r1, #11
 80007e0:	221d      	movs	r2, #29
 80007e2:	1a52      	subs	r2, r2, r1
 80007e4:	4649      	mov	r1, r9
 80007e6:	0018      	movs	r0, r3
 80007e8:	40d1      	lsrs	r1, r2
 80007ea:	464a      	mov	r2, r9
 80007ec:	3808      	subs	r0, #8
 80007ee:	4082      	lsls	r2, r0
 80007f0:	4084      	lsls	r4, r0
 80007f2:	0010      	movs	r0, r2
 80007f4:	430c      	orrs	r4, r1
 80007f6:	4a74      	ldr	r2, [pc, #464]	; (80009c8 <__aeabi_dmul+0x574>)
 80007f8:	1aeb      	subs	r3, r5, r3
 80007fa:	4694      	mov	ip, r2
 80007fc:	4642      	mov	r2, r8
 80007fe:	4463      	add	r3, ip
 8000800:	9301      	str	r3, [sp, #4]
 8000802:	9b01      	ldr	r3, [sp, #4]
 8000804:	407a      	eors	r2, r7
 8000806:	3301      	adds	r3, #1
 8000808:	2100      	movs	r1, #0
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	9302      	str	r3, [sp, #8]
 800080e:	2e0a      	cmp	r6, #10
 8000810:	dd00      	ble.n	8000814 <__aeabi_dmul+0x3c0>
 8000812:	e667      	b.n	80004e4 <__aeabi_dmul+0x90>
 8000814:	e683      	b.n	800051e <__aeabi_dmul+0xca>
 8000816:	465b      	mov	r3, fp
 8000818:	4303      	orrs	r3, r0
 800081a:	469a      	mov	sl, r3
 800081c:	d02a      	beq.n	8000874 <__aeabi_dmul+0x420>
 800081e:	465b      	mov	r3, fp
 8000820:	2b00      	cmp	r3, #0
 8000822:	d06d      	beq.n	8000900 <__aeabi_dmul+0x4ac>
 8000824:	4658      	mov	r0, fp
 8000826:	f000 f983 	bl	8000b30 <__clzsi2>
 800082a:	0001      	movs	r1, r0
 800082c:	0003      	movs	r3, r0
 800082e:	390b      	subs	r1, #11
 8000830:	221d      	movs	r2, #29
 8000832:	1a52      	subs	r2, r2, r1
 8000834:	0021      	movs	r1, r4
 8000836:	0018      	movs	r0, r3
 8000838:	465d      	mov	r5, fp
 800083a:	40d1      	lsrs	r1, r2
 800083c:	3808      	subs	r0, #8
 800083e:	4085      	lsls	r5, r0
 8000840:	000a      	movs	r2, r1
 8000842:	4084      	lsls	r4, r0
 8000844:	432a      	orrs	r2, r5
 8000846:	4693      	mov	fp, r2
 8000848:	46a2      	mov	sl, r4
 800084a:	4d5f      	ldr	r5, [pc, #380]	; (80009c8 <__aeabi_dmul+0x574>)
 800084c:	2600      	movs	r6, #0
 800084e:	1aed      	subs	r5, r5, r3
 8000850:	2300      	movs	r3, #0
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	e625      	b.n	80004a2 <__aeabi_dmul+0x4e>
 8000856:	465b      	mov	r3, fp
 8000858:	4303      	orrs	r3, r0
 800085a:	469a      	mov	sl, r3
 800085c:	d105      	bne.n	800086a <__aeabi_dmul+0x416>
 800085e:	2300      	movs	r3, #0
 8000860:	469b      	mov	fp, r3
 8000862:	3302      	adds	r3, #2
 8000864:	2608      	movs	r6, #8
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	e61b      	b.n	80004a2 <__aeabi_dmul+0x4e>
 800086a:	2303      	movs	r3, #3
 800086c:	4682      	mov	sl, r0
 800086e:	260c      	movs	r6, #12
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	e616      	b.n	80004a2 <__aeabi_dmul+0x4e>
 8000874:	2300      	movs	r3, #0
 8000876:	469b      	mov	fp, r3
 8000878:	3301      	adds	r3, #1
 800087a:	2604      	movs	r6, #4
 800087c:	2500      	movs	r5, #0
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	e60f      	b.n	80004a2 <__aeabi_dmul+0x4e>
 8000882:	4642      	mov	r2, r8
 8000884:	3301      	adds	r3, #1
 8000886:	9501      	str	r5, [sp, #4]
 8000888:	431e      	orrs	r6, r3
 800088a:	9b01      	ldr	r3, [sp, #4]
 800088c:	407a      	eors	r2, r7
 800088e:	3301      	adds	r3, #1
 8000890:	2400      	movs	r4, #0
 8000892:	2000      	movs	r0, #0
 8000894:	2101      	movs	r1, #1
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	9302      	str	r3, [sp, #8]
 800089a:	2e0a      	cmp	r6, #10
 800089c:	dd00      	ble.n	80008a0 <__aeabi_dmul+0x44c>
 800089e:	e621      	b.n	80004e4 <__aeabi_dmul+0x90>
 80008a0:	e63d      	b.n	800051e <__aeabi_dmul+0xca>
 80008a2:	2101      	movs	r1, #1
 80008a4:	1ac9      	subs	r1, r1, r3
 80008a6:	2938      	cmp	r1, #56	; 0x38
 80008a8:	dd00      	ble.n	80008ac <__aeabi_dmul+0x458>
 80008aa:	e642      	b.n	8000532 <__aeabi_dmul+0xde>
 80008ac:	291f      	cmp	r1, #31
 80008ae:	dd47      	ble.n	8000940 <__aeabi_dmul+0x4ec>
 80008b0:	261f      	movs	r6, #31
 80008b2:	0025      	movs	r5, r4
 80008b4:	4276      	negs	r6, r6
 80008b6:	1af3      	subs	r3, r6, r3
 80008b8:	40dd      	lsrs	r5, r3
 80008ba:	002b      	movs	r3, r5
 80008bc:	2920      	cmp	r1, #32
 80008be:	d005      	beq.n	80008cc <__aeabi_dmul+0x478>
 80008c0:	4942      	ldr	r1, [pc, #264]	; (80009cc <__aeabi_dmul+0x578>)
 80008c2:	9d02      	ldr	r5, [sp, #8]
 80008c4:	468c      	mov	ip, r1
 80008c6:	4465      	add	r5, ip
 80008c8:	40ac      	lsls	r4, r5
 80008ca:	4320      	orrs	r0, r4
 80008cc:	1e41      	subs	r1, r0, #1
 80008ce:	4188      	sbcs	r0, r1
 80008d0:	4318      	orrs	r0, r3
 80008d2:	2307      	movs	r3, #7
 80008d4:	001d      	movs	r5, r3
 80008d6:	2400      	movs	r4, #0
 80008d8:	4005      	ands	r5, r0
 80008da:	4203      	tst	r3, r0
 80008dc:	d04a      	beq.n	8000974 <__aeabi_dmul+0x520>
 80008de:	230f      	movs	r3, #15
 80008e0:	2400      	movs	r4, #0
 80008e2:	4003      	ands	r3, r0
 80008e4:	2b04      	cmp	r3, #4
 80008e6:	d042      	beq.n	800096e <__aeabi_dmul+0x51a>
 80008e8:	1d03      	adds	r3, r0, #4
 80008ea:	4283      	cmp	r3, r0
 80008ec:	4180      	sbcs	r0, r0
 80008ee:	4240      	negs	r0, r0
 80008f0:	1824      	adds	r4, r4, r0
 80008f2:	0018      	movs	r0, r3
 80008f4:	0223      	lsls	r3, r4, #8
 80008f6:	d53a      	bpl.n	800096e <__aeabi_dmul+0x51a>
 80008f8:	2301      	movs	r3, #1
 80008fa:	2400      	movs	r4, #0
 80008fc:	2500      	movs	r5, #0
 80008fe:	e61b      	b.n	8000538 <__aeabi_dmul+0xe4>
 8000900:	f000 f916 	bl	8000b30 <__clzsi2>
 8000904:	0001      	movs	r1, r0
 8000906:	0003      	movs	r3, r0
 8000908:	3115      	adds	r1, #21
 800090a:	3320      	adds	r3, #32
 800090c:	291c      	cmp	r1, #28
 800090e:	dd8f      	ble.n	8000830 <__aeabi_dmul+0x3dc>
 8000910:	3808      	subs	r0, #8
 8000912:	2200      	movs	r2, #0
 8000914:	4084      	lsls	r4, r0
 8000916:	4692      	mov	sl, r2
 8000918:	46a3      	mov	fp, r4
 800091a:	e796      	b.n	800084a <__aeabi_dmul+0x3f6>
 800091c:	f000 f908 	bl	8000b30 <__clzsi2>
 8000920:	0001      	movs	r1, r0
 8000922:	0003      	movs	r3, r0
 8000924:	3115      	adds	r1, #21
 8000926:	3320      	adds	r3, #32
 8000928:	291c      	cmp	r1, #28
 800092a:	dc00      	bgt.n	800092e <__aeabi_dmul+0x4da>
 800092c:	e758      	b.n	80007e0 <__aeabi_dmul+0x38c>
 800092e:	0002      	movs	r2, r0
 8000930:	464c      	mov	r4, r9
 8000932:	3a08      	subs	r2, #8
 8000934:	2000      	movs	r0, #0
 8000936:	4094      	lsls	r4, r2
 8000938:	e75d      	b.n	80007f6 <__aeabi_dmul+0x3a2>
 800093a:	9b01      	ldr	r3, [sp, #4]
 800093c:	9302      	str	r3, [sp, #8]
 800093e:	e711      	b.n	8000764 <__aeabi_dmul+0x310>
 8000940:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <__aeabi_dmul+0x57c>)
 8000942:	0026      	movs	r6, r4
 8000944:	469c      	mov	ip, r3
 8000946:	0003      	movs	r3, r0
 8000948:	9d02      	ldr	r5, [sp, #8]
 800094a:	40cb      	lsrs	r3, r1
 800094c:	4465      	add	r5, ip
 800094e:	40ae      	lsls	r6, r5
 8000950:	431e      	orrs	r6, r3
 8000952:	0003      	movs	r3, r0
 8000954:	40ab      	lsls	r3, r5
 8000956:	1e58      	subs	r0, r3, #1
 8000958:	4183      	sbcs	r3, r0
 800095a:	0030      	movs	r0, r6
 800095c:	4318      	orrs	r0, r3
 800095e:	40cc      	lsrs	r4, r1
 8000960:	0743      	lsls	r3, r0, #29
 8000962:	d0c7      	beq.n	80008f4 <__aeabi_dmul+0x4a0>
 8000964:	230f      	movs	r3, #15
 8000966:	4003      	ands	r3, r0
 8000968:	2b04      	cmp	r3, #4
 800096a:	d1bd      	bne.n	80008e8 <__aeabi_dmul+0x494>
 800096c:	e7c2      	b.n	80008f4 <__aeabi_dmul+0x4a0>
 800096e:	0765      	lsls	r5, r4, #29
 8000970:	0264      	lsls	r4, r4, #9
 8000972:	0b24      	lsrs	r4, r4, #12
 8000974:	08c0      	lsrs	r0, r0, #3
 8000976:	2300      	movs	r3, #0
 8000978:	4305      	orrs	r5, r0
 800097a:	e5dd      	b.n	8000538 <__aeabi_dmul+0xe4>
 800097c:	2500      	movs	r5, #0
 800097e:	2302      	movs	r3, #2
 8000980:	2e0f      	cmp	r6, #15
 8000982:	d10c      	bne.n	800099e <__aeabi_dmul+0x54a>
 8000984:	2480      	movs	r4, #128	; 0x80
 8000986:	465b      	mov	r3, fp
 8000988:	0324      	lsls	r4, r4, #12
 800098a:	4223      	tst	r3, r4
 800098c:	d00e      	beq.n	80009ac <__aeabi_dmul+0x558>
 800098e:	4221      	tst	r1, r4
 8000990:	d10c      	bne.n	80009ac <__aeabi_dmul+0x558>
 8000992:	430c      	orrs	r4, r1
 8000994:	0324      	lsls	r4, r4, #12
 8000996:	003a      	movs	r2, r7
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <__aeabi_dmul+0x580>)
 800099a:	0b24      	lsrs	r4, r4, #12
 800099c:	e5cc      	b.n	8000538 <__aeabi_dmul+0xe4>
 800099e:	2e0b      	cmp	r6, #11
 80009a0:	d000      	beq.n	80009a4 <__aeabi_dmul+0x550>
 80009a2:	e5a2      	b.n	80004ea <__aeabi_dmul+0x96>
 80009a4:	468b      	mov	fp, r1
 80009a6:	46aa      	mov	sl, r5
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	e5f7      	b.n	800059c <__aeabi_dmul+0x148>
 80009ac:	2480      	movs	r4, #128	; 0x80
 80009ae:	465b      	mov	r3, fp
 80009b0:	0324      	lsls	r4, r4, #12
 80009b2:	431c      	orrs	r4, r3
 80009b4:	0324      	lsls	r4, r4, #12
 80009b6:	4642      	mov	r2, r8
 80009b8:	4655      	mov	r5, sl
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <__aeabi_dmul+0x580>)
 80009bc:	0b24      	lsrs	r4, r4, #12
 80009be:	e5bb      	b.n	8000538 <__aeabi_dmul+0xe4>
 80009c0:	464d      	mov	r5, r9
 80009c2:	0021      	movs	r1, r4
 80009c4:	2303      	movs	r3, #3
 80009c6:	e7db      	b.n	8000980 <__aeabi_dmul+0x52c>
 80009c8:	fffffc0d 	.word	0xfffffc0d
 80009cc:	0000043e 	.word	0x0000043e
 80009d0:	0000041e 	.word	0x0000041e
 80009d4:	000007ff 	.word	0x000007ff

080009d8 <__aeabi_ui2d>:
 80009d8:	b510      	push	{r4, lr}
 80009da:	1e04      	subs	r4, r0, #0
 80009dc:	d010      	beq.n	8000a00 <__aeabi_ui2d+0x28>
 80009de:	f000 f8a7 	bl	8000b30 <__clzsi2>
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <__aeabi_ui2d+0x48>)
 80009e4:	1a1b      	subs	r3, r3, r0
 80009e6:	280a      	cmp	r0, #10
 80009e8:	dc11      	bgt.n	8000a0e <__aeabi_ui2d+0x36>
 80009ea:	220b      	movs	r2, #11
 80009ec:	0021      	movs	r1, r4
 80009ee:	1a12      	subs	r2, r2, r0
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	3015      	adds	r0, #21
 80009f4:	030a      	lsls	r2, r1, #12
 80009f6:	055b      	lsls	r3, r3, #21
 80009f8:	4084      	lsls	r4, r0
 80009fa:	0b12      	lsrs	r2, r2, #12
 80009fc:	0d5b      	lsrs	r3, r3, #21
 80009fe:	e001      	b.n	8000a04 <__aeabi_ui2d+0x2c>
 8000a00:	2300      	movs	r3, #0
 8000a02:	2200      	movs	r2, #0
 8000a04:	051b      	lsls	r3, r3, #20
 8000a06:	4313      	orrs	r3, r2
 8000a08:	0020      	movs	r0, r4
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	bd10      	pop	{r4, pc}
 8000a0e:	0022      	movs	r2, r4
 8000a10:	380b      	subs	r0, #11
 8000a12:	4082      	lsls	r2, r0
 8000a14:	055b      	lsls	r3, r3, #21
 8000a16:	0312      	lsls	r2, r2, #12
 8000a18:	2400      	movs	r4, #0
 8000a1a:	0b12      	lsrs	r2, r2, #12
 8000a1c:	0d5b      	lsrs	r3, r3, #21
 8000a1e:	e7f1      	b.n	8000a04 <__aeabi_ui2d+0x2c>
 8000a20:	0000041e 	.word	0x0000041e

08000a24 <__aeabi_d2f>:
 8000a24:	0002      	movs	r2, r0
 8000a26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a28:	004b      	lsls	r3, r1, #1
 8000a2a:	030d      	lsls	r5, r1, #12
 8000a2c:	0f40      	lsrs	r0, r0, #29
 8000a2e:	0d5b      	lsrs	r3, r3, #21
 8000a30:	0fcc      	lsrs	r4, r1, #31
 8000a32:	0a6d      	lsrs	r5, r5, #9
 8000a34:	493a      	ldr	r1, [pc, #232]	; (8000b20 <__aeabi_d2f+0xfc>)
 8000a36:	4305      	orrs	r5, r0
 8000a38:	1c58      	adds	r0, r3, #1
 8000a3a:	00d7      	lsls	r7, r2, #3
 8000a3c:	4208      	tst	r0, r1
 8000a3e:	d00a      	beq.n	8000a56 <__aeabi_d2f+0x32>
 8000a40:	4938      	ldr	r1, [pc, #224]	; (8000b24 <__aeabi_d2f+0x100>)
 8000a42:	1859      	adds	r1, r3, r1
 8000a44:	29fe      	cmp	r1, #254	; 0xfe
 8000a46:	dd16      	ble.n	8000a76 <__aeabi_d2f+0x52>
 8000a48:	20ff      	movs	r0, #255	; 0xff
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	05c0      	lsls	r0, r0, #23
 8000a4e:	4310      	orrs	r0, r2
 8000a50:	07e4      	lsls	r4, r4, #31
 8000a52:	4320      	orrs	r0, r4
 8000a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d106      	bne.n	8000a68 <__aeabi_d2f+0x44>
 8000a5a:	433d      	orrs	r5, r7
 8000a5c:	d026      	beq.n	8000aac <__aeabi_d2f+0x88>
 8000a5e:	2205      	movs	r2, #5
 8000a60:	0192      	lsls	r2, r2, #6
 8000a62:	0a52      	lsrs	r2, r2, #9
 8000a64:	b2d8      	uxtb	r0, r3
 8000a66:	e7f1      	b.n	8000a4c <__aeabi_d2f+0x28>
 8000a68:	432f      	orrs	r7, r5
 8000a6a:	d0ed      	beq.n	8000a48 <__aeabi_d2f+0x24>
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	03d2      	lsls	r2, r2, #15
 8000a70:	20ff      	movs	r0, #255	; 0xff
 8000a72:	432a      	orrs	r2, r5
 8000a74:	e7ea      	b.n	8000a4c <__aeabi_d2f+0x28>
 8000a76:	2900      	cmp	r1, #0
 8000a78:	dd1b      	ble.n	8000ab2 <__aeabi_d2f+0x8e>
 8000a7a:	0192      	lsls	r2, r2, #6
 8000a7c:	1e50      	subs	r0, r2, #1
 8000a7e:	4182      	sbcs	r2, r0
 8000a80:	00ed      	lsls	r5, r5, #3
 8000a82:	0f7f      	lsrs	r7, r7, #29
 8000a84:	432a      	orrs	r2, r5
 8000a86:	433a      	orrs	r2, r7
 8000a88:	0753      	lsls	r3, r2, #29
 8000a8a:	d047      	beq.n	8000b1c <__aeabi_d2f+0xf8>
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	4013      	ands	r3, r2
 8000a90:	2b04      	cmp	r3, #4
 8000a92:	d000      	beq.n	8000a96 <__aeabi_d2f+0x72>
 8000a94:	3204      	adds	r2, #4
 8000a96:	2380      	movs	r3, #128	; 0x80
 8000a98:	04db      	lsls	r3, r3, #19
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	d03e      	beq.n	8000b1c <__aeabi_d2f+0xf8>
 8000a9e:	1c48      	adds	r0, r1, #1
 8000aa0:	29fe      	cmp	r1, #254	; 0xfe
 8000aa2:	d0d1      	beq.n	8000a48 <__aeabi_d2f+0x24>
 8000aa4:	0192      	lsls	r2, r2, #6
 8000aa6:	0a52      	lsrs	r2, r2, #9
 8000aa8:	b2c0      	uxtb	r0, r0
 8000aaa:	e7cf      	b.n	8000a4c <__aeabi_d2f+0x28>
 8000aac:	2000      	movs	r0, #0
 8000aae:	2200      	movs	r2, #0
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x28>
 8000ab2:	000a      	movs	r2, r1
 8000ab4:	3217      	adds	r2, #23
 8000ab6:	db2f      	blt.n	8000b18 <__aeabi_d2f+0xf4>
 8000ab8:	2680      	movs	r6, #128	; 0x80
 8000aba:	0436      	lsls	r6, r6, #16
 8000abc:	432e      	orrs	r6, r5
 8000abe:	251e      	movs	r5, #30
 8000ac0:	1a6d      	subs	r5, r5, r1
 8000ac2:	2d1f      	cmp	r5, #31
 8000ac4:	dd11      	ble.n	8000aea <__aeabi_d2f+0xc6>
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	4252      	negs	r2, r2
 8000aca:	1a52      	subs	r2, r2, r1
 8000acc:	0031      	movs	r1, r6
 8000ace:	40d1      	lsrs	r1, r2
 8000ad0:	2d20      	cmp	r5, #32
 8000ad2:	d004      	beq.n	8000ade <__aeabi_d2f+0xba>
 8000ad4:	4a14      	ldr	r2, [pc, #80]	; (8000b28 <__aeabi_d2f+0x104>)
 8000ad6:	4694      	mov	ip, r2
 8000ad8:	4463      	add	r3, ip
 8000ada:	409e      	lsls	r6, r3
 8000adc:	4337      	orrs	r7, r6
 8000ade:	003a      	movs	r2, r7
 8000ae0:	1e53      	subs	r3, r2, #1
 8000ae2:	419a      	sbcs	r2, r3
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	e7ce      	b.n	8000a88 <__aeabi_d2f+0x64>
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <__aeabi_d2f+0x108>)
 8000aec:	0038      	movs	r0, r7
 8000aee:	4694      	mov	ip, r2
 8000af0:	4463      	add	r3, ip
 8000af2:	4098      	lsls	r0, r3
 8000af4:	003a      	movs	r2, r7
 8000af6:	1e41      	subs	r1, r0, #1
 8000af8:	4188      	sbcs	r0, r1
 8000afa:	409e      	lsls	r6, r3
 8000afc:	40ea      	lsrs	r2, r5
 8000afe:	4330      	orrs	r0, r6
 8000b00:	4302      	orrs	r2, r0
 8000b02:	2100      	movs	r1, #0
 8000b04:	0753      	lsls	r3, r2, #29
 8000b06:	d1c1      	bne.n	8000a8c <__aeabi_d2f+0x68>
 8000b08:	2180      	movs	r1, #128	; 0x80
 8000b0a:	0013      	movs	r3, r2
 8000b0c:	04c9      	lsls	r1, r1, #19
 8000b0e:	2001      	movs	r0, #1
 8000b10:	400b      	ands	r3, r1
 8000b12:	420a      	tst	r2, r1
 8000b14:	d1c6      	bne.n	8000aa4 <__aeabi_d2f+0x80>
 8000b16:	e7a3      	b.n	8000a60 <__aeabi_d2f+0x3c>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e7a0      	b.n	8000a5e <__aeabi_d2f+0x3a>
 8000b1c:	000b      	movs	r3, r1
 8000b1e:	e79f      	b.n	8000a60 <__aeabi_d2f+0x3c>
 8000b20:	000007fe 	.word	0x000007fe
 8000b24:	fffffc80 	.word	0xfffffc80
 8000b28:	fffffca2 	.word	0xfffffca2
 8000b2c:	fffffc82 	.word	0xfffffc82

08000b30 <__clzsi2>:
 8000b30:	211c      	movs	r1, #28
 8000b32:	2301      	movs	r3, #1
 8000b34:	041b      	lsls	r3, r3, #16
 8000b36:	4298      	cmp	r0, r3
 8000b38:	d301      	bcc.n	8000b3e <__clzsi2+0xe>
 8000b3a:	0c00      	lsrs	r0, r0, #16
 8000b3c:	3910      	subs	r1, #16
 8000b3e:	0a1b      	lsrs	r3, r3, #8
 8000b40:	4298      	cmp	r0, r3
 8000b42:	d301      	bcc.n	8000b48 <__clzsi2+0x18>
 8000b44:	0a00      	lsrs	r0, r0, #8
 8000b46:	3908      	subs	r1, #8
 8000b48:	091b      	lsrs	r3, r3, #4
 8000b4a:	4298      	cmp	r0, r3
 8000b4c:	d301      	bcc.n	8000b52 <__clzsi2+0x22>
 8000b4e:	0900      	lsrs	r0, r0, #4
 8000b50:	3904      	subs	r1, #4
 8000b52:	a202      	add	r2, pc, #8	; (adr r2, 8000b5c <__clzsi2+0x2c>)
 8000b54:	5c10      	ldrb	r0, [r2, r0]
 8000b56:	1840      	adds	r0, r0, r1
 8000b58:	4770      	bx	lr
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	02020304 	.word	0x02020304
 8000b60:	01010101 	.word	0x01010101
	...

08000b6c <__clzdi2>:
 8000b6c:	b510      	push	{r4, lr}
 8000b6e:	2900      	cmp	r1, #0
 8000b70:	d103      	bne.n	8000b7a <__clzdi2+0xe>
 8000b72:	f7ff ffdd 	bl	8000b30 <__clzsi2>
 8000b76:	3020      	adds	r0, #32
 8000b78:	e002      	b.n	8000b80 <__clzdi2+0x14>
 8000b7a:	0008      	movs	r0, r1
 8000b7c:	f7ff ffd8 	bl	8000b30 <__clzsi2>
 8000b80:	bd10      	pop	{r4, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)

08000b84 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b88:	f000 f9c4 	bl	8000f14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b8c:	f000 f838 	bl	8000c00 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b90:	f000 f8f8 	bl	8000d84 <MX_GPIO_Init>
	MX_ADC_Init();
 8000b94:	f000 f890 	bl	8000cb8 <MX_ADC_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start(&hadc);
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <main+0x68>)
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 fbc2 	bl	8001324 <HAL_ADC_Start>

		/* USER CODE BEGIN 3 */

		  //poll method

		 HAL_ADC_PollForConversion(&hadc, 1000);
 8000ba0:	23fa      	movs	r3, #250	; 0xfa
 8000ba2:	009a      	lsls	r2, r3, #2
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <main+0x68>)
 8000ba6:	0011      	movs	r1, r2
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 fc0f 	bl	80013cc <HAL_ADC_PollForConversion>
		 uADCRawvalue = HAL_ADC_GetValue(&hadc);
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <main+0x68>)
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 fca7 	bl	8001504 <HAL_ADC_GetValue>
 8000bb6:	0002      	movs	r2, r0
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <main+0x6c>)
 8000bba:	601a      	str	r2, [r3, #0]
		 fvoltage = uADCRawvalue * (3.3 / 4095.0);
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <main+0x6c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff ff09 	bl	80009d8 <__aeabi_ui2d>
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <main+0x70>)
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <main+0x74>)
 8000bca:	f7ff fc43 	bl	8000454 <__aeabi_dmul>
 8000bce:	0002      	movs	r2, r0
 8000bd0:	000b      	movs	r3, r1
 8000bd2:	0010      	movs	r0, r2
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	f7ff ff25 	bl	8000a24 <__aeabi_d2f>
 8000bda:	1c02      	adds	r2, r0, #0
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <main+0x78>)
 8000bde:	601a      	str	r2, [r3, #0]
		 HAL_Delay(2000);
 8000be0:	23fa      	movs	r3, #250	; 0xfa
 8000be2:	00db      	lsls	r3, r3, #3
 8000be4:	0018      	movs	r0, r3
 8000be6:	f000 fa05 	bl	8000ff4 <HAL_Delay>
		 HAL_ADC_PollForConversion(&hadc, 1000);
 8000bea:	e7d9      	b.n	8000ba0 <main+0x1c>
 8000bec:	20000028 	.word	0x20000028
 8000bf0:	20000084 	.word	0x20000084
 8000bf4:	e734d9b4 	.word	0xe734d9b4
 8000bf8:	3f4a680c 	.word	0x3f4a680c
 8000bfc:	20000088 	.word	0x20000088

08000c00 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b095      	sub	sp, #84	; 0x54
 8000c04:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c06:	2418      	movs	r4, #24
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	2338      	movs	r3, #56	; 0x38
 8000c0e:	001a      	movs	r2, r3
 8000c10:	2100      	movs	r1, #0
 8000c12:	f001 fe73 	bl	80028fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	0018      	movs	r0, r3
 8000c1a:	2314      	movs	r3, #20
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f001 fe6c 	bl	80028fc <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <SystemClock_Config+0xb0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a22      	ldr	r2, [pc, #136]	; (8000cb4 <SystemClock_Config+0xb4>)
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <SystemClock_Config+0xb0>)
 8000c2e:	2180      	movs	r1, #128	; 0x80
 8000c30:	0109      	lsls	r1, r1, #4
 8000c32:	430a      	orrs	r2, r1
 8000c34:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c36:	0021      	movs	r1, r4
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2201      	movs	r2, #1
 8000c42:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2210      	movs	r2, #16
 8000c48:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2200      	movs	r2, #0
 8000c54:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	0412      	lsls	r2, r2, #16
 8000c62:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	0018      	movs	r0, r3
 8000c68:	f001 f896 	bl	8001d98 <HAL_RCC_OscConfig>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0x74>
		Error_Handler();
 8000c70:	f000 f89e 	bl	8000db0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	220f      	movs	r2, #15
 8000c78:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2280      	movs	r2, #128	; 0x80
 8000c90:	00d2      	lsls	r2, r2, #3
 8000c92:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2100      	movs	r1, #0
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f001 fc41 	bl	8002520 <HAL_RCC_ClockConfig>
 8000c9e:	1e03      	subs	r3, r0, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0xa6>
		Error_Handler();
 8000ca2:	f000 f885 	bl	8000db0 <Error_Handler>
	}
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b015      	add	sp, #84	; 0x54
 8000cac:	bd90      	pop	{r4, r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	40007000 	.word	0x40007000
 8000cb4:	ffffe7ff 	.word	0xffffe7ff

08000cb8 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000cbe:	003b      	movs	r3, r7
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	f001 fe18 	bl	80028fc <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000cce:	4a2b      	ldr	r2, [pc, #172]	; (8000d7c <MX_ADC_Init+0xc4>)
 8000cd0:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000cda:	2280      	movs	r2, #128	; 0x80
 8000cdc:	0612      	lsls	r2, r2, #24
 8000cde:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ce0:	4b25      	ldr	r3, [pc, #148]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ce6:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cf2:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = ENABLE;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000cfa:	2220      	movs	r2, #32
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000d02:	2221      	movs	r2, #33	; 0x21
 8000d04:	2100      	movs	r1, #0
 8000d06:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000d10:	22c2      	movs	r2, #194	; 0xc2
 8000d12:	32ff      	adds	r2, #255	; 0xff
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000d18:	222c      	movs	r2, #44	; 0x2c
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000d20:	2204      	movs	r2, #4
 8000d22:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 f97c 	bl	800103c <HAL_ADC_Init>
 8000d44:	1e03      	subs	r3, r0, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ADC_Init+0x94>
		Error_Handler();
 8000d48:	f000 f832 	bl	8000db0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000d4c:	003b      	movs	r3, r7
 8000d4e:	4a0c      	ldr	r2, [pc, #48]	; (8000d80 <MX_ADC_Init+0xc8>)
 8000d50:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000d52:	003b      	movs	r3, r7
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	0152      	lsls	r2, r2, #5
 8000d58:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000d5a:	003a      	movs	r2, r7
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_ADC_Init+0xc0>)
 8000d5e:	0011      	movs	r1, r2
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 fc9d 	bl	80016a0 <HAL_ADC_ConfigChannel>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <MX_ADC_Init+0xb6>
		Error_Handler();
 8000d6a:	f000 f821 	bl	8000db0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	20000028 	.word	0x20000028
 8000d7c:	40012400 	.word	0x40012400
 8000d80:	04000002 	.word	0x04000002

08000d84 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <MX_GPIO_Init+0x28>)
 8000d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <MX_GPIO_Init+0x28>)
 8000d90:	2101      	movs	r1, #1
 8000d92:	430a      	orrs	r2, r1
 8000d94:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <MX_GPIO_Init+0x28>)
 8000d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b002      	add	sp, #8
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	40021000 	.word	0x40021000

08000db0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000db8:	e7fe      	b.n	8000db8 <Error_Handler+0x8>
	...

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <HAL_MspInit+0x24>)
 8000dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_MspInit+0x24>)
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <HAL_MspInit+0x24>)
 8000dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <HAL_MspInit+0x24>)
 8000dd2:	2180      	movs	r1, #128	; 0x80
 8000dd4:	0549      	lsls	r1, r1, #21
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40021000 	.word	0x40021000

08000de4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	240c      	movs	r4, #12
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	0018      	movs	r0, r3
 8000df2:	2314      	movs	r3, #20
 8000df4:	001a      	movs	r2, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	f001 fd80 	bl	80028fc <memset>
  if(hadc->Instance==ADC1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a18      	ldr	r2, [pc, #96]	; (8000e64 <HAL_ADC_MspInit+0x80>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d12a      	bne.n	8000e5c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_ADC_MspInit+0x84>)
 8000e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_ADC_MspInit+0x84>)
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	0089      	lsls	r1, r1, #2
 8000e10:	430a      	orrs	r2, r1
 8000e12:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_ADC_MspInit+0x84>)
 8000e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HAL_ADC_MspInit+0x84>)
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_ADC_MspInit+0x84>)
 8000e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e24:	2201      	movs	r2, #1
 8000e26:	4013      	ands	r3, r2
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = BSP_ADC_IN1_Pin;
 8000e2c:	193b      	adds	r3, r7, r4
 8000e2e:	2202      	movs	r2, #2
 8000e30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	2203      	movs	r2, #3
 8000e36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BSP_ADC_IN1_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	193a      	adds	r2, r7, r4
 8000e40:	23a0      	movs	r3, #160	; 0xa0
 8000e42:	05db      	lsls	r3, r3, #23
 8000e44:	0011      	movs	r1, r2
 8000e46:	0018      	movs	r0, r3
 8000e48:	f000 fe30 	bl	8001aac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	200c      	movs	r0, #12
 8000e52:	f000 fdf9 	bl	8001a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000e56:	200c      	movs	r0, #12
 8000e58:	f000 fe0b 	bl	8001a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b009      	add	sp, #36	; 0x24
 8000e62:	bd90      	pop	{r4, r7, pc}
 8000e64:	40012400 	.word	0x40012400
 8000e68:	40021000 	.word	0x40021000

08000e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e70:	e7fe      	b.n	8000e70 <NMI_Handler+0x4>

08000e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <HardFault_Handler+0x4>

08000e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 f894 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <ADC1_COMP_IRQHandler+0x14>)
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f000 fb3a 	bl	800151c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	20000028 	.word	0x20000028

08000eb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000ec0:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ec2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ec4:	f7ff fff6 	bl	8000eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <LoopForever+0x6>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	; (8000f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <LoopForever+0xe>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	; (8000f0c <LoopForever+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eee:	f001 fd0d 	bl	800290c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef2:	f7ff fe47 	bl	8000b84 <main>

08000ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef6:	e7fe      	b.n	8000ef6 <LoopForever>
  ldr   r0, =_estack
 8000ef8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f04:	08002998 	.word	0x08002998
  ldr r2, =_sbss
 8000f08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f0c:	20000090 	.word	0x20000090

08000f10 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <DMA1_Channel1_IRQHandler>
	...

08000f14 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HAL_Init+0x3c>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_Init+0x3c>)
 8000f26:	2140      	movs	r1, #64	; 0x40
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f000 f811 	bl	8000f54 <HAL_InitTick>
 8000f32:	1e03      	subs	r3, r0, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
 8000f3c:	e001      	b.n	8000f42 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f3e:	f7ff ff3d 	bl	8000dbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
}
 8000f46:	0018      	movs	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	40022000 	.word	0x40022000

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_InitTick+0x5c>)
 8000f5e:	681c      	ldr	r4, [r3, #0]
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_InitTick+0x60>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	0019      	movs	r1, r3
 8000f66:	23fa      	movs	r3, #250	; 0xfa
 8000f68:	0098      	lsls	r0, r3, #2
 8000f6a:	f7ff f8cd 	bl	8000108 <__udivsi3>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	0019      	movs	r1, r3
 8000f72:	0020      	movs	r0, r4
 8000f74:	f7ff f8c8 	bl	8000108 <__udivsi3>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f000 fd89 	bl	8001a92 <HAL_SYSTICK_Config>
 8000f80:	1e03      	subs	r3, r0, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e00f      	b.n	8000fa8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d80b      	bhi.n	8000fa6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	2301      	movs	r3, #1
 8000f92:	425b      	negs	r3, r3
 8000f94:	2200      	movs	r2, #0
 8000f96:	0018      	movs	r0, r3
 8000f98:	f000 fd56 	bl	8001a48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_InitTick+0x64>)
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	0018      	movs	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b003      	add	sp, #12
 8000fae:	bd90      	pop	{r4, r7, pc}
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000004 	.word	0x20000004

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_IncTick+0x1c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	18d2      	adds	r2, r2, r3
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_IncTick+0x20>)
 8000fce:	601a      	str	r2, [r3, #0]
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	2000008c 	.word	0x2000008c

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <HAL_GetTick+0x10>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	0018      	movs	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	2000008c 	.word	0x2000008c

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff fff0 	bl	8000fe0 <HAL_GetTick>
 8001000:	0003      	movs	r3, r0
 8001002:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3301      	adds	r3, #1
 800100c:	d005      	beq.n	800101a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_Delay+0x44>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	001a      	movs	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	189b      	adds	r3, r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	f7ff ffe0 	bl	8000fe0 <HAL_GetTick>
 8001020:	0002      	movs	r2, r0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8f7      	bhi.n	800101c <HAL_Delay+0x28>
  {
  }
}
 800102c:	46c0      	nop			; (mov r8, r8)
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b004      	add	sp, #16
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	20000008 	.word	0x20000008

0800103c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e159      	b.n	8001302 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10a      	bne.n	800106c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2250      	movs	r2, #80	; 0x50
 8001060:	2100      	movs	r1, #0
 8001062:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	0018      	movs	r0, r3
 8001068:	f7ff febc 	bl	8000de4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001070:	2210      	movs	r2, #16
 8001072:	4013      	ands	r3, r2
 8001074:	2b10      	cmp	r3, #16
 8001076:	d005      	beq.n	8001084 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	2204      	movs	r2, #4
 8001080:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001082:	d00b      	beq.n	800109c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001088:	2210      	movs	r2, #16
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2250      	movs	r2, #80	; 0x50
 8001094:	2100      	movs	r1, #0
 8001096:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e132      	b.n	8001302 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a0:	4a9a      	ldr	r2, [pc, #616]	; (800130c <HAL_ADC_Init+0x2d0>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	2202      	movs	r2, #2
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	2203      	movs	r2, #3
 80010b4:	4013      	ands	r3, r2
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d108      	bne.n	80010cc <HAL_ADC_Init+0x90>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2201      	movs	r2, #1
 80010c2:	4013      	ands	r3, r2
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d101      	bne.n	80010cc <HAL_ADC_Init+0x90>
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <HAL_ADC_Init+0x92>
 80010cc:	2300      	movs	r3, #0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d149      	bne.n	8001166 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	23c0      	movs	r3, #192	; 0xc0
 80010d8:	061b      	lsls	r3, r3, #24
 80010da:	429a      	cmp	r2, r3
 80010dc:	d00b      	beq.n	80010f6 <HAL_ADC_Init+0xba>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	05db      	lsls	r3, r3, #23
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d005      	beq.n	80010f6 <HAL_ADC_Init+0xba>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	061b      	lsls	r3, r3, #24
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d111      	bne.n	800111a <HAL_ADC_Init+0xde>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	0892      	lsrs	r2, r2, #2
 8001104:	611a      	str	r2, [r3, #16]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6919      	ldr	r1, [r3, #16]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	611a      	str	r2, [r3, #16]
 8001118:	e014      	b.n	8001144 <HAL_ADC_Init+0x108>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0092      	lsls	r2, r2, #2
 8001126:	0892      	lsrs	r2, r2, #2
 8001128:	611a      	str	r2, [r3, #16]
 800112a:	4b79      	ldr	r3, [pc, #484]	; (8001310 <HAL_ADC_Init+0x2d4>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4b78      	ldr	r3, [pc, #480]	; (8001310 <HAL_ADC_Init+0x2d4>)
 8001130:	4978      	ldr	r1, [pc, #480]	; (8001314 <HAL_ADC_Init+0x2d8>)
 8001132:	400a      	ands	r2, r1
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	4b76      	ldr	r3, [pc, #472]	; (8001310 <HAL_ADC_Init+0x2d4>)
 8001138:	6819      	ldr	r1, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	4b74      	ldr	r3, [pc, #464]	; (8001310 <HAL_ADC_Init+0x2d4>)
 8001140:	430a      	orrs	r2, r1
 8001142:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2118      	movs	r1, #24
 8001150:	438a      	bics	r2, r1
 8001152:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68d9      	ldr	r1, [r3, #12]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001166:	4b6a      	ldr	r3, [pc, #424]	; (8001310 <HAL_ADC_Init+0x2d4>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4b69      	ldr	r3, [pc, #420]	; (8001310 <HAL_ADC_Init+0x2d4>)
 800116c:	496a      	ldr	r1, [pc, #424]	; (8001318 <HAL_ADC_Init+0x2dc>)
 800116e:	400a      	ands	r2, r1
 8001170:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001172:	4b67      	ldr	r3, [pc, #412]	; (8001310 <HAL_ADC_Init+0x2d4>)
 8001174:	6819      	ldr	r1, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117a:	065a      	lsls	r2, r3, #25
 800117c:	4b64      	ldr	r3, [pc, #400]	; (8001310 <HAL_ADC_Init+0x2d4>)
 800117e:	430a      	orrs	r2, r1
 8001180:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	055b      	lsls	r3, r3, #21
 800118c:	4013      	ands	r3, r2
 800118e:	d108      	bne.n	80011a2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	0549      	lsls	r1, r1, #21
 800119e:	430a      	orrs	r2, r1
 80011a0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	495b      	ldr	r1, [pc, #364]	; (800131c <HAL_ADC_Init+0x2e0>)
 80011ae:	400a      	ands	r2, r1
 80011b0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68d9      	ldr	r1, [r3, #12]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d101      	bne.n	80011c8 <HAL_ADC_Init+0x18c>
 80011c4:	2304      	movs	r3, #4
 80011c6:	e000      	b.n	80011ca <HAL_ADC_Init+0x18e>
 80011c8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80011ca:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2020      	movs	r0, #32
 80011d0:	5c1b      	ldrb	r3, [r3, r0]
 80011d2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80011d4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	202c      	movs	r0, #44	; 0x2c
 80011da:	5c1b      	ldrb	r3, [r3, r0]
 80011dc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80011de:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80011e4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80011ec:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80011f4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001202:	23c2      	movs	r3, #194	; 0xc2
 8001204:	33ff      	adds	r3, #255	; 0xff
 8001206:	429a      	cmp	r2, r3
 8001208:	d00b      	beq.n	8001222 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68d9      	ldr	r1, [r3, #12]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001218:	431a      	orrs	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2221      	movs	r2, #33	; 0x21
 8001226:	5c9b      	ldrb	r3, [r3, r2]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d11a      	bne.n	8001262 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2220      	movs	r2, #32
 8001230:	5c9b      	ldrb	r3, [r3, r2]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d109      	bne.n	800124a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68da      	ldr	r2, [r3, #12]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2180      	movs	r1, #128	; 0x80
 8001242:	0249      	lsls	r1, r1, #9
 8001244:	430a      	orrs	r2, r1
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	e00b      	b.n	8001262 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800124e:	2220      	movs	r2, #32
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125a:	2201      	movs	r2, #1
 800125c:	431a      	orrs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001266:	2b01      	cmp	r3, #1
 8001268:	d11f      	bne.n	80012aa <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	492a      	ldr	r1, [pc, #168]	; (8001320 <HAL_ADC_Init+0x2e4>)
 8001276:	400a      	ands	r2, r1
 8001278:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6919      	ldr	r1, [r3, #16]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001288:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800128e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	691a      	ldr	r2, [r3, #16]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2101      	movs	r1, #1
 80012a4:	430a      	orrs	r2, r1
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	e00e      	b.n	80012c8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	2201      	movs	r2, #1
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d107      	bne.n	80012c8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2101      	movs	r1, #1
 80012c4:	438a      	bics	r2, r1
 80012c6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	695a      	ldr	r2, [r3, #20]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2107      	movs	r1, #7
 80012d4:	438a      	bics	r2, r1
 80012d6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6959      	ldr	r1, [r3, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f4:	2203      	movs	r2, #3
 80012f6:	4393      	bics	r3, r2
 80012f8:	2201      	movs	r2, #1
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	0018      	movs	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	b002      	add	sp, #8
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	fffffefd 	.word	0xfffffefd
 8001310:	40012708 	.word	0x40012708
 8001314:	ffc3ffff 	.word	0xffc3ffff
 8001318:	fdffffff 	.word	0xfdffffff
 800131c:	fffe0219 	.word	0xfffe0219
 8001320:	fffffc03 	.word	0xfffffc03

08001324 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800132c:	230f      	movs	r3, #15
 800132e:	18fb      	adds	r3, r7, r3
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2204      	movs	r2, #4
 800133c:	4013      	ands	r3, r2
 800133e:	d138      	bne.n	80013b2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2250      	movs	r2, #80	; 0x50
 8001344:	5c9b      	ldrb	r3, [r3, r2]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_ADC_Start+0x2a>
 800134a:	2302      	movs	r3, #2
 800134c:	e038      	b.n	80013c0 <HAL_ADC_Start+0x9c>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2250      	movs	r2, #80	; 0x50
 8001352:	2101      	movs	r1, #1
 8001354:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d007      	beq.n	800136e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800135e:	230f      	movs	r3, #15
 8001360:	18fc      	adds	r4, r7, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	0018      	movs	r0, r3
 8001366:	f000 fa3b 	bl	80017e0 <ADC_Enable>
 800136a:	0003      	movs	r3, r0
 800136c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800136e:	230f      	movs	r3, #15
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d120      	bne.n	80013ba <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137c:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <HAL_ADC_Start+0xa4>)
 800137e:	4013      	ands	r3, r2
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	0052      	lsls	r2, r2, #1
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2250      	movs	r2, #80	; 0x50
 8001394:	2100      	movs	r1, #0
 8001396:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	221c      	movs	r2, #28
 800139e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2104      	movs	r1, #4
 80013ac:	430a      	orrs	r2, r1
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	e003      	b.n	80013ba <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013b2:	230f      	movs	r3, #15
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	2202      	movs	r2, #2
 80013b8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80013ba:	230f      	movs	r3, #15
 80013bc:	18fb      	adds	r3, r7, r3
 80013be:	781b      	ldrb	r3, [r3, #0]
}
 80013c0:	0018      	movs	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b005      	add	sp, #20
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	fffff0fe 	.word	0xfffff0fe

080013cc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d102      	bne.n	80013ec <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80013e6:	2308      	movs	r3, #8
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	e014      	b.n	8001416 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2201      	movs	r2, #1
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d10b      	bne.n	8001412 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fe:	2220      	movs	r2, #32
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2250      	movs	r2, #80	; 0x50
 800140a:	2100      	movs	r1, #0
 800140c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e072      	b.n	80014f8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001412:	230c      	movs	r3, #12
 8001414:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001416:	f7ff fde3 	bl	8000fe0 <HAL_GetTick>
 800141a:	0003      	movs	r3, r0
 800141c:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800141e:	e01f      	b.n	8001460 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	d01c      	beq.n	8001460 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d007      	beq.n	800143c <HAL_ADC_PollForConversion+0x70>
 800142c:	f7ff fdd8 	bl	8000fe0 <HAL_GetTick>
 8001430:	0002      	movs	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d211      	bcs.n	8001460 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	4013      	ands	r3, r2
 8001446:	d10b      	bne.n	8001460 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144c:	2204      	movs	r2, #4
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2250      	movs	r2, #80	; 0x50
 8001458:	2100      	movs	r1, #0
 800145a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e04b      	b.n	80014f8 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	4013      	ands	r3, r2
 800146a:	d0d9      	beq.n	8001420 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	0092      	lsls	r2, r2, #2
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	23c0      	movs	r3, #192	; 0xc0
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	4013      	ands	r3, r2
 8001486:	d12e      	bne.n	80014e6 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2220      	movs	r2, #32
 800148c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800148e:	2b00      	cmp	r3, #0
 8001490:	d129      	bne.n	80014e6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2208      	movs	r2, #8
 800149a:	4013      	ands	r3, r2
 800149c:	2b08      	cmp	r3, #8
 800149e:	d122      	bne.n	80014e6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2204      	movs	r2, #4
 80014a8:	4013      	ands	r3, r2
 80014aa:	d110      	bne.n	80014ce <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	210c      	movs	r1, #12
 80014b8:	438a      	bics	r2, r1
 80014ba:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c0:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <HAL_ADC_PollForConversion+0x134>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	2201      	movs	r2, #1
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	655a      	str	r2, [r3, #84]	; 0x54
 80014cc:	e00b      	b.n	80014e6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d2:	2220      	movs	r2, #32
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014de:	2201      	movs	r2, #1
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d103      	bne.n	80014f6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	220c      	movs	r2, #12
 80014f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b004      	add	sp, #16
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	fffffefe 	.word	0xfffffefe

08001504 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001512:	0018      	movs	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	b002      	add	sp, #8
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2204      	movs	r2, #4
 8001538:	4013      	ands	r3, r2
 800153a:	d003      	beq.n	8001544 <HAL_ADC_IRQHandler+0x28>
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2204      	movs	r2, #4
 8001540:	4013      	ands	r3, r2
 8001542:	d107      	bne.n	8001554 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2208      	movs	r2, #8
 8001548:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800154a:	d04e      	beq.n	80015ea <HAL_ADC_IRQHandler+0xce>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2208      	movs	r2, #8
 8001550:	4013      	ands	r3, r2
 8001552:	d04a      	beq.n	80015ea <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001558:	2210      	movs	r2, #16
 800155a:	4013      	ands	r3, r2
 800155c:	d106      	bne.n	800156c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	0092      	lsls	r2, r2, #2
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	23c0      	movs	r3, #192	; 0xc0
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	4013      	ands	r3, r2
 8001578:	d12b      	bne.n	80015d2 <HAL_ADC_IRQHandler+0xb6>
        (hadc->Init.ContinuousConvMode == DISABLE))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2220      	movs	r2, #32
 800157e:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001580:	2b00      	cmp	r3, #0
 8001582:	d126      	bne.n	80015d2 <HAL_ADC_IRQHandler+0xb6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if ((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2208      	movs	r2, #8
 8001588:	4013      	ands	r3, r2
 800158a:	d022      	beq.n	80015d2 <HAL_ADC_IRQHandler+0xb6>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2204      	movs	r2, #4
 8001594:	4013      	ands	r3, r2
 8001596:	d110      	bne.n	80015ba <HAL_ADC_IRQHandler+0x9e>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	210c      	movs	r1, #12
 80015a4:	438a      	bics	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ac:	4a2f      	ldr	r2, [pc, #188]	; (800166c <HAL_ADC_IRQHandler+0x150>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	2201      	movs	r2, #1
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	655a      	str	r2, [r3, #84]	; 0x54
 80015b8:	e00b      	b.n	80015d2 <HAL_ADC_IRQHandler+0xb6>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015be:	2220      	movs	r2, #32
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	2201      	movs	r2, #1
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	0018      	movs	r0, r3
 80015d6:	f000 f84b 	bl	8001670 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d003      	beq.n	80015ea <HAL_ADC_IRQHandler+0xce>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	220c      	movs	r2, #12
 80015e8:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	4013      	ands	r3, r2
 80015f0:	d012      	beq.n	8001618 <HAL_ADC_IRQHandler+0xfc>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2280      	movs	r2, #128	; 0x80
 80015f6:	4013      	ands	r3, r2
 80015f8:	d00e      	beq.n	8001618 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fe:	2280      	movs	r2, #128	; 0x80
 8001600:	0252      	lsls	r2, r2, #9
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	655a      	str	r2, [r3, #84]	; 0x54

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	0018      	movs	r0, r3
 800160c:	f000 f838 	bl	8001680 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2280      	movs	r2, #128	; 0x80
 8001616:	601a      	str	r2, [r3, #0]

  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2210      	movs	r2, #16
 800161c:	4013      	ands	r3, r2
 800161e:	d020      	beq.n	8001662 <HAL_ADC_IRQHandler+0x146>
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2210      	movs	r2, #16
 8001624:	4013      	ands	r3, r2
 8001626:	d01c      	beq.n	8001662 <HAL_ADC_IRQHandler+0x146>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <HAL_ADC_IRQHandler+0x122>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2201      	movs	r2, #1
 8001638:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800163a:	2b01      	cmp	r3, #1
 800163c:	d10d      	bne.n	800165a <HAL_ADC_IRQHandler+0x13e>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001642:	2202      	movs	r2, #2
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2210      	movs	r2, #16
 8001650:	601a      	str	r2, [r3, #0]

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	0018      	movs	r0, r3
 8001656:	f000 f81b 	bl	8001690 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2210      	movs	r2, #16
 8001660:	601a      	str	r2, [r3, #0]
  }

}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b004      	add	sp, #16
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	fffffefe 	.word	0xfffffefe

08001670 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001678:	46c0      	nop			; (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b002      	add	sp, #8
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	b002      	add	sp, #8
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b002      	add	sp, #8
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2250      	movs	r2, #80	; 0x50
 80016ae:	5c9b      	ldrb	r3, [r3, r2]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x18>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e085      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x124>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2250      	movs	r2, #80	; 0x50
 80016bc:	2101      	movs	r1, #1
 80016be:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2204      	movs	r2, #4
 80016c8:	4013      	ands	r3, r2
 80016ca:	d00b      	beq.n	80016e4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d0:	2220      	movs	r2, #32
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2250      	movs	r2, #80	; 0x50
 80016dc:	2100      	movs	r1, #0
 80016de:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e06f      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4a38      	ldr	r2, [pc, #224]	; (80017cc <HAL_ADC_ConfigChannel+0x12c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d035      	beq.n	800175a <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	035b      	lsls	r3, r3, #13
 80016fa:	0b5a      	lsrs	r2, r3, #13
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	02db      	lsls	r3, r3, #11
 800170c:	4013      	ands	r3, r2
 800170e:	d009      	beq.n	8001724 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001710:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <HAL_ADC_ConfigChannel+0x130>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <HAL_ADC_ConfigChannel+0x130>)
 8001716:	2180      	movs	r1, #128	; 0x80
 8001718:	0409      	lsls	r1, r1, #16
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800171e:	200a      	movs	r0, #10
 8001720:	f000 f8c6 	bl	80018b0 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	029b      	lsls	r3, r3, #10
 800172c:	4013      	ands	r3, r2
 800172e:	d006      	beq.n	800173e <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <HAL_ADC_ConfigChannel+0x130>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <HAL_ADC_ConfigChannel+0x130>)
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	03c9      	lsls	r1, r1, #15
 800173a:	430a      	orrs	r2, r1
 800173c:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	025b      	lsls	r3, r3, #9
 8001746:	4013      	ands	r3, r2
 8001748:	d037      	beq.n	80017ba <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 800174a:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <HAL_ADC_ConfigChannel+0x130>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <HAL_ADC_ConfigChannel+0x130>)
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	0449      	lsls	r1, r1, #17
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e02f      	b.n	80017ba <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	035b      	lsls	r3, r3, #13
 8001766:	0b5b      	lsrs	r3, r3, #13
 8001768:	43d9      	mvns	r1, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	400a      	ands	r2, r1
 8001770:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	02db      	lsls	r3, r3, #11
 800177a:	4013      	ands	r3, r2
 800177c:	d005      	beq.n	800178a <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <HAL_ADC_ConfigChannel+0x130>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_ADC_ConfigChannel+0x130>)
 8001784:	4913      	ldr	r1, [pc, #76]	; (80017d4 <HAL_ADC_ConfigChannel+0x134>)
 8001786:	400a      	ands	r2, r1
 8001788:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	029b      	lsls	r3, r3, #10
 8001792:	4013      	ands	r3, r2
 8001794:	d005      	beq.n	80017a2 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_ADC_ConfigChannel+0x130>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_ADC_ConfigChannel+0x130>)
 800179c:	490e      	ldr	r1, [pc, #56]	; (80017d8 <HAL_ADC_ConfigChannel+0x138>)
 800179e:	400a      	ands	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	025b      	lsls	r3, r3, #9
 80017aa:	4013      	ands	r3, r2
 80017ac:	d005      	beq.n	80017ba <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_ADC_ConfigChannel+0x130>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <HAL_ADC_ConfigChannel+0x130>)
 80017b4:	4909      	ldr	r1, [pc, #36]	; (80017dc <HAL_ADC_ConfigChannel+0x13c>)
 80017b6:	400a      	ands	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2250      	movs	r2, #80	; 0x50
 80017be:	2100      	movs	r1, #0
 80017c0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b002      	add	sp, #8
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	00001001 	.word	0x00001001
 80017d0:	40012708 	.word	0x40012708
 80017d4:	ff7fffff 	.word	0xff7fffff
 80017d8:	ffbfffff 	.word	0xffbfffff
 80017dc:	feffffff 	.word	0xfeffffff

080017e0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2203      	movs	r2, #3
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d108      	bne.n	800180c <ADC_Enable+0x2c>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2201      	movs	r2, #1
 8001802:	4013      	ands	r3, r2
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <ADC_Enable+0x2c>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <ADC_Enable+0x2e>
 800180c:	2300      	movs	r3, #0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d146      	bne.n	80018a0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4a24      	ldr	r2, [pc, #144]	; (80018ac <ADC_Enable+0xcc>)
 800181a:	4013      	ands	r3, r2
 800181c:	d00d      	beq.n	800183a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001822:	2210      	movs	r2, #16
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182e:	2201      	movs	r2, #1
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e033      	b.n	80018a2 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2101      	movs	r1, #1
 8001846:	430a      	orrs	r2, r1
 8001848:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800184a:	2001      	movs	r0, #1
 800184c:	f000 f830 	bl	80018b0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001850:	f7ff fbc6 	bl	8000fe0 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001858:	e01b      	b.n	8001892 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800185a:	f7ff fbc1 	bl	8000fe0 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b0a      	cmp	r3, #10
 8001866:	d914      	bls.n	8001892 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2201      	movs	r2, #1
 8001870:	4013      	ands	r3, r2
 8001872:	2b01      	cmp	r3, #1
 8001874:	d00d      	beq.n	8001892 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187a:	2210      	movs	r2, #16
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001886:	2201      	movs	r2, #1
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e007      	b.n	80018a2 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2201      	movs	r2, #1
 800189a:	4013      	ands	r3, r2
 800189c:	2b01      	cmp	r3, #1
 800189e:	d1dc      	bne.n	800185a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	0018      	movs	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b004      	add	sp, #16
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	80000017 	.word	0x80000017

080018b0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <ADC_DelayMicroSecond+0x38>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	490b      	ldr	r1, [pc, #44]	; (80018ec <ADC_DelayMicroSecond+0x3c>)
 80018be:	0018      	movs	r0, r3
 80018c0:	f7fe fc22 	bl	8000108 <__udivsi3>
 80018c4:	0003      	movs	r3, r0
 80018c6:	001a      	movs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4353      	muls	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80018ce:	e002      	b.n	80018d6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f9      	bne.n	80018d0 <ADC_DelayMicroSecond+0x20>
  }
}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b004      	add	sp, #16
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	20000000 	.word	0x20000000
 80018ec:	000f4240 	.word	0x000f4240

080018f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	0002      	movs	r2, r0
 80018f8:	1dfb      	adds	r3, r7, #7
 80018fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	1dfb      	adds	r3, r7, #7
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b7f      	cmp	r3, #127	; 0x7f
 8001902:	d809      	bhi.n	8001918 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001904:	1dfb      	adds	r3, r7, #7
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	001a      	movs	r2, r3
 800190a:	231f      	movs	r3, #31
 800190c:	401a      	ands	r2, r3
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <__NVIC_EnableIRQ+0x30>)
 8001910:	2101      	movs	r1, #1
 8001912:	4091      	lsls	r1, r2
 8001914:	000a      	movs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
  }
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	0002      	movs	r2, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b7f      	cmp	r3, #127	; 0x7f
 8001938:	d828      	bhi.n	800198c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800193a:	4a2f      	ldr	r2, [pc, #188]	; (80019f8 <__NVIC_SetPriority+0xd4>)
 800193c:	1dfb      	adds	r3, r7, #7
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b25b      	sxtb	r3, r3
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	33c0      	adds	r3, #192	; 0xc0
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	589b      	ldr	r3, [r3, r2]
 800194a:	1dfa      	adds	r2, r7, #7
 800194c:	7812      	ldrb	r2, [r2, #0]
 800194e:	0011      	movs	r1, r2
 8001950:	2203      	movs	r2, #3
 8001952:	400a      	ands	r2, r1
 8001954:	00d2      	lsls	r2, r2, #3
 8001956:	21ff      	movs	r1, #255	; 0xff
 8001958:	4091      	lsls	r1, r2
 800195a:	000a      	movs	r2, r1
 800195c:	43d2      	mvns	r2, r2
 800195e:	401a      	ands	r2, r3
 8001960:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	019b      	lsls	r3, r3, #6
 8001966:	22ff      	movs	r2, #255	; 0xff
 8001968:	401a      	ands	r2, r3
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	0018      	movs	r0, r3
 8001970:	2303      	movs	r3, #3
 8001972:	4003      	ands	r3, r0
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001978:	481f      	ldr	r0, [pc, #124]	; (80019f8 <__NVIC_SetPriority+0xd4>)
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b25b      	sxtb	r3, r3
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	430a      	orrs	r2, r1
 8001984:	33c0      	adds	r3, #192	; 0xc0
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800198a:	e031      	b.n	80019f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800198c:	4a1b      	ldr	r2, [pc, #108]	; (80019fc <__NVIC_SetPriority+0xd8>)
 800198e:	1dfb      	adds	r3, r7, #7
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	0019      	movs	r1, r3
 8001994:	230f      	movs	r3, #15
 8001996:	400b      	ands	r3, r1
 8001998:	3b08      	subs	r3, #8
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3306      	adds	r3, #6
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	18d3      	adds	r3, r2, r3
 80019a2:	3304      	adds	r3, #4
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	1dfa      	adds	r2, r7, #7
 80019a8:	7812      	ldrb	r2, [r2, #0]
 80019aa:	0011      	movs	r1, r2
 80019ac:	2203      	movs	r2, #3
 80019ae:	400a      	ands	r2, r1
 80019b0:	00d2      	lsls	r2, r2, #3
 80019b2:	21ff      	movs	r1, #255	; 0xff
 80019b4:	4091      	lsls	r1, r2
 80019b6:	000a      	movs	r2, r1
 80019b8:	43d2      	mvns	r2, r2
 80019ba:	401a      	ands	r2, r3
 80019bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	22ff      	movs	r2, #255	; 0xff
 80019c4:	401a      	ands	r2, r3
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	0018      	movs	r0, r3
 80019cc:	2303      	movs	r3, #3
 80019ce:	4003      	ands	r3, r0
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019d4:	4809      	ldr	r0, [pc, #36]	; (80019fc <__NVIC_SetPriority+0xd8>)
 80019d6:	1dfb      	adds	r3, r7, #7
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	001c      	movs	r4, r3
 80019dc:	230f      	movs	r3, #15
 80019de:	4023      	ands	r3, r4
 80019e0:	3b08      	subs	r3, #8
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	430a      	orrs	r2, r1
 80019e6:	3306      	adds	r3, #6
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	18c3      	adds	r3, r0, r3
 80019ec:	3304      	adds	r3, #4
 80019ee:	601a      	str	r2, [r3, #0]
}
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b003      	add	sp, #12
 80019f6:	bd90      	pop	{r4, r7, pc}
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	1e5a      	subs	r2, r3, #1
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	045b      	lsls	r3, r3, #17
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d301      	bcc.n	8001a18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a14:	2301      	movs	r3, #1
 8001a16:	e010      	b.n	8001a3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <SysTick_Config+0x44>)
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	3a01      	subs	r2, #1
 8001a1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a20:	2301      	movs	r3, #1
 8001a22:	425b      	negs	r3, r3
 8001a24:	2103      	movs	r1, #3
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7ff ff7c 	bl	8001924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Config+0x44>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SysTick_Config+0x44>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b002      	add	sp, #8
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	210f      	movs	r1, #15
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	1c02      	adds	r2, r0, #0
 8001a58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	187b      	adds	r3, r7, r1
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	0011      	movs	r1, r2
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7ff ff5d 	bl	8001924 <__NVIC_SetPriority>
}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b004      	add	sp, #16
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	0002      	movs	r2, r0
 8001a7a:	1dfb      	adds	r3, r7, #7
 8001a7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7e:	1dfb      	adds	r3, r7, #7
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff ff33 	bl	80018f0 <__NVIC_EnableIRQ>
}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b002      	add	sp, #8
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff ffaf 	bl	8001a00 <SysTick_Config>
 8001aa2:	0003      	movs	r3, r0
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b002      	add	sp, #8
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ac2:	e14f      	b.n	8001d64 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4091      	lsls	r1, r2
 8001ace:	000a      	movs	r2, r1
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d100      	bne.n	8001adc <HAL_GPIO_Init+0x30>
 8001ada:	e140      	b.n	8001d5e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d005      	beq.n	8001af4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2203      	movs	r2, #3
 8001aee:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d130      	bne.n	8001b56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	409a      	lsls	r2, r3
 8001b02:	0013      	movs	r3, r2
 8001b04:	43da      	mvns	r2, r3
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	409a      	lsls	r2, r3
 8001b16:	0013      	movs	r3, r2
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	0013      	movs	r3, r2
 8001b32:	43da      	mvns	r2, r3
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	091b      	lsrs	r3, r3, #4
 8001b40:	2201      	movs	r2, #1
 8001b42:	401a      	ands	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	409a      	lsls	r2, r3
 8001b48:	0013      	movs	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d017      	beq.n	8001b92 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	0013      	movs	r3, r2
 8001b72:	43da      	mvns	r2, r3
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	409a      	lsls	r2, r3
 8001b84:	0013      	movs	r3, r2
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2203      	movs	r2, #3
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d123      	bne.n	8001be6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	08da      	lsrs	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	0092      	lsls	r2, r2, #2
 8001ba8:	58d3      	ldr	r3, [r2, r3]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2207      	movs	r2, #7
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	0013      	movs	r3, r2
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2107      	movs	r1, #7
 8001bca:	400b      	ands	r3, r1
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	0013      	movs	r3, r2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	08da      	lsrs	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3208      	adds	r2, #8
 8001be0:	0092      	lsls	r2, r2, #2
 8001be2:	6939      	ldr	r1, [r7, #16]
 8001be4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	0013      	movs	r3, r2
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2203      	movs	r2, #3
 8001c04:	401a      	ands	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	0013      	movs	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	23c0      	movs	r3, #192	; 0xc0
 8001c20:	029b      	lsls	r3, r3, #10
 8001c22:	4013      	ands	r3, r2
 8001c24:	d100      	bne.n	8001c28 <HAL_GPIO_Init+0x17c>
 8001c26:	e09a      	b.n	8001d5e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c28:	4b54      	ldr	r3, [pc, #336]	; (8001d7c <HAL_GPIO_Init+0x2d0>)
 8001c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_GPIO_Init+0x2d0>)
 8001c2e:	2101      	movs	r1, #1
 8001c30:	430a      	orrs	r2, r1
 8001c32:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c34:	4a52      	ldr	r2, [pc, #328]	; (8001d80 <HAL_GPIO_Init+0x2d4>)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	589b      	ldr	r3, [r3, r2]
 8001c40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2203      	movs	r2, #3
 8001c46:	4013      	ands	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	0013      	movs	r3, r2
 8001c50:	43da      	mvns	r2, r3
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	23a0      	movs	r3, #160	; 0xa0
 8001c5c:	05db      	lsls	r3, r3, #23
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d019      	beq.n	8001c96 <HAL_GPIO_Init+0x1ea>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a47      	ldr	r2, [pc, #284]	; (8001d84 <HAL_GPIO_Init+0x2d8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <HAL_GPIO_Init+0x1e6>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a46      	ldr	r2, [pc, #280]	; (8001d88 <HAL_GPIO_Init+0x2dc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00d      	beq.n	8001c8e <HAL_GPIO_Init+0x1e2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a45      	ldr	r2, [pc, #276]	; (8001d8c <HAL_GPIO_Init+0x2e0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d007      	beq.n	8001c8a <HAL_GPIO_Init+0x1de>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a44      	ldr	r2, [pc, #272]	; (8001d90 <HAL_GPIO_Init+0x2e4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d101      	bne.n	8001c86 <HAL_GPIO_Init+0x1da>
 8001c82:	2305      	movs	r3, #5
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x1ec>
 8001c86:	2306      	movs	r3, #6
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x1ec>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x1ec>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x1ec>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x1ec>
 8001c96:	2300      	movs	r3, #0
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	2103      	movs	r1, #3
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca8:	4935      	ldr	r1, [pc, #212]	; (8001d80 <HAL_GPIO_Init+0x2d4>)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb6:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	035b      	lsls	r3, r3, #13
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cda:	4b2e      	ldr	r3, [pc, #184]	; (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ce0:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	43da      	mvns	r2, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	039b      	lsls	r3, r3, #14
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d04:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001d0a:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	43da      	mvns	r2, r3
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	029b      	lsls	r3, r3, #10
 8001d22:	4013      	ands	r3, r2
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d34:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	43da      	mvns	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	025b      	lsls	r3, r3, #9
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	40da      	lsrs	r2, r3
 8001d6c:	1e13      	subs	r3, r2, #0
 8001d6e:	d000      	beq.n	8001d72 <HAL_GPIO_Init+0x2c6>
 8001d70:	e6a8      	b.n	8001ac4 <HAL_GPIO_Init+0x18>
  }
}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b006      	add	sp, #24
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010000 	.word	0x40010000
 8001d84:	50000400 	.word	0x50000400
 8001d88:	50000800 	.word	0x50000800
 8001d8c:	50000c00 	.word	0x50000c00
 8001d90:	50001c00 	.word	0x50001c00
 8001d94:	40010400 	.word	0x40010400

08001d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d98:	b5b0      	push	{r4, r5, r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f000 fbaf 	bl	800250a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dac:	4bcf      	ldr	r3, [pc, #828]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	220c      	movs	r2, #12
 8001db2:	4013      	ands	r3, r2
 8001db4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db6:	4bcd      	ldr	r3, [pc, #820]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	025b      	lsls	r3, r3, #9
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d100      	bne.n	8001dce <HAL_RCC_OscConfig+0x36>
 8001dcc:	e07e      	b.n	8001ecc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d007      	beq.n	8001de4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d112      	bne.n	8001e00 <HAL_RCC_OscConfig+0x68>
 8001dda:	69fa      	ldr	r2, [r7, #28]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	025b      	lsls	r3, r3, #9
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d10d      	bne.n	8001e00 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	4bc1      	ldr	r3, [pc, #772]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	029b      	lsls	r3, r3, #10
 8001dec:	4013      	ands	r3, r2
 8001dee:	d100      	bne.n	8001df2 <HAL_RCC_OscConfig+0x5a>
 8001df0:	e06b      	b.n	8001eca <HAL_RCC_OscConfig+0x132>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d167      	bne.n	8001eca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	f000 fb85 	bl	800250a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	025b      	lsls	r3, r3, #9
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d107      	bne.n	8001e1c <HAL_RCC_OscConfig+0x84>
 8001e0c:	4bb7      	ldr	r3, [pc, #732]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4bb6      	ldr	r3, [pc, #728]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	0249      	lsls	r1, r1, #9
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e027      	b.n	8001e6c <HAL_RCC_OscConfig+0xd4>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	23a0      	movs	r3, #160	; 0xa0
 8001e22:	02db      	lsls	r3, r3, #11
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d10e      	bne.n	8001e46 <HAL_RCC_OscConfig+0xae>
 8001e28:	4bb0      	ldr	r3, [pc, #704]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4baf      	ldr	r3, [pc, #700]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001e2e:	2180      	movs	r1, #128	; 0x80
 8001e30:	02c9      	lsls	r1, r1, #11
 8001e32:	430a      	orrs	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	4bad      	ldr	r3, [pc, #692]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4bac      	ldr	r3, [pc, #688]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001e3c:	2180      	movs	r1, #128	; 0x80
 8001e3e:	0249      	lsls	r1, r1, #9
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	e012      	b.n	8001e6c <HAL_RCC_OscConfig+0xd4>
 8001e46:	4ba9      	ldr	r3, [pc, #676]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4ba8      	ldr	r3, [pc, #672]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001e4c:	49a8      	ldr	r1, [pc, #672]	; (80020f0 <HAL_RCC_OscConfig+0x358>)
 8001e4e:	400a      	ands	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	4ba6      	ldr	r3, [pc, #664]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	025b      	lsls	r3, r3, #9
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4ba2      	ldr	r3, [pc, #648]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4ba1      	ldr	r3, [pc, #644]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001e66:	49a3      	ldr	r1, [pc, #652]	; (80020f4 <HAL_RCC_OscConfig+0x35c>)
 8001e68:	400a      	ands	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d015      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7ff f8b4 	bl	8000fe0 <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e7c:	e009      	b.n	8001e92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e7e:	f7ff f8af 	bl	8000fe0 <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b64      	cmp	r3, #100	; 0x64
 8001e8a:	d902      	bls.n	8001e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	f000 fb3c 	bl	800250a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e92:	4b96      	ldr	r3, [pc, #600]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	029b      	lsls	r3, r3, #10
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d0ef      	beq.n	8001e7e <HAL_RCC_OscConfig+0xe6>
 8001e9e:	e015      	b.n	8001ecc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f89e 	bl	8000fe0 <HAL_GetTick>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eaa:	f7ff f899 	bl	8000fe0 <HAL_GetTick>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b64      	cmp	r3, #100	; 0x64
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e326      	b.n	800250a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ebc:	4b8b      	ldr	r3, [pc, #556]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	029b      	lsls	r3, r3, #10
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d1f0      	bne.n	8001eaa <HAL_RCC_OscConfig+0x112>
 8001ec8:	e000      	b.n	8001ecc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d100      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x140>
 8001ed6:	e08b      	b.n	8001ff0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d13e      	bne.n	8001f68 <HAL_RCC_OscConfig+0x1d0>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d13b      	bne.n	8001f68 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001ef0:	4b7e      	ldr	r3, [pc, #504]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d004      	beq.n	8001f04 <HAL_RCC_OscConfig+0x16c>
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e302      	b.n	800250a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b79      	ldr	r3, [pc, #484]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a7b      	ldr	r2, [pc, #492]	; (80020f8 <HAL_RCC_OscConfig+0x360>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	021a      	lsls	r2, r3, #8
 8001f14:	4b75      	ldr	r3, [pc, #468]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001f16:	430a      	orrs	r2, r1
 8001f18:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f1a:	4b74      	ldr	r3, [pc, #464]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2209      	movs	r2, #9
 8001f20:	4393      	bics	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	4b71      	ldr	r3, [pc, #452]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f2c:	f000 fc40 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 8001f30:	0001      	movs	r1, r0
 8001f32:	4b6e      	ldr	r3, [pc, #440]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	220f      	movs	r2, #15
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	4a6f      	ldr	r2, [pc, #444]	; (80020fc <HAL_RCC_OscConfig+0x364>)
 8001f3e:	5cd3      	ldrb	r3, [r2, r3]
 8001f40:	000a      	movs	r2, r1
 8001f42:	40da      	lsrs	r2, r3
 8001f44:	4b6e      	ldr	r3, [pc, #440]	; (8002100 <HAL_RCC_OscConfig+0x368>)
 8001f46:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001f48:	4b6e      	ldr	r3, [pc, #440]	; (8002104 <HAL_RCC_OscConfig+0x36c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2513      	movs	r5, #19
 8001f4e:	197c      	adds	r4, r7, r5
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7fe ffff 	bl	8000f54 <HAL_InitTick>
 8001f56:	0003      	movs	r3, r0
 8001f58:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001f5a:	197b      	adds	r3, r7, r5
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d046      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001f62:	197b      	adds	r3, r7, r5
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	e2d0      	b.n	800250a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d027      	beq.n	8001fbe <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f6e:	4b5f      	ldr	r3, [pc, #380]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2209      	movs	r2, #9
 8001f74:	4393      	bics	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	4b5c      	ldr	r3, [pc, #368]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff f82e 	bl	8000fe0 <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7ff f829 	bl	8000fe0 <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e2b6      	b.n	800250a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f9c:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d0f1      	beq.n	8001f8a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa6:	4b51      	ldr	r3, [pc, #324]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	4a53      	ldr	r2, [pc, #332]	; (80020f8 <HAL_RCC_OscConfig+0x360>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	021a      	lsls	r2, r3, #8
 8001fb6:	4b4d      	ldr	r3, [pc, #308]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	e018      	b.n	8001ff0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fbe:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4b4a      	ldr	r3, [pc, #296]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	438a      	bics	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7ff f809 	bl	8000fe0 <HAL_GetTick>
 8001fce:	0003      	movs	r3, r0
 8001fd0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd4:	f7ff f804 	bl	8000fe0 <HAL_GetTick>
 8001fd8:	0002      	movs	r2, r0
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e291      	b.n	800250a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2204      	movs	r2, #4
 8001fec:	4013      	ands	r3, r2
 8001fee:	d1f1      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d100      	bne.n	8001ffc <HAL_RCC_OscConfig+0x264>
 8001ffa:	e0a1      	b.n	8002140 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d140      	bne.n	8002084 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002002:	4b3a      	ldr	r3, [pc, #232]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4013      	ands	r3, r2
 800200c:	d005      	beq.n	800201a <HAL_RCC_OscConfig+0x282>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e277      	b.n	800250a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800201a:	4b34      	ldr	r3, [pc, #208]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4a3a      	ldr	r2, [pc, #232]	; (8002108 <HAL_RCC_OscConfig+0x370>)
 8002020:	4013      	ands	r3, r2
 8002022:	0019      	movs	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002028:	4b30      	ldr	r3, [pc, #192]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 800202a:	430a      	orrs	r2, r1
 800202c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800202e:	4b2f      	ldr	r3, [pc, #188]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	0a19      	lsrs	r1, r3, #8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	061a      	lsls	r2, r3, #24
 800203c:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 800203e:	430a      	orrs	r2, r1
 8002040:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	0b5b      	lsrs	r3, r3, #13
 8002048:	3301      	adds	r3, #1
 800204a:	2280      	movs	r2, #128	; 0x80
 800204c:	0212      	lsls	r2, r2, #8
 800204e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002050:	4b26      	ldr	r3, [pc, #152]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	210f      	movs	r1, #15
 8002058:	400b      	ands	r3, r1
 800205a:	4928      	ldr	r1, [pc, #160]	; (80020fc <HAL_RCC_OscConfig+0x364>)
 800205c:	5ccb      	ldrb	r3, [r1, r3]
 800205e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_RCC_OscConfig+0x368>)
 8002062:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <HAL_RCC_OscConfig+0x36c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2513      	movs	r5, #19
 800206a:	197c      	adds	r4, r7, r5
 800206c:	0018      	movs	r0, r3
 800206e:	f7fe ff71 	bl	8000f54 <HAL_InitTick>
 8002072:	0003      	movs	r3, r0
 8002074:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002076:	197b      	adds	r3, r7, r5
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d060      	beq.n	8002140 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800207e:	197b      	adds	r3, r7, r5
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	e242      	b.n	800250a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d03f      	beq.n	800210c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800208c:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 8002092:	2180      	movs	r1, #128	; 0x80
 8002094:	0049      	lsls	r1, r1, #1
 8002096:	430a      	orrs	r2, r1
 8002098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7fe ffa1 	bl	8000fe0 <HAL_GetTick>
 800209e:	0003      	movs	r3, r0
 80020a0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020a4:	f7fe ff9c 	bl	8000fe0 <HAL_GetTick>
 80020a8:	0002      	movs	r2, r0
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e229      	b.n	800250a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4013      	ands	r3, r2
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a10      	ldr	r2, [pc, #64]	; (8002108 <HAL_RCC_OscConfig+0x370>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 80020d2:	430a      	orrs	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	0a19      	lsrs	r1, r3, #8
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	061a      	lsls	r2, r3, #24
 80020e4:	4b01      	ldr	r3, [pc, #4]	; (80020ec <HAL_RCC_OscConfig+0x354>)
 80020e6:	430a      	orrs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	e029      	b.n	8002140 <HAL_RCC_OscConfig+0x3a8>
 80020ec:	40021000 	.word	0x40021000
 80020f0:	fffeffff 	.word	0xfffeffff
 80020f4:	fffbffff 	.word	0xfffbffff
 80020f8:	ffffe0ff 	.word	0xffffe0ff
 80020fc:	0800296c 	.word	0x0800296c
 8002100:	20000000 	.word	0x20000000
 8002104:	20000004 	.word	0x20000004
 8002108:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800210c:	4bbd      	ldr	r3, [pc, #756]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4bbc      	ldr	r3, [pc, #752]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002112:	49bd      	ldr	r1, [pc, #756]	; (8002408 <HAL_RCC_OscConfig+0x670>)
 8002114:	400a      	ands	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7fe ff62 	bl	8000fe0 <HAL_GetTick>
 800211c:	0003      	movs	r3, r0
 800211e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002122:	f7fe ff5d 	bl	8000fe0 <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e1ea      	b.n	800250a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002134:	4bb3      	ldr	r3, [pc, #716]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4013      	ands	r3, r2
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2208      	movs	r2, #8
 8002146:	4013      	ands	r3, r2
 8002148:	d036      	beq.n	80021b8 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d019      	beq.n	8002186 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002152:	4bac      	ldr	r3, [pc, #688]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002156:	4bab      	ldr	r3, [pc, #684]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002158:	2101      	movs	r1, #1
 800215a:	430a      	orrs	r2, r1
 800215c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215e:	f7fe ff3f 	bl	8000fe0 <HAL_GetTick>
 8002162:	0003      	movs	r3, r0
 8002164:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002168:	f7fe ff3a 	bl	8000fe0 <HAL_GetTick>
 800216c:	0002      	movs	r2, r0
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1c7      	b.n	800250a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800217a:	4ba2      	ldr	r3, [pc, #648]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 800217c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800217e:	2202      	movs	r2, #2
 8002180:	4013      	ands	r3, r2
 8002182:	d0f1      	beq.n	8002168 <HAL_RCC_OscConfig+0x3d0>
 8002184:	e018      	b.n	80021b8 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002186:	4b9f      	ldr	r3, [pc, #636]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002188:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800218a:	4b9e      	ldr	r3, [pc, #632]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 800218c:	2101      	movs	r1, #1
 800218e:	438a      	bics	r2, r1
 8002190:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7fe ff25 	bl	8000fe0 <HAL_GetTick>
 8002196:	0003      	movs	r3, r0
 8002198:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219c:	f7fe ff20 	bl	8000fe0 <HAL_GetTick>
 80021a0:	0002      	movs	r2, r0
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e1ad      	b.n	800250a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021ae:	4b95      	ldr	r3, [pc, #596]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 80021b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b2:	2202      	movs	r2, #2
 80021b4:	4013      	ands	r3, r2
 80021b6:	d1f1      	bne.n	800219c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2204      	movs	r2, #4
 80021be:	4013      	ands	r3, r2
 80021c0:	d100      	bne.n	80021c4 <HAL_RCC_OscConfig+0x42c>
 80021c2:	e0ae      	b.n	8002322 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c4:	2027      	movs	r0, #39	; 0x27
 80021c6:	183b      	adds	r3, r7, r0
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021cc:	4b8d      	ldr	r3, [pc, #564]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 80021ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	055b      	lsls	r3, r3, #21
 80021d4:	4013      	ands	r3, r2
 80021d6:	d109      	bne.n	80021ec <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d8:	4b8a      	ldr	r3, [pc, #552]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 80021da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021dc:	4b89      	ldr	r3, [pc, #548]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 80021de:	2180      	movs	r1, #128	; 0x80
 80021e0:	0549      	lsls	r1, r1, #21
 80021e2:	430a      	orrs	r2, r1
 80021e4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80021e6:	183b      	adds	r3, r7, r0
 80021e8:	2201      	movs	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ec:	4b87      	ldr	r3, [pc, #540]	; (800240c <HAL_RCC_OscConfig+0x674>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4013      	ands	r3, r2
 80021f6:	d11a      	bne.n	800222e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f8:	4b84      	ldr	r3, [pc, #528]	; (800240c <HAL_RCC_OscConfig+0x674>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b83      	ldr	r3, [pc, #524]	; (800240c <HAL_RCC_OscConfig+0x674>)
 80021fe:	2180      	movs	r1, #128	; 0x80
 8002200:	0049      	lsls	r1, r1, #1
 8002202:	430a      	orrs	r2, r1
 8002204:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002206:	f7fe feeb 	bl	8000fe0 <HAL_GetTick>
 800220a:	0003      	movs	r3, r0
 800220c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002210:	f7fe fee6 	bl	8000fe0 <HAL_GetTick>
 8002214:	0002      	movs	r2, r0
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e173      	b.n	800250a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	4b7a      	ldr	r3, [pc, #488]	; (800240c <HAL_RCC_OscConfig+0x674>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4013      	ands	r3, r2
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	429a      	cmp	r2, r3
 8002238:	d107      	bne.n	800224a <HAL_RCC_OscConfig+0x4b2>
 800223a:	4b72      	ldr	r3, [pc, #456]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 800223c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800223e:	4b71      	ldr	r3, [pc, #452]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002240:	2180      	movs	r1, #128	; 0x80
 8002242:	0049      	lsls	r1, r1, #1
 8002244:	430a      	orrs	r2, r1
 8002246:	651a      	str	r2, [r3, #80]	; 0x50
 8002248:	e031      	b.n	80022ae <HAL_RCC_OscConfig+0x516>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10c      	bne.n	800226c <HAL_RCC_OscConfig+0x4d4>
 8002252:	4b6c      	ldr	r3, [pc, #432]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002254:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002256:	4b6b      	ldr	r3, [pc, #428]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002258:	496b      	ldr	r1, [pc, #428]	; (8002408 <HAL_RCC_OscConfig+0x670>)
 800225a:	400a      	ands	r2, r1
 800225c:	651a      	str	r2, [r3, #80]	; 0x50
 800225e:	4b69      	ldr	r3, [pc, #420]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002260:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002262:	4b68      	ldr	r3, [pc, #416]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002264:	496a      	ldr	r1, [pc, #424]	; (8002410 <HAL_RCC_OscConfig+0x678>)
 8002266:	400a      	ands	r2, r1
 8002268:	651a      	str	r2, [r3, #80]	; 0x50
 800226a:	e020      	b.n	80022ae <HAL_RCC_OscConfig+0x516>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	23a0      	movs	r3, #160	; 0xa0
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	429a      	cmp	r2, r3
 8002276:	d10e      	bne.n	8002296 <HAL_RCC_OscConfig+0x4fe>
 8002278:	4b62      	ldr	r3, [pc, #392]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 800227a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800227c:	4b61      	ldr	r3, [pc, #388]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	00c9      	lsls	r1, r1, #3
 8002282:	430a      	orrs	r2, r1
 8002284:	651a      	str	r2, [r3, #80]	; 0x50
 8002286:	4b5f      	ldr	r3, [pc, #380]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002288:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800228a:	4b5e      	ldr	r3, [pc, #376]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	0049      	lsls	r1, r1, #1
 8002290:	430a      	orrs	r2, r1
 8002292:	651a      	str	r2, [r3, #80]	; 0x50
 8002294:	e00b      	b.n	80022ae <HAL_RCC_OscConfig+0x516>
 8002296:	4b5b      	ldr	r3, [pc, #364]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800229a:	4b5a      	ldr	r3, [pc, #360]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 800229c:	495a      	ldr	r1, [pc, #360]	; (8002408 <HAL_RCC_OscConfig+0x670>)
 800229e:	400a      	ands	r2, r1
 80022a0:	651a      	str	r2, [r3, #80]	; 0x50
 80022a2:	4b58      	ldr	r3, [pc, #352]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 80022a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022a6:	4b57      	ldr	r3, [pc, #348]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 80022a8:	4959      	ldr	r1, [pc, #356]	; (8002410 <HAL_RCC_OscConfig+0x678>)
 80022aa:	400a      	ands	r2, r1
 80022ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d015      	beq.n	80022e2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b6:	f7fe fe93 	bl	8000fe0 <HAL_GetTick>
 80022ba:	0003      	movs	r3, r0
 80022bc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022be:	e009      	b.n	80022d4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c0:	f7fe fe8e 	bl	8000fe0 <HAL_GetTick>
 80022c4:	0002      	movs	r2, r0
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	4a52      	ldr	r2, [pc, #328]	; (8002414 <HAL_RCC_OscConfig+0x67c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e11a      	b.n	800250a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022d4:	4b4b      	ldr	r3, [pc, #300]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 80022d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4013      	ands	r3, r2
 80022de:	d0ef      	beq.n	80022c0 <HAL_RCC_OscConfig+0x528>
 80022e0:	e014      	b.n	800230c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7fe fe7d 	bl	8000fe0 <HAL_GetTick>
 80022e6:	0003      	movs	r3, r0
 80022e8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022ea:	e009      	b.n	8002300 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ec:	f7fe fe78 	bl	8000fe0 <HAL_GetTick>
 80022f0:	0002      	movs	r2, r0
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	4a47      	ldr	r2, [pc, #284]	; (8002414 <HAL_RCC_OscConfig+0x67c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e104      	b.n	800250a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002300:	4b40      	ldr	r3, [pc, #256]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002302:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4013      	ands	r3, r2
 800230a:	d1ef      	bne.n	80022ec <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800230c:	2327      	movs	r3, #39	; 0x27
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d105      	bne.n	8002322 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002316:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800231a:	4b3a      	ldr	r3, [pc, #232]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 800231c:	493e      	ldr	r1, [pc, #248]	; (8002418 <HAL_RCC_OscConfig+0x680>)
 800231e:	400a      	ands	r2, r1
 8002320:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2220      	movs	r2, #32
 8002328:	4013      	ands	r3, r2
 800232a:	d049      	beq.n	80023c0 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d026      	beq.n	8002382 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002334:	4b33      	ldr	r3, [pc, #204]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	4b32      	ldr	r3, [pc, #200]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 800233a:	2101      	movs	r1, #1
 800233c:	430a      	orrs	r2, r1
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	4b30      	ldr	r3, [pc, #192]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002344:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002346:	2101      	movs	r1, #1
 8002348:	430a      	orrs	r2, r1
 800234a:	635a      	str	r2, [r3, #52]	; 0x34
 800234c:	4b33      	ldr	r3, [pc, #204]	; (800241c <HAL_RCC_OscConfig+0x684>)
 800234e:	6a1a      	ldr	r2, [r3, #32]
 8002350:	4b32      	ldr	r3, [pc, #200]	; (800241c <HAL_RCC_OscConfig+0x684>)
 8002352:	2180      	movs	r1, #128	; 0x80
 8002354:	0189      	lsls	r1, r1, #6
 8002356:	430a      	orrs	r2, r1
 8002358:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7fe fe41 	bl	8000fe0 <HAL_GetTick>
 800235e:	0003      	movs	r3, r0
 8002360:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002364:	f7fe fe3c 	bl	8000fe0 <HAL_GetTick>
 8002368:	0002      	movs	r2, r0
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e0c9      	b.n	800250a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002376:	4b23      	ldr	r3, [pc, #140]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2202      	movs	r2, #2
 800237c:	4013      	ands	r3, r2
 800237e:	d0f1      	beq.n	8002364 <HAL_RCC_OscConfig+0x5cc>
 8002380:	e01e      	b.n	80023c0 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002382:	4b20      	ldr	r3, [pc, #128]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 8002388:	2101      	movs	r1, #1
 800238a:	438a      	bics	r2, r1
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	4b23      	ldr	r3, [pc, #140]	; (800241c <HAL_RCC_OscConfig+0x684>)
 8002390:	6a1a      	ldr	r2, [r3, #32]
 8002392:	4b22      	ldr	r3, [pc, #136]	; (800241c <HAL_RCC_OscConfig+0x684>)
 8002394:	4922      	ldr	r1, [pc, #136]	; (8002420 <HAL_RCC_OscConfig+0x688>)
 8002396:	400a      	ands	r2, r1
 8002398:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7fe fe21 	bl	8000fe0 <HAL_GetTick>
 800239e:	0003      	movs	r3, r0
 80023a0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023a4:	f7fe fe1c 	bl	8000fe0 <HAL_GetTick>
 80023a8:	0002      	movs	r2, r0
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e0a9      	b.n	800250a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2202      	movs	r2, #2
 80023bc:	4013      	ands	r3, r2
 80023be:	d1f1      	bne.n	80023a4 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d100      	bne.n	80023ca <HAL_RCC_OscConfig+0x632>
 80023c8:	e09e      	b.n	8002508 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	2b0c      	cmp	r3, #12
 80023ce:	d100      	bne.n	80023d2 <HAL_RCC_OscConfig+0x63a>
 80023d0:	e077      	b.n	80024c2 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d158      	bne.n	800248c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_RCC_OscConfig+0x66c>)
 80023e0:	4910      	ldr	r1, [pc, #64]	; (8002424 <HAL_RCC_OscConfig+0x68c>)
 80023e2:	400a      	ands	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7fe fdfb 	bl	8000fe0 <HAL_GetTick>
 80023ea:	0003      	movs	r3, r0
 80023ec:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023ee:	e01b      	b.n	8002428 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f0:	f7fe fdf6 	bl	8000fe0 <HAL_GetTick>
 80023f4:	0002      	movs	r2, r0
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d914      	bls.n	8002428 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e083      	b.n	800250a <HAL_RCC_OscConfig+0x772>
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	40021000 	.word	0x40021000
 8002408:	fffffeff 	.word	0xfffffeff
 800240c:	40007000 	.word	0x40007000
 8002410:	fffffbff 	.word	0xfffffbff
 8002414:	00001388 	.word	0x00001388
 8002418:	efffffff 	.word	0xefffffff
 800241c:	40010000 	.word	0x40010000
 8002420:	ffffdfff 	.word	0xffffdfff
 8002424:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002428:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <HAL_RCC_OscConfig+0x77c>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	049b      	lsls	r3, r3, #18
 8002430:	4013      	ands	r3, r2
 8002432:	d1dd      	bne.n	80023f0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002434:	4b37      	ldr	r3, [pc, #220]	; (8002514 <HAL_RCC_OscConfig+0x77c>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4a37      	ldr	r2, [pc, #220]	; (8002518 <HAL_RCC_OscConfig+0x780>)
 800243a:	4013      	ands	r3, r2
 800243c:	0019      	movs	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244c:	431a      	orrs	r2, r3
 800244e:	4b31      	ldr	r3, [pc, #196]	; (8002514 <HAL_RCC_OscConfig+0x77c>)
 8002450:	430a      	orrs	r2, r1
 8002452:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002454:	4b2f      	ldr	r3, [pc, #188]	; (8002514 <HAL_RCC_OscConfig+0x77c>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <HAL_RCC_OscConfig+0x77c>)
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	0449      	lsls	r1, r1, #17
 800245e:	430a      	orrs	r2, r1
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002462:	f7fe fdbd 	bl	8000fe0 <HAL_GetTick>
 8002466:	0003      	movs	r3, r0
 8002468:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fdb8 	bl	8000fe0 <HAL_GetTick>
 8002470:	0002      	movs	r2, r0
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e045      	b.n	800250a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800247e:	4b25      	ldr	r3, [pc, #148]	; (8002514 <HAL_RCC_OscConfig+0x77c>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	049b      	lsls	r3, r3, #18
 8002486:	4013      	ands	r3, r2
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x6d4>
 800248a:	e03d      	b.n	8002508 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_RCC_OscConfig+0x77c>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b20      	ldr	r3, [pc, #128]	; (8002514 <HAL_RCC_OscConfig+0x77c>)
 8002492:	4922      	ldr	r1, [pc, #136]	; (800251c <HAL_RCC_OscConfig+0x784>)
 8002494:	400a      	ands	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fda2 	bl	8000fe0 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a2:	f7fe fd9d 	bl	8000fe0 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e02a      	b.n	800250a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024b4:	4b17      	ldr	r3, [pc, #92]	; (8002514 <HAL_RCC_OscConfig+0x77c>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	049b      	lsls	r3, r3, #18
 80024bc:	4013      	ands	r3, r2
 80024be:	d1f0      	bne.n	80024a2 <HAL_RCC_OscConfig+0x70a>
 80024c0:	e022      	b.n	8002508 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e01d      	b.n	800250a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <HAL_RCC_OscConfig+0x77c>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	025b      	lsls	r3, r3, #9
 80024da:	401a      	ands	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d10f      	bne.n	8002504 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	23f0      	movs	r3, #240	; 0xf0
 80024e8:	039b      	lsls	r3, r3, #14
 80024ea:	401a      	ands	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	23c0      	movs	r3, #192	; 0xc0
 80024f8:	041b      	lsls	r3, r3, #16
 80024fa:	401a      	ands	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	0018      	movs	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	b00a      	add	sp, #40	; 0x28
 8002510:	bdb0      	pop	{r4, r5, r7, pc}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	40021000 	.word	0x40021000
 8002518:	ff02ffff 	.word	0xff02ffff
 800251c:	feffffff 	.word	0xfeffffff

08002520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002520:	b5b0      	push	{r4, r5, r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e128      	b.n	8002786 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002534:	4b96      	ldr	r3, [pc, #600]	; (8002790 <HAL_RCC_ClockConfig+0x270>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2201      	movs	r2, #1
 800253a:	4013      	ands	r3, r2
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d91e      	bls.n	8002580 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002542:	4b93      	ldr	r3, [pc, #588]	; (8002790 <HAL_RCC_ClockConfig+0x270>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2201      	movs	r2, #1
 8002548:	4393      	bics	r3, r2
 800254a:	0019      	movs	r1, r3
 800254c:	4b90      	ldr	r3, [pc, #576]	; (8002790 <HAL_RCC_ClockConfig+0x270>)
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002554:	f7fe fd44 	bl	8000fe0 <HAL_GetTick>
 8002558:	0003      	movs	r3, r0
 800255a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255c:	e009      	b.n	8002572 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255e:	f7fe fd3f 	bl	8000fe0 <HAL_GetTick>
 8002562:	0002      	movs	r2, r0
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	4a8a      	ldr	r2, [pc, #552]	; (8002794 <HAL_RCC_ClockConfig+0x274>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e109      	b.n	8002786 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b87      	ldr	r3, [pc, #540]	; (8002790 <HAL_RCC_ClockConfig+0x270>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2201      	movs	r2, #1
 8002578:	4013      	ands	r3, r2
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d1ee      	bne.n	800255e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2202      	movs	r2, #2
 8002586:	4013      	ands	r3, r2
 8002588:	d009      	beq.n	800259e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258a:	4b83      	ldr	r3, [pc, #524]	; (8002798 <HAL_RCC_ClockConfig+0x278>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	22f0      	movs	r2, #240	; 0xf0
 8002590:	4393      	bics	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	4b7f      	ldr	r3, [pc, #508]	; (8002798 <HAL_RCC_ClockConfig+0x278>)
 800259a:	430a      	orrs	r2, r1
 800259c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2201      	movs	r2, #1
 80025a4:	4013      	ands	r3, r2
 80025a6:	d100      	bne.n	80025aa <HAL_RCC_ClockConfig+0x8a>
 80025a8:	e089      	b.n	80026be <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025b2:	4b79      	ldr	r3, [pc, #484]	; (8002798 <HAL_RCC_ClockConfig+0x278>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	029b      	lsls	r3, r3, #10
 80025ba:	4013      	ands	r3, r2
 80025bc:	d120      	bne.n	8002600 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e0e1      	b.n	8002786 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025ca:	4b73      	ldr	r3, [pc, #460]	; (8002798 <HAL_RCC_ClockConfig+0x278>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	049b      	lsls	r3, r3, #18
 80025d2:	4013      	ands	r3, r2
 80025d4:	d114      	bne.n	8002600 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e0d5      	b.n	8002786 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d106      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025e2:	4b6d      	ldr	r3, [pc, #436]	; (8002798 <HAL_RCC_ClockConfig+0x278>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2204      	movs	r2, #4
 80025e8:	4013      	ands	r3, r2
 80025ea:	d109      	bne.n	8002600 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0ca      	b.n	8002786 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80025f0:	4b69      	ldr	r3, [pc, #420]	; (8002798 <HAL_RCC_ClockConfig+0x278>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4013      	ands	r3, r2
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0c2      	b.n	8002786 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002600:	4b65      	ldr	r3, [pc, #404]	; (8002798 <HAL_RCC_ClockConfig+0x278>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2203      	movs	r2, #3
 8002606:	4393      	bics	r3, r2
 8002608:	0019      	movs	r1, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	4b62      	ldr	r3, [pc, #392]	; (8002798 <HAL_RCC_ClockConfig+0x278>)
 8002610:	430a      	orrs	r2, r1
 8002612:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002614:	f7fe fce4 	bl	8000fe0 <HAL_GetTick>
 8002618:	0003      	movs	r3, r0
 800261a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d111      	bne.n	8002648 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002624:	e009      	b.n	800263a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002626:	f7fe fcdb 	bl	8000fe0 <HAL_GetTick>
 800262a:	0002      	movs	r2, r0
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	4a58      	ldr	r2, [pc, #352]	; (8002794 <HAL_RCC_ClockConfig+0x274>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e0a5      	b.n	8002786 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800263a:	4b57      	ldr	r3, [pc, #348]	; (8002798 <HAL_RCC_ClockConfig+0x278>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	220c      	movs	r2, #12
 8002640:	4013      	ands	r3, r2
 8002642:	2b08      	cmp	r3, #8
 8002644:	d1ef      	bne.n	8002626 <HAL_RCC_ClockConfig+0x106>
 8002646:	e03a      	b.n	80026be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d111      	bne.n	8002674 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002650:	e009      	b.n	8002666 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002652:	f7fe fcc5 	bl	8000fe0 <HAL_GetTick>
 8002656:	0002      	movs	r2, r0
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	4a4d      	ldr	r2, [pc, #308]	; (8002794 <HAL_RCC_ClockConfig+0x274>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e08f      	b.n	8002786 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002666:	4b4c      	ldr	r3, [pc, #304]	; (8002798 <HAL_RCC_ClockConfig+0x278>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	220c      	movs	r2, #12
 800266c:	4013      	ands	r3, r2
 800266e:	2b0c      	cmp	r3, #12
 8002670:	d1ef      	bne.n	8002652 <HAL_RCC_ClockConfig+0x132>
 8002672:	e024      	b.n	80026be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d11b      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800267c:	e009      	b.n	8002692 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267e:	f7fe fcaf 	bl	8000fe0 <HAL_GetTick>
 8002682:	0002      	movs	r2, r0
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	4a42      	ldr	r2, [pc, #264]	; (8002794 <HAL_RCC_ClockConfig+0x274>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e079      	b.n	8002786 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002692:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_RCC_ClockConfig+0x278>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	220c      	movs	r2, #12
 8002698:	4013      	ands	r3, r2
 800269a:	2b04      	cmp	r3, #4
 800269c:	d1ef      	bne.n	800267e <HAL_RCC_ClockConfig+0x15e>
 800269e:	e00e      	b.n	80026be <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7fe fc9e 	bl	8000fe0 <HAL_GetTick>
 80026a4:	0002      	movs	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	4a3a      	ldr	r2, [pc, #232]	; (8002794 <HAL_RCC_ClockConfig+0x274>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e068      	b.n	8002786 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80026b4:	4b38      	ldr	r3, [pc, #224]	; (8002798 <HAL_RCC_ClockConfig+0x278>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	220c      	movs	r2, #12
 80026ba:	4013      	ands	r3, r2
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026be:	4b34      	ldr	r3, [pc, #208]	; (8002790 <HAL_RCC_ClockConfig+0x270>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2201      	movs	r2, #1
 80026c4:	4013      	ands	r3, r2
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d21e      	bcs.n	800270a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026cc:	4b30      	ldr	r3, [pc, #192]	; (8002790 <HAL_RCC_ClockConfig+0x270>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2201      	movs	r2, #1
 80026d2:	4393      	bics	r3, r2
 80026d4:	0019      	movs	r1, r3
 80026d6:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <HAL_RCC_ClockConfig+0x270>)
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026de:	f7fe fc7f 	bl	8000fe0 <HAL_GetTick>
 80026e2:	0003      	movs	r3, r0
 80026e4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	e009      	b.n	80026fc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe fc7a 	bl	8000fe0 <HAL_GetTick>
 80026ec:	0002      	movs	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	4a28      	ldr	r2, [pc, #160]	; (8002794 <HAL_RCC_ClockConfig+0x274>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e044      	b.n	8002786 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fc:	4b24      	ldr	r3, [pc, #144]	; (8002790 <HAL_RCC_ClockConfig+0x270>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2201      	movs	r2, #1
 8002702:	4013      	ands	r3, r2
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d1ee      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2204      	movs	r2, #4
 8002710:	4013      	ands	r3, r2
 8002712:	d009      	beq.n	8002728 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002714:	4b20      	ldr	r3, [pc, #128]	; (8002798 <HAL_RCC_ClockConfig+0x278>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a20      	ldr	r2, [pc, #128]	; (800279c <HAL_RCC_ClockConfig+0x27c>)
 800271a:	4013      	ands	r3, r2
 800271c:	0019      	movs	r1, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_RCC_ClockConfig+0x278>)
 8002724:	430a      	orrs	r2, r1
 8002726:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2208      	movs	r2, #8
 800272e:	4013      	ands	r3, r2
 8002730:	d00a      	beq.n	8002748 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002732:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_RCC_ClockConfig+0x278>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	4a1a      	ldr	r2, [pc, #104]	; (80027a0 <HAL_RCC_ClockConfig+0x280>)
 8002738:	4013      	ands	r3, r2
 800273a:	0019      	movs	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	00da      	lsls	r2, r3, #3
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_RCC_ClockConfig+0x278>)
 8002744:	430a      	orrs	r2, r1
 8002746:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002748:	f000 f832 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 800274c:	0001      	movs	r1, r0
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_RCC_ClockConfig+0x278>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	220f      	movs	r2, #15
 8002756:	4013      	ands	r3, r2
 8002758:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <HAL_RCC_ClockConfig+0x284>)
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	000a      	movs	r2, r1
 800275e:	40da      	lsrs	r2, r3
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <HAL_RCC_ClockConfig+0x288>)
 8002762:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002764:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_RCC_ClockConfig+0x28c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	250b      	movs	r5, #11
 800276a:	197c      	adds	r4, r7, r5
 800276c:	0018      	movs	r0, r3
 800276e:	f7fe fbf1 	bl	8000f54 <HAL_InitTick>
 8002772:	0003      	movs	r3, r0
 8002774:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002776:	197b      	adds	r3, r7, r5
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800277e:	197b      	adds	r3, r7, r5
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	e000      	b.n	8002786 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	0018      	movs	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	b004      	add	sp, #16
 800278c:	bdb0      	pop	{r4, r5, r7, pc}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	40022000 	.word	0x40022000
 8002794:	00001388 	.word	0x00001388
 8002798:	40021000 	.word	0x40021000
 800279c:	fffff8ff 	.word	0xfffff8ff
 80027a0:	ffffc7ff 	.word	0xffffc7ff
 80027a4:	0800296c 	.word	0x0800296c
 80027a8:	20000000 	.word	0x20000000
 80027ac:	20000004 	.word	0x20000004

080027b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b0:	b5b0      	push	{r4, r5, r7, lr}
 80027b2:	b08e      	sub	sp, #56	; 0x38
 80027b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80027b6:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027be:	230c      	movs	r3, #12
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d014      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x40>
 80027c6:	d900      	bls.n	80027ca <HAL_RCC_GetSysClockFreq+0x1a>
 80027c8:	e07b      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x112>
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d002      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x24>
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d00b      	beq.n	80027ea <HAL_RCC_GetSysClockFreq+0x3a>
 80027d2:	e076      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80027d4:	4b44      	ldr	r3, [pc, #272]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2210      	movs	r2, #16
 80027da:	4013      	ands	r3, r2
 80027dc:	d002      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80027de:	4b43      	ldr	r3, [pc, #268]	; (80028ec <HAL_RCC_GetSysClockFreq+0x13c>)
 80027e0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80027e2:	e07c      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80027e4:	4b42      	ldr	r3, [pc, #264]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x140>)
 80027e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027e8:	e079      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027ea:	4b42      	ldr	r3, [pc, #264]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x144>)
 80027ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027ee:	e076      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	0c9a      	lsrs	r2, r3, #18
 80027f4:	230f      	movs	r3, #15
 80027f6:	401a      	ands	r2, r3
 80027f8:	4b3f      	ldr	r3, [pc, #252]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x148>)
 80027fa:	5c9b      	ldrb	r3, [r3, r2]
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80027fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002800:	0d9a      	lsrs	r2, r3, #22
 8002802:	2303      	movs	r3, #3
 8002804:	4013      	ands	r3, r2
 8002806:	3301      	adds	r3, #1
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800280a:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x138>)
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	025b      	lsls	r3, r3, #9
 8002812:	4013      	ands	r3, r2
 8002814:	d01a      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	4a35      	ldr	r2, [pc, #212]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002820:	2300      	movs	r3, #0
 8002822:	69b8      	ldr	r0, [r7, #24]
 8002824:	69f9      	ldr	r1, [r7, #28]
 8002826:	f7fd fd1b 	bl	8000260 <__aeabi_lmul>
 800282a:	0002      	movs	r2, r0
 800282c:	000b      	movs	r3, r1
 800282e:	0010      	movs	r0, r2
 8002830:	0019      	movs	r1, r3
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f7fd fcef 	bl	8000220 <__aeabi_uldivmod>
 8002842:	0002      	movs	r2, r0
 8002844:	000b      	movs	r3, r1
 8002846:	0013      	movs	r3, r2
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
 800284a:	e037      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800284c:	4b26      	ldr	r3, [pc, #152]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x138>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2210      	movs	r2, #16
 8002852:	4013      	ands	r3, r2
 8002854:	d01a      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4a23      	ldr	r2, [pc, #140]	; (80028ec <HAL_RCC_GetSysClockFreq+0x13c>)
 8002860:	2300      	movs	r3, #0
 8002862:	68b8      	ldr	r0, [r7, #8]
 8002864:	68f9      	ldr	r1, [r7, #12]
 8002866:	f7fd fcfb 	bl	8000260 <__aeabi_lmul>
 800286a:	0002      	movs	r2, r0
 800286c:	000b      	movs	r3, r1
 800286e:	0010      	movs	r0, r2
 8002870:	0019      	movs	r1, r3
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f7fd fccf 	bl	8000220 <__aeabi_uldivmod>
 8002882:	0002      	movs	r2, r0
 8002884:	000b      	movs	r3, r1
 8002886:	0013      	movs	r3, r2
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
 800288a:	e017      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	0018      	movs	r0, r3
 8002890:	2300      	movs	r3, #0
 8002892:	0019      	movs	r1, r3
 8002894:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002896:	2300      	movs	r3, #0
 8002898:	f7fd fce2 	bl	8000260 <__aeabi_lmul>
 800289c:	0002      	movs	r2, r0
 800289e:	000b      	movs	r3, r1
 80028a0:	0010      	movs	r0, r2
 80028a2:	0019      	movs	r1, r3
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	001c      	movs	r4, r3
 80028a8:	2300      	movs	r3, #0
 80028aa:	001d      	movs	r5, r3
 80028ac:	0022      	movs	r2, r4
 80028ae:	002b      	movs	r3, r5
 80028b0:	f7fd fcb6 	bl	8000220 <__aeabi_uldivmod>
 80028b4:	0002      	movs	r2, r0
 80028b6:	000b      	movs	r3, r1
 80028b8:	0013      	movs	r3, r2
 80028ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80028bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028c0:	e00d      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	0b5b      	lsrs	r3, r3, #13
 80028c8:	2207      	movs	r2, #7
 80028ca:	4013      	ands	r3, r2
 80028cc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	3301      	adds	r3, #1
 80028d2:	2280      	movs	r2, #128	; 0x80
 80028d4:	0212      	lsls	r2, r2, #8
 80028d6:	409a      	lsls	r2, r3
 80028d8:	0013      	movs	r3, r2
 80028da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028dc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80028de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80028e0:	0018      	movs	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b00e      	add	sp, #56	; 0x38
 80028e6:	bdb0      	pop	{r4, r5, r7, pc}
 80028e8:	40021000 	.word	0x40021000
 80028ec:	003d0900 	.word	0x003d0900
 80028f0:	00f42400 	.word	0x00f42400
 80028f4:	007a1200 	.word	0x007a1200
 80028f8:	0800297c 	.word	0x0800297c

080028fc <memset>:
 80028fc:	0003      	movs	r3, r0
 80028fe:	1882      	adds	r2, r0, r2
 8002900:	4293      	cmp	r3, r2
 8002902:	d100      	bne.n	8002906 <memset+0xa>
 8002904:	4770      	bx	lr
 8002906:	7019      	strb	r1, [r3, #0]
 8002908:	3301      	adds	r3, #1
 800290a:	e7f9      	b.n	8002900 <memset+0x4>

0800290c <__libc_init_array>:
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	2600      	movs	r6, #0
 8002910:	4c0c      	ldr	r4, [pc, #48]	; (8002944 <__libc_init_array+0x38>)
 8002912:	4d0d      	ldr	r5, [pc, #52]	; (8002948 <__libc_init_array+0x3c>)
 8002914:	1b64      	subs	r4, r4, r5
 8002916:	10a4      	asrs	r4, r4, #2
 8002918:	42a6      	cmp	r6, r4
 800291a:	d109      	bne.n	8002930 <__libc_init_array+0x24>
 800291c:	2600      	movs	r6, #0
 800291e:	f000 f819 	bl	8002954 <_init>
 8002922:	4c0a      	ldr	r4, [pc, #40]	; (800294c <__libc_init_array+0x40>)
 8002924:	4d0a      	ldr	r5, [pc, #40]	; (8002950 <__libc_init_array+0x44>)
 8002926:	1b64      	subs	r4, r4, r5
 8002928:	10a4      	asrs	r4, r4, #2
 800292a:	42a6      	cmp	r6, r4
 800292c:	d105      	bne.n	800293a <__libc_init_array+0x2e>
 800292e:	bd70      	pop	{r4, r5, r6, pc}
 8002930:	00b3      	lsls	r3, r6, #2
 8002932:	58eb      	ldr	r3, [r5, r3]
 8002934:	4798      	blx	r3
 8002936:	3601      	adds	r6, #1
 8002938:	e7ee      	b.n	8002918 <__libc_init_array+0xc>
 800293a:	00b3      	lsls	r3, r6, #2
 800293c:	58eb      	ldr	r3, [r5, r3]
 800293e:	4798      	blx	r3
 8002940:	3601      	adds	r6, #1
 8002942:	e7f2      	b.n	800292a <__libc_init_array+0x1e>
 8002944:	08002990 	.word	0x08002990
 8002948:	08002990 	.word	0x08002990
 800294c:	08002994 	.word	0x08002994
 8002950:	08002990 	.word	0x08002990

08002954 <_init>:
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295a:	bc08      	pop	{r3}
 800295c:	469e      	mov	lr, r3
 800295e:	4770      	bx	lr

08002960 <_fini>:
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002966:	bc08      	pop	{r3}
 8002968:	469e      	mov	lr, r3
 800296a:	4770      	bx	lr
