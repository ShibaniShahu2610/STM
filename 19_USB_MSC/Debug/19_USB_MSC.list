
19_USB_MSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a4c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08008b0c  08008b0c  00018b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d74  08008d74  00030400  2**0
                  CONTENTS
  4 .ARM          00000008  08008d74  08008d74  00018d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d7c  08008d7c  00030400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d7c  08008d7c  00018d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d80  08008d80  00018d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000400  08008d84  00020400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a4c  20000520  08008ea4  00020520  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f6c  08008ea4  00020f6c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030400  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030428  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ceca  00000000  00000000  0003046b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d71  00000000  00000000  0003d335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  000400a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000834  00000000  00000000  00040bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001644e  00000000  00000000  00041424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010c0e  00000000  00000000  00057872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077aec  00000000  00000000  00068480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002614  00000000  00000000  000dff6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000e2580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .usb_data     00000400  20000000  20000000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000520 	.word	0x20000520
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008af4 	.word	0x08008af4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000524 	.word	0x20000524
 8000104:	08008af4 	.word	0x08008af4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 f902 	bl	80006b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f806 	bl	80004c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f87a 	bl	80005ac <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004b8:	f007 fd90 	bl	8007fdc <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <main+0x14>
	...

080004c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b09d      	sub	sp, #116	; 0x74
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	2438      	movs	r4, #56	; 0x38
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	0018      	movs	r0, r3
 80004cc:	2338      	movs	r3, #56	; 0x38
 80004ce:	001a      	movs	r2, r3
 80004d0:	2100      	movs	r1, #0
 80004d2:	f008 fad9 	bl	8008a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d6:	2324      	movs	r3, #36	; 0x24
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	0018      	movs	r0, r3
 80004dc:	2314      	movs	r3, #20
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f008 fad1 	bl	8008a88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e6:	003b      	movs	r3, r7
 80004e8:	0018      	movs	r0, r3
 80004ea:	2324      	movs	r3, #36	; 0x24
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f008 faca 	bl	8008a88 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <SystemClock_Config+0xe4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a2b      	ldr	r2, [pc, #172]	; (80005a8 <SystemClock_Config+0xe8>)
 80004fa:	401a      	ands	r2, r3
 80004fc:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <SystemClock_Config+0xe4>)
 80004fe:	2180      	movs	r1, #128	; 0x80
 8000500:	0109      	lsls	r1, r1, #4
 8000502:	430a      	orrs	r2, r1
 8000504:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000506:	0021      	movs	r1, r4
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2222      	movs	r2, #34	; 0x22
 800050c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2201      	movs	r2, #1
 8000512:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2210      	movs	r2, #16
 8000518:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2201      	movs	r2, #1
 800051e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2202      	movs	r2, #2
 8000524:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	02d2      	lsls	r2, r2, #11
 8000532:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	03d2      	lsls	r2, r2, #15
 800053a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053c:	187b      	adds	r3, r7, r1
 800053e:	0018      	movs	r0, r3
 8000540:	f002 f864 	bl	800260c <HAL_RCC_OscConfig>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000548:	f000 f846 	bl	80005d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054c:	2124      	movs	r1, #36	; 0x24
 800054e:	187b      	adds	r3, r7, r1
 8000550:	220f      	movs	r2, #15
 8000552:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2203      	movs	r2, #3
 8000558:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2101      	movs	r1, #1
 8000570:	0018      	movs	r0, r3
 8000572:	f002 fc0f 	bl	8002d94 <HAL_RCC_ClockConfig>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800057a:	f000 f82d 	bl	80005d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800057e:	003b      	movs	r3, r7
 8000580:	2240      	movs	r2, #64	; 0x40
 8000582:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000584:	003b      	movs	r3, r7
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	04d2      	lsls	r2, r2, #19
 800058a:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800058c:	003b      	movs	r3, r7
 800058e:	0018      	movs	r0, r3
 8000590:	f002 fdee 	bl	8003170 <HAL_RCCEx_PeriphCLKConfig>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000598:	f000 f81e 	bl	80005d8 <Error_Handler>
  }
}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	b01d      	add	sp, #116	; 0x74
 80005a2:	bd90      	pop	{r4, r7, pc}
 80005a4:	40007000 	.word	0x40007000
 80005a8:	ffffe7ff 	.word	0xffffe7ff

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <MX_GPIO_Init+0x28>)
 80005b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <MX_GPIO_Init+0x28>)
 80005b8:	2101      	movs	r1, #1
 80005ba:	430a      	orrs	r2, r1
 80005bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <MX_GPIO_Init+0x28>)
 80005c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005c2:	2201      	movs	r2, #1
 80005c4:	4013      	ands	r3, r2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40021000 	.word	0x40021000

080005d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005dc:	b672      	cpsid	i
}
 80005de:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <Error_Handler+0x8>
	...

080005e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <HAL_MspInit+0x24>)
 80005ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <HAL_MspInit+0x24>)
 80005ee:	2101      	movs	r1, #1
 80005f0:	430a      	orrs	r2, r1
 80005f2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <HAL_MspInit+0x24>)
 80005f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <HAL_MspInit+0x24>)
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	0549      	lsls	r1, r1, #21
 80005fe:	430a      	orrs	r2, r1
 8000600:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021000 	.word	0x40021000

0800060c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000610:	e7fe      	b.n	8000610 <NMI_Handler+0x4>

08000612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <HardFault_Handler+0x4>

08000618 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000630:	f000 f894 	bl	800075c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <USB_IRQHandler+0x14>)
 8000642:	0018      	movs	r0, r3
 8000644:	f000 faaa 	bl	8000b9c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	20000a08 	.word	0x20000a08

08000654 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000662:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000664:	f7ff fff6 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <LoopForever+0x6>)
  ldr r1, =_edata
 800066a:	490d      	ldr	r1, [pc, #52]	; (80006a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800066c:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <LoopForever+0xe>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000680:	4c0a      	ldr	r4, [pc, #40]	; (80006ac <LoopForever+0x16>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068e:	f008 fa03 	bl	8008a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000692:	f7ff ff09 	bl	80004a8 <main>

08000696 <LoopForever>:

LoopForever:
    b LoopForever
 8000696:	e7fe      	b.n	8000696 <LoopForever>
  ldr   r0, =_estack
 8000698:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800069c:	20000400 	.word	0x20000400
  ldr r1, =_edata
 80006a0:	20000520 	.word	0x20000520
  ldr r2, =_sidata
 80006a4:	08008d84 	.word	0x08008d84
  ldr r2, =_sbss
 80006a8:	20000520 	.word	0x20000520
  ldr r4, =_ebss
 80006ac:	20000f6c 	.word	0x20000f6c

080006b0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <ADC1_COMP_IRQHandler>
	...

080006b4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <HAL_Init+0x3c>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <HAL_Init+0x3c>)
 80006c6:	2140      	movs	r1, #64	; 0x40
 80006c8:	430a      	orrs	r2, r1
 80006ca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006cc:	2000      	movs	r0, #0
 80006ce:	f000 f811 	bl	80006f4 <HAL_InitTick>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d003      	beq.n	80006de <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
 80006dc:	e001      	b.n	80006e2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006de:	f7ff ff81 	bl	80005e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006e2:	1dfb      	adds	r3, r7, #7
 80006e4:	781b      	ldrb	r3, [r3, #0]
}
 80006e6:	0018      	movs	r0, r3
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b002      	add	sp, #8
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	40022000 	.word	0x40022000

080006f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <HAL_InitTick+0x5c>)
 80006fe:	681c      	ldr	r4, [r3, #0]
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <HAL_InitTick+0x60>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	0019      	movs	r1, r3
 8000706:	23fa      	movs	r3, #250	; 0xfa
 8000708:	0098      	lsls	r0, r3, #2
 800070a:	f7ff fcfd 	bl	8000108 <__udivsi3>
 800070e:	0003      	movs	r3, r0
 8000710:	0019      	movs	r1, r3
 8000712:	0020      	movs	r0, r4
 8000714:	f7ff fcf8 	bl	8000108 <__udivsi3>
 8000718:	0003      	movs	r3, r0
 800071a:	0018      	movs	r0, r3
 800071c:	f000 f90b 	bl	8000936 <HAL_SYSTICK_Config>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d001      	beq.n	8000728 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000724:	2301      	movs	r3, #1
 8000726:	e00f      	b.n	8000748 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b03      	cmp	r3, #3
 800072c:	d80b      	bhi.n	8000746 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800072e:	6879      	ldr	r1, [r7, #4]
 8000730:	2301      	movs	r3, #1
 8000732:	425b      	negs	r3, r3
 8000734:	2200      	movs	r2, #0
 8000736:	0018      	movs	r0, r3
 8000738:	f000 f8d8 	bl	80008ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_InitTick+0x64>)
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000742:	2300      	movs	r3, #0
 8000744:	e000      	b.n	8000748 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
}
 8000748:	0018      	movs	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	b003      	add	sp, #12
 800074e:	bd90      	pop	{r4, r7, pc}
 8000750:	20000400 	.word	0x20000400
 8000754:	20000408 	.word	0x20000408
 8000758:	20000404 	.word	0x20000404

0800075c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_IncTick+0x1c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	001a      	movs	r2, r3
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_IncTick+0x20>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	18d2      	adds	r2, r2, r3
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <HAL_IncTick+0x20>)
 800076e:	601a      	str	r2, [r3, #0]
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	20000408 	.word	0x20000408
 800077c:	2000053c 	.word	0x2000053c

08000780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  return uwTick;
 8000784:	4b02      	ldr	r3, [pc, #8]	; (8000790 <HAL_GetTick+0x10>)
 8000786:	681b      	ldr	r3, [r3, #0]
}
 8000788:	0018      	movs	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	2000053c 	.word	0x2000053c

08000794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	0002      	movs	r2, r0
 800079c:	1dfb      	adds	r3, r7, #7
 800079e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b7f      	cmp	r3, #127	; 0x7f
 80007a6:	d809      	bhi.n	80007bc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	001a      	movs	r2, r3
 80007ae:	231f      	movs	r3, #31
 80007b0:	401a      	ands	r2, r3
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <__NVIC_EnableIRQ+0x30>)
 80007b4:	2101      	movs	r1, #1
 80007b6:	4091      	lsls	r1, r2
 80007b8:	000a      	movs	r2, r1
 80007ba:	601a      	str	r2, [r3, #0]
  }
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b002      	add	sp, #8
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	e000e100 	.word	0xe000e100

080007c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	0002      	movs	r2, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007d6:	1dfb      	adds	r3, r7, #7
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b7f      	cmp	r3, #127	; 0x7f
 80007dc:	d828      	bhi.n	8000830 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007de:	4a2f      	ldr	r2, [pc, #188]	; (800089c <__NVIC_SetPriority+0xd4>)
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	089b      	lsrs	r3, r3, #2
 80007e8:	33c0      	adds	r3, #192	; 0xc0
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	589b      	ldr	r3, [r3, r2]
 80007ee:	1dfa      	adds	r2, r7, #7
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	0011      	movs	r1, r2
 80007f4:	2203      	movs	r2, #3
 80007f6:	400a      	ands	r2, r1
 80007f8:	00d2      	lsls	r2, r2, #3
 80007fa:	21ff      	movs	r1, #255	; 0xff
 80007fc:	4091      	lsls	r1, r2
 80007fe:	000a      	movs	r2, r1
 8000800:	43d2      	mvns	r2, r2
 8000802:	401a      	ands	r2, r3
 8000804:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	019b      	lsls	r3, r3, #6
 800080a:	22ff      	movs	r2, #255	; 0xff
 800080c:	401a      	ands	r2, r3
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	0018      	movs	r0, r3
 8000814:	2303      	movs	r3, #3
 8000816:	4003      	ands	r3, r0
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800081c:	481f      	ldr	r0, [pc, #124]	; (800089c <__NVIC_SetPriority+0xd4>)
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b25b      	sxtb	r3, r3
 8000824:	089b      	lsrs	r3, r3, #2
 8000826:	430a      	orrs	r2, r1
 8000828:	33c0      	adds	r3, #192	; 0xc0
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800082e:	e031      	b.n	8000894 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <__NVIC_SetPriority+0xd8>)
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	0019      	movs	r1, r3
 8000838:	230f      	movs	r3, #15
 800083a:	400b      	ands	r3, r1
 800083c:	3b08      	subs	r3, #8
 800083e:	089b      	lsrs	r3, r3, #2
 8000840:	3306      	adds	r3, #6
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	18d3      	adds	r3, r2, r3
 8000846:	3304      	adds	r3, #4
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	1dfa      	adds	r2, r7, #7
 800084c:	7812      	ldrb	r2, [r2, #0]
 800084e:	0011      	movs	r1, r2
 8000850:	2203      	movs	r2, #3
 8000852:	400a      	ands	r2, r1
 8000854:	00d2      	lsls	r2, r2, #3
 8000856:	21ff      	movs	r1, #255	; 0xff
 8000858:	4091      	lsls	r1, r2
 800085a:	000a      	movs	r2, r1
 800085c:	43d2      	mvns	r2, r2
 800085e:	401a      	ands	r2, r3
 8000860:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	019b      	lsls	r3, r3, #6
 8000866:	22ff      	movs	r2, #255	; 0xff
 8000868:	401a      	ands	r2, r3
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	0018      	movs	r0, r3
 8000870:	2303      	movs	r3, #3
 8000872:	4003      	ands	r3, r0
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000878:	4809      	ldr	r0, [pc, #36]	; (80008a0 <__NVIC_SetPriority+0xd8>)
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	001c      	movs	r4, r3
 8000880:	230f      	movs	r3, #15
 8000882:	4023      	ands	r3, r4
 8000884:	3b08      	subs	r3, #8
 8000886:	089b      	lsrs	r3, r3, #2
 8000888:	430a      	orrs	r2, r1
 800088a:	3306      	adds	r3, #6
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	18c3      	adds	r3, r0, r3
 8000890:	3304      	adds	r3, #4
 8000892:	601a      	str	r2, [r3, #0]
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b003      	add	sp, #12
 800089a:	bd90      	pop	{r4, r7, pc}
 800089c:	e000e100 	.word	0xe000e100
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	1e5a      	subs	r2, r3, #1
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	045b      	lsls	r3, r3, #17
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d301      	bcc.n	80008bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008b8:	2301      	movs	r3, #1
 80008ba:	e010      	b.n	80008de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <SysTick_Config+0x44>)
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	3a01      	subs	r2, #1
 80008c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c4:	2301      	movs	r3, #1
 80008c6:	425b      	negs	r3, r3
 80008c8:	2103      	movs	r1, #3
 80008ca:	0018      	movs	r0, r3
 80008cc:	f7ff ff7c 	bl	80007c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <SysTick_Config+0x44>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <SysTick_Config+0x44>)
 80008d8:	2207      	movs	r2, #7
 80008da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008dc:	2300      	movs	r3, #0
}
 80008de:	0018      	movs	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	e000e010 	.word	0xe000e010

080008ec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	210f      	movs	r1, #15
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	1c02      	adds	r2, r0, #0
 80008fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	187b      	adds	r3, r7, r1
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b25b      	sxtb	r3, r3
 8000906:	0011      	movs	r1, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f7ff ff5d 	bl	80007c8 <__NVIC_SetPriority>
}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	b004      	add	sp, #16
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	0002      	movs	r2, r0
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b25b      	sxtb	r3, r3
 8000928:	0018      	movs	r0, r3
 800092a:	f7ff ff33 	bl	8000794 <__NVIC_EnableIRQ>
}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b002      	add	sp, #8
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff ffaf 	bl	80008a4 <SysTick_Config>
 8000946:	0003      	movs	r3, r0
}
 8000948:	0018      	movs	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	b002      	add	sp, #8
 800094e:	bd80      	pop	{r7, pc}

08000950 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000952:	b08b      	sub	sp, #44	; 0x2c
 8000954:	af06      	add	r7, sp, #24
 8000956:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d101      	bne.n	8000962 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e0f0      	b.n	8000b44 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a79      	ldr	r2, [pc, #484]	; (8000b4c <HAL_PCD_Init+0x1fc>)
 8000966:	5c9b      	ldrb	r3, [r3, r2]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d108      	bne.n	8000980 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	23aa      	movs	r3, #170	; 0xaa
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	2100      	movs	r1, #0
 8000976:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	0018      	movs	r0, r3
 800097c:	f007 fd10 	bl	80083a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a72      	ldr	r2, [pc, #456]	; (8000b4c <HAL_PCD_Init+0x1fc>)
 8000984:	2103      	movs	r1, #3
 8000986:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	0018      	movs	r0, r3
 800098e:	f002 fd93 	bl	80034b8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000992:	230f      	movs	r3, #15
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	e049      	b.n	8000a30 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800099c:	200f      	movs	r0, #15
 800099e:	183b      	adds	r3, r7, r0
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	1c5a      	adds	r2, r3, #1
 80009a6:	0013      	movs	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	189b      	adds	r3, r3, r2
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	18cb      	adds	r3, r1, r3
 80009b0:	3301      	adds	r3, #1
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80009b6:	183b      	adds	r3, r7, r0
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	0013      	movs	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	189b      	adds	r3, r3, r2
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	183a      	adds	r2, r7, r0
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80009cc:	183b      	adds	r3, r7, r0
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	6879      	ldr	r1, [r7, #4]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	0013      	movs	r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	189b      	adds	r3, r3, r2
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	18cb      	adds	r3, r1, r3
 80009de:	3303      	adds	r3, #3
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80009e4:	183b      	adds	r3, r7, r0
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	6879      	ldr	r1, [r7, #4]
 80009ea:	0013      	movs	r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	189b      	adds	r3, r3, r2
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	18cb      	adds	r3, r1, r3
 80009f4:	3338      	adds	r3, #56	; 0x38
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80009fa:	183b      	adds	r3, r7, r0
 80009fc:	781a      	ldrb	r2, [r3, #0]
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	0013      	movs	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	189b      	adds	r3, r3, r2
 8000a06:	00db      	lsls	r3, r3, #3
 8000a08:	18cb      	adds	r3, r1, r3
 8000a0a:	333c      	adds	r3, #60	; 0x3c
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000a10:	183b      	adds	r3, r7, r0
 8000a12:	781a      	ldrb	r2, [r3, #0]
 8000a14:	6879      	ldr	r1, [r7, #4]
 8000a16:	0013      	movs	r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	189b      	adds	r3, r3, r2
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	18cb      	adds	r3, r1, r3
 8000a20:	3340      	adds	r3, #64	; 0x40
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a26:	183b      	adds	r3, r7, r0
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	183b      	adds	r3, r7, r0
 8000a2c:	3201      	adds	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
 8000a30:	210f      	movs	r1, #15
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d3ae      	bcc.n	800099c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	e056      	b.n	8000af4 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000a46:	240f      	movs	r4, #15
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	236a      	movs	r3, #106	; 0x6a
 8000a50:	33ff      	adds	r3, #255	; 0xff
 8000a52:	0019      	movs	r1, r3
 8000a54:	0013      	movs	r3, r2
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	189b      	adds	r3, r3, r2
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	18c3      	adds	r3, r0, r3
 8000a5e:	185b      	adds	r3, r3, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	781a      	ldrb	r2, [r3, #0]
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	23b4      	movs	r3, #180	; 0xb4
 8000a6c:	0059      	lsls	r1, r3, #1
 8000a6e:	0013      	movs	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	189b      	adds	r3, r3, r2
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	18c3      	adds	r3, r0, r3
 8000a78:	185b      	adds	r3, r3, r1
 8000a7a:	193a      	adds	r2, r7, r4
 8000a7c:	7812      	ldrb	r2, [r2, #0]
 8000a7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	236c      	movs	r3, #108	; 0x6c
 8000a88:	33ff      	adds	r3, #255	; 0xff
 8000a8a:	0019      	movs	r1, r3
 8000a8c:	0013      	movs	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	189b      	adds	r3, r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	18c3      	adds	r3, r0, r3
 8000a96:	185b      	adds	r3, r3, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	781a      	ldrb	r2, [r3, #0]
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	23bc      	movs	r3, #188	; 0xbc
 8000aa4:	0059      	lsls	r1, r3, #1
 8000aa6:	0013      	movs	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	189b      	adds	r3, r3, r2
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	18c3      	adds	r3, r0, r3
 8000ab0:	185b      	adds	r3, r3, r1
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	23be      	movs	r3, #190	; 0xbe
 8000abe:	0059      	lsls	r1, r3, #1
 8000ac0:	0013      	movs	r3, r2
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	189b      	adds	r3, r3, r2
 8000ac6:	00db      	lsls	r3, r3, #3
 8000ac8:	18c3      	adds	r3, r0, r3
 8000aca:	185b      	adds	r3, r3, r1
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	23c0      	movs	r3, #192	; 0xc0
 8000ad8:	0059      	lsls	r1, r3, #1
 8000ada:	0013      	movs	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	189b      	adds	r3, r3, r2
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	18c3      	adds	r3, r0, r3
 8000ae4:	185b      	adds	r3, r3, r1
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	3201      	adds	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
 8000af4:	230f      	movs	r3, #15
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d3a1      	bcc.n	8000a46 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6818      	ldr	r0, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	466a      	mov	r2, sp
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	3210      	adds	r2, #16
 8000b10:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000b12:	c170      	stmia	r1!, {r4, r5, r6}
 8000b14:	ca30      	ldmia	r2!, {r4, r5}
 8000b16:	c130      	stmia	r1!, {r4, r5}
 8000b18:	6859      	ldr	r1, [r3, #4]
 8000b1a:	689a      	ldr	r2, [r3, #8]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	f002 fce5 	bl	80034ec <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2224      	movs	r2, #36	; 0x24
 8000b26:	2100      	movs	r1, #0
 8000b28:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_PCD_Init+0x1fc>)
 8000b2e:	2101      	movs	r1, #1
 8000b30:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d103      	bne.n	8000b42 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f001 fd2f 	bl	80025a0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	0018      	movs	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b005      	add	sp, #20
 8000b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b4c:	000002a9 	.word	0x000002a9

08000b50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	23aa      	movs	r3, #170	; 0xaa
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	5cd3      	ldrb	r3, [r2, r3]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d101      	bne.n	8000b68 <HAL_PCD_Start+0x18>
 8000b64:	2302      	movs	r3, #2
 8000b66:	e014      	b.n	8000b92 <HAL_PCD_Start+0x42>
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	23aa      	movs	r3, #170	; 0xaa
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	2101      	movs	r1, #1
 8000b70:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	0018      	movs	r0, r3
 8000b78:	f002 fc88 	bl	800348c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	0018      	movs	r0, r3
 8000b82:	f004 fc8b 	bl	800549c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	23aa      	movs	r3, #170	; 0xaa
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f004 fc8d 	bl	80054c8 <USB_ReadInterrupts>
 8000bae:	0003      	movs	r3, r0
 8000bb0:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	021b      	lsls	r3, r3, #8
 8000bb8:	4013      	ands	r3, r2
 8000bba:	d004      	beq.n	8000bc6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 fb6e 	bl	80012a0 <PCD_EP_ISR_Handler>

    return;
 8000bc4:	e11d      	b.n	8000e02 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	4013      	ands	r3, r2
 8000bce:	d015      	beq.n	8000bfc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2244      	movs	r2, #68	; 0x44
 8000bd6:	5a9b      	ldrh	r3, [r3, r2]
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	498a      	ldr	r1, [pc, #552]	; (8000e08 <HAL_PCD_IRQHandler+0x26c>)
 8000be0:	400a      	ands	r2, r1
 8000be2:	b291      	uxth	r1, r2
 8000be4:	2244      	movs	r2, #68	; 0x44
 8000be6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	0018      	movs	r0, r3
 8000bec:	f007 fc5b 	bl	80084a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f000 f915 	bl	8000e24 <HAL_PCD_SetAddress>

    return;
 8000bfa:	e102      	b.n	8000e02 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	2380      	movs	r3, #128	; 0x80
 8000c00:	01db      	lsls	r3, r3, #7
 8000c02:	4013      	ands	r3, r2
 8000c04:	d00c      	beq.n	8000c20 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2244      	movs	r2, #68	; 0x44
 8000c0c:	5a9b      	ldrh	r3, [r3, r2]
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	497d      	ldr	r1, [pc, #500]	; (8000e0c <HAL_PCD_IRQHandler+0x270>)
 8000c16:	400a      	ands	r2, r1
 8000c18:	b291      	uxth	r1, r2
 8000c1a:	2244      	movs	r2, #68	; 0x44
 8000c1c:	5299      	strh	r1, [r3, r2]

    return;
 8000c1e:	e0f0      	b.n	8000e02 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	019b      	lsls	r3, r3, #6
 8000c26:	4013      	ands	r3, r2
 8000c28:	d00c      	beq.n	8000c44 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2244      	movs	r2, #68	; 0x44
 8000c30:	5a9b      	ldrh	r3, [r3, r2]
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4975      	ldr	r1, [pc, #468]	; (8000e10 <HAL_PCD_IRQHandler+0x274>)
 8000c3a:	400a      	ands	r2, r1
 8000c3c:	b291      	uxth	r1, r2
 8000c3e:	2244      	movs	r2, #68	; 0x44
 8000c40:	5299      	strh	r1, [r3, r2]

    return;
 8000c42:	e0de      	b.n	8000e02 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	015b      	lsls	r3, r3, #5
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	d038      	beq.n	8000cc0 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2240      	movs	r2, #64	; 0x40
 8000c54:	5a9b      	ldrh	r3, [r3, r2]
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	438a      	bics	r2, r1
 8000c60:	b291      	uxth	r1, r2
 8000c62:	2240      	movs	r2, #64	; 0x40
 8000c64:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2240      	movs	r2, #64	; 0x40
 8000c6c:	5a9b      	ldrh	r3, [r3, r2]
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2108      	movs	r1, #8
 8000c76:	438a      	bics	r2, r1
 8000c78:	b291      	uxth	r1, r2
 8000c7a:	2240      	movs	r2, #64	; 0x40
 8000c7c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	23b8      	movs	r3, #184	; 0xb8
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	5cd3      	ldrb	r3, [r2, r3]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d109      	bne.n	8000c9e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	23b8      	movs	r3, #184	; 0xb8
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	2100      	movs	r1, #0
 8000c92:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2100      	movs	r1, #0
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f001 fcab 	bl	80025f4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f007 fc41 	bl	8008528 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2244      	movs	r2, #68	; 0x44
 8000cac:	5a9b      	ldrh	r3, [r3, r2]
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4957      	ldr	r1, [pc, #348]	; (8000e14 <HAL_PCD_IRQHandler+0x278>)
 8000cb6:	400a      	ands	r2, r1
 8000cb8:	b291      	uxth	r1, r2
 8000cba:	2244      	movs	r2, #68	; 0x44
 8000cbc:	5299      	strh	r1, [r3, r2]

    return;
 8000cbe:	e0a0      	b.n	8000e02 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	011b      	lsls	r3, r3, #4
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	d028      	beq.n	8000d1c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2240      	movs	r2, #64	; 0x40
 8000cd0:	5a9b      	ldrh	r3, [r3, r2]
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2108      	movs	r1, #8
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	b291      	uxth	r1, r2
 8000cde:	2240      	movs	r2, #64	; 0x40
 8000ce0:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2244      	movs	r2, #68	; 0x44
 8000ce8:	5a9b      	ldrh	r3, [r3, r2]
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4949      	ldr	r1, [pc, #292]	; (8000e18 <HAL_PCD_IRQHandler+0x27c>)
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	b291      	uxth	r1, r2
 8000cf6:	2244      	movs	r2, #68	; 0x44
 8000cf8:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2240      	movs	r2, #64	; 0x40
 8000d00:	5a9b      	ldrh	r3, [r3, r2]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2104      	movs	r1, #4
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	b291      	uxth	r1, r2
 8000d0e:	2240      	movs	r2, #64	; 0x40
 8000d10:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	0018      	movs	r0, r3
 8000d16:	f007 fbeb 	bl	80084f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000d1a:	e072      	b.n	8000e02 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	4013      	ands	r3, r2
 8000d22:	d046      	beq.n	8000db2 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2244      	movs	r2, #68	; 0x44
 8000d2a:	5a9b      	ldrh	r3, [r3, r2]
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2180      	movs	r1, #128	; 0x80
 8000d34:	438a      	bics	r2, r1
 8000d36:	b291      	uxth	r1, r2
 8000d38:	2244      	movs	r2, #68	; 0x44
 8000d3a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	23b8      	movs	r3, #184	; 0xb8
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	5cd3      	ldrb	r3, [r2, r3]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d12f      	bne.n	8000da8 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2240      	movs	r2, #64	; 0x40
 8000d4e:	5a9b      	ldrh	r3, [r3, r2]
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2104      	movs	r1, #4
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	b291      	uxth	r1, r2
 8000d5c:	2240      	movs	r2, #64	; 0x40
 8000d5e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2240      	movs	r2, #64	; 0x40
 8000d66:	5a9b      	ldrh	r3, [r3, r2]
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2108      	movs	r1, #8
 8000d70:	430a      	orrs	r2, r1
 8000d72:	b291      	uxth	r1, r2
 8000d74:	2240      	movs	r2, #64	; 0x40
 8000d76:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	23b8      	movs	r3, #184	; 0xb8
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	2101      	movs	r1, #1
 8000d80:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2254      	movs	r2, #84	; 0x54
 8000d88:	5a9b      	ldrh	r3, [r3, r2]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	223c      	movs	r2, #60	; 0x3c
 8000d90:	4013      	ands	r3, r2
 8000d92:	0019      	movs	r1, r3
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	23b9      	movs	r3, #185	; 0xb9
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2101      	movs	r1, #1
 8000da0:	0018      	movs	r0, r3
 8000da2:	f001 fc27 	bl	80025f4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000da6:	e02c      	b.n	8000e02 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	0018      	movs	r0, r3
 8000dac:	f007 fba0 	bl	80084f0 <HAL_PCD_SuspendCallback>
    return;
 8000db0:	e027      	b.n	8000e02 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4013      	ands	r3, r2
 8000dba:	d010      	beq.n	8000dde <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2244      	movs	r2, #68	; 0x44
 8000dc2:	5a9b      	ldrh	r3, [r3, r2]
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4914      	ldr	r1, [pc, #80]	; (8000e1c <HAL_PCD_IRQHandler+0x280>)
 8000dcc:	400a      	ands	r2, r1
 8000dce:	b291      	uxth	r1, r2
 8000dd0:	2244      	movs	r2, #68	; 0x44
 8000dd2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f007 fb56 	bl	8008488 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ddc:	e011      	b.n	8000e02 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4013      	ands	r3, r2
 8000de6:	d00c      	beq.n	8000e02 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2244      	movs	r2, #68	; 0x44
 8000dee:	5a9b      	ldrh	r3, [r3, r2]
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	490a      	ldr	r1, [pc, #40]	; (8000e20 <HAL_PCD_IRQHandler+0x284>)
 8000df8:	400a      	ands	r2, r1
 8000dfa:	b291      	uxth	r1, r2
 8000dfc:	2244      	movs	r2, #68	; 0x44
 8000dfe:	5299      	strh	r1, [r3, r2]

    return;
 8000e00:	46c0      	nop			; (mov r8, r8)
  }
}
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b004      	add	sp, #16
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	fffffbff 	.word	0xfffffbff
 8000e0c:	ffffbfff 	.word	0xffffbfff
 8000e10:	ffffdfff 	.word	0xffffdfff
 8000e14:	ffffefff 	.word	0xffffefff
 8000e18:	fffff7ff 	.word	0xfffff7ff
 8000e1c:	fffffdff 	.word	0xfffffdff
 8000e20:	fffffeff 	.word	0xfffffeff

08000e24 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	000a      	movs	r2, r1
 8000e2e:	1cfb      	adds	r3, r7, #3
 8000e30:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	23aa      	movs	r3, #170	; 0xaa
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	5cd3      	ldrb	r3, [r2, r3]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d101      	bne.n	8000e42 <HAL_PCD_SetAddress+0x1e>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e017      	b.n	8000e72 <HAL_PCD_SetAddress+0x4e>
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	23aa      	movs	r3, #170	; 0xaa
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	2101      	movs	r1, #1
 8000e4a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	1cfa      	adds	r2, r7, #3
 8000e50:	2124      	movs	r1, #36	; 0x24
 8000e52:	7812      	ldrb	r2, [r2, #0]
 8000e54:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	1cfb      	adds	r3, r7, #3
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	0019      	movs	r1, r3
 8000e60:	0010      	movs	r0, r2
 8000e62:	f004 fb07 	bl	8005474 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	23aa      	movs	r3, #170	; 0xaa
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	0018      	movs	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b002      	add	sp, #8
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000e7a:	b590      	push	{r4, r7, lr}
 8000e7c:	b085      	sub	sp, #20
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	000c      	movs	r4, r1
 8000e84:	0010      	movs	r0, r2
 8000e86:	0019      	movs	r1, r3
 8000e88:	1cfb      	adds	r3, r7, #3
 8000e8a:	1c22      	adds	r2, r4, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	003b      	movs	r3, r7
 8000e90:	1c02      	adds	r2, r0, #0
 8000e92:	801a      	strh	r2, [r3, #0]
 8000e94:	1cbb      	adds	r3, r7, #2
 8000e96:	1c0a      	adds	r2, r1, #0
 8000e98:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000e9a:	230b      	movs	r3, #11
 8000e9c:	18fb      	adds	r3, r7, r3
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000ea2:	1cfb      	adds	r3, r7, #3
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	da0f      	bge.n	8000ecc <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000eac:	1cfb      	adds	r3, r7, #3
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	1c5a      	adds	r2, r3, #1
 8000eb6:	0013      	movs	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	189b      	adds	r3, r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	18d3      	adds	r3, r2, r3
 8000ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	705a      	strb	r2, [r3, #1]
 8000eca:	e00f      	b.n	8000eec <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000ecc:	1cfb      	adds	r3, r7, #3
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	189b      	adds	r3, r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	3369      	adds	r3, #105	; 0x69
 8000ede:	33ff      	adds	r3, #255	; 0xff
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	18d3      	adds	r3, r2, r3
 8000ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000eec:	1cfb      	adds	r3, r7, #3
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000efa:	003b      	movs	r3, r7
 8000efc:	881a      	ldrh	r2, [r3, #0]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	1cba      	adds	r2, r7, #2
 8000f06:	7812      	ldrb	r2, [r2, #0]
 8000f08:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000f0a:	1cbb      	adds	r3, r7, #2
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d102      	bne.n	8000f18 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	23aa      	movs	r3, #170	; 0xaa
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	5cd3      	ldrb	r3, [r2, r3]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d101      	bne.n	8000f28 <HAL_PCD_EP_Open+0xae>
 8000f24:	2302      	movs	r3, #2
 8000f26:	e013      	b.n	8000f50 <HAL_PCD_EP_Open+0xd6>
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	23aa      	movs	r3, #170	; 0xaa
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	2101      	movs	r1, #1
 8000f30:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	0011      	movs	r1, r2
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f002 fafe 	bl	800353c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	23aa      	movs	r3, #170	; 0xaa
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	2100      	movs	r1, #0
 8000f48:	54d1      	strb	r1, [r2, r3]

  return ret;
 8000f4a:	230b      	movs	r3, #11
 8000f4c:	18fb      	adds	r3, r7, r3
 8000f4e:	781b      	ldrb	r3, [r3, #0]
}
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b005      	add	sp, #20
 8000f56:	bd90      	pop	{r4, r7, pc}

08000f58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	000a      	movs	r2, r1
 8000f62:	1cfb      	adds	r3, r7, #3
 8000f64:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f66:	1cfb      	adds	r3, r7, #3
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	da0f      	bge.n	8000f90 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f70:	1cfb      	adds	r3, r7, #3
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2207      	movs	r2, #7
 8000f76:	4013      	ands	r3, r2
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	0013      	movs	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	189b      	adds	r3, r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	18d3      	adds	r3, r2, r3
 8000f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	705a      	strb	r2, [r3, #1]
 8000f8e:	e00f      	b.n	8000fb0 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f90:	1cfb      	adds	r3, r7, #3
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2207      	movs	r2, #7
 8000f96:	401a      	ands	r2, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	189b      	adds	r3, r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	3369      	adds	r3, #105	; 0x69
 8000fa2:	33ff      	adds	r3, #255	; 0xff
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	18d3      	adds	r3, r2, r3
 8000fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2200      	movs	r2, #0
 8000fae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000fb0:	1cfb      	adds	r3, r7, #3
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	23aa      	movs	r3, #170	; 0xaa
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	5cd3      	ldrb	r3, [r2, r3]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d101      	bne.n	8000fce <HAL_PCD_EP_Close+0x76>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e011      	b.n	8000ff2 <HAL_PCD_EP_Close+0x9a>
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	23aa      	movs	r3, #170	; 0xaa
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	0011      	movs	r1, r2
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f002 fe4d 	bl	8003c80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	23aa      	movs	r3, #170	; 0xaa
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	2100      	movs	r1, #0
 8000fee:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b004      	add	sp, #16
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	200b      	movs	r0, #11
 8001008:	183b      	adds	r3, r7, r0
 800100a:	1c0a      	adds	r2, r1, #0
 800100c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800100e:	0001      	movs	r1, r0
 8001010:	187b      	adds	r3, r7, r1
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2207      	movs	r2, #7
 8001016:	401a      	ands	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	189b      	adds	r3, r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	3369      	adds	r3, #105	; 0x69
 8001022:	33ff      	adds	r3, #255	; 0xff
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	18d3      	adds	r3, r2, r3
 8001028:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2200      	movs	r2, #0
 800103a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	2200      	movs	r2, #0
 8001040:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2207      	movs	r2, #7
 8001048:	4013      	ands	r3, r2
 800104a:	b2da      	uxtb	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	0011      	movs	r1, r2
 8001058:	0018      	movs	r0, r3
 800105a:	f002 ffd1 	bl	8004000 <USB_EPStartXfer>

  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	0018      	movs	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	b006      	add	sp, #24
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	000a      	movs	r2, r1
 8001072:	1cfb      	adds	r3, r7, #3
 8001074:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001076:	1cfb      	adds	r3, r7, #3
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2207      	movs	r2, #7
 800107c:	401a      	ands	r2, r3
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	23c2      	movs	r3, #194	; 0xc2
 8001082:	0059      	lsls	r1, r3, #1
 8001084:	0013      	movs	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	189b      	adds	r3, r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	18c3      	adds	r3, r0, r3
 800108e:	185b      	adds	r3, r3, r1
 8001090:	681b      	ldr	r3, [r3, #0]
}
 8001092:	0018      	movs	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	b002      	add	sp, #8
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	200b      	movs	r0, #11
 80010a8:	183b      	adds	r3, r7, r0
 80010aa:	1c0a      	adds	r2, r1, #0
 80010ac:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010ae:	183b      	adds	r3, r7, r0
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2207      	movs	r2, #7
 80010b4:	4013      	ands	r3, r2
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	0013      	movs	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	18d3      	adds	r3, r2, r3
 80010c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2224      	movs	r2, #36	; 0x24
 80010d6:	2101      	movs	r1, #1
 80010d8:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2201      	movs	r2, #1
 80010ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010ec:	183b      	adds	r3, r7, r0
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2207      	movs	r2, #7
 80010f2:	4013      	ands	r3, r2
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	0011      	movs	r1, r2
 8001102:	0018      	movs	r0, r3
 8001104:	f002 ff7c 	bl	8004000 <USB_EPStartXfer>

  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	b006      	add	sp, #24
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	000a      	movs	r2, r1
 800111c:	1cfb      	adds	r3, r7, #3
 800111e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001120:	1cfb      	adds	r3, r7, #3
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2207      	movs	r2, #7
 8001126:	401a      	ands	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	d901      	bls.n	8001134 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e046      	b.n	80011c2 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001134:	1cfb      	adds	r3, r7, #3
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b25b      	sxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	da0f      	bge.n	800115e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800113e:	1cfb      	adds	r3, r7, #3
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2207      	movs	r2, #7
 8001144:	4013      	ands	r3, r2
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	0013      	movs	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	189b      	adds	r3, r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	18d3      	adds	r3, r2, r3
 8001154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2201      	movs	r2, #1
 800115a:	705a      	strb	r2, [r3, #1]
 800115c:	e00d      	b.n	800117a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800115e:	1cfb      	adds	r3, r7, #3
 8001160:	781a      	ldrb	r2, [r3, #0]
 8001162:	0013      	movs	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	189b      	adds	r3, r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	3369      	adds	r3, #105	; 0x69
 800116c:	33ff      	adds	r3, #255	; 0xff
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	18d3      	adds	r3, r2, r3
 8001172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2200      	movs	r2, #0
 8001178:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2201      	movs	r2, #1
 800117e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001180:	1cfb      	adds	r3, r7, #3
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2207      	movs	r2, #7
 8001186:	4013      	ands	r3, r2
 8001188:	b2da      	uxtb	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	23aa      	movs	r3, #170	; 0xaa
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	5cd3      	ldrb	r3, [r2, r3]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d101      	bne.n	800119e <HAL_PCD_EP_SetStall+0x8c>
 800119a:	2302      	movs	r3, #2
 800119c:	e011      	b.n	80011c2 <HAL_PCD_EP_SetStall+0xb0>
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	23aa      	movs	r3, #170	; 0xaa
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	2101      	movs	r1, #1
 80011a6:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	0011      	movs	r1, r2
 80011b0:	0018      	movs	r0, r3
 80011b2:	f004 f85d 	bl	8005270 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	23aa      	movs	r3, #170	; 0xaa
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	2100      	movs	r1, #0
 80011be:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b004      	add	sp, #16
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	000a      	movs	r2, r1
 80011d4:	1cfb      	adds	r3, r7, #3
 80011d6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80011d8:	1cfb      	adds	r3, r7, #3
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	220f      	movs	r2, #15
 80011de:	401a      	ands	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d901      	bls.n	80011ec <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e048      	b.n	800127e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80011ec:	1cfb      	adds	r3, r7, #3
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	da0f      	bge.n	8001216 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011f6:	1cfb      	adds	r3, r7, #3
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2207      	movs	r2, #7
 80011fc:	4013      	ands	r3, r2
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	0013      	movs	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	189b      	adds	r3, r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	18d3      	adds	r3, r2, r3
 800120c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2201      	movs	r2, #1
 8001212:	705a      	strb	r2, [r3, #1]
 8001214:	e00f      	b.n	8001236 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001216:	1cfb      	adds	r3, r7, #3
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2207      	movs	r2, #7
 800121c:	401a      	ands	r2, r3
 800121e:	0013      	movs	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	189b      	adds	r3, r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	3369      	adds	r3, #105	; 0x69
 8001228:	33ff      	adds	r3, #255	; 0xff
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	18d3      	adds	r3, r2, r3
 800122e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2200      	movs	r2, #0
 800123a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800123c:	1cfb      	adds	r3, r7, #3
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2207      	movs	r2, #7
 8001242:	4013      	ands	r3, r2
 8001244:	b2da      	uxtb	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	23aa      	movs	r3, #170	; 0xaa
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	5cd3      	ldrb	r3, [r2, r3]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d101      	bne.n	800125a <HAL_PCD_EP_ClrStall+0x90>
 8001256:	2302      	movs	r3, #2
 8001258:	e011      	b.n	800127e <HAL_PCD_EP_ClrStall+0xb4>
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	23aa      	movs	r3, #170	; 0xaa
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	2101      	movs	r1, #1
 8001262:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	0011      	movs	r1, r2
 800126c:	0018      	movs	r0, r3
 800126e:	f004 f84f 	bl	8005310 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	23aa      	movs	r3, #170	; 0xaa
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	2100      	movs	r1, #0
 800127a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	0018      	movs	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	b004      	add	sp, #16
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	000a      	movs	r2, r1
 8001290:	1cfb      	adds	r3, r7, #3
 8001292:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  UNUSED(ep_addr);

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b096      	sub	sp, #88	; 0x58
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80012a8:	f000 fbec 	bl	8001a84 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	204e      	movs	r0, #78	; 0x4e
 80012b2:	183b      	adds	r3, r7, r0
 80012b4:	2144      	movs	r1, #68	; 0x44
 80012b6:	5a52      	ldrh	r2, [r2, r1]
 80012b8:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80012ba:	183b      	adds	r3, r7, r0
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	244d      	movs	r4, #77	; 0x4d
 80012c2:	193b      	adds	r3, r7, r4
 80012c4:	210f      	movs	r1, #15
 80012c6:	400a      	ands	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80012ca:	193b      	adds	r3, r7, r4
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d000      	beq.n	80012d4 <PCD_EP_ISR_Handler+0x34>
 80012d2:	e18f      	b.n	80015f4 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80012d4:	183b      	adds	r3, r7, r0
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	2210      	movs	r2, #16
 80012da:	4013      	ands	r3, r2
 80012dc:	d155      	bne.n	800138a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	200e      	movs	r0, #14
 80012e8:	183b      	adds	r3, r7, r0
 80012ea:	49bb      	ldr	r1, [pc, #748]	; (80015d8 <PCD_EP_ISR_Handler+0x338>)
 80012ec:	400a      	ands	r2, r1
 80012ee:	801a      	strh	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	183a      	adds	r2, r7, r0
 80012f6:	8812      	ldrh	r2, [r2, #0]
 80012f8:	49b8      	ldr	r1, [pc, #736]	; (80015dc <PCD_EP_ISR_Handler+0x33c>)
 80012fa:	430a      	orrs	r2, r1
 80012fc:	b292      	uxth	r2, r2
 80012fe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3328      	adds	r3, #40	; 0x28
 8001304:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2250      	movs	r2, #80	; 0x50
 800130c:	5a9b      	ldrh	r3, [r3, r2]
 800130e:	b29b      	uxth	r3, r3
 8001310:	001a      	movs	r2, r3
 8001312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	18d2      	adds	r2, r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	18d3      	adds	r3, r2, r3
 8001320:	4aaf      	ldr	r2, [pc, #700]	; (80015e0 <PCD_EP_ISR_Handler+0x340>)
 8001322:	4694      	mov	ip, r2
 8001324:	4463      	add	r3, ip
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	059b      	lsls	r3, r3, #22
 800132a:	0d9a      	lsrs	r2, r3, #22
 800132c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800132e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001332:	695a      	ldr	r2, [r3, #20]
 8001334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	18d2      	adds	r2, r2, r3
 800133a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800133c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2100      	movs	r1, #0
 8001342:	0018      	movs	r0, r3
 8001344:	f007 f882 	bl	800844c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2224      	movs	r2, #36	; 0x24
 800134c:	5c9b      	ldrb	r3, [r3, r2]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <PCD_EP_ISR_Handler+0xb8>
 8001354:	f000 fb96 	bl	8001a84 <PCD_EP_ISR_Handler+0x7e4>
 8001358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <PCD_EP_ISR_Handler+0xc4>
 8001360:	f000 fb90 	bl	8001a84 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2224      	movs	r2, #36	; 0x24
 8001368:	5c9b      	ldrb	r3, [r3, r2]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2280      	movs	r2, #128	; 0x80
 800136e:	4252      	negs	r2, r2
 8001370:	4313      	orrs	r3, r2
 8001372:	b2da      	uxtb	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	b291      	uxth	r1, r2
 800137a:	224c      	movs	r2, #76	; 0x4c
 800137c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2224      	movs	r2, #36	; 0x24
 8001382:	2100      	movs	r1, #0
 8001384:	5499      	strb	r1, [r3, r2]
 8001386:	f000 fb7d 	bl	8001a84 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3369      	adds	r3, #105	; 0x69
 800138e:	33ff      	adds	r3, #255	; 0xff
 8001390:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	214a      	movs	r1, #74	; 0x4a
 8001398:	187b      	adds	r3, r7, r1
 800139a:	8812      	ldrh	r2, [r2, #0]
 800139c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	881a      	ldrh	r2, [r3, #0]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	4013      	ands	r3, r2
 80013a8:	d037      	beq.n	800141a <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2250      	movs	r2, #80	; 0x50
 80013b0:	5a9b      	ldrh	r3, [r3, r2]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	001a      	movs	r2, r3
 80013b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	18d2      	adds	r2, r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	18d3      	adds	r3, r2, r3
 80013c4:	4a87      	ldr	r2, [pc, #540]	; (80015e4 <PCD_EP_ISR_Handler+0x344>)
 80013c6:	4694      	mov	ip, r2
 80013c8:	4463      	add	r3, ip
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	059b      	lsls	r3, r3, #22
 80013ce:	0d9a      	lsrs	r2, r3, #22
 80013d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013d2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	22ac      	movs	r2, #172	; 0xac
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	1899      	adds	r1, r3, r2
 80013e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80013e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	f004 f8c4 	bl	8005576 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	2010      	movs	r0, #16
 80013f8:	183b      	adds	r3, r7, r0
 80013fa:	497b      	ldr	r1, [pc, #492]	; (80015e8 <PCD_EP_ISR_Handler+0x348>)
 80013fc:	400a      	ands	r2, r1
 80013fe:	801a      	strh	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	183a      	adds	r2, r7, r0
 8001406:	8812      	ldrh	r2, [r2, #0]
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	430a      	orrs	r2, r1
 800140c:	b292      	uxth	r2, r2
 800140e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	0018      	movs	r0, r3
 8001414:	f006 ffe4 	bl	80083e0 <HAL_PCD_SetupStageCallback>
 8001418:	e334      	b.n	8001a84 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800141a:	234a      	movs	r3, #74	; 0x4a
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	2200      	movs	r2, #0
 8001420:	5e9b      	ldrsh	r3, [r3, r2]
 8001422:	2b00      	cmp	r3, #0
 8001424:	db00      	blt.n	8001428 <PCD_EP_ISR_Handler+0x188>
 8001426:	e32d      	b.n	8001a84 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	b29a      	uxth	r2, r3
 8001430:	201e      	movs	r0, #30
 8001432:	183b      	adds	r3, r7, r0
 8001434:	496c      	ldr	r1, [pc, #432]	; (80015e8 <PCD_EP_ISR_Handler+0x348>)
 8001436:	400a      	ands	r2, r1
 8001438:	801a      	strh	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	183a      	adds	r2, r7, r0
 8001440:	8812      	ldrh	r2, [r2, #0]
 8001442:	2180      	movs	r1, #128	; 0x80
 8001444:	430a      	orrs	r2, r1
 8001446:	b292      	uxth	r2, r2
 8001448:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2250      	movs	r2, #80	; 0x50
 8001450:	5a9b      	ldrh	r3, [r3, r2]
 8001452:	b29b      	uxth	r3, r3
 8001454:	001a      	movs	r2, r3
 8001456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	18d2      	adds	r2, r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	18d3      	adds	r3, r2, r3
 8001464:	4a5f      	ldr	r2, [pc, #380]	; (80015e4 <PCD_EP_ISR_Handler+0x344>)
 8001466:	4694      	mov	ip, r2
 8001468:	4463      	add	r3, ip
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	059b      	lsls	r3, r3, #22
 800146e:	0d9a      	lsrs	r2, r3, #22
 8001470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001472:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d01a      	beq.n	80014b2 <PCD_EP_ISR_Handler+0x212>
 800147c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d016      	beq.n	80014b2 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800148a:	6959      	ldr	r1, [r3, #20]
 800148c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800148e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001492:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001494:	b29b      	uxth	r3, r3
 8001496:	f004 f86e 	bl	8005576 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800149a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	18d2      	adds	r2, r2, r3
 80014a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014a6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2100      	movs	r1, #0
 80014ac:	0018      	movs	r0, r3
 80014ae:	f006 ffac 	bl	800840a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	214a      	movs	r1, #74	; 0x4a
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	8812      	ldrh	r2, [r2, #0]
 80014bc:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	881a      	ldrh	r2, [r3, #0]
 80014c2:	2380      	movs	r3, #128	; 0x80
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	4013      	ands	r3, r2
 80014c8:	d000      	beq.n	80014cc <PCD_EP_ISR_Handler+0x22c>
 80014ca:	e2db      	b.n	8001a84 <PCD_EP_ISR_Handler+0x7e4>
 80014cc:	187b      	adds	r3, r7, r1
 80014ce:	881a      	ldrh	r2, [r3, #0]
 80014d0:	23c0      	movs	r3, #192	; 0xc0
 80014d2:	019b      	lsls	r3, r3, #6
 80014d4:	401a      	ands	r2, r3
 80014d6:	23c0      	movs	r3, #192	; 0xc0
 80014d8:	019b      	lsls	r3, r3, #6
 80014da:	429a      	cmp	r2, r3
 80014dc:	d100      	bne.n	80014e0 <PCD_EP_ISR_Handler+0x240>
 80014de:	e2d1      	b.n	8001a84 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2250      	movs	r2, #80	; 0x50
 80014ec:	5a9b      	ldrh	r3, [r3, r2]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	001a      	movs	r2, r3
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	189b      	adds	r3, r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	4a3a      	ldr	r2, [pc, #232]	; (80015e4 <PCD_EP_ISR_Handler+0x344>)
 80014fc:	4694      	mov	ip, r2
 80014fe:	4463      	add	r3, ip
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	b29b      	uxth	r3, r3
 8001508:	059b      	lsls	r3, r3, #22
 800150a:	0d9b      	lsrs	r3, r3, #22
 800150c:	b29a      	uxth	r2, r3
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	801a      	strh	r2, [r3, #0]
 8001512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2b3e      	cmp	r3, #62	; 0x3e
 8001518:	d91a      	bls.n	8001550 <PCD_EP_ISR_Handler+0x2b0>
 800151a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	647b      	str	r3, [r7, #68]	; 0x44
 8001522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	221f      	movs	r2, #31
 8001528:	4013      	ands	r3, r2
 800152a:	d102      	bne.n	8001532 <PCD_EP_ISR_Handler+0x292>
 800152c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800152e:	3b01      	subs	r3, #1
 8001530:	647b      	str	r3, [r7, #68]	; 0x44
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	b29a      	uxth	r2, r3
 8001538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800153a:	b29b      	uxth	r3, r3
 800153c:	029b      	lsls	r3, r3, #10
 800153e:	b29b      	uxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b29b      	uxth	r3, r3
 8001544:	4a25      	ldr	r2, [pc, #148]	; (80015dc <PCD_EP_ISR_Handler+0x33c>)
 8001546:	4313      	orrs	r3, r2
 8001548:	b29a      	uxth	r2, r3
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	801a      	strh	r2, [r3, #0]
 800154e:	e023      	b.n	8001598 <PCD_EP_ISR_Handler+0x2f8>
 8001550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d108      	bne.n	800156a <PCD_EP_ISR_Handler+0x2ca>
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	b29b      	uxth	r3, r3
 800155e:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <PCD_EP_ISR_Handler+0x33c>)
 8001560:	4313      	orrs	r3, r2
 8001562:	b29a      	uxth	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	801a      	strh	r2, [r3, #0]
 8001568:	e016      	b.n	8001598 <PCD_EP_ISR_Handler+0x2f8>
 800156a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	085b      	lsrs	r3, r3, #1
 8001570:	647b      	str	r3, [r7, #68]	; 0x44
 8001572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	2201      	movs	r2, #1
 8001578:	4013      	ands	r3, r2
 800157a:	d002      	beq.n	8001582 <PCD_EP_ISR_Handler+0x2e2>
 800157c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800157e:	3301      	adds	r3, #1
 8001580:	647b      	str	r3, [r7, #68]	; 0x44
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	b29a      	uxth	r2, r3
 8001588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800158a:	b29b      	uxth	r3, r3
 800158c:	029b      	lsls	r3, r3, #10
 800158e:	b29b      	uxth	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b29a      	uxth	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	b29a      	uxth	r2, r3
 80015a0:	2012      	movs	r0, #18
 80015a2:	183b      	adds	r3, r7, r0
 80015a4:	4911      	ldr	r1, [pc, #68]	; (80015ec <PCD_EP_ISR_Handler+0x34c>)
 80015a6:	400a      	ands	r2, r1
 80015a8:	801a      	strh	r2, [r3, #0]
 80015aa:	183b      	adds	r3, r7, r0
 80015ac:	183a      	adds	r2, r7, r0
 80015ae:	8812      	ldrh	r2, [r2, #0]
 80015b0:	2180      	movs	r1, #128	; 0x80
 80015b2:	0149      	lsls	r1, r1, #5
 80015b4:	404a      	eors	r2, r1
 80015b6:	801a      	strh	r2, [r3, #0]
 80015b8:	183b      	adds	r3, r7, r0
 80015ba:	183a      	adds	r2, r7, r0
 80015bc:	8812      	ldrh	r2, [r2, #0]
 80015be:	2180      	movs	r1, #128	; 0x80
 80015c0:	0189      	lsls	r1, r1, #6
 80015c2:	404a      	eors	r2, r1
 80015c4:	801a      	strh	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	183a      	adds	r2, r7, r0
 80015cc:	8812      	ldrh	r2, [r2, #0]
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <PCD_EP_ISR_Handler+0x350>)
 80015d0:	430a      	orrs	r2, r1
 80015d2:	b292      	uxth	r2, r2
 80015d4:	801a      	strh	r2, [r3, #0]
 80015d6:	e255      	b.n	8001a84 <PCD_EP_ISR_Handler+0x7e4>
 80015d8:	ffff8f0f 	.word	0xffff8f0f
 80015dc:	ffff8000 	.word	0xffff8000
 80015e0:	00000402 	.word	0x00000402
 80015e4:	00000406 	.word	0x00000406
 80015e8:	00000f8f 	.word	0x00000f8f
 80015ec:	ffffbf8f 	.word	0xffffbf8f
 80015f0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	001a      	movs	r2, r3
 80015fa:	204d      	movs	r0, #77	; 0x4d
 80015fc:	183b      	adds	r3, r7, r0
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	18d2      	adds	r2, r2, r3
 8001604:	214a      	movs	r1, #74	; 0x4a
 8001606:	187b      	adds	r3, r7, r1
 8001608:	8812      	ldrh	r2, [r2, #0]
 800160a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800160c:	187b      	adds	r3, r7, r1
 800160e:	2200      	movs	r2, #0
 8001610:	5e9b      	ldrsh	r3, [r3, r2]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db00      	blt.n	8001618 <PCD_EP_ISR_Handler+0x378>
 8001616:	e0fa      	b.n	800180e <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	001a      	movs	r2, r3
 800161e:	183b      	adds	r3, r7, r0
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	18d3      	adds	r3, r2, r3
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	b29a      	uxth	r2, r3
 800162a:	2448      	movs	r4, #72	; 0x48
 800162c:	193b      	adds	r3, r7, r4
 800162e:	49d1      	ldr	r1, [pc, #836]	; (8001974 <PCD_EP_ISR_Handler+0x6d4>)
 8001630:	400a      	ands	r2, r1
 8001632:	801a      	strh	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	001a      	movs	r2, r3
 800163a:	183b      	adds	r3, r7, r0
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	18d3      	adds	r3, r2, r3
 8001642:	193a      	adds	r2, r7, r4
 8001644:	8812      	ldrh	r2, [r2, #0]
 8001646:	2180      	movs	r1, #128	; 0x80
 8001648:	430a      	orrs	r2, r1
 800164a:	b292      	uxth	r2, r2
 800164c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800164e:	183b      	adds	r3, r7, r0
 8001650:	781a      	ldrb	r2, [r3, #0]
 8001652:	0013      	movs	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	189b      	adds	r3, r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	3369      	adds	r3, #105	; 0x69
 800165c:	33ff      	adds	r3, #255	; 0xff
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	18d3      	adds	r3, r2, r3
 8001662:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001666:	7b1b      	ldrb	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d125      	bne.n	80016b8 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2250      	movs	r2, #80	; 0x50
 8001672:	5a9b      	ldrh	r3, [r3, r2]
 8001674:	b29b      	uxth	r3, r3
 8001676:	001a      	movs	r2, r3
 8001678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	18d2      	adds	r2, r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	18d3      	adds	r3, r2, r3
 8001686:	4abc      	ldr	r2, [pc, #752]	; (8001978 <PCD_EP_ISR_Handler+0x6d8>)
 8001688:	4694      	mov	ip, r2
 800168a:	4463      	add	r3, ip
 800168c:	881a      	ldrh	r2, [r3, #0]
 800168e:	2450      	movs	r4, #80	; 0x50
 8001690:	193b      	adds	r3, r7, r4
 8001692:	0592      	lsls	r2, r2, #22
 8001694:	0d92      	lsrs	r2, r2, #22
 8001696:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001698:	193b      	adds	r3, r7, r4
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d100      	bne.n	80016a2 <PCD_EP_ISR_Handler+0x402>
 80016a0:	e08d      	b.n	80017be <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a8:	6959      	ldr	r1, [r3, #20]
 80016aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ac:	88da      	ldrh	r2, [r3, #6]
 80016ae:	193b      	adds	r3, r7, r4
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	f003 ff60 	bl	8005576 <USB_ReadPMA>
 80016b6:	e082      	b.n	80017be <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80016b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ba:	78db      	ldrb	r3, [r3, #3]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d10c      	bne.n	80016da <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80016c0:	2350      	movs	r3, #80	; 0x50
 80016c2:	18fc      	adds	r4, r7, r3
 80016c4:	234a      	movs	r3, #74	; 0x4a
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	881a      	ldrh	r2, [r3, #0]
 80016ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	0018      	movs	r0, r3
 80016d0:	f000 f9ec 	bl	8001aac <HAL_PCD_EP_DB_Receive>
 80016d4:	0003      	movs	r3, r0
 80016d6:	8023      	strh	r3, [r4, #0]
 80016d8:	e071      	b.n	80017be <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	001a      	movs	r2, r3
 80016e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	18d3      	adds	r3, r2, r3
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	2052      	movs	r0, #82	; 0x52
 80016ee:	183b      	adds	r3, r7, r0
 80016f0:	49a2      	ldr	r1, [pc, #648]	; (800197c <PCD_EP_ISR_Handler+0x6dc>)
 80016f2:	400a      	ands	r2, r1
 80016f4:	801a      	strh	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	001a      	movs	r2, r3
 80016fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	18d3      	adds	r3, r2, r3
 8001704:	183a      	adds	r2, r7, r0
 8001706:	8812      	ldrh	r2, [r2, #0]
 8001708:	499d      	ldr	r1, [pc, #628]	; (8001980 <PCD_EP_ISR_Handler+0x6e0>)
 800170a:	430a      	orrs	r2, r1
 800170c:	b292      	uxth	r2, r2
 800170e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	001a      	movs	r2, r3
 8001716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	18d3      	adds	r3, r2, r3
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	b29b      	uxth	r3, r3
 8001722:	001a      	movs	r2, r3
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	01db      	lsls	r3, r3, #7
 8001728:	4013      	ands	r3, r2
 800172a:	d024      	beq.n	8001776 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2250      	movs	r2, #80	; 0x50
 8001732:	5a9b      	ldrh	r3, [r3, r2]
 8001734:	b29b      	uxth	r3, r3
 8001736:	001a      	movs	r2, r3
 8001738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	18d2      	adds	r2, r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	18d3      	adds	r3, r2, r3
 8001746:	4a8f      	ldr	r2, [pc, #572]	; (8001984 <PCD_EP_ISR_Handler+0x6e4>)
 8001748:	4694      	mov	ip, r2
 800174a:	4463      	add	r3, ip
 800174c:	881a      	ldrh	r2, [r3, #0]
 800174e:	2450      	movs	r4, #80	; 0x50
 8001750:	193b      	adds	r3, r7, r4
 8001752:	0592      	lsls	r2, r2, #22
 8001754:	0d92      	lsrs	r2, r2, #22
 8001756:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001758:	193b      	adds	r3, r7, r4
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d02e      	beq.n	80017be <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001766:	6959      	ldr	r1, [r3, #20]
 8001768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800176a:	891a      	ldrh	r2, [r3, #8]
 800176c:	193b      	adds	r3, r7, r4
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	f003 ff01 	bl	8005576 <USB_ReadPMA>
 8001774:	e023      	b.n	80017be <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2250      	movs	r2, #80	; 0x50
 800177c:	5a9b      	ldrh	r3, [r3, r2]
 800177e:	b29b      	uxth	r3, r3
 8001780:	001a      	movs	r2, r3
 8001782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	18d2      	adds	r2, r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	18d3      	adds	r3, r2, r3
 8001790:	4a79      	ldr	r2, [pc, #484]	; (8001978 <PCD_EP_ISR_Handler+0x6d8>)
 8001792:	4694      	mov	ip, r2
 8001794:	4463      	add	r3, ip
 8001796:	881a      	ldrh	r2, [r3, #0]
 8001798:	2450      	movs	r4, #80	; 0x50
 800179a:	193b      	adds	r3, r7, r4
 800179c:	0592      	lsls	r2, r2, #22
 800179e:	0d92      	lsrs	r2, r2, #22
 80017a0:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80017a2:	193b      	adds	r3, r7, r4
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b0:	6959      	ldr	r1, [r3, #20]
 80017b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b4:	895a      	ldrh	r2, [r3, #10]
 80017b6:	193b      	adds	r3, r7, r4
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	f003 fedc 	bl	8005576 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80017be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c0:	69da      	ldr	r2, [r3, #28]
 80017c2:	2150      	movs	r1, #80	; 0x50
 80017c4:	187b      	adds	r3, r7, r1
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	18d2      	adds	r2, r2, r3
 80017ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80017ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	18d2      	adds	r2, r2, r3
 80017d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017da:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80017dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <PCD_EP_ISR_Handler+0x550>
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	881a      	ldrh	r2, [r3, #0]
 80017e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d207      	bcs.n	8001800 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80017f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f2:	781a      	ldrb	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	0011      	movs	r1, r2
 80017f8:	0018      	movs	r0, r3
 80017fa:	f006 fe06 	bl	800840a <HAL_PCD_DataOutStageCallback>
 80017fe:	e006      	b.n	800180e <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001806:	0011      	movs	r1, r2
 8001808:	0018      	movs	r0, r3
 800180a:	f002 fbf9 	bl	8004000 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800180e:	244a      	movs	r4, #74	; 0x4a
 8001810:	193b      	adds	r3, r7, r4
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	4013      	ands	r3, r2
 8001818:	d100      	bne.n	800181c <PCD_EP_ISR_Handler+0x57c>
 800181a:	e133      	b.n	8001a84 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800181c:	204d      	movs	r0, #77	; 0x4d
 800181e:	183b      	adds	r3, r7, r0
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	0013      	movs	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	189b      	adds	r3, r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	18d3      	adds	r3, r2, r3
 8001830:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	001a      	movs	r2, r3
 8001838:	183b      	adds	r3, r7, r0
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	18d3      	adds	r3, r2, r3
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	b29a      	uxth	r2, r3
 8001844:	2542      	movs	r5, #66	; 0x42
 8001846:	197b      	adds	r3, r7, r5
 8001848:	494f      	ldr	r1, [pc, #316]	; (8001988 <PCD_EP_ISR_Handler+0x6e8>)
 800184a:	400a      	ands	r2, r1
 800184c:	801a      	strh	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	001a      	movs	r2, r3
 8001854:	183b      	adds	r3, r7, r0
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	18d3      	adds	r3, r2, r3
 800185c:	197a      	adds	r2, r7, r5
 800185e:	8812      	ldrh	r2, [r2, #0]
 8001860:	494a      	ldr	r1, [pc, #296]	; (800198c <PCD_EP_ISR_Handler+0x6ec>)
 8001862:	430a      	orrs	r2, r1
 8001864:	b292      	uxth	r2, r2
 8001866:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186a:	78db      	ldrb	r3, [r3, #3]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d000      	beq.n	8001872 <PCD_EP_ISR_Handler+0x5d2>
 8001870:	e0af      	b.n	80019d2 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8001872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800187a:	7b1b      	ldrb	r3, [r3, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d100      	bne.n	8001882 <PCD_EP_ISR_Handler+0x5e2>
 8001880:	e09f      	b.n	80019c2 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001882:	193b      	adds	r3, r7, r4
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	2240      	movs	r2, #64	; 0x40
 8001888:	4013      	ands	r3, r2
 800188a:	d046      	beq.n	800191a <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800188c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800188e:	785b      	ldrb	r3, [r3, #1]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d125      	bne.n	80018e0 <PCD_EP_ISR_Handler+0x640>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2250      	movs	r2, #80	; 0x50
 80018a0:	5a9b      	ldrh	r3, [r3, r2]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	001a      	movs	r2, r3
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	189b      	adds	r3, r3, r2
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
 80018ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	00da      	lsls	r2, r3, #3
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	18d3      	adds	r3, r2, r3
 80018b6:	4a33      	ldr	r2, [pc, #204]	; (8001984 <PCD_EP_ISR_Handler+0x6e4>)
 80018b8:	4694      	mov	ip, r2
 80018ba:	4463      	add	r3, ip
 80018bc:	623b      	str	r3, [r7, #32]
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	059b      	lsls	r3, r3, #22
 80018c6:	0d9b      	lsrs	r3, r3, #22
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	801a      	strh	r2, [r3, #0]
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	4a2d      	ldr	r2, [pc, #180]	; (800198c <PCD_EP_ISR_Handler+0x6ec>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	b29a      	uxth	r2, r3
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	801a      	strh	r2, [r3, #0]
 80018de:	e070      	b.n	80019c2 <PCD_EP_ISR_Handler+0x722>
 80018e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e2:	785b      	ldrb	r3, [r3, #1]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d16c      	bne.n	80019c2 <PCD_EP_ISR_Handler+0x722>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2250      	movs	r2, #80	; 0x50
 80018f4:	5a9b      	ldrh	r3, [r3, r2]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	001a      	movs	r2, r3
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	189b      	adds	r3, r3, r2
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	00da      	lsls	r2, r3, #3
 8001906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001908:	18d3      	adds	r3, r2, r3
 800190a:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <PCD_EP_ISR_Handler+0x6e4>)
 800190c:	4694      	mov	ip, r2
 800190e:	4463      	add	r3, ip
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
 8001912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001914:	2200      	movs	r2, #0
 8001916:	801a      	strh	r2, [r3, #0]
 8001918:	e053      	b.n	80019c2 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001922:	785b      	ldrb	r3, [r3, #1]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d133      	bne.n	8001990 <PCD_EP_ISR_Handler+0x6f0>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2250      	movs	r2, #80	; 0x50
 8001934:	5a9b      	ldrh	r3, [r3, r2]
 8001936:	b29b      	uxth	r3, r3
 8001938:	001a      	movs	r2, r3
 800193a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193c:	189b      	adds	r3, r3, r2
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
 8001940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	00da      	lsls	r2, r3, #3
 8001946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001948:	18d3      	adds	r3, r2, r3
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <PCD_EP_ISR_Handler+0x6d8>)
 800194c:	4694      	mov	ip, r2
 800194e:	4463      	add	r3, ip
 8001950:	633b      	str	r3, [r7, #48]	; 0x30
 8001952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	b29b      	uxth	r3, r3
 8001958:	059b      	lsls	r3, r3, #22
 800195a:	0d9b      	lsrs	r3, r3, #22
 800195c:	b29a      	uxth	r2, r3
 800195e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001960:	801a      	strh	r2, [r3, #0]
 8001962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	4a08      	ldr	r2, [pc, #32]	; (800198c <PCD_EP_ISR_Handler+0x6ec>)
 800196a:	4313      	orrs	r3, r2
 800196c:	b29a      	uxth	r2, r3
 800196e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001970:	801a      	strh	r2, [r3, #0]
 8001972:	e026      	b.n	80019c2 <PCD_EP_ISR_Handler+0x722>
 8001974:	00000f8f 	.word	0x00000f8f
 8001978:	00000406 	.word	0x00000406
 800197c:	ffff8f8f 	.word	0xffff8f8f
 8001980:	ffff80c0 	.word	0xffff80c0
 8001984:	00000402 	.word	0x00000402
 8001988:	ffff8f0f 	.word	0xffff8f0f
 800198c:	ffff8000 	.word	0xffff8000
 8001990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001992:	785b      	ldrb	r3, [r3, #1]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d114      	bne.n	80019c2 <PCD_EP_ISR_Handler+0x722>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2250      	movs	r2, #80	; 0x50
 800199e:	5a9b      	ldrh	r3, [r3, r2]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	001a      	movs	r2, r3
 80019a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a6:	189b      	adds	r3, r3, r2
 80019a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	00da      	lsls	r2, r3, #3
 80019b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019b2:	18d3      	adds	r3, r2, r3
 80019b4:	4a3b      	ldr	r2, [pc, #236]	; (8001aa4 <PCD_EP_ISR_Handler+0x804>)
 80019b6:	4694      	mov	ip, r2
 80019b8:	4463      	add	r3, ip
 80019ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80019bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019be:	2200      	movs	r2, #0
 80019c0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c4:	781a      	ldrb	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	0011      	movs	r1, r2
 80019ca:	0018      	movs	r0, r3
 80019cc:	f006 fd3e 	bl	800844c <HAL_PCD_DataInStageCallback>
 80019d0:	e058      	b.n	8001a84 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80019d2:	234a      	movs	r3, #74	; 0x4a
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	881a      	ldrh	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4013      	ands	r3, r2
 80019de:	d149      	bne.n	8001a74 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2250      	movs	r2, #80	; 0x50
 80019e6:	5a9b      	ldrh	r3, [r3, r2]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	001a      	movs	r2, r3
 80019ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	18d2      	adds	r2, r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	18d3      	adds	r3, r2, r3
 80019fa:	4a2b      	ldr	r2, [pc, #172]	; (8001aa8 <PCD_EP_ISR_Handler+0x808>)
 80019fc:	4694      	mov	ip, r2
 80019fe:	4463      	add	r3, ip
 8001a00:	881a      	ldrh	r2, [r3, #0]
 8001a02:	2140      	movs	r1, #64	; 0x40
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	0592      	lsls	r2, r2, #22
 8001a08:	0d92      	lsrs	r2, r2, #22
 8001a0a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0e:	699a      	ldr	r2, [r3, #24]
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d907      	bls.n	8001a28 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8001a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1a:	699a      	ldr	r2, [r3, #24]
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	1ad2      	subs	r2, r2, r3
 8001a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a24:	619a      	str	r2, [r3, #24]
 8001a26:	e002      	b.n	8001a2e <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8001a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d107      	bne.n	8001a46 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a38:	781a      	ldrb	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	0011      	movs	r1, r2
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f006 fd04 	bl	800844c <HAL_PCD_DataInStageCallback>
 8001a44:	e01e      	b.n	8001a84 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	2140      	movs	r1, #64	; 0x40
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	18d2      	adds	r2, r2, r3
 8001a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a54:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a58:	69da      	ldr	r2, [r3, #28]
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	18d2      	adds	r2, r2, r3
 8001a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a62:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a6a:	0011      	movs	r1, r2
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f002 fac7 	bl	8004000 <USB_EPStartXfer>
 8001a72:	e007      	b.n	8001a84 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001a74:	234a      	movs	r3, #74	; 0x4a
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	881a      	ldrh	r2, [r3, #0]
 8001a7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f000 f930 	bl	8001ce4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2244      	movs	r2, #68	; 0x44
 8001a8a:	5a9b      	ldrh	r3, [r3, r2]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	da01      	bge.n	8001a98 <PCD_EP_ISR_Handler+0x7f8>
 8001a94:	f7ff fc0a 	bl	80012ac <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b016      	add	sp, #88	; 0x58
 8001aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	00000406 	.word	0x00000406
 8001aa8:	00000402 	.word	0x00000402

08001aac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	1dbb      	adds	r3, r7, #6
 8001ab8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001aba:	1dbb      	adds	r3, r7, #6
 8001abc:	881a      	ldrh	r2, [r3, #0]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	01db      	lsls	r3, r3, #7
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d100      	bne.n	8001ac8 <HAL_PCD_EP_DB_Receive+0x1c>
 8001ac6:	e07d      	b.n	8001bc4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2250      	movs	r2, #80	; 0x50
 8001ace:	5a9b      	ldrh	r3, [r3, r2]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	001a      	movs	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	18d2      	adds	r2, r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	18d3      	adds	r3, r2, r3
 8001ae2:	4a7a      	ldr	r2, [pc, #488]	; (8001ccc <HAL_PCD_EP_DB_Receive+0x220>)
 8001ae4:	4694      	mov	ip, r2
 8001ae6:	4463      	add	r3, ip
 8001ae8:	881a      	ldrh	r2, [r3, #0]
 8001aea:	211a      	movs	r1, #26
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	0592      	lsls	r2, r2, #22
 8001af0:	0d92      	lsrs	r2, r2, #22
 8001af2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	699a      	ldr	r2, [r3, #24]
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d307      	bcc.n	8001b10 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	699a      	ldr	r2, [r3, #24]
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	1ad2      	subs	r2, r2, r3
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	619a      	str	r2, [r3, #24]
 8001b0e:	e002      	b.n	8001b16 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d121      	bne.n	8001b62 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	001a      	movs	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	18d3      	adds	r3, r2, r3
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	2018      	movs	r0, #24
 8001b32:	183b      	adds	r3, r7, r0
 8001b34:	4966      	ldr	r1, [pc, #408]	; (8001cd0 <HAL_PCD_EP_DB_Receive+0x224>)
 8001b36:	400a      	ands	r2, r1
 8001b38:	801a      	strh	r2, [r3, #0]
 8001b3a:	183b      	adds	r3, r7, r0
 8001b3c:	183a      	adds	r2, r7, r0
 8001b3e:	8812      	ldrh	r2, [r2, #0]
 8001b40:	2180      	movs	r1, #128	; 0x80
 8001b42:	0189      	lsls	r1, r1, #6
 8001b44:	404a      	eors	r2, r1
 8001b46:	801a      	strh	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	001a      	movs	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	18d3      	adds	r3, r2, r3
 8001b56:	183a      	adds	r2, r7, r0
 8001b58:	8812      	ldrh	r2, [r2, #0]
 8001b5a:	495e      	ldr	r1, [pc, #376]	; (8001cd4 <HAL_PCD_EP_DB_Receive+0x228>)
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	b292      	uxth	r2, r2
 8001b60:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b62:	1dbb      	adds	r3, r7, #6
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	2240      	movs	r2, #64	; 0x40
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d01a      	beq.n	8001ba2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	001a      	movs	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	18d3      	adds	r3, r2, r3
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	2016      	movs	r0, #22
 8001b80:	183b      	adds	r3, r7, r0
 8001b82:	4955      	ldr	r1, [pc, #340]	; (8001cd8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001b84:	400a      	ands	r2, r1
 8001b86:	801a      	strh	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	001a      	movs	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	18d3      	adds	r3, r2, r3
 8001b96:	183a      	adds	r2, r7, r0
 8001b98:	8812      	ldrh	r2, [r2, #0]
 8001b9a:	4950      	ldr	r1, [pc, #320]	; (8001cdc <HAL_PCD_EP_DB_Receive+0x230>)
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	b292      	uxth	r2, r2
 8001ba0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001ba2:	241a      	movs	r4, #26
 8001ba4:	193b      	adds	r3, r7, r4
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d100      	bne.n	8001bae <HAL_PCD_EP_DB_Receive+0x102>
 8001bac:	e086      	b.n	8001cbc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	6959      	ldr	r1, [r3, #20]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	891a      	ldrh	r2, [r3, #8]
 8001bba:	193b      	adds	r3, r7, r4
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	f003 fcda 	bl	8005576 <USB_ReadPMA>
 8001bc2:	e07b      	b.n	8001cbc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2250      	movs	r2, #80	; 0x50
 8001bca:	5a9b      	ldrh	r3, [r3, r2]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	001a      	movs	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	18d2      	adds	r2, r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	18d3      	adds	r3, r2, r3
 8001bde:	4a40      	ldr	r2, [pc, #256]	; (8001ce0 <HAL_PCD_EP_DB_Receive+0x234>)
 8001be0:	4694      	mov	ip, r2
 8001be2:	4463      	add	r3, ip
 8001be4:	881a      	ldrh	r2, [r3, #0]
 8001be6:	211a      	movs	r1, #26
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	0592      	lsls	r2, r2, #22
 8001bec:	0d92      	lsrs	r2, r2, #22
 8001bee:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	699a      	ldr	r2, [r3, #24]
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d307      	bcc.n	8001c0c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	699a      	ldr	r2, [r3, #24]
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	1ad2      	subs	r2, r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	619a      	str	r2, [r3, #24]
 8001c0a:	e002      	b.n	8001c12 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d121      	bne.n	8001c5e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	001a      	movs	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	18d3      	adds	r3, r2, r3
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	201e      	movs	r0, #30
 8001c2e:	183b      	adds	r3, r7, r0
 8001c30:	4927      	ldr	r1, [pc, #156]	; (8001cd0 <HAL_PCD_EP_DB_Receive+0x224>)
 8001c32:	400a      	ands	r2, r1
 8001c34:	801a      	strh	r2, [r3, #0]
 8001c36:	183b      	adds	r3, r7, r0
 8001c38:	183a      	adds	r2, r7, r0
 8001c3a:	8812      	ldrh	r2, [r2, #0]
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	0189      	lsls	r1, r1, #6
 8001c40:	404a      	eors	r2, r1
 8001c42:	801a      	strh	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	001a      	movs	r2, r3
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	18d3      	adds	r3, r2, r3
 8001c52:	183a      	adds	r2, r7, r0
 8001c54:	8812      	ldrh	r2, [r2, #0]
 8001c56:	491f      	ldr	r1, [pc, #124]	; (8001cd4 <HAL_PCD_EP_DB_Receive+0x228>)
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	b292      	uxth	r2, r2
 8001c5c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001c5e:	1dbb      	adds	r3, r7, #6
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	2240      	movs	r2, #64	; 0x40
 8001c64:	4013      	ands	r3, r2
 8001c66:	d11a      	bne.n	8001c9e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	001a      	movs	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	18d3      	adds	r3, r2, r3
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	201c      	movs	r0, #28
 8001c7c:	183b      	adds	r3, r7, r0
 8001c7e:	4916      	ldr	r1, [pc, #88]	; (8001cd8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001c80:	400a      	ands	r2, r1
 8001c82:	801a      	strh	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	001a      	movs	r2, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	18d3      	adds	r3, r2, r3
 8001c92:	183a      	adds	r2, r7, r0
 8001c94:	8812      	ldrh	r2, [r2, #0]
 8001c96:	4911      	ldr	r1, [pc, #68]	; (8001cdc <HAL_PCD_EP_DB_Receive+0x230>)
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	b292      	uxth	r2, r2
 8001c9c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001c9e:	241a      	movs	r4, #26
 8001ca0:	193b      	adds	r3, r7, r4
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d009      	beq.n	8001cbc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	6959      	ldr	r1, [r3, #20]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	895a      	ldrh	r2, [r3, #10]
 8001cb4:	193b      	adds	r3, r7, r4
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	f003 fc5d 	bl	8005576 <USB_ReadPMA>
    }
  }

  return count;
 8001cbc:	231a      	movs	r3, #26
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	881b      	ldrh	r3, [r3, #0]
}
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b009      	add	sp, #36	; 0x24
 8001cc8:	bd90      	pop	{r4, r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	00000402 	.word	0x00000402
 8001cd0:	ffffbf8f 	.word	0xffffbf8f
 8001cd4:	ffff8080 	.word	0xffff8080
 8001cd8:	ffff8f8f 	.word	0xffff8f8f
 8001cdc:	ffff80c0 	.word	0xffff80c0
 8001ce0:	00000406 	.word	0x00000406

08001ce4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b0a4      	sub	sp, #144	; 0x90
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	1dbb      	adds	r3, r7, #6
 8001cf0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cf2:	1dbb      	adds	r3, r7, #6
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	2240      	movs	r2, #64	; 0x40
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d100      	bne.n	8001cfe <HAL_PCD_EP_DB_Transmit+0x1a>
 8001cfc:	e1e4      	b.n	80020c8 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2250      	movs	r2, #80	; 0x50
 8001d04:	5a9b      	ldrh	r3, [r3, r2]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	001a      	movs	r2, r3
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	18d2      	adds	r2, r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	18d3      	adds	r3, r2, r3
 8001d18:	4ad0      	ldr	r2, [pc, #832]	; (800205c <HAL_PCD_EP_DB_Transmit+0x378>)
 8001d1a:	4694      	mov	ip, r2
 8001d1c:	4463      	add	r3, ip
 8001d1e:	881a      	ldrh	r2, [r3, #0]
 8001d20:	2186      	movs	r1, #134	; 0x86
 8001d22:	187b      	adds	r3, r7, r1
 8001d24:	0592      	lsls	r2, r2, #22
 8001d26:	0d92      	lsrs	r2, r2, #22
 8001d28:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	187b      	adds	r3, r7, r1
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d907      	bls.n	8001d46 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	187b      	adds	r3, r7, r1
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	1ad2      	subs	r2, r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	619a      	str	r2, [r3, #24]
 8001d44:	e002      	b.n	8001d4c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d000      	beq.n	8001d56 <HAL_PCD_EP_DB_Transmit+0x72>
 8001d54:	e0b5      	b.n	8001ec2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	785b      	ldrb	r3, [r3, #1]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d125      	bne.n	8001daa <HAL_PCD_EP_DB_Transmit+0xc6>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2250      	movs	r2, #80	; 0x50
 8001d6a:	5a9b      	ldrh	r3, [r3, r2]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	001a      	movs	r2, r3
 8001d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d72:	189b      	adds	r3, r3, r2
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	00da      	lsls	r2, r3, #3
 8001d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7e:	18d3      	adds	r3, r2, r3
 8001d80:	4ab6      	ldr	r2, [pc, #728]	; (800205c <HAL_PCD_EP_DB_Transmit+0x378>)
 8001d82:	4694      	mov	ip, r2
 8001d84:	4463      	add	r3, ip
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	059b      	lsls	r3, r3, #22
 8001d90:	0d9b      	lsrs	r3, r3, #22
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d96:	801a      	strh	r2, [r3, #0]
 8001d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	4ab0      	ldr	r2, [pc, #704]	; (8002060 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da6:	801a      	strh	r2, [r3, #0]
 8001da8:	e01b      	b.n	8001de2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	785b      	ldrb	r3, [r3, #1]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d117      	bne.n	8001de2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	637b      	str	r3, [r7, #52]	; 0x34
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2250      	movs	r2, #80	; 0x50
 8001dbe:	5a9b      	ldrh	r3, [r3, r2]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	001a      	movs	r2, r3
 8001dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc6:	189b      	adds	r3, r3, r2
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	00da      	lsls	r2, r3, #3
 8001dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd2:	18d3      	adds	r3, r2, r3
 8001dd4:	4aa1      	ldr	r2, [pc, #644]	; (800205c <HAL_PCD_EP_DB_Transmit+0x378>)
 8001dd6:	4694      	mov	ip, r2
 8001dd8:	4463      	add	r3, ip
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
 8001ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dde:	2200      	movs	r2, #0
 8001de0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	785b      	ldrb	r3, [r3, #1]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d125      	bne.n	8001e3c <HAL_PCD_EP_DB_Transmit+0x158>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2250      	movs	r2, #80	; 0x50
 8001dfc:	5a9b      	ldrh	r3, [r3, r2]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	001a      	movs	r2, r3
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	189b      	adds	r3, r3, r2
 8001e06:	61fb      	str	r3, [r7, #28]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	00da      	lsls	r2, r3, #3
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	18d3      	adds	r3, r2, r3
 8001e12:	4a94      	ldr	r2, [pc, #592]	; (8002064 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001e14:	4694      	mov	ip, r2
 8001e16:	4463      	add	r3, ip
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	059b      	lsls	r3, r3, #22
 8001e22:	0d9b      	lsrs	r3, r3, #22
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	801a      	strh	r2, [r3, #0]
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	4a8b      	ldr	r2, [pc, #556]	; (8002060 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	801a      	strh	r2, [r3, #0]
 8001e3a:	e018      	b.n	8001e6e <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	785b      	ldrb	r3, [r3, #1]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d114      	bne.n	8001e6e <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2250      	movs	r2, #80	; 0x50
 8001e4a:	5a9b      	ldrh	r3, [r3, r2]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	001a      	movs	r2, r3
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	189b      	adds	r3, r3, r2
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	00da      	lsls	r2, r3, #3
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	18d3      	adds	r3, r2, r3
 8001e60:	4a80      	ldr	r2, [pc, #512]	; (8002064 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001e62:	4694      	mov	ip, r2
 8001e64:	4463      	add	r3, ip
 8001e66:	623b      	str	r3, [r7, #32]
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	0011      	movs	r1, r2
 8001e76:	0018      	movs	r0, r3
 8001e78:	f006 fae8 	bl	800844c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e7c:	1dbb      	adds	r3, r7, #6
 8001e7e:	881a      	ldrh	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	01db      	lsls	r3, r3, #7
 8001e84:	4013      	ands	r3, r2
 8001e86:	d100      	bne.n	8001e8a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8001e88:	e309      	b.n	800249e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	001a      	movs	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	18d3      	adds	r3, r2, r3
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	2016      	movs	r0, #22
 8001e9e:	183b      	adds	r3, r7, r0
 8001ea0:	4971      	ldr	r1, [pc, #452]	; (8002068 <HAL_PCD_EP_DB_Transmit+0x384>)
 8001ea2:	400a      	ands	r2, r1
 8001ea4:	801a      	strh	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	001a      	movs	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	18d3      	adds	r3, r2, r3
 8001eb4:	183a      	adds	r2, r7, r0
 8001eb6:	8812      	ldrh	r2, [r2, #0]
 8001eb8:	496c      	ldr	r1, [pc, #432]	; (800206c <HAL_PCD_EP_DB_Transmit+0x388>)
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	b292      	uxth	r2, r2
 8001ebe:	801a      	strh	r2, [r3, #0]
 8001ec0:	e2ed      	b.n	800249e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ec2:	1dbb      	adds	r3, r7, #6
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	01db      	lsls	r3, r3, #7
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d01a      	beq.n	8001f04 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	001a      	movs	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	18d3      	adds	r3, r2, r3
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	208a      	movs	r0, #138	; 0x8a
 8001ee2:	183b      	adds	r3, r7, r0
 8001ee4:	4960      	ldr	r1, [pc, #384]	; (8002068 <HAL_PCD_EP_DB_Transmit+0x384>)
 8001ee6:	400a      	ands	r2, r1
 8001ee8:	801a      	strh	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	001a      	movs	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	18d3      	adds	r3, r2, r3
 8001ef8:	183a      	adds	r2, r7, r0
 8001efa:	8812      	ldrh	r2, [r2, #0]
 8001efc:	495b      	ldr	r1, [pc, #364]	; (800206c <HAL_PCD_EP_DB_Transmit+0x388>)
 8001efe:	430a      	orrs	r2, r1
 8001f00:	b292      	uxth	r2, r2
 8001f02:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2224      	movs	r2, #36	; 0x24
 8001f08:	5c9b      	ldrb	r3, [r3, r2]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d000      	beq.n	8001f10 <HAL_PCD_EP_DB_Transmit+0x22c>
 8001f0e:	e2c6      	b.n	800249e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	2186      	movs	r1, #134	; 0x86
 8001f16:	187b      	adds	r3, r7, r1
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	18d2      	adds	r2, r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	69da      	ldr	r2, [r3, #28]
 8001f24:	187b      	adds	r3, r7, r1
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	18d2      	adds	r2, r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	6a1a      	ldr	r2, [r3, #32]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d30c      	bcc.n	8001f54 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	218c      	movs	r1, #140	; 0x8c
 8001f40:	187a      	adds	r2, r7, r1
 8001f42:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	6a1a      	ldr	r2, [r3, #32]
 8001f48:	187b      	adds	r3, r7, r1
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	1ad2      	subs	r2, r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	621a      	str	r2, [r3, #32]
 8001f52:	e01a      	b.n	8001f8a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10a      	bne.n	8001f72 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8001f5c:	2386      	movs	r3, #134	; 0x86
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	228c      	movs	r2, #140	; 0x8c
 8001f64:	18ba      	adds	r2, r7, r2
 8001f66:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2224      	movs	r2, #36	; 0x24
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	5499      	strb	r1, [r3, r2]
 8001f70:	e00b      	b.n	8001f8a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2224      	movs	r2, #36	; 0x24
 8001f76:	2100      	movs	r1, #0
 8001f78:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	228c      	movs	r2, #140	; 0x8c
 8001f80:	18ba      	adds	r2, r7, r2
 8001f82:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2200      	movs	r2, #0
 8001f88:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	785b      	ldrb	r3, [r3, #1]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d000      	beq.n	8001f94 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8001f92:	e06d      	b.n	8002070 <HAL_PCD_EP_DB_Transmit+0x38c>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2250      	movs	r2, #80	; 0x50
 8001fa0:	5a9b      	ldrh	r3, [r3, r2]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	001a      	movs	r2, r3
 8001fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fa8:	189b      	adds	r3, r3, r2
 8001faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	00da      	lsls	r2, r3, #3
 8001fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fb4:	18d3      	adds	r3, r2, r3
 8001fb6:	4a29      	ldr	r2, [pc, #164]	; (800205c <HAL_PCD_EP_DB_Transmit+0x378>)
 8001fb8:	4694      	mov	ip, r2
 8001fba:	4463      	add	r3, ip
 8001fbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	059b      	lsls	r3, r3, #22
 8001fc6:	0d9b      	lsrs	r3, r3, #22
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fcc:	801a      	strh	r2, [r3, #0]
 8001fce:	228c      	movs	r2, #140	; 0x8c
 8001fd0:	18bb      	adds	r3, r7, r2
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b3e      	cmp	r3, #62	; 0x3e
 8001fd6:	d91a      	bls.n	800200e <HAL_PCD_EP_DB_Transmit+0x32a>
 8001fd8:	18bb      	adds	r3, r7, r2
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	095b      	lsrs	r3, r3, #5
 8001fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fe0:	18bb      	adds	r3, r7, r2
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	221f      	movs	r2, #31
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d102      	bne.n	8001ff0 <HAL_PCD_EP_DB_Transmit+0x30c>
 8001fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fec:	3b01      	subs	r3, #1
 8001fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	029b      	lsls	r3, r3, #10
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	4313      	orrs	r3, r2
 8002000:	b29b      	uxth	r3, r3
 8002002:	4a17      	ldr	r2, [pc, #92]	; (8002060 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002004:	4313      	orrs	r3, r2
 8002006:	b29a      	uxth	r2, r3
 8002008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800200a:	801a      	strh	r2, [r3, #0]
 800200c:	e04f      	b.n	80020ae <HAL_PCD_EP_DB_Transmit+0x3ca>
 800200e:	238c      	movs	r3, #140	; 0x8c
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d108      	bne.n	800202a <HAL_PCD_EP_DB_Transmit+0x346>
 8002018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	4a10      	ldr	r2, [pc, #64]	; (8002060 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002020:	4313      	orrs	r3, r2
 8002022:	b29a      	uxth	r2, r3
 8002024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002026:	801a      	strh	r2, [r3, #0]
 8002028:	e041      	b.n	80020ae <HAL_PCD_EP_DB_Transmit+0x3ca>
 800202a:	228c      	movs	r2, #140	; 0x8c
 800202c:	18bb      	adds	r3, r7, r2
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	085b      	lsrs	r3, r3, #1
 8002032:	64bb      	str	r3, [r7, #72]	; 0x48
 8002034:	18bb      	adds	r3, r7, r2
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2201      	movs	r2, #1
 800203a:	4013      	ands	r3, r2
 800203c:	d002      	beq.n	8002044 <HAL_PCD_EP_DB_Transmit+0x360>
 800203e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002040:	3301      	adds	r3, #1
 8002042:	64bb      	str	r3, [r7, #72]	; 0x48
 8002044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	b29a      	uxth	r2, r3
 800204a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800204c:	b29b      	uxth	r3, r3
 800204e:	029b      	lsls	r3, r3, #10
 8002050:	b29b      	uxth	r3, r3
 8002052:	4313      	orrs	r3, r2
 8002054:	b29a      	uxth	r2, r3
 8002056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002058:	801a      	strh	r2, [r3, #0]
 800205a:	e028      	b.n	80020ae <HAL_PCD_EP_DB_Transmit+0x3ca>
 800205c:	00000402 	.word	0x00000402
 8002060:	ffff8000 	.word	0xffff8000
 8002064:	00000406 	.word	0x00000406
 8002068:	ffff8f8f 	.word	0xffff8f8f
 800206c:	ffffc080 	.word	0xffffc080
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	785b      	ldrb	r3, [r3, #1]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d11a      	bne.n	80020ae <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	647b      	str	r3, [r7, #68]	; 0x44
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2250      	movs	r2, #80	; 0x50
 8002084:	5a9b      	ldrh	r3, [r3, r2]
 8002086:	b29b      	uxth	r3, r3
 8002088:	001a      	movs	r2, r3
 800208a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800208c:	189b      	adds	r3, r3, r2
 800208e:	647b      	str	r3, [r7, #68]	; 0x44
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	00da      	lsls	r2, r3, #3
 8002096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002098:	18d3      	adds	r3, r2, r3
 800209a:	4adb      	ldr	r2, [pc, #876]	; (8002408 <HAL_PCD_EP_DB_Transmit+0x724>)
 800209c:	4694      	mov	ip, r2
 800209e:	4463      	add	r3, ip
 80020a0:	643b      	str	r3, [r7, #64]	; 0x40
 80020a2:	238c      	movs	r3, #140	; 0x8c
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	6959      	ldr	r1, [r3, #20]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	891a      	ldrh	r2, [r3, #8]
 80020ba:	238c      	movs	r3, #140	; 0x8c
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	f003 fa0f 	bl	80054e4 <USB_WritePMA>
 80020c6:	e1ea      	b.n	800249e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2250      	movs	r2, #80	; 0x50
 80020ce:	5a9b      	ldrh	r3, [r3, r2]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	001a      	movs	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	18d2      	adds	r2, r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	18d3      	adds	r3, r2, r3
 80020e2:	4aca      	ldr	r2, [pc, #808]	; (800240c <HAL_PCD_EP_DB_Transmit+0x728>)
 80020e4:	4694      	mov	ip, r2
 80020e6:	4463      	add	r3, ip
 80020e8:	881a      	ldrh	r2, [r3, #0]
 80020ea:	2186      	movs	r1, #134	; 0x86
 80020ec:	187b      	adds	r3, r7, r1
 80020ee:	0592      	lsls	r2, r2, #22
 80020f0:	0d92      	lsrs	r2, r2, #22
 80020f2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	699a      	ldr	r2, [r3, #24]
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d307      	bcc.n	8002110 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	187b      	adds	r3, r7, r1
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	1ad2      	subs	r2, r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	619a      	str	r2, [r3, #24]
 800210e:	e002      	b.n	8002116 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d000      	beq.n	8002120 <HAL_PCD_EP_DB_Transmit+0x43c>
 800211e:	e0bb      	b.n	8002298 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	785b      	ldrb	r3, [r3, #1]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d125      	bne.n	8002174 <HAL_PCD_EP_DB_Transmit+0x490>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2250      	movs	r2, #80	; 0x50
 8002134:	5a9b      	ldrh	r3, [r3, r2]
 8002136:	b29b      	uxth	r3, r3
 8002138:	001a      	movs	r2, r3
 800213a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800213c:	189b      	adds	r3, r3, r2
 800213e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	00da      	lsls	r2, r3, #3
 8002146:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002148:	18d3      	adds	r3, r2, r3
 800214a:	4aaf      	ldr	r2, [pc, #700]	; (8002408 <HAL_PCD_EP_DB_Transmit+0x724>)
 800214c:	4694      	mov	ip, r2
 800214e:	4463      	add	r3, ip
 8002150:	67bb      	str	r3, [r7, #120]	; 0x78
 8002152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	059b      	lsls	r3, r3, #22
 800215a:	0d9b      	lsrs	r3, r3, #22
 800215c:	b29a      	uxth	r2, r3
 800215e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002160:	801a      	strh	r2, [r3, #0]
 8002162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	4aa9      	ldr	r2, [pc, #676]	; (8002410 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800216a:	4313      	orrs	r3, r2
 800216c:	b29a      	uxth	r2, r3
 800216e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002170:	801a      	strh	r2, [r3, #0]
 8002172:	e01b      	b.n	80021ac <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	785b      	ldrb	r3, [r3, #1]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d117      	bne.n	80021ac <HAL_PCD_EP_DB_Transmit+0x4c8>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	667b      	str	r3, [r7, #100]	; 0x64
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2250      	movs	r2, #80	; 0x50
 8002188:	5a9b      	ldrh	r3, [r3, r2]
 800218a:	b29b      	uxth	r3, r3
 800218c:	001a      	movs	r2, r3
 800218e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002190:	189b      	adds	r3, r3, r2
 8002192:	667b      	str	r3, [r7, #100]	; 0x64
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	00da      	lsls	r2, r3, #3
 800219a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800219c:	18d3      	adds	r3, r2, r3
 800219e:	4a9a      	ldr	r2, [pc, #616]	; (8002408 <HAL_PCD_EP_DB_Transmit+0x724>)
 80021a0:	4694      	mov	ip, r2
 80021a2:	4463      	add	r3, ip
 80021a4:	663b      	str	r3, [r7, #96]	; 0x60
 80021a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021a8:	2200      	movs	r2, #0
 80021aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	677b      	str	r3, [r7, #116]	; 0x74
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	785b      	ldrb	r3, [r3, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d12b      	bne.n	8002212 <HAL_PCD_EP_DB_Transmit+0x52e>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2250      	movs	r2, #80	; 0x50
 80021c6:	5a9b      	ldrh	r3, [r3, r2]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	001a      	movs	r2, r3
 80021cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ce:	189b      	adds	r3, r3, r2
 80021d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	00da      	lsls	r2, r3, #3
 80021d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021da:	18d3      	adds	r3, r2, r3
 80021dc:	4a8b      	ldr	r2, [pc, #556]	; (800240c <HAL_PCD_EP_DB_Transmit+0x728>)
 80021de:	4694      	mov	ip, r2
 80021e0:	4463      	add	r3, ip
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	187a      	adds	r2, r7, r1
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	187b      	adds	r3, r7, r1
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	059b      	lsls	r3, r3, #22
 80021f2:	0d9b      	lsrs	r3, r3, #22
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	187b      	adds	r3, r7, r1
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	801a      	strh	r2, [r3, #0]
 80021fc:	187b      	adds	r3, r7, r1
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	4a82      	ldr	r2, [pc, #520]	; (8002410 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002206:	4313      	orrs	r3, r2
 8002208:	b29a      	uxth	r2, r3
 800220a:	187b      	adds	r3, r7, r1
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	801a      	strh	r2, [r3, #0]
 8002210:	e018      	b.n	8002244 <HAL_PCD_EP_DB_Transmit+0x560>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	785b      	ldrb	r3, [r3, #1]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d114      	bne.n	8002244 <HAL_PCD_EP_DB_Transmit+0x560>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2250      	movs	r2, #80	; 0x50
 8002220:	5a9b      	ldrh	r3, [r3, r2]
 8002222:	b29b      	uxth	r3, r3
 8002224:	001a      	movs	r2, r3
 8002226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002228:	189b      	adds	r3, r3, r2
 800222a:	677b      	str	r3, [r7, #116]	; 0x74
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	00da      	lsls	r2, r3, #3
 8002232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002234:	18d3      	adds	r3, r2, r3
 8002236:	4a75      	ldr	r2, [pc, #468]	; (800240c <HAL_PCD_EP_DB_Transmit+0x728>)
 8002238:	4694      	mov	ip, r2
 800223a:	4463      	add	r3, ip
 800223c:	673b      	str	r3, [r7, #112]	; 0x70
 800223e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002240:	2200      	movs	r2, #0
 8002242:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	0011      	movs	r1, r2
 800224c:	0018      	movs	r0, r3
 800224e:	f006 f8fd 	bl	800844c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002252:	1dbb      	adds	r3, r7, #6
 8002254:	881a      	ldrh	r2, [r3, #0]
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	01db      	lsls	r3, r3, #7
 800225a:	4013      	ands	r3, r2
 800225c:	d000      	beq.n	8002260 <HAL_PCD_EP_DB_Transmit+0x57c>
 800225e:	e11e      	b.n	800249e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	001a      	movs	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	18d3      	adds	r3, r2, r3
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	b29a      	uxth	r2, r3
 8002272:	2088      	movs	r0, #136	; 0x88
 8002274:	183b      	adds	r3, r7, r0
 8002276:	4967      	ldr	r1, [pc, #412]	; (8002414 <HAL_PCD_EP_DB_Transmit+0x730>)
 8002278:	400a      	ands	r2, r1
 800227a:	801a      	strh	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	001a      	movs	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	18d3      	adds	r3, r2, r3
 800228a:	183a      	adds	r2, r7, r0
 800228c:	8812      	ldrh	r2, [r2, #0]
 800228e:	4962      	ldr	r1, [pc, #392]	; (8002418 <HAL_PCD_EP_DB_Transmit+0x734>)
 8002290:	430a      	orrs	r2, r1
 8002292:	b292      	uxth	r2, r2
 8002294:	801a      	strh	r2, [r3, #0]
 8002296:	e102      	b.n	800249e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002298:	1dbb      	adds	r3, r7, #6
 800229a:	881a      	ldrh	r2, [r3, #0]
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	01db      	lsls	r3, r3, #7
 80022a0:	4013      	ands	r3, r2
 80022a2:	d11a      	bne.n	80022da <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	001a      	movs	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	18d3      	adds	r3, r2, r3
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	204e      	movs	r0, #78	; 0x4e
 80022b8:	183b      	adds	r3, r7, r0
 80022ba:	4956      	ldr	r1, [pc, #344]	; (8002414 <HAL_PCD_EP_DB_Transmit+0x730>)
 80022bc:	400a      	ands	r2, r1
 80022be:	801a      	strh	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	001a      	movs	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	18d3      	adds	r3, r2, r3
 80022ce:	183a      	adds	r2, r7, r0
 80022d0:	8812      	ldrh	r2, [r2, #0]
 80022d2:	4951      	ldr	r1, [pc, #324]	; (8002418 <HAL_PCD_EP_DB_Transmit+0x734>)
 80022d4:	430a      	orrs	r2, r1
 80022d6:	b292      	uxth	r2, r2
 80022d8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2224      	movs	r2, #36	; 0x24
 80022de:	5c9b      	ldrb	r3, [r3, r2]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d000      	beq.n	80022e6 <HAL_PCD_EP_DB_Transmit+0x602>
 80022e4:	e0db      	b.n	800249e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	2186      	movs	r1, #134	; 0x86
 80022ec:	187b      	adds	r3, r7, r1
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	18d2      	adds	r2, r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	69da      	ldr	r2, [r3, #28]
 80022fa:	187b      	adds	r3, r7, r1
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	18d2      	adds	r2, r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	6a1a      	ldr	r2, [r3, #32]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	429a      	cmp	r2, r3
 800230e:	d30c      	bcc.n	800232a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	218c      	movs	r1, #140	; 0x8c
 8002316:	187a      	adds	r2, r7, r1
 8002318:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	6a1a      	ldr	r2, [r3, #32]
 800231e:	187b      	adds	r3, r7, r1
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	1ad2      	subs	r2, r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	621a      	str	r2, [r3, #32]
 8002328:	e01a      	b.n	8002360 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10a      	bne.n	8002348 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8002332:	2386      	movs	r3, #134	; 0x86
 8002334:	18fb      	adds	r3, r7, r3
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	228c      	movs	r2, #140	; 0x8c
 800233a:	18ba      	adds	r2, r7, r2
 800233c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2224      	movs	r2, #36	; 0x24
 8002342:	2100      	movs	r1, #0
 8002344:	5499      	strb	r1, [r3, r2]
 8002346:	e00b      	b.n	8002360 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	228c      	movs	r2, #140	; 0x8c
 800234e:	18ba      	adds	r2, r7, r2
 8002350:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2200      	movs	r2, #0
 8002356:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2224      	movs	r2, #36	; 0x24
 800235c:	2100      	movs	r1, #0
 800235e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	657b      	str	r3, [r7, #84]	; 0x54
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	785b      	ldrb	r3, [r3, #1]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d000      	beq.n	8002370 <HAL_PCD_EP_DB_Transmit+0x68c>
 800236e:	e06e      	b.n	800244e <HAL_PCD_EP_DB_Transmit+0x76a>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2250      	movs	r2, #80	; 0x50
 800237c:	5a9b      	ldrh	r3, [r3, r2]
 800237e:	b29b      	uxth	r3, r3
 8002380:	001a      	movs	r2, r3
 8002382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002384:	189b      	adds	r3, r3, r2
 8002386:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	00da      	lsls	r2, r3, #3
 800238e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002390:	18d3      	adds	r3, r2, r3
 8002392:	4a1e      	ldr	r2, [pc, #120]	; (800240c <HAL_PCD_EP_DB_Transmit+0x728>)
 8002394:	4694      	mov	ip, r2
 8002396:	4463      	add	r3, ip
 8002398:	65bb      	str	r3, [r7, #88]	; 0x58
 800239a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	059b      	lsls	r3, r3, #22
 80023a2:	0d9b      	lsrs	r3, r3, #22
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023a8:	801a      	strh	r2, [r3, #0]
 80023aa:	228c      	movs	r2, #140	; 0x8c
 80023ac:	18bb      	adds	r3, r7, r2
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b3e      	cmp	r3, #62	; 0x3e
 80023b2:	d91a      	bls.n	80023ea <HAL_PCD_EP_DB_Transmit+0x706>
 80023b4:	18bb      	adds	r3, r7, r2
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	095b      	lsrs	r3, r3, #5
 80023ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80023bc:	18bb      	adds	r3, r7, r2
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	221f      	movs	r2, #31
 80023c2:	4013      	ands	r3, r2
 80023c4:	d102      	bne.n	80023cc <HAL_PCD_EP_DB_Transmit+0x6e8>
 80023c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023c8:	3b01      	subs	r3, #1
 80023ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80023cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	029b      	lsls	r3, r3, #10
 80023d8:	b29b      	uxth	r3, r3
 80023da:	4313      	orrs	r3, r2
 80023dc:	b29b      	uxth	r3, r3
 80023de:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e6:	801a      	strh	r2, [r3, #0]
 80023e8:	e04d      	b.n	8002486 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80023ea:	238c      	movs	r3, #140	; 0x8c
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d113      	bne.n	800241c <HAL_PCD_EP_DB_Transmit+0x738>
 80023f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	b29a      	uxth	r2, r3
 8002400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002402:	801a      	strh	r2, [r3, #0]
 8002404:	e03f      	b.n	8002486 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	00000402 	.word	0x00000402
 800240c:	00000406 	.word	0x00000406
 8002410:	ffff8000 	.word	0xffff8000
 8002414:	ffff8f8f 	.word	0xffff8f8f
 8002418:	ffffc080 	.word	0xffffc080
 800241c:	228c      	movs	r2, #140	; 0x8c
 800241e:	18bb      	adds	r3, r7, r2
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	085b      	lsrs	r3, r3, #1
 8002424:	66bb      	str	r3, [r7, #104]	; 0x68
 8002426:	18bb      	adds	r3, r7, r2
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2201      	movs	r2, #1
 800242c:	4013      	ands	r3, r2
 800242e:	d002      	beq.n	8002436 <HAL_PCD_EP_DB_Transmit+0x752>
 8002430:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002432:	3301      	adds	r3, #1
 8002434:	66bb      	str	r3, [r7, #104]	; 0x68
 8002436:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29a      	uxth	r2, r3
 800243c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800243e:	b29b      	uxth	r3, r3
 8002440:	029b      	lsls	r3, r3, #10
 8002442:	b29b      	uxth	r3, r3
 8002444:	4313      	orrs	r3, r2
 8002446:	b29a      	uxth	r2, r3
 8002448:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800244a:	801a      	strh	r2, [r3, #0]
 800244c:	e01b      	b.n	8002486 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	785b      	ldrb	r3, [r3, #1]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d117      	bne.n	8002486 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2250      	movs	r2, #80	; 0x50
 800245c:	5a9b      	ldrh	r3, [r3, r2]
 800245e:	b29b      	uxth	r3, r3
 8002460:	001a      	movs	r2, r3
 8002462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002464:	189b      	adds	r3, r3, r2
 8002466:	657b      	str	r3, [r7, #84]	; 0x54
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	00da      	lsls	r2, r3, #3
 800246e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002470:	18d3      	adds	r3, r2, r3
 8002472:	4a21      	ldr	r2, [pc, #132]	; (80024f8 <HAL_PCD_EP_DB_Transmit+0x814>)
 8002474:	4694      	mov	ip, r2
 8002476:	4463      	add	r3, ip
 8002478:	653b      	str	r3, [r7, #80]	; 0x50
 800247a:	238c      	movs	r3, #140	; 0x8c
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	b29a      	uxth	r2, r3
 8002482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002484:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	6959      	ldr	r1, [r3, #20]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	895a      	ldrh	r2, [r3, #10]
 8002492:	238c      	movs	r3, #140	; 0x8c
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	b29b      	uxth	r3, r3
 800249a:	f003 f823 	bl	80054e4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	001a      	movs	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	18d3      	adds	r3, r2, r3
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	2014      	movs	r0, #20
 80024b2:	183b      	adds	r3, r7, r0
 80024b4:	4911      	ldr	r1, [pc, #68]	; (80024fc <HAL_PCD_EP_DB_Transmit+0x818>)
 80024b6:	400a      	ands	r2, r1
 80024b8:	801a      	strh	r2, [r3, #0]
 80024ba:	183b      	adds	r3, r7, r0
 80024bc:	183a      	adds	r2, r7, r0
 80024be:	8812      	ldrh	r2, [r2, #0]
 80024c0:	2110      	movs	r1, #16
 80024c2:	404a      	eors	r2, r1
 80024c4:	801a      	strh	r2, [r3, #0]
 80024c6:	183b      	adds	r3, r7, r0
 80024c8:	183a      	adds	r2, r7, r0
 80024ca:	8812      	ldrh	r2, [r2, #0]
 80024cc:	2120      	movs	r1, #32
 80024ce:	404a      	eors	r2, r1
 80024d0:	801a      	strh	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	001a      	movs	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	18d3      	adds	r3, r2, r3
 80024e0:	183a      	adds	r2, r7, r0
 80024e2:	8812      	ldrh	r2, [r2, #0]
 80024e4:	4906      	ldr	r1, [pc, #24]	; (8002500 <HAL_PCD_EP_DB_Transmit+0x81c>)
 80024e6:	430a      	orrs	r2, r1
 80024e8:	b292      	uxth	r2, r2
 80024ea:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	0018      	movs	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b024      	add	sp, #144	; 0x90
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	00000406 	.word	0x00000406
 80024fc:	ffff8fbf 	.word	0xffff8fbf
 8002500:	ffff8080 	.word	0xffff8080

08002504 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	0008      	movs	r0, r1
 800250e:	0011      	movs	r1, r2
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	240a      	movs	r4, #10
 8002514:	193b      	adds	r3, r7, r4
 8002516:	1c02      	adds	r2, r0, #0
 8002518:	801a      	strh	r2, [r3, #0]
 800251a:	2308      	movs	r3, #8
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	1c0a      	adds	r2, r1, #0
 8002520:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002522:	0021      	movs	r1, r4
 8002524:	187b      	adds	r3, r7, r1
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	2280      	movs	r2, #128	; 0x80
 800252a:	4013      	ands	r3, r2
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00c      	beq.n	800254c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002532:	187b      	adds	r3, r7, r1
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	2207      	movs	r2, #7
 8002538:	4013      	ands	r3, r2
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	0013      	movs	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	189b      	adds	r3, r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	18d3      	adds	r3, r2, r3
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	e00b      	b.n	8002564 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800254c:	230a      	movs	r3, #10
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	881a      	ldrh	r2, [r3, #0]
 8002552:	0013      	movs	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	189b      	adds	r3, r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	3369      	adds	r3, #105	; 0x69
 800255c:	33ff      	adds	r3, #255	; 0xff
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	18d3      	adds	r3, r2, r3
 8002562:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002564:	2308      	movs	r3, #8
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d107      	bne.n	800257e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2200      	movs	r2, #0
 8002572:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	b29a      	uxth	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	80da      	strh	r2, [r3, #6]
 800257c:	e00b      	b.n	8002596 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2201      	movs	r2, #1
 8002582:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	b29a      	uxth	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	0c1b      	lsrs	r3, r3, #16
 8002590:	b29a      	uxth	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b007      	add	sp, #28
 800259e:	bd90      	pop	{r4, r7, pc}

080025a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	23ba      	movs	r3, #186	; 0xba
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	2101      	movs	r1, #1
 80025b6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	23b8      	movs	r3, #184	; 0xb8
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	2100      	movs	r1, #0
 80025c0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2254      	movs	r2, #84	; 0x54
 80025c6:	5a9b      	ldrh	r3, [r3, r2]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2201      	movs	r2, #1
 80025cc:	4313      	orrs	r3, r2
 80025ce:	b299      	uxth	r1, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2254      	movs	r2, #84	; 0x54
 80025d4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2254      	movs	r2, #84	; 0x54
 80025da:	5a9b      	ldrh	r3, [r3, r2]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2202      	movs	r2, #2
 80025e0:	4313      	orrs	r3, r2
 80025e2:	b299      	uxth	r1, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2254      	movs	r2, #84	; 0x54
 80025e8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b004      	add	sp, #16
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	000a      	movs	r2, r1
 80025fe:	1cfb      	adds	r3, r7, #3
 8002600:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	b002      	add	sp, #8
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800260c:	b5b0      	push	{r4, r5, r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	f000 fbaf 	bl	8002d7e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002620:	4bcf      	ldr	r3, [pc, #828]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	220c      	movs	r2, #12
 8002626:	4013      	ands	r3, r2
 8002628:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800262a:	4bcd      	ldr	r3, [pc, #820]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	025b      	lsls	r3, r3, #9
 8002632:	4013      	ands	r3, r2
 8002634:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2201      	movs	r2, #1
 800263c:	4013      	ands	r3, r2
 800263e:	d100      	bne.n	8002642 <HAL_RCC_OscConfig+0x36>
 8002640:	e07e      	b.n	8002740 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	2b08      	cmp	r3, #8
 8002646:	d007      	beq.n	8002658 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	2b0c      	cmp	r3, #12
 800264c:	d112      	bne.n	8002674 <HAL_RCC_OscConfig+0x68>
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	025b      	lsls	r3, r3, #9
 8002654:	429a      	cmp	r2, r3
 8002656:	d10d      	bne.n	8002674 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	4bc1      	ldr	r3, [pc, #772]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	029b      	lsls	r3, r3, #10
 8002660:	4013      	ands	r3, r2
 8002662:	d100      	bne.n	8002666 <HAL_RCC_OscConfig+0x5a>
 8002664:	e06b      	b.n	800273e <HAL_RCC_OscConfig+0x132>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d167      	bne.n	800273e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	f000 fb85 	bl	8002d7e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	025b      	lsls	r3, r3, #9
 800267c:	429a      	cmp	r2, r3
 800267e:	d107      	bne.n	8002690 <HAL_RCC_OscConfig+0x84>
 8002680:	4bb7      	ldr	r3, [pc, #732]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4bb6      	ldr	r3, [pc, #728]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 8002686:	2180      	movs	r1, #128	; 0x80
 8002688:	0249      	lsls	r1, r1, #9
 800268a:	430a      	orrs	r2, r1
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e027      	b.n	80026e0 <HAL_RCC_OscConfig+0xd4>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	23a0      	movs	r3, #160	; 0xa0
 8002696:	02db      	lsls	r3, r3, #11
 8002698:	429a      	cmp	r2, r3
 800269a:	d10e      	bne.n	80026ba <HAL_RCC_OscConfig+0xae>
 800269c:	4bb0      	ldr	r3, [pc, #704]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4baf      	ldr	r3, [pc, #700]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	02c9      	lsls	r1, r1, #11
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	4bad      	ldr	r3, [pc, #692]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4bac      	ldr	r3, [pc, #688]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 80026b0:	2180      	movs	r1, #128	; 0x80
 80026b2:	0249      	lsls	r1, r1, #9
 80026b4:	430a      	orrs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e012      	b.n	80026e0 <HAL_RCC_OscConfig+0xd4>
 80026ba:	4ba9      	ldr	r3, [pc, #676]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	4ba8      	ldr	r3, [pc, #672]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 80026c0:	49a8      	ldr	r1, [pc, #672]	; (8002964 <HAL_RCC_OscConfig+0x358>)
 80026c2:	400a      	ands	r2, r1
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	4ba6      	ldr	r3, [pc, #664]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	025b      	lsls	r3, r3, #9
 80026ce:	4013      	ands	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4ba2      	ldr	r3, [pc, #648]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4ba1      	ldr	r3, [pc, #644]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 80026da:	49a3      	ldr	r1, [pc, #652]	; (8002968 <HAL_RCC_OscConfig+0x35c>)
 80026dc:	400a      	ands	r2, r1
 80026de:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d015      	beq.n	8002714 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7fe f84a 	bl	8000780 <HAL_GetTick>
 80026ec:	0003      	movs	r3, r0
 80026ee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026f0:	e009      	b.n	8002706 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f2:	f7fe f845 	bl	8000780 <HAL_GetTick>
 80026f6:	0002      	movs	r2, r0
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b64      	cmp	r3, #100	; 0x64
 80026fe:	d902      	bls.n	8002706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	f000 fb3c 	bl	8002d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002706:	4b96      	ldr	r3, [pc, #600]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	029b      	lsls	r3, r3, #10
 800270e:	4013      	ands	r3, r2
 8002710:	d0ef      	beq.n	80026f2 <HAL_RCC_OscConfig+0xe6>
 8002712:	e015      	b.n	8002740 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7fe f834 	bl	8000780 <HAL_GetTick>
 8002718:	0003      	movs	r3, r0
 800271a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800271e:	f7fe f82f 	bl	8000780 <HAL_GetTick>
 8002722:	0002      	movs	r2, r0
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b64      	cmp	r3, #100	; 0x64
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e326      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002730:	4b8b      	ldr	r3, [pc, #556]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	029b      	lsls	r3, r3, #10
 8002738:	4013      	ands	r3, r2
 800273a:	d1f0      	bne.n	800271e <HAL_RCC_OscConfig+0x112>
 800273c:	e000      	b.n	8002740 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2202      	movs	r2, #2
 8002746:	4013      	ands	r3, r2
 8002748:	d100      	bne.n	800274c <HAL_RCC_OscConfig+0x140>
 800274a:	e08b      	b.n	8002864 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	2b04      	cmp	r3, #4
 8002756:	d005      	beq.n	8002764 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d13e      	bne.n	80027dc <HAL_RCC_OscConfig+0x1d0>
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d13b      	bne.n	80027dc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002764:	4b7e      	ldr	r3, [pc, #504]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2204      	movs	r2, #4
 800276a:	4013      	ands	r3, r2
 800276c:	d004      	beq.n	8002778 <HAL_RCC_OscConfig+0x16c>
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e302      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	4b79      	ldr	r3, [pc, #484]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a7b      	ldr	r2, [pc, #492]	; (800296c <HAL_RCC_OscConfig+0x360>)
 800277e:	4013      	ands	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	021a      	lsls	r2, r3, #8
 8002788:	4b75      	ldr	r3, [pc, #468]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 800278a:	430a      	orrs	r2, r1
 800278c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800278e:	4b74      	ldr	r3, [pc, #464]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2209      	movs	r2, #9
 8002794:	4393      	bics	r3, r2
 8002796:	0019      	movs	r1, r3
 8002798:	4b71      	ldr	r3, [pc, #452]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	430a      	orrs	r2, r1
 800279e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027a0:	f000 fc40 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 80027a4:	0001      	movs	r1, r0
 80027a6:	4b6e      	ldr	r3, [pc, #440]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	220f      	movs	r2, #15
 80027ae:	4013      	ands	r3, r2
 80027b0:	4a6f      	ldr	r2, [pc, #444]	; (8002970 <HAL_RCC_OscConfig+0x364>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	000a      	movs	r2, r1
 80027b6:	40da      	lsrs	r2, r3
 80027b8:	4b6e      	ldr	r3, [pc, #440]	; (8002974 <HAL_RCC_OscConfig+0x368>)
 80027ba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80027bc:	4b6e      	ldr	r3, [pc, #440]	; (8002978 <HAL_RCC_OscConfig+0x36c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2513      	movs	r5, #19
 80027c2:	197c      	adds	r4, r7, r5
 80027c4:	0018      	movs	r0, r3
 80027c6:	f7fd ff95 	bl	80006f4 <HAL_InitTick>
 80027ca:	0003      	movs	r3, r0
 80027cc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80027ce:	197b      	adds	r3, r7, r5
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d046      	beq.n	8002864 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80027d6:	197b      	adds	r3, r7, r5
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	e2d0      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d027      	beq.n	8002832 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80027e2:	4b5f      	ldr	r3, [pc, #380]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2209      	movs	r2, #9
 80027e8:	4393      	bics	r3, r2
 80027ea:	0019      	movs	r1, r3
 80027ec:	4b5c      	ldr	r3, [pc, #368]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fd ffc4 	bl	8000780 <HAL_GetTick>
 80027f8:	0003      	movs	r3, r0
 80027fa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027fe:	f7fd ffbf 	bl	8000780 <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e2b6      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002810:	4b53      	ldr	r3, [pc, #332]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2204      	movs	r2, #4
 8002816:	4013      	ands	r3, r2
 8002818:	d0f1      	beq.n	80027fe <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281a:	4b51      	ldr	r3, [pc, #324]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4a53      	ldr	r2, [pc, #332]	; (800296c <HAL_RCC_OscConfig+0x360>)
 8002820:	4013      	ands	r3, r2
 8002822:	0019      	movs	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	021a      	lsls	r2, r3, #8
 800282a:	4b4d      	ldr	r3, [pc, #308]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 800282c:	430a      	orrs	r2, r1
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	e018      	b.n	8002864 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002832:	4b4b      	ldr	r3, [pc, #300]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	4b4a      	ldr	r3, [pc, #296]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 8002838:	2101      	movs	r1, #1
 800283a:	438a      	bics	r2, r1
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7fd ff9f 	bl	8000780 <HAL_GetTick>
 8002842:	0003      	movs	r3, r0
 8002844:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002848:	f7fd ff9a 	bl	8000780 <HAL_GetTick>
 800284c:	0002      	movs	r2, r0
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e291      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800285a:	4b41      	ldr	r3, [pc, #260]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2204      	movs	r2, #4
 8002860:	4013      	ands	r3, r2
 8002862:	d1f1      	bne.n	8002848 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2210      	movs	r2, #16
 800286a:	4013      	ands	r3, r2
 800286c:	d100      	bne.n	8002870 <HAL_RCC_OscConfig+0x264>
 800286e:	e0a1      	b.n	80029b4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d140      	bne.n	80028f8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002876:	4b3a      	ldr	r3, [pc, #232]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4013      	ands	r3, r2
 8002880:	d005      	beq.n	800288e <HAL_RCC_OscConfig+0x282>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e277      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800288e:	4b34      	ldr	r3, [pc, #208]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4a3a      	ldr	r2, [pc, #232]	; (800297c <HAL_RCC_OscConfig+0x370>)
 8002894:	4013      	ands	r3, r2
 8002896:	0019      	movs	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800289c:	4b30      	ldr	r3, [pc, #192]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 800289e:	430a      	orrs	r2, r1
 80028a0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028a2:	4b2f      	ldr	r3, [pc, #188]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	0a19      	lsrs	r1, r3, #8
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	061a      	lsls	r2, r3, #24
 80028b0:	4b2b      	ldr	r3, [pc, #172]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 80028b2:	430a      	orrs	r2, r1
 80028b4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	0b5b      	lsrs	r3, r3, #13
 80028bc:	3301      	adds	r3, #1
 80028be:	2280      	movs	r2, #128	; 0x80
 80028c0:	0212      	lsls	r2, r2, #8
 80028c2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80028c4:	4b26      	ldr	r3, [pc, #152]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	210f      	movs	r1, #15
 80028cc:	400b      	ands	r3, r1
 80028ce:	4928      	ldr	r1, [pc, #160]	; (8002970 <HAL_RCC_OscConfig+0x364>)
 80028d0:	5ccb      	ldrb	r3, [r1, r3]
 80028d2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028d4:	4b27      	ldr	r3, [pc, #156]	; (8002974 <HAL_RCC_OscConfig+0x368>)
 80028d6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80028d8:	4b27      	ldr	r3, [pc, #156]	; (8002978 <HAL_RCC_OscConfig+0x36c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2513      	movs	r5, #19
 80028de:	197c      	adds	r4, r7, r5
 80028e0:	0018      	movs	r0, r3
 80028e2:	f7fd ff07 	bl	80006f4 <HAL_InitTick>
 80028e6:	0003      	movs	r3, r0
 80028e8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80028ea:	197b      	adds	r3, r7, r5
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d060      	beq.n	80029b4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80028f2:	197b      	adds	r3, r7, r5
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	e242      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d03f      	beq.n	8002980 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002900:	4b17      	ldr	r3, [pc, #92]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b16      	ldr	r3, [pc, #88]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 8002906:	2180      	movs	r1, #128	; 0x80
 8002908:	0049      	lsls	r1, r1, #1
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7fd ff37 	bl	8000780 <HAL_GetTick>
 8002912:	0003      	movs	r3, r0
 8002914:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002918:	f7fd ff32 	bl	8000780 <HAL_GetTick>
 800291c:	0002      	movs	r2, r0
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e229      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800292a:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	2380      	movs	r3, #128	; 0x80
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4013      	ands	r3, r2
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4a10      	ldr	r2, [pc, #64]	; (800297c <HAL_RCC_OscConfig+0x370>)
 800293c:	4013      	ands	r3, r2
 800293e:	0019      	movs	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 8002946:	430a      	orrs	r2, r1
 8002948:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	0a19      	lsrs	r1, r3, #8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	061a      	lsls	r2, r3, #24
 8002958:	4b01      	ldr	r3, [pc, #4]	; (8002960 <HAL_RCC_OscConfig+0x354>)
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	e029      	b.n	80029b4 <HAL_RCC_OscConfig+0x3a8>
 8002960:	40021000 	.word	0x40021000
 8002964:	fffeffff 	.word	0xfffeffff
 8002968:	fffbffff 	.word	0xfffbffff
 800296c:	ffffe0ff 	.word	0xffffe0ff
 8002970:	08008b50 	.word	0x08008b50
 8002974:	20000400 	.word	0x20000400
 8002978:	20000404 	.word	0x20000404
 800297c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002980:	4bbd      	ldr	r3, [pc, #756]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4bbc      	ldr	r3, [pc, #752]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002986:	49bd      	ldr	r1, [pc, #756]	; (8002c7c <HAL_RCC_OscConfig+0x670>)
 8002988:	400a      	ands	r2, r1
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fd fef8 	bl	8000780 <HAL_GetTick>
 8002990:	0003      	movs	r3, r0
 8002992:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002996:	f7fd fef3 	bl	8000780 <HAL_GetTick>
 800299a:	0002      	movs	r2, r0
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e1ea      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80029a8:	4bb3      	ldr	r3, [pc, #716]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4013      	ands	r3, r2
 80029b2:	d1f0      	bne.n	8002996 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2208      	movs	r2, #8
 80029ba:	4013      	ands	r3, r2
 80029bc:	d036      	beq.n	8002a2c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d019      	beq.n	80029fa <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c6:	4bac      	ldr	r3, [pc, #688]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 80029c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029ca:	4bab      	ldr	r3, [pc, #684]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 80029cc:	2101      	movs	r1, #1
 80029ce:	430a      	orrs	r2, r1
 80029d0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d2:	f7fd fed5 	bl	8000780 <HAL_GetTick>
 80029d6:	0003      	movs	r3, r0
 80029d8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029dc:	f7fd fed0 	bl	8000780 <HAL_GetTick>
 80029e0:	0002      	movs	r2, r0
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e1c7      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029ee:	4ba2      	ldr	r3, [pc, #648]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 80029f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f2:	2202      	movs	r2, #2
 80029f4:	4013      	ands	r3, r2
 80029f6:	d0f1      	beq.n	80029dc <HAL_RCC_OscConfig+0x3d0>
 80029f8:	e018      	b.n	8002a2c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fa:	4b9f      	ldr	r3, [pc, #636]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 80029fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029fe:	4b9e      	ldr	r3, [pc, #632]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002a00:	2101      	movs	r1, #1
 8002a02:	438a      	bics	r2, r1
 8002a04:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a06:	f7fd febb 	bl	8000780 <HAL_GetTick>
 8002a0a:	0003      	movs	r3, r0
 8002a0c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a10:	f7fd feb6 	bl	8000780 <HAL_GetTick>
 8002a14:	0002      	movs	r2, r0
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e1ad      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a22:	4b95      	ldr	r3, [pc, #596]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a26:	2202      	movs	r2, #2
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d1f1      	bne.n	8002a10 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2204      	movs	r2, #4
 8002a32:	4013      	ands	r3, r2
 8002a34:	d100      	bne.n	8002a38 <HAL_RCC_OscConfig+0x42c>
 8002a36:	e0ae      	b.n	8002b96 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a38:	2027      	movs	r0, #39	; 0x27
 8002a3a:	183b      	adds	r3, r7, r0
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a40:	4b8d      	ldr	r3, [pc, #564]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	055b      	lsls	r3, r3, #21
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d109      	bne.n	8002a60 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	4b8a      	ldr	r3, [pc, #552]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a50:	4b89      	ldr	r3, [pc, #548]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002a52:	2180      	movs	r1, #128	; 0x80
 8002a54:	0549      	lsls	r1, r1, #21
 8002a56:	430a      	orrs	r2, r1
 8002a58:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a5a:	183b      	adds	r3, r7, r0
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a60:	4b87      	ldr	r3, [pc, #540]	; (8002c80 <HAL_RCC_OscConfig+0x674>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d11a      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a6c:	4b84      	ldr	r3, [pc, #528]	; (8002c80 <HAL_RCC_OscConfig+0x674>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b83      	ldr	r3, [pc, #524]	; (8002c80 <HAL_RCC_OscConfig+0x674>)
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	0049      	lsls	r1, r1, #1
 8002a76:	430a      	orrs	r2, r1
 8002a78:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a7a:	f7fd fe81 	bl	8000780 <HAL_GetTick>
 8002a7e:	0003      	movs	r3, r0
 8002a80:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a84:	f7fd fe7c 	bl	8000780 <HAL_GetTick>
 8002a88:	0002      	movs	r2, r0
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	; 0x64
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e173      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a96:	4b7a      	ldr	r3, [pc, #488]	; (8002c80 <HAL_RCC_OscConfig+0x674>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_OscConfig+0x4b2>
 8002aae:	4b72      	ldr	r3, [pc, #456]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002ab0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ab2:	4b71      	ldr	r3, [pc, #452]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002ab4:	2180      	movs	r1, #128	; 0x80
 8002ab6:	0049      	lsls	r1, r1, #1
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	651a      	str	r2, [r3, #80]	; 0x50
 8002abc:	e031      	b.n	8002b22 <HAL_RCC_OscConfig+0x516>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x4d4>
 8002ac6:	4b6c      	ldr	r3, [pc, #432]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002ac8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aca:	4b6b      	ldr	r3, [pc, #428]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002acc:	496b      	ldr	r1, [pc, #428]	; (8002c7c <HAL_RCC_OscConfig+0x670>)
 8002ace:	400a      	ands	r2, r1
 8002ad0:	651a      	str	r2, [r3, #80]	; 0x50
 8002ad2:	4b69      	ldr	r3, [pc, #420]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002ad4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ad6:	4b68      	ldr	r3, [pc, #416]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002ad8:	496a      	ldr	r1, [pc, #424]	; (8002c84 <HAL_RCC_OscConfig+0x678>)
 8002ada:	400a      	ands	r2, r1
 8002adc:	651a      	str	r2, [r3, #80]	; 0x50
 8002ade:	e020      	b.n	8002b22 <HAL_RCC_OscConfig+0x516>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	23a0      	movs	r3, #160	; 0xa0
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d10e      	bne.n	8002b0a <HAL_RCC_OscConfig+0x4fe>
 8002aec:	4b62      	ldr	r3, [pc, #392]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002aee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002af0:	4b61      	ldr	r3, [pc, #388]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002af2:	2180      	movs	r1, #128	; 0x80
 8002af4:	00c9      	lsls	r1, r1, #3
 8002af6:	430a      	orrs	r2, r1
 8002af8:	651a      	str	r2, [r3, #80]	; 0x50
 8002afa:	4b5f      	ldr	r3, [pc, #380]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002afc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002afe:	4b5e      	ldr	r3, [pc, #376]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002b00:	2180      	movs	r1, #128	; 0x80
 8002b02:	0049      	lsls	r1, r1, #1
 8002b04:	430a      	orrs	r2, r1
 8002b06:	651a      	str	r2, [r3, #80]	; 0x50
 8002b08:	e00b      	b.n	8002b22 <HAL_RCC_OscConfig+0x516>
 8002b0a:	4b5b      	ldr	r3, [pc, #364]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b0e:	4b5a      	ldr	r3, [pc, #360]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002b10:	495a      	ldr	r1, [pc, #360]	; (8002c7c <HAL_RCC_OscConfig+0x670>)
 8002b12:	400a      	ands	r2, r1
 8002b14:	651a      	str	r2, [r3, #80]	; 0x50
 8002b16:	4b58      	ldr	r3, [pc, #352]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002b18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b1a:	4b57      	ldr	r3, [pc, #348]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002b1c:	4959      	ldr	r1, [pc, #356]	; (8002c84 <HAL_RCC_OscConfig+0x678>)
 8002b1e:	400a      	ands	r2, r1
 8002b20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d015      	beq.n	8002b56 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2a:	f7fd fe29 	bl	8000780 <HAL_GetTick>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b32:	e009      	b.n	8002b48 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b34:	f7fd fe24 	bl	8000780 <HAL_GetTick>
 8002b38:	0002      	movs	r2, r0
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_RCC_OscConfig+0x67c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e11a      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b48:	4b4b      	ldr	r3, [pc, #300]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002b4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4013      	ands	r3, r2
 8002b52:	d0ef      	beq.n	8002b34 <HAL_RCC_OscConfig+0x528>
 8002b54:	e014      	b.n	8002b80 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b56:	f7fd fe13 	bl	8000780 <HAL_GetTick>
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b5e:	e009      	b.n	8002b74 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7fd fe0e 	bl	8000780 <HAL_GetTick>
 8002b64:	0002      	movs	r2, r0
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	4a47      	ldr	r2, [pc, #284]	; (8002c88 <HAL_RCC_OscConfig+0x67c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e104      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b74:	4b40      	ldr	r3, [pc, #256]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002b76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d1ef      	bne.n	8002b60 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b80:	2327      	movs	r3, #39	; 0x27
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d105      	bne.n	8002b96 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8a:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b8e:	4b3a      	ldr	r3, [pc, #232]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002b90:	493e      	ldr	r1, [pc, #248]	; (8002c8c <HAL_RCC_OscConfig+0x680>)
 8002b92:	400a      	ands	r2, r1
 8002b94:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d049      	beq.n	8002c34 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d026      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002ba8:	4b33      	ldr	r3, [pc, #204]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	4b32      	ldr	r3, [pc, #200]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002bae:	2101      	movs	r1, #1
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb8:	4b2f      	ldr	r3, [pc, #188]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002bba:	2101      	movs	r1, #1
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc0:	4b33      	ldr	r3, [pc, #204]	; (8002c90 <HAL_RCC_OscConfig+0x684>)
 8002bc2:	6a1a      	ldr	r2, [r3, #32]
 8002bc4:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <HAL_RCC_OscConfig+0x684>)
 8002bc6:	2180      	movs	r1, #128	; 0x80
 8002bc8:	0189      	lsls	r1, r1, #6
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7fd fdd7 	bl	8000780 <HAL_GetTick>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bd8:	f7fd fdd2 	bl	8000780 <HAL_GetTick>
 8002bdc:	0002      	movs	r2, r0
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e0c9      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bea:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d0f1      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x5cc>
 8002bf4:	e01e      	b.n	8002c34 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002bf6:	4b20      	ldr	r3, [pc, #128]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	438a      	bics	r2, r1
 8002c00:	609a      	str	r2, [r3, #8]
 8002c02:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <HAL_RCC_OscConfig+0x684>)
 8002c04:	6a1a      	ldr	r2, [r3, #32]
 8002c06:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <HAL_RCC_OscConfig+0x684>)
 8002c08:	4922      	ldr	r1, [pc, #136]	; (8002c94 <HAL_RCC_OscConfig+0x688>)
 8002c0a:	400a      	ands	r2, r1
 8002c0c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0e:	f7fd fdb7 	bl	8000780 <HAL_GetTick>
 8002c12:	0003      	movs	r3, r0
 8002c14:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c18:	f7fd fdb2 	bl	8000780 <HAL_GetTick>
 8002c1c:	0002      	movs	r2, r0
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e0a9      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c2a:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	4013      	ands	r3, r2
 8002c32:	d1f1      	bne.n	8002c18 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d100      	bne.n	8002c3e <HAL_RCC_OscConfig+0x632>
 8002c3c:	e09e      	b.n	8002d7c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	2b0c      	cmp	r3, #12
 8002c42:	d100      	bne.n	8002c46 <HAL_RCC_OscConfig+0x63a>
 8002c44:	e077      	b.n	8002d36 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d158      	bne.n	8002d00 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <HAL_RCC_OscConfig+0x66c>)
 8002c54:	4910      	ldr	r1, [pc, #64]	; (8002c98 <HAL_RCC_OscConfig+0x68c>)
 8002c56:	400a      	ands	r2, r1
 8002c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5a:	f7fd fd91 	bl	8000780 <HAL_GetTick>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c62:	e01b      	b.n	8002c9c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c64:	f7fd fd8c 	bl	8000780 <HAL_GetTick>
 8002c68:	0002      	movs	r2, r0
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d914      	bls.n	8002c9c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e083      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	fffffeff 	.word	0xfffffeff
 8002c80:	40007000 	.word	0x40007000
 8002c84:	fffffbff 	.word	0xfffffbff
 8002c88:	00001388 	.word	0x00001388
 8002c8c:	efffffff 	.word	0xefffffff
 8002c90:	40010000 	.word	0x40010000
 8002c94:	ffffdfff 	.word	0xffffdfff
 8002c98:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c9c:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <HAL_RCC_OscConfig+0x77c>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	049b      	lsls	r3, r3, #18
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d1dd      	bne.n	8002c64 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca8:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <HAL_RCC_OscConfig+0x77c>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a37      	ldr	r2, [pc, #220]	; (8002d8c <HAL_RCC_OscConfig+0x780>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <HAL_RCC_OscConfig+0x77c>)
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc8:	4b2f      	ldr	r3, [pc, #188]	; (8002d88 <HAL_RCC_OscConfig+0x77c>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b2e      	ldr	r3, [pc, #184]	; (8002d88 <HAL_RCC_OscConfig+0x77c>)
 8002cce:	2180      	movs	r1, #128	; 0x80
 8002cd0:	0449      	lsls	r1, r1, #17
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7fd fd53 	bl	8000780 <HAL_GetTick>
 8002cda:	0003      	movs	r3, r0
 8002cdc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce0:	f7fd fd4e 	bl	8000780 <HAL_GetTick>
 8002ce4:	0002      	movs	r2, r0
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e045      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002cf2:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <HAL_RCC_OscConfig+0x77c>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	049b      	lsls	r3, r3, #18
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x6d4>
 8002cfe:	e03d      	b.n	8002d7c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d00:	4b21      	ldr	r3, [pc, #132]	; (8002d88 <HAL_RCC_OscConfig+0x77c>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <HAL_RCC_OscConfig+0x77c>)
 8002d06:	4922      	ldr	r1, [pc, #136]	; (8002d90 <HAL_RCC_OscConfig+0x784>)
 8002d08:	400a      	ands	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7fd fd38 	bl	8000780 <HAL_GetTick>
 8002d10:	0003      	movs	r3, r0
 8002d12:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d16:	f7fd fd33 	bl	8000780 <HAL_GetTick>
 8002d1a:	0002      	movs	r2, r0
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e02a      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d28:	4b17      	ldr	r3, [pc, #92]	; (8002d88 <HAL_RCC_OscConfig+0x77c>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	049b      	lsls	r3, r3, #18
 8002d30:	4013      	ands	r3, r2
 8002d32:	d1f0      	bne.n	8002d16 <HAL_RCC_OscConfig+0x70a>
 8002d34:	e022      	b.n	8002d7c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e01d      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d42:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <HAL_RCC_OscConfig+0x77c>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	025b      	lsls	r3, r3, #9
 8002d4e:	401a      	ands	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d10f      	bne.n	8002d78 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	23f0      	movs	r3, #240	; 0xf0
 8002d5c:	039b      	lsls	r3, r3, #14
 8002d5e:	401a      	ands	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d107      	bne.n	8002d78 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	23c0      	movs	r3, #192	; 0xc0
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	401a      	ands	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	0018      	movs	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b00a      	add	sp, #40	; 0x28
 8002d84:	bdb0      	pop	{r4, r5, r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	ff02ffff 	.word	0xff02ffff
 8002d90:	feffffff 	.word	0xfeffffff

08002d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e128      	b.n	8002ffa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da8:	4b96      	ldr	r3, [pc, #600]	; (8003004 <HAL_RCC_ClockConfig+0x270>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2201      	movs	r2, #1
 8002dae:	4013      	ands	r3, r2
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d91e      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b93      	ldr	r3, [pc, #588]	; (8003004 <HAL_RCC_ClockConfig+0x270>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	4393      	bics	r3, r2
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	4b90      	ldr	r3, [pc, #576]	; (8003004 <HAL_RCC_ClockConfig+0x270>)
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002dc8:	f7fd fcda 	bl	8000780 <HAL_GetTick>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd0:	e009      	b.n	8002de6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd2:	f7fd fcd5 	bl	8000780 <HAL_GetTick>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	4a8a      	ldr	r2, [pc, #552]	; (8003008 <HAL_RCC_ClockConfig+0x274>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e109      	b.n	8002ffa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b87      	ldr	r3, [pc, #540]	; (8003004 <HAL_RCC_ClockConfig+0x270>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2201      	movs	r2, #1
 8002dec:	4013      	ands	r3, r2
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1ee      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dfe:	4b83      	ldr	r3, [pc, #524]	; (800300c <HAL_RCC_ClockConfig+0x278>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	22f0      	movs	r2, #240	; 0xf0
 8002e04:	4393      	bics	r3, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	4b7f      	ldr	r3, [pc, #508]	; (800300c <HAL_RCC_ClockConfig+0x278>)
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2201      	movs	r2, #1
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d100      	bne.n	8002e1e <HAL_RCC_ClockConfig+0x8a>
 8002e1c:	e089      	b.n	8002f32 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e26:	4b79      	ldr	r3, [pc, #484]	; (800300c <HAL_RCC_ClockConfig+0x278>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	029b      	lsls	r3, r3, #10
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d120      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e0e1      	b.n	8002ffa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e3e:	4b73      	ldr	r3, [pc, #460]	; (800300c <HAL_RCC_ClockConfig+0x278>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	049b      	lsls	r3, r3, #18
 8002e46:	4013      	ands	r3, r2
 8002e48:	d114      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0d5      	b.n	8002ffa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d106      	bne.n	8002e64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e56:	4b6d      	ldr	r3, [pc, #436]	; (800300c <HAL_RCC_ClockConfig+0x278>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d109      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0ca      	b.n	8002ffa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e64:	4b69      	ldr	r3, [pc, #420]	; (800300c <HAL_RCC_ClockConfig+0x278>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0c2      	b.n	8002ffa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e74:	4b65      	ldr	r3, [pc, #404]	; (800300c <HAL_RCC_ClockConfig+0x278>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	4393      	bics	r3, r2
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	4b62      	ldr	r3, [pc, #392]	; (800300c <HAL_RCC_ClockConfig+0x278>)
 8002e84:	430a      	orrs	r2, r1
 8002e86:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e88:	f7fd fc7a 	bl	8000780 <HAL_GetTick>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d111      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e98:	e009      	b.n	8002eae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e9a:	f7fd fc71 	bl	8000780 <HAL_GetTick>
 8002e9e:	0002      	movs	r2, r0
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	4a58      	ldr	r2, [pc, #352]	; (8003008 <HAL_RCC_ClockConfig+0x274>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e0a5      	b.n	8002ffa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eae:	4b57      	ldr	r3, [pc, #348]	; (800300c <HAL_RCC_ClockConfig+0x278>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	220c      	movs	r2, #12
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d1ef      	bne.n	8002e9a <HAL_RCC_ClockConfig+0x106>
 8002eba:	e03a      	b.n	8002f32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d111      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ec4:	e009      	b.n	8002eda <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec6:	f7fd fc5b 	bl	8000780 <HAL_GetTick>
 8002eca:	0002      	movs	r2, r0
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	4a4d      	ldr	r2, [pc, #308]	; (8003008 <HAL_RCC_ClockConfig+0x274>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e08f      	b.n	8002ffa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eda:	4b4c      	ldr	r3, [pc, #304]	; (800300c <HAL_RCC_ClockConfig+0x278>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	220c      	movs	r2, #12
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d1ef      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0x132>
 8002ee6:	e024      	b.n	8002f32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d11b      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ef0:	e009      	b.n	8002f06 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef2:	f7fd fc45 	bl	8000780 <HAL_GetTick>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	4a42      	ldr	r2, [pc, #264]	; (8003008 <HAL_RCC_ClockConfig+0x274>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e079      	b.n	8002ffa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f06:	4b41      	ldr	r3, [pc, #260]	; (800300c <HAL_RCC_ClockConfig+0x278>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d1ef      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x15e>
 8002f12:	e00e      	b.n	8002f32 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f14:	f7fd fc34 	bl	8000780 <HAL_GetTick>
 8002f18:	0002      	movs	r2, r0
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	4a3a      	ldr	r2, [pc, #232]	; (8003008 <HAL_RCC_ClockConfig+0x274>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e068      	b.n	8002ffa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f28:	4b38      	ldr	r3, [pc, #224]	; (800300c <HAL_RCC_ClockConfig+0x278>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	220c      	movs	r2, #12
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f32:	4b34      	ldr	r3, [pc, #208]	; (8003004 <HAL_RCC_ClockConfig+0x270>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2201      	movs	r2, #1
 8002f38:	4013      	ands	r3, r2
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d21e      	bcs.n	8002f7e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f40:	4b30      	ldr	r3, [pc, #192]	; (8003004 <HAL_RCC_ClockConfig+0x270>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2201      	movs	r2, #1
 8002f46:	4393      	bics	r3, r2
 8002f48:	0019      	movs	r1, r3
 8002f4a:	4b2e      	ldr	r3, [pc, #184]	; (8003004 <HAL_RCC_ClockConfig+0x270>)
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f52:	f7fd fc15 	bl	8000780 <HAL_GetTick>
 8002f56:	0003      	movs	r3, r0
 8002f58:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	e009      	b.n	8002f70 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5c:	f7fd fc10 	bl	8000780 <HAL_GetTick>
 8002f60:	0002      	movs	r2, r0
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	4a28      	ldr	r2, [pc, #160]	; (8003008 <HAL_RCC_ClockConfig+0x274>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e044      	b.n	8002ffa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f70:	4b24      	ldr	r3, [pc, #144]	; (8003004 <HAL_RCC_ClockConfig+0x270>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2201      	movs	r2, #1
 8002f76:	4013      	ands	r3, r2
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d1ee      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2204      	movs	r2, #4
 8002f84:	4013      	ands	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f88:	4b20      	ldr	r3, [pc, #128]	; (800300c <HAL_RCC_ClockConfig+0x278>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4a20      	ldr	r2, [pc, #128]	; (8003010 <HAL_RCC_ClockConfig+0x27c>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	4b1d      	ldr	r3, [pc, #116]	; (800300c <HAL_RCC_ClockConfig+0x278>)
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2208      	movs	r2, #8
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d00a      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fa6:	4b19      	ldr	r3, [pc, #100]	; (800300c <HAL_RCC_ClockConfig+0x278>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	4a1a      	ldr	r2, [pc, #104]	; (8003014 <HAL_RCC_ClockConfig+0x280>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	0019      	movs	r1, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	00da      	lsls	r2, r3, #3
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <HAL_RCC_ClockConfig+0x278>)
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fbc:	f000 f832 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002fc0:	0001      	movs	r1, r0
 8002fc2:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_RCC_ClockConfig+0x278>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	091b      	lsrs	r3, r3, #4
 8002fc8:	220f      	movs	r2, #15
 8002fca:	4013      	ands	r3, r2
 8002fcc:	4a12      	ldr	r2, [pc, #72]	; (8003018 <HAL_RCC_ClockConfig+0x284>)
 8002fce:	5cd3      	ldrb	r3, [r2, r3]
 8002fd0:	000a      	movs	r2, r1
 8002fd2:	40da      	lsrs	r2, r3
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <HAL_RCC_ClockConfig+0x288>)
 8002fd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <HAL_RCC_ClockConfig+0x28c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	250b      	movs	r5, #11
 8002fde:	197c      	adds	r4, r7, r5
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7fd fb87 	bl	80006f4 <HAL_InitTick>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002fea:	197b      	adds	r3, r7, r5
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002ff2:	197b      	adds	r3, r7, r5
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b004      	add	sp, #16
 8003000:	bdb0      	pop	{r4, r5, r7, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	40022000 	.word	0x40022000
 8003008:	00001388 	.word	0x00001388
 800300c:	40021000 	.word	0x40021000
 8003010:	fffff8ff 	.word	0xfffff8ff
 8003014:	ffffc7ff 	.word	0xffffc7ff
 8003018:	08008b50 	.word	0x08008b50
 800301c:	20000400 	.word	0x20000400
 8003020:	20000404 	.word	0x20000404

08003024 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	b5b0      	push	{r4, r5, r7, lr}
 8003026:	b08e      	sub	sp, #56	; 0x38
 8003028:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800302a:	4b4c      	ldr	r3, [pc, #304]	; (800315c <HAL_RCC_GetSysClockFreq+0x138>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003032:	230c      	movs	r3, #12
 8003034:	4013      	ands	r3, r2
 8003036:	2b0c      	cmp	r3, #12
 8003038:	d014      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x40>
 800303a:	d900      	bls.n	800303e <HAL_RCC_GetSysClockFreq+0x1a>
 800303c:	e07b      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x112>
 800303e:	2b04      	cmp	r3, #4
 8003040:	d002      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x24>
 8003042:	2b08      	cmp	r3, #8
 8003044:	d00b      	beq.n	800305e <HAL_RCC_GetSysClockFreq+0x3a>
 8003046:	e076      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003048:	4b44      	ldr	r3, [pc, #272]	; (800315c <HAL_RCC_GetSysClockFreq+0x138>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2210      	movs	r2, #16
 800304e:	4013      	ands	r3, r2
 8003050:	d002      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003052:	4b43      	ldr	r3, [pc, #268]	; (8003160 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003054:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003056:	e07c      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003058:	4b42      	ldr	r3, [pc, #264]	; (8003164 <HAL_RCC_GetSysClockFreq+0x140>)
 800305a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800305c:	e079      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800305e:	4b42      	ldr	r3, [pc, #264]	; (8003168 <HAL_RCC_GetSysClockFreq+0x144>)
 8003060:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003062:	e076      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003066:	0c9a      	lsrs	r2, r3, #18
 8003068:	230f      	movs	r3, #15
 800306a:	401a      	ands	r2, r3
 800306c:	4b3f      	ldr	r3, [pc, #252]	; (800316c <HAL_RCC_GetSysClockFreq+0x148>)
 800306e:	5c9b      	ldrb	r3, [r3, r2]
 8003070:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003074:	0d9a      	lsrs	r2, r3, #22
 8003076:	2303      	movs	r3, #3
 8003078:	4013      	ands	r3, r2
 800307a:	3301      	adds	r3, #1
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800307e:	4b37      	ldr	r3, [pc, #220]	; (800315c <HAL_RCC_GetSysClockFreq+0x138>)
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	025b      	lsls	r3, r3, #9
 8003086:	4013      	ands	r3, r2
 8003088:	d01a      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	4a35      	ldr	r2, [pc, #212]	; (8003168 <HAL_RCC_GetSysClockFreq+0x144>)
 8003094:	2300      	movs	r3, #0
 8003096:	69b8      	ldr	r0, [r7, #24]
 8003098:	69f9      	ldr	r1, [r7, #28]
 800309a:	f7fd f8e1 	bl	8000260 <__aeabi_lmul>
 800309e:	0002      	movs	r2, r0
 80030a0:	000b      	movs	r3, r1
 80030a2:	0010      	movs	r0, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f7fd f8b5 	bl	8000220 <__aeabi_uldivmod>
 80030b6:	0002      	movs	r2, r0
 80030b8:	000b      	movs	r3, r1
 80030ba:	0013      	movs	r3, r2
 80030bc:	637b      	str	r3, [r7, #52]	; 0x34
 80030be:	e037      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80030c0:	4b26      	ldr	r3, [pc, #152]	; (800315c <HAL_RCC_GetSysClockFreq+0x138>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2210      	movs	r2, #16
 80030c6:	4013      	ands	r3, r2
 80030c8:	d01a      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	4a23      	ldr	r2, [pc, #140]	; (8003160 <HAL_RCC_GetSysClockFreq+0x13c>)
 80030d4:	2300      	movs	r3, #0
 80030d6:	68b8      	ldr	r0, [r7, #8]
 80030d8:	68f9      	ldr	r1, [r7, #12]
 80030da:	f7fd f8c1 	bl	8000260 <__aeabi_lmul>
 80030de:	0002      	movs	r2, r0
 80030e0:	000b      	movs	r3, r1
 80030e2:	0010      	movs	r0, r2
 80030e4:	0019      	movs	r1, r3
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f7fd f895 	bl	8000220 <__aeabi_uldivmod>
 80030f6:	0002      	movs	r2, r0
 80030f8:	000b      	movs	r3, r1
 80030fa:	0013      	movs	r3, r2
 80030fc:	637b      	str	r3, [r7, #52]	; 0x34
 80030fe:	e017      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003102:	0018      	movs	r0, r3
 8003104:	2300      	movs	r3, #0
 8003106:	0019      	movs	r1, r3
 8003108:	4a16      	ldr	r2, [pc, #88]	; (8003164 <HAL_RCC_GetSysClockFreq+0x140>)
 800310a:	2300      	movs	r3, #0
 800310c:	f7fd f8a8 	bl	8000260 <__aeabi_lmul>
 8003110:	0002      	movs	r2, r0
 8003112:	000b      	movs	r3, r1
 8003114:	0010      	movs	r0, r2
 8003116:	0019      	movs	r1, r3
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	001c      	movs	r4, r3
 800311c:	2300      	movs	r3, #0
 800311e:	001d      	movs	r5, r3
 8003120:	0022      	movs	r2, r4
 8003122:	002b      	movs	r3, r5
 8003124:	f7fd f87c 	bl	8000220 <__aeabi_uldivmod>
 8003128:	0002      	movs	r2, r0
 800312a:	000b      	movs	r3, r1
 800312c:	0013      	movs	r3, r2
 800312e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003132:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003134:	e00d      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003136:	4b09      	ldr	r3, [pc, #36]	; (800315c <HAL_RCC_GetSysClockFreq+0x138>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	0b5b      	lsrs	r3, r3, #13
 800313c:	2207      	movs	r2, #7
 800313e:	4013      	ands	r3, r2
 8003140:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	3301      	adds	r3, #1
 8003146:	2280      	movs	r2, #128	; 0x80
 8003148:	0212      	lsls	r2, r2, #8
 800314a:	409a      	lsls	r2, r3
 800314c:	0013      	movs	r3, r2
 800314e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003150:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003154:	0018      	movs	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	b00e      	add	sp, #56	; 0x38
 800315a:	bdb0      	pop	{r4, r5, r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	003d0900 	.word	0x003d0900
 8003164:	00f42400 	.word	0x00f42400
 8003168:	007a1200 	.word	0x007a1200
 800316c:	08008b60 	.word	0x08008b60

08003170 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003178:	2317      	movs	r3, #23
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2220      	movs	r2, #32
 8003186:	4013      	ands	r3, r2
 8003188:	d106      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	4013      	ands	r3, r2
 8003194:	d100      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003196:	e104      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003198:	4bb1      	ldr	r3, [pc, #708]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800319a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	055b      	lsls	r3, r3, #21
 80031a0:	4013      	ands	r3, r2
 80031a2:	d10a      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a4:	4bae      	ldr	r3, [pc, #696]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a8:	4bad      	ldr	r3, [pc, #692]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031aa:	2180      	movs	r1, #128	; 0x80
 80031ac:	0549      	lsls	r1, r1, #21
 80031ae:	430a      	orrs	r2, r1
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80031b2:	2317      	movs	r3, #23
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ba:	4baa      	ldr	r3, [pc, #680]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4013      	ands	r3, r2
 80031c4:	d11a      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c6:	4ba7      	ldr	r3, [pc, #668]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4ba6      	ldr	r3, [pc, #664]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031cc:	2180      	movs	r1, #128	; 0x80
 80031ce:	0049      	lsls	r1, r1, #1
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d4:	f7fd fad4 	bl	8000780 <HAL_GetTick>
 80031d8:	0003      	movs	r3, r0
 80031da:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	e008      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031de:	f7fd facf 	bl	8000780 <HAL_GetTick>
 80031e2:	0002      	movs	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b64      	cmp	r3, #100	; 0x64
 80031ea:	d901      	bls.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e133      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	4b9c      	ldr	r3, [pc, #624]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	2380      	movs	r3, #128	; 0x80
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4013      	ands	r3, r2
 80031fa:	d0f0      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80031fc:	4b98      	ldr	r3, [pc, #608]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	23c0      	movs	r3, #192	; 0xc0
 8003202:	039b      	lsls	r3, r3, #14
 8003204:	4013      	ands	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	23c0      	movs	r3, #192	; 0xc0
 800320e:	039b      	lsls	r3, r3, #14
 8003210:	4013      	ands	r3, r2
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	429a      	cmp	r2, r3
 8003216:	d107      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	23c0      	movs	r3, #192	; 0xc0
 800321e:	039b      	lsls	r3, r3, #14
 8003220:	4013      	ands	r3, r2
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	429a      	cmp	r2, r3
 8003226:	d013      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	23c0      	movs	r3, #192	; 0xc0
 800322e:	029b      	lsls	r3, r3, #10
 8003230:	401a      	ands	r2, r3
 8003232:	23c0      	movs	r3, #192	; 0xc0
 8003234:	029b      	lsls	r3, r3, #10
 8003236:	429a      	cmp	r2, r3
 8003238:	d10a      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800323a:	4b89      	ldr	r3, [pc, #548]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	029b      	lsls	r3, r3, #10
 8003242:	401a      	ands	r2, r3
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	029b      	lsls	r3, r3, #10
 8003248:	429a      	cmp	r2, r3
 800324a:	d101      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e103      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003250:	4b83      	ldr	r3, [pc, #524]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003252:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003254:	23c0      	movs	r3, #192	; 0xc0
 8003256:	029b      	lsls	r3, r3, #10
 8003258:	4013      	ands	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d049      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	23c0      	movs	r3, #192	; 0xc0
 8003268:	029b      	lsls	r3, r3, #10
 800326a:	4013      	ands	r3, r2
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	429a      	cmp	r2, r3
 8003270:	d004      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2220      	movs	r2, #32
 8003278:	4013      	ands	r3, r2
 800327a:	d10d      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	23c0      	movs	r3, #192	; 0xc0
 8003282:	029b      	lsls	r3, r3, #10
 8003284:	4013      	ands	r3, r2
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	429a      	cmp	r2, r3
 800328a:	d034      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	4013      	ands	r3, r2
 8003296:	d02e      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003298:	4b71      	ldr	r3, [pc, #452]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800329a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329c:	4a72      	ldr	r2, [pc, #456]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800329e:	4013      	ands	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032a2:	4b6f      	ldr	r3, [pc, #444]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032a6:	4b6e      	ldr	r3, [pc, #440]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032a8:	2180      	movs	r1, #128	; 0x80
 80032aa:	0309      	lsls	r1, r1, #12
 80032ac:	430a      	orrs	r2, r1
 80032ae:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032b0:	4b6b      	ldr	r3, [pc, #428]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032b4:	4b6a      	ldr	r3, [pc, #424]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032b6:	496d      	ldr	r1, [pc, #436]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80032b8:	400a      	ands	r2, r1
 80032ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80032bc:	4b68      	ldr	r3, [pc, #416]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4013      	ands	r3, r2
 80032ca:	d014      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7fd fa58 	bl	8000780 <HAL_GetTick>
 80032d0:	0003      	movs	r3, r0
 80032d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032d4:	e009      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fd fa53 	bl	8000780 <HAL_GetTick>
 80032da:	0002      	movs	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	4a63      	ldr	r2, [pc, #396]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e0b6      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032ea:	4b5d      	ldr	r3, [pc, #372]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4013      	ands	r3, r2
 80032f4:	d0ef      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	2380      	movs	r3, #128	; 0x80
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	4013      	ands	r3, r2
 8003300:	d01f      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	23c0      	movs	r3, #192	; 0xc0
 8003308:	029b      	lsls	r3, r3, #10
 800330a:	401a      	ands	r2, r3
 800330c:	23c0      	movs	r3, #192	; 0xc0
 800330e:	029b      	lsls	r3, r3, #10
 8003310:	429a      	cmp	r2, r3
 8003312:	d10c      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003314:	4b52      	ldr	r3, [pc, #328]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a56      	ldr	r2, [pc, #344]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800331a:	4013      	ands	r3, r2
 800331c:	0019      	movs	r1, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	23c0      	movs	r3, #192	; 0xc0
 8003324:	039b      	lsls	r3, r3, #14
 8003326:	401a      	ands	r2, r3
 8003328:	4b4d      	ldr	r3, [pc, #308]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800332a:	430a      	orrs	r2, r1
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	4b4c      	ldr	r3, [pc, #304]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003330:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	23c0      	movs	r3, #192	; 0xc0
 8003338:	029b      	lsls	r3, r3, #10
 800333a:	401a      	ands	r2, r3
 800333c:	4b48      	ldr	r3, [pc, #288]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800333e:	430a      	orrs	r2, r1
 8003340:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2220      	movs	r2, #32
 8003348:	4013      	ands	r3, r2
 800334a:	d01f      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	23c0      	movs	r3, #192	; 0xc0
 8003352:	029b      	lsls	r3, r3, #10
 8003354:	401a      	ands	r2, r3
 8003356:	23c0      	movs	r3, #192	; 0xc0
 8003358:	029b      	lsls	r3, r3, #10
 800335a:	429a      	cmp	r2, r3
 800335c:	d10c      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800335e:	4b40      	ldr	r3, [pc, #256]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a44      	ldr	r2, [pc, #272]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003364:	4013      	ands	r3, r2
 8003366:	0019      	movs	r1, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	23c0      	movs	r3, #192	; 0xc0
 800336e:	039b      	lsls	r3, r3, #14
 8003370:	401a      	ands	r2, r3
 8003372:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003374:	430a      	orrs	r2, r1
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	4b39      	ldr	r3, [pc, #228]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800337a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	23c0      	movs	r3, #192	; 0xc0
 8003382:	029b      	lsls	r3, r3, #10
 8003384:	401a      	ands	r2, r3
 8003386:	4b36      	ldr	r3, [pc, #216]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003388:	430a      	orrs	r2, r1
 800338a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800338c:	2317      	movs	r3, #23
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d105      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003396:	4b32      	ldr	r3, [pc, #200]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800339a:	4b31      	ldr	r3, [pc, #196]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800339c:	4936      	ldr	r1, [pc, #216]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800339e:	400a      	ands	r2, r1
 80033a0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2201      	movs	r2, #1
 80033a8:	4013      	ands	r3, r2
 80033aa:	d009      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ac:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b0:	2203      	movs	r2, #3
 80033b2:	4393      	bics	r3, r2
 80033b4:	0019      	movs	r1, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	4b29      	ldr	r3, [pc, #164]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033bc:	430a      	orrs	r2, r1
 80033be:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2202      	movs	r2, #2
 80033c6:	4013      	ands	r3, r2
 80033c8:	d009      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033ca:	4b25      	ldr	r3, [pc, #148]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ce:	220c      	movs	r2, #12
 80033d0:	4393      	bics	r3, r2
 80033d2:	0019      	movs	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	4b21      	ldr	r3, [pc, #132]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033da:	430a      	orrs	r2, r1
 80033dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2204      	movs	r2, #4
 80033e4:	4013      	ands	r3, r2
 80033e6:	d009      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033e8:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ec:	4a23      	ldr	r2, [pc, #140]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	0019      	movs	r1, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033f8:	430a      	orrs	r2, r1
 80033fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2208      	movs	r2, #8
 8003402:	4013      	ands	r3, r2
 8003404:	d009      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003406:	4b16      	ldr	r3, [pc, #88]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340a:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800340c:	4013      	ands	r3, r2
 800340e:	0019      	movs	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699a      	ldr	r2, [r3, #24]
 8003414:	4b12      	ldr	r3, [pc, #72]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003416:	430a      	orrs	r2, r1
 8003418:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2240      	movs	r2, #64	; 0x40
 8003420:	4013      	ands	r3, r2
 8003422:	d009      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003424:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003428:	4a16      	ldr	r2, [pc, #88]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800342a:	4013      	ands	r3, r2
 800342c:	0019      	movs	r1, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1a      	ldr	r2, [r3, #32]
 8003432:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003434:	430a      	orrs	r2, r1
 8003436:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2280      	movs	r2, #128	; 0x80
 800343e:	4013      	ands	r3, r2
 8003440:	d009      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003442:	4b07      	ldr	r3, [pc, #28]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003446:	4a10      	ldr	r2, [pc, #64]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003448:	4013      	ands	r3, r2
 800344a:	0019      	movs	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69da      	ldr	r2, [r3, #28]
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003452:	430a      	orrs	r2, r1
 8003454:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	0018      	movs	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	b006      	add	sp, #24
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40021000 	.word	0x40021000
 8003464:	40007000 	.word	0x40007000
 8003468:	fffcffff 	.word	0xfffcffff
 800346c:	fff7ffff 	.word	0xfff7ffff
 8003470:	00001388 	.word	0x00001388
 8003474:	ffcfffff 	.word	0xffcfffff
 8003478:	efffffff 	.word	0xefffffff
 800347c:	fffff3ff 	.word	0xfffff3ff
 8003480:	ffffcfff 	.word	0xffffcfff
 8003484:	fbffffff 	.word	0xfbffffff
 8003488:	fff3ffff 	.word	0xfff3ffff

0800348c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2244      	movs	r2, #68	; 0x44
 8003498:	2100      	movs	r1, #0
 800349a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <USB_EnableGlobalInt+0x28>)
 800349e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	b299      	uxth	r1, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2240      	movs	r2, #64	; 0x40
 80034a8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b004      	add	sp, #16
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	0000bf80 	.word	0x0000bf80

080034b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <USB_DisableGlobalInt+0x30>)
 80034c2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2240      	movs	r2, #64	; 0x40
 80034c8:	5a9b      	ldrh	r3, [r3, r2]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	b292      	uxth	r2, r2
 80034d0:	43d2      	mvns	r2, r2
 80034d2:	b292      	uxth	r2, r2
 80034d4:	4013      	ands	r3, r2
 80034d6:	b299      	uxth	r1, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2240      	movs	r2, #64	; 0x40
 80034dc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	0018      	movs	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b004      	add	sp, #16
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	0000bf80 	.word	0x0000bf80

080034ec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80034ec:	b084      	sub	sp, #16
 80034ee:	b590      	push	{r4, r7, lr}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	2004      	movs	r0, #4
 80034f8:	2410      	movs	r4, #16
 80034fa:	1900      	adds	r0, r0, r4
 80034fc:	2408      	movs	r4, #8
 80034fe:	46a4      	mov	ip, r4
 8003500:	44bc      	add	ip, r7
 8003502:	4460      	add	r0, ip
 8003504:	6001      	str	r1, [r0, #0]
 8003506:	6042      	str	r2, [r0, #4]
 8003508:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2240      	movs	r2, #64	; 0x40
 800350e:	2101      	movs	r1, #1
 8003510:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2240      	movs	r2, #64	; 0x40
 8003516:	2100      	movs	r1, #0
 8003518:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2244      	movs	r2, #68	; 0x44
 800351e:	2100      	movs	r1, #0
 8003520:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2250      	movs	r2, #80	; 0x50
 8003526:	2100      	movs	r1, #0
 8003528:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	0018      	movs	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	b003      	add	sp, #12
 8003532:	bc90      	pop	{r4, r7}
 8003534:	bc08      	pop	{r3}
 8003536:	b004      	add	sp, #16
 8003538:	4718      	bx	r3
	...

0800353c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b09c      	sub	sp, #112	; 0x70
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003546:	236f      	movs	r3, #111	; 0x6f
 8003548:	18fb      	adds	r3, r7, r3
 800354a:	2200      	movs	r2, #0
 800354c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	18d3      	adds	r3, r2, r3
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	b29a      	uxth	r2, r3
 800355c:	236c      	movs	r3, #108	; 0x6c
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	49a3      	ldr	r1, [pc, #652]	; (80037f0 <USB_ActivateEndpoint+0x2b4>)
 8003562:	400a      	ands	r2, r1
 8003564:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	78db      	ldrb	r3, [r3, #3]
 800356a:	2b03      	cmp	r3, #3
 800356c:	d017      	beq.n	800359e <USB_ActivateEndpoint+0x62>
 800356e:	dc28      	bgt.n	80035c2 <USB_ActivateEndpoint+0x86>
 8003570:	2b02      	cmp	r3, #2
 8003572:	d00e      	beq.n	8003592 <USB_ActivateEndpoint+0x56>
 8003574:	dc25      	bgt.n	80035c2 <USB_ActivateEndpoint+0x86>
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <USB_ActivateEndpoint+0x44>
 800357a:	2b01      	cmp	r3, #1
 800357c:	d018      	beq.n	80035b0 <USB_ActivateEndpoint+0x74>
 800357e:	e020      	b.n	80035c2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003580:	226c      	movs	r2, #108	; 0x6c
 8003582:	18bb      	adds	r3, r7, r2
 8003584:	18ba      	adds	r2, r7, r2
 8003586:	8812      	ldrh	r2, [r2, #0]
 8003588:	2180      	movs	r1, #128	; 0x80
 800358a:	0089      	lsls	r1, r1, #2
 800358c:	430a      	orrs	r2, r1
 800358e:	801a      	strh	r2, [r3, #0]
      break;
 8003590:	e01c      	b.n	80035cc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8003592:	226c      	movs	r2, #108	; 0x6c
 8003594:	18bb      	adds	r3, r7, r2
 8003596:	18ba      	adds	r2, r7, r2
 8003598:	8812      	ldrh	r2, [r2, #0]
 800359a:	801a      	strh	r2, [r3, #0]
      break;
 800359c:	e016      	b.n	80035cc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800359e:	226c      	movs	r2, #108	; 0x6c
 80035a0:	18bb      	adds	r3, r7, r2
 80035a2:	18ba      	adds	r2, r7, r2
 80035a4:	8812      	ldrh	r2, [r2, #0]
 80035a6:	21c0      	movs	r1, #192	; 0xc0
 80035a8:	00c9      	lsls	r1, r1, #3
 80035aa:	430a      	orrs	r2, r1
 80035ac:	801a      	strh	r2, [r3, #0]
      break;
 80035ae:	e00d      	b.n	80035cc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80035b0:	226c      	movs	r2, #108	; 0x6c
 80035b2:	18bb      	adds	r3, r7, r2
 80035b4:	18ba      	adds	r2, r7, r2
 80035b6:	8812      	ldrh	r2, [r2, #0]
 80035b8:	2180      	movs	r1, #128	; 0x80
 80035ba:	00c9      	lsls	r1, r1, #3
 80035bc:	430a      	orrs	r2, r1
 80035be:	801a      	strh	r2, [r3, #0]
      break;
 80035c0:	e004      	b.n	80035cc <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80035c2:	236f      	movs	r3, #111	; 0x6f
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]
      break;
 80035ca:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	18d3      	adds	r3, r2, r3
 80035d6:	226c      	movs	r2, #108	; 0x6c
 80035d8:	18ba      	adds	r2, r7, r2
 80035da:	8812      	ldrh	r2, [r2, #0]
 80035dc:	4985      	ldr	r1, [pc, #532]	; (80037f4 <USB_ActivateEndpoint+0x2b8>)
 80035de:	430a      	orrs	r2, r1
 80035e0:	b292      	uxth	r2, r2
 80035e2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	18d3      	adds	r3, r2, r3
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	b21b      	sxth	r3, r3
 80035f4:	4a80      	ldr	r2, [pc, #512]	; (80037f8 <USB_ActivateEndpoint+0x2bc>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	b21a      	sxth	r2, r3
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	b21b      	sxth	r3, r3
 8003600:	4313      	orrs	r3, r2
 8003602:	b21a      	sxth	r2, r3
 8003604:	2166      	movs	r1, #102	; 0x66
 8003606:	187b      	adds	r3, r7, r1
 8003608:	801a      	strh	r2, [r3, #0]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	18d3      	adds	r3, r2, r3
 8003614:	187a      	adds	r2, r7, r1
 8003616:	8812      	ldrh	r2, [r2, #0]
 8003618:	4976      	ldr	r1, [pc, #472]	; (80037f4 <USB_ActivateEndpoint+0x2b8>)
 800361a:	430a      	orrs	r2, r1
 800361c:	b292      	uxth	r2, r2
 800361e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	7b1b      	ldrb	r3, [r3, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d000      	beq.n	800362a <USB_ActivateEndpoint+0xee>
 8003628:	e178      	b.n	800391c <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	785b      	ldrb	r3, [r3, #1]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d100      	bne.n	8003634 <USB_ActivateEndpoint+0xf8>
 8003632:	e07a      	b.n	800372a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2250      	movs	r2, #80	; 0x50
 800363c:	5a9b      	ldrh	r3, [r3, r2]
 800363e:	b29b      	uxth	r3, r3
 8003640:	001a      	movs	r2, r3
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	189b      	adds	r3, r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	00da      	lsls	r2, r3, #3
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	18d3      	adds	r3, r2, r3
 8003652:	2280      	movs	r2, #128	; 0x80
 8003654:	00d2      	lsls	r2, r2, #3
 8003656:	4694      	mov	ip, r2
 8003658:	4463      	add	r3, ip
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	88db      	ldrh	r3, [r3, #6]
 8003660:	085b      	lsrs	r3, r3, #1
 8003662:	b29b      	uxth	r3, r3
 8003664:	18db      	adds	r3, r3, r3
 8003666:	b29a      	uxth	r2, r3
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	18d2      	adds	r2, r2, r3
 8003676:	2112      	movs	r1, #18
 8003678:	187b      	adds	r3, r7, r1
 800367a:	8812      	ldrh	r2, [r2, #0]
 800367c:	801a      	strh	r2, [r3, #0]
 800367e:	187b      	adds	r3, r7, r1
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	2240      	movs	r2, #64	; 0x40
 8003684:	4013      	ands	r3, r2
 8003686:	d016      	beq.n	80036b6 <USB_ActivateEndpoint+0x17a>
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	18d3      	adds	r3, r2, r3
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	b29a      	uxth	r2, r3
 8003696:	2010      	movs	r0, #16
 8003698:	183b      	adds	r3, r7, r0
 800369a:	4957      	ldr	r1, [pc, #348]	; (80037f8 <USB_ActivateEndpoint+0x2bc>)
 800369c:	400a      	ands	r2, r1
 800369e:	801a      	strh	r2, [r3, #0]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	18d3      	adds	r3, r2, r3
 80036aa:	183a      	adds	r2, r7, r0
 80036ac:	8812      	ldrh	r2, [r2, #0]
 80036ae:	4953      	ldr	r1, [pc, #332]	; (80037fc <USB_ActivateEndpoint+0x2c0>)
 80036b0:	430a      	orrs	r2, r1
 80036b2:	b292      	uxth	r2, r2
 80036b4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	78db      	ldrb	r3, [r3, #3]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d01d      	beq.n	80036fa <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	18d3      	adds	r3, r2, r3
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	200c      	movs	r0, #12
 80036ce:	183b      	adds	r3, r7, r0
 80036d0:	494b      	ldr	r1, [pc, #300]	; (8003800 <USB_ActivateEndpoint+0x2c4>)
 80036d2:	400a      	ands	r2, r1
 80036d4:	801a      	strh	r2, [r3, #0]
 80036d6:	183b      	adds	r3, r7, r0
 80036d8:	183a      	adds	r2, r7, r0
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	2120      	movs	r1, #32
 80036de:	404a      	eors	r2, r1
 80036e0:	801a      	strh	r2, [r3, #0]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	18d3      	adds	r3, r2, r3
 80036ec:	183a      	adds	r2, r7, r0
 80036ee:	8812      	ldrh	r2, [r2, #0]
 80036f0:	4940      	ldr	r1, [pc, #256]	; (80037f4 <USB_ActivateEndpoint+0x2b8>)
 80036f2:	430a      	orrs	r2, r1
 80036f4:	b292      	uxth	r2, r2
 80036f6:	801a      	strh	r2, [r3, #0]
 80036f8:	e2b4      	b.n	8003c64 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	18d3      	adds	r3, r2, r3
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	b29a      	uxth	r2, r3
 8003708:	200e      	movs	r0, #14
 800370a:	183b      	adds	r3, r7, r0
 800370c:	493c      	ldr	r1, [pc, #240]	; (8003800 <USB_ActivateEndpoint+0x2c4>)
 800370e:	400a      	ands	r2, r1
 8003710:	801a      	strh	r2, [r3, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	18d3      	adds	r3, r2, r3
 800371c:	183a      	adds	r2, r7, r0
 800371e:	8812      	ldrh	r2, [r2, #0]
 8003720:	4934      	ldr	r1, [pc, #208]	; (80037f4 <USB_ActivateEndpoint+0x2b8>)
 8003722:	430a      	orrs	r2, r1
 8003724:	b292      	uxth	r2, r2
 8003726:	801a      	strh	r2, [r3, #0]
 8003728:	e29c      	b.n	8003c64 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	633b      	str	r3, [r7, #48]	; 0x30
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2250      	movs	r2, #80	; 0x50
 8003732:	5a9b      	ldrh	r3, [r3, r2]
 8003734:	b29b      	uxth	r3, r3
 8003736:	001a      	movs	r2, r3
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	189b      	adds	r3, r3, r2
 800373c:	633b      	str	r3, [r7, #48]	; 0x30
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	00da      	lsls	r2, r3, #3
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	18d3      	adds	r3, r2, r3
 8003748:	4a2e      	ldr	r2, [pc, #184]	; (8003804 <USB_ActivateEndpoint+0x2c8>)
 800374a:	4694      	mov	ip, r2
 800374c:	4463      	add	r3, ip
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	88db      	ldrh	r3, [r3, #6]
 8003754:	085b      	lsrs	r3, r3, #1
 8003756:	b29b      	uxth	r3, r3
 8003758:	18db      	adds	r3, r3, r3
 800375a:	b29a      	uxth	r2, r3
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2250      	movs	r2, #80	; 0x50
 8003768:	5a9b      	ldrh	r3, [r3, r2]
 800376a:	b29b      	uxth	r3, r3
 800376c:	001a      	movs	r2, r3
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	189b      	adds	r3, r3, r2
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	00da      	lsls	r2, r3, #3
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377c:	18d3      	adds	r3, r2, r3
 800377e:	4a22      	ldr	r2, [pc, #136]	; (8003808 <USB_ActivateEndpoint+0x2cc>)
 8003780:	4694      	mov	ip, r2
 8003782:	4463      	add	r3, ip
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	059b      	lsls	r3, r3, #22
 800378e:	0d9b      	lsrs	r3, r3, #22
 8003790:	b29a      	uxth	r2, r3
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	801a      	strh	r2, [r3, #0]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b3e      	cmp	r3, #62	; 0x3e
 800379c:	d91a      	bls.n	80037d4 <USB_ActivateEndpoint+0x298>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	221f      	movs	r2, #31
 80037ac:	4013      	ands	r3, r2
 80037ae:	d102      	bne.n	80037b6 <USB_ActivateEndpoint+0x27a>
 80037b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037b2:	3b01      	subs	r3, #1
 80037b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037be:	b29b      	uxth	r3, r3
 80037c0:	029b      	lsls	r3, r3, #10
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	4313      	orrs	r3, r2
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	4a10      	ldr	r2, [pc, #64]	; (800380c <USB_ActivateEndpoint+0x2d0>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	801a      	strh	r2, [r3, #0]
 80037d2:	e034      	b.n	800383e <USB_ActivateEndpoint+0x302>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d119      	bne.n	8003810 <USB_ActivateEndpoint+0x2d4>
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	4a0a      	ldr	r2, [pc, #40]	; (800380c <USB_ActivateEndpoint+0x2d0>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	801a      	strh	r2, [r3, #0]
 80037ec:	e027      	b.n	800383e <USB_ActivateEndpoint+0x302>
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	ffff898f 	.word	0xffff898f
 80037f4:	ffff8080 	.word	0xffff8080
 80037f8:	ffff8f8f 	.word	0xffff8f8f
 80037fc:	ffff80c0 	.word	0xffff80c0
 8003800:	ffff8fbf 	.word	0xffff8fbf
 8003804:	00000404 	.word	0x00000404
 8003808:	00000406 	.word	0x00000406
 800380c:	ffff8000 	.word	0xffff8000
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	085b      	lsrs	r3, r3, #1
 8003816:	66bb      	str	r3, [r7, #104]	; 0x68
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2201      	movs	r2, #1
 800381e:	4013      	ands	r3, r2
 8003820:	d002      	beq.n	8003828 <USB_ActivateEndpoint+0x2ec>
 8003822:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003824:	3301      	adds	r3, #1
 8003826:	66bb      	str	r3, [r7, #104]	; 0x68
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b29a      	uxth	r2, r3
 800382e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003830:	b29b      	uxth	r3, r3
 8003832:	029b      	lsls	r3, r3, #10
 8003834:	b29b      	uxth	r3, r3
 8003836:	4313      	orrs	r3, r2
 8003838:	b29a      	uxth	r2, r3
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	18d2      	adds	r2, r2, r3
 8003848:	2122      	movs	r1, #34	; 0x22
 800384a:	187b      	adds	r3, r7, r1
 800384c:	8812      	ldrh	r2, [r2, #0]
 800384e:	801a      	strh	r2, [r3, #0]
 8003850:	187b      	adds	r3, r7, r1
 8003852:	881a      	ldrh	r2, [r3, #0]
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	01db      	lsls	r3, r3, #7
 8003858:	4013      	ands	r3, r2
 800385a:	d016      	beq.n	800388a <USB_ActivateEndpoint+0x34e>
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	18d3      	adds	r3, r2, r3
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	b29a      	uxth	r2, r3
 800386a:	2020      	movs	r0, #32
 800386c:	183b      	adds	r3, r7, r0
 800386e:	49dd      	ldr	r1, [pc, #884]	; (8003be4 <USB_ActivateEndpoint+0x6a8>)
 8003870:	400a      	ands	r2, r1
 8003872:	801a      	strh	r2, [r3, #0]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	18d3      	adds	r3, r2, r3
 800387e:	183a      	adds	r2, r7, r0
 8003880:	8812      	ldrh	r2, [r2, #0]
 8003882:	49d9      	ldr	r1, [pc, #868]	; (8003be8 <USB_ActivateEndpoint+0x6ac>)
 8003884:	430a      	orrs	r2, r1
 8003886:	b292      	uxth	r2, r2
 8003888:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d125      	bne.n	80038de <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	18d3      	adds	r3, r2, r3
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	b29a      	uxth	r2, r3
 80038a0:	201c      	movs	r0, #28
 80038a2:	183b      	adds	r3, r7, r0
 80038a4:	49d1      	ldr	r1, [pc, #836]	; (8003bec <USB_ActivateEndpoint+0x6b0>)
 80038a6:	400a      	ands	r2, r1
 80038a8:	801a      	strh	r2, [r3, #0]
 80038aa:	183b      	adds	r3, r7, r0
 80038ac:	183a      	adds	r2, r7, r0
 80038ae:	8812      	ldrh	r2, [r2, #0]
 80038b0:	2180      	movs	r1, #128	; 0x80
 80038b2:	0149      	lsls	r1, r1, #5
 80038b4:	404a      	eors	r2, r1
 80038b6:	801a      	strh	r2, [r3, #0]
 80038b8:	183b      	adds	r3, r7, r0
 80038ba:	183a      	adds	r2, r7, r0
 80038bc:	8812      	ldrh	r2, [r2, #0]
 80038be:	2180      	movs	r1, #128	; 0x80
 80038c0:	0189      	lsls	r1, r1, #6
 80038c2:	404a      	eors	r2, r1
 80038c4:	801a      	strh	r2, [r3, #0]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	18d3      	adds	r3, r2, r3
 80038d0:	183a      	adds	r2, r7, r0
 80038d2:	8812      	ldrh	r2, [r2, #0]
 80038d4:	49c6      	ldr	r1, [pc, #792]	; (8003bf0 <USB_ActivateEndpoint+0x6b4>)
 80038d6:	430a      	orrs	r2, r1
 80038d8:	b292      	uxth	r2, r2
 80038da:	801a      	strh	r2, [r3, #0]
 80038dc:	e1c2      	b.n	8003c64 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	18d3      	adds	r3, r2, r3
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	201e      	movs	r0, #30
 80038ee:	183b      	adds	r3, r7, r0
 80038f0:	49be      	ldr	r1, [pc, #760]	; (8003bec <USB_ActivateEndpoint+0x6b0>)
 80038f2:	400a      	ands	r2, r1
 80038f4:	801a      	strh	r2, [r3, #0]
 80038f6:	183b      	adds	r3, r7, r0
 80038f8:	183a      	adds	r2, r7, r0
 80038fa:	8812      	ldrh	r2, [r2, #0]
 80038fc:	2180      	movs	r1, #128	; 0x80
 80038fe:	0189      	lsls	r1, r1, #6
 8003900:	404a      	eors	r2, r1
 8003902:	801a      	strh	r2, [r3, #0]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	18d3      	adds	r3, r2, r3
 800390e:	183a      	adds	r2, r7, r0
 8003910:	8812      	ldrh	r2, [r2, #0]
 8003912:	49b7      	ldr	r1, [pc, #732]	; (8003bf0 <USB_ActivateEndpoint+0x6b4>)
 8003914:	430a      	orrs	r2, r1
 8003916:	b292      	uxth	r2, r2
 8003918:	801a      	strh	r2, [r3, #0]
 800391a:	e1a3      	b.n	8003c64 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	78db      	ldrb	r3, [r3, #3]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d117      	bne.n	8003954 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	18d3      	adds	r3, r2, r3
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	b29a      	uxth	r2, r3
 8003932:	2062      	movs	r0, #98	; 0x62
 8003934:	183b      	adds	r3, r7, r0
 8003936:	49ab      	ldr	r1, [pc, #684]	; (8003be4 <USB_ActivateEndpoint+0x6a8>)
 8003938:	400a      	ands	r2, r1
 800393a:	801a      	strh	r2, [r3, #0]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	18d3      	adds	r3, r2, r3
 8003946:	183a      	adds	r2, r7, r0
 8003948:	8812      	ldrh	r2, [r2, #0]
 800394a:	49aa      	ldr	r1, [pc, #680]	; (8003bf4 <USB_ActivateEndpoint+0x6b8>)
 800394c:	430a      	orrs	r2, r1
 800394e:	b292      	uxth	r2, r2
 8003950:	801a      	strh	r2, [r3, #0]
 8003952:	e016      	b.n	8003982 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	18d3      	adds	r3, r2, r3
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	b29a      	uxth	r2, r3
 8003962:	2064      	movs	r0, #100	; 0x64
 8003964:	183b      	adds	r3, r7, r0
 8003966:	49a4      	ldr	r1, [pc, #656]	; (8003bf8 <USB_ActivateEndpoint+0x6bc>)
 8003968:	400a      	ands	r2, r1
 800396a:	801a      	strh	r2, [r3, #0]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	18d3      	adds	r3, r2, r3
 8003976:	183a      	adds	r2, r7, r0
 8003978:	8812      	ldrh	r2, [r2, #0]
 800397a:	499d      	ldr	r1, [pc, #628]	; (8003bf0 <USB_ActivateEndpoint+0x6b4>)
 800397c:	430a      	orrs	r2, r1
 800397e:	b292      	uxth	r2, r2
 8003980:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2250      	movs	r2, #80	; 0x50
 800398a:	5a9b      	ldrh	r3, [r3, r2]
 800398c:	b29b      	uxth	r3, r3
 800398e:	001a      	movs	r2, r3
 8003990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003992:	189b      	adds	r3, r3, r2
 8003994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	00da      	lsls	r2, r3, #3
 800399c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800399e:	18d3      	adds	r3, r2, r3
 80039a0:	2280      	movs	r2, #128	; 0x80
 80039a2:	00d2      	lsls	r2, r2, #3
 80039a4:	4694      	mov	ip, r2
 80039a6:	4463      	add	r3, ip
 80039a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	891b      	ldrh	r3, [r3, #8]
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	18db      	adds	r3, r3, r3
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039b8:	801a      	strh	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	657b      	str	r3, [r7, #84]	; 0x54
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2250      	movs	r2, #80	; 0x50
 80039c2:	5a9b      	ldrh	r3, [r3, r2]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	001a      	movs	r2, r3
 80039c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ca:	189b      	adds	r3, r3, r2
 80039cc:	657b      	str	r3, [r7, #84]	; 0x54
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	00da      	lsls	r2, r3, #3
 80039d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d6:	18d3      	adds	r3, r2, r3
 80039d8:	4a88      	ldr	r2, [pc, #544]	; (8003bfc <USB_ActivateEndpoint+0x6c0>)
 80039da:	4694      	mov	ip, r2
 80039dc:	4463      	add	r3, ip
 80039de:	653b      	str	r3, [r7, #80]	; 0x50
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	895b      	ldrh	r3, [r3, #10]
 80039e4:	085b      	lsrs	r3, r3, #1
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	18db      	adds	r3, r3, r3
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	785b      	ldrb	r3, [r3, #1]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d000      	beq.n	80039fa <USB_ActivateEndpoint+0x4be>
 80039f8:	e087      	b.n	8003b0a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	18d2      	adds	r2, r2, r3
 8003a04:	2140      	movs	r1, #64	; 0x40
 8003a06:	187b      	adds	r3, r7, r1
 8003a08:	8812      	ldrh	r2, [r2, #0]
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	187b      	adds	r3, r7, r1
 8003a0e:	881a      	ldrh	r2, [r3, #0]
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	01db      	lsls	r3, r3, #7
 8003a14:	4013      	ands	r3, r2
 8003a16:	d016      	beq.n	8003a46 <USB_ActivateEndpoint+0x50a>
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	18d3      	adds	r3, r2, r3
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	203e      	movs	r0, #62	; 0x3e
 8003a28:	183b      	adds	r3, r7, r0
 8003a2a:	496e      	ldr	r1, [pc, #440]	; (8003be4 <USB_ActivateEndpoint+0x6a8>)
 8003a2c:	400a      	ands	r2, r1
 8003a2e:	801a      	strh	r2, [r3, #0]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	18d3      	adds	r3, r2, r3
 8003a3a:	183a      	adds	r2, r7, r0
 8003a3c:	8812      	ldrh	r2, [r2, #0]
 8003a3e:	496a      	ldr	r1, [pc, #424]	; (8003be8 <USB_ActivateEndpoint+0x6ac>)
 8003a40:	430a      	orrs	r2, r1
 8003a42:	b292      	uxth	r2, r2
 8003a44:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	18d2      	adds	r2, r2, r3
 8003a50:	213c      	movs	r1, #60	; 0x3c
 8003a52:	187b      	adds	r3, r7, r1
 8003a54:	8812      	ldrh	r2, [r2, #0]
 8003a56:	801a      	strh	r2, [r3, #0]
 8003a58:	187b      	adds	r3, r7, r1
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	2240      	movs	r2, #64	; 0x40
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d016      	beq.n	8003a90 <USB_ActivateEndpoint+0x554>
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	18d3      	adds	r3, r2, r3
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	203a      	movs	r0, #58	; 0x3a
 8003a72:	183b      	adds	r3, r7, r0
 8003a74:	495b      	ldr	r1, [pc, #364]	; (8003be4 <USB_ActivateEndpoint+0x6a8>)
 8003a76:	400a      	ands	r2, r1
 8003a78:	801a      	strh	r2, [r3, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	18d3      	adds	r3, r2, r3
 8003a84:	183a      	adds	r2, r7, r0
 8003a86:	8812      	ldrh	r2, [r2, #0]
 8003a88:	495d      	ldr	r1, [pc, #372]	; (8003c00 <USB_ActivateEndpoint+0x6c4>)
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	b292      	uxth	r2, r2
 8003a8e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	18d3      	adds	r3, r2, r3
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	2038      	movs	r0, #56	; 0x38
 8003aa0:	183b      	adds	r3, r7, r0
 8003aa2:	4952      	ldr	r1, [pc, #328]	; (8003bec <USB_ActivateEndpoint+0x6b0>)
 8003aa4:	400a      	ands	r2, r1
 8003aa6:	801a      	strh	r2, [r3, #0]
 8003aa8:	183b      	adds	r3, r7, r0
 8003aaa:	183a      	adds	r2, r7, r0
 8003aac:	8812      	ldrh	r2, [r2, #0]
 8003aae:	2180      	movs	r1, #128	; 0x80
 8003ab0:	0149      	lsls	r1, r1, #5
 8003ab2:	404a      	eors	r2, r1
 8003ab4:	801a      	strh	r2, [r3, #0]
 8003ab6:	183b      	adds	r3, r7, r0
 8003ab8:	183a      	adds	r2, r7, r0
 8003aba:	8812      	ldrh	r2, [r2, #0]
 8003abc:	2180      	movs	r1, #128	; 0x80
 8003abe:	0189      	lsls	r1, r1, #6
 8003ac0:	404a      	eors	r2, r1
 8003ac2:	801a      	strh	r2, [r3, #0]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	18d3      	adds	r3, r2, r3
 8003ace:	183a      	adds	r2, r7, r0
 8003ad0:	8812      	ldrh	r2, [r2, #0]
 8003ad2:	4947      	ldr	r1, [pc, #284]	; (8003bf0 <USB_ActivateEndpoint+0x6b4>)
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	b292      	uxth	r2, r2
 8003ad8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	18d3      	adds	r3, r2, r3
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	2036      	movs	r0, #54	; 0x36
 8003aea:	183b      	adds	r3, r7, r0
 8003aec:	4945      	ldr	r1, [pc, #276]	; (8003c04 <USB_ActivateEndpoint+0x6c8>)
 8003aee:	400a      	ands	r2, r1
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	18d3      	adds	r3, r2, r3
 8003afc:	183a      	adds	r2, r7, r0
 8003afe:	8812      	ldrh	r2, [r2, #0]
 8003b00:	493b      	ldr	r1, [pc, #236]	; (8003bf0 <USB_ActivateEndpoint+0x6b4>)
 8003b02:	430a      	orrs	r2, r1
 8003b04:	b292      	uxth	r2, r2
 8003b06:	801a      	strh	r2, [r3, #0]
 8003b08:	e0ac      	b.n	8003c64 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	18d2      	adds	r2, r2, r3
 8003b14:	214e      	movs	r1, #78	; 0x4e
 8003b16:	187b      	adds	r3, r7, r1
 8003b18:	8812      	ldrh	r2, [r2, #0]
 8003b1a:	801a      	strh	r2, [r3, #0]
 8003b1c:	187b      	adds	r3, r7, r1
 8003b1e:	881a      	ldrh	r2, [r3, #0]
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	01db      	lsls	r3, r3, #7
 8003b24:	4013      	ands	r3, r2
 8003b26:	d016      	beq.n	8003b56 <USB_ActivateEndpoint+0x61a>
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	18d3      	adds	r3, r2, r3
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	204c      	movs	r0, #76	; 0x4c
 8003b38:	183b      	adds	r3, r7, r0
 8003b3a:	492a      	ldr	r1, [pc, #168]	; (8003be4 <USB_ActivateEndpoint+0x6a8>)
 8003b3c:	400a      	ands	r2, r1
 8003b3e:	801a      	strh	r2, [r3, #0]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	18d3      	adds	r3, r2, r3
 8003b4a:	183a      	adds	r2, r7, r0
 8003b4c:	8812      	ldrh	r2, [r2, #0]
 8003b4e:	4926      	ldr	r1, [pc, #152]	; (8003be8 <USB_ActivateEndpoint+0x6ac>)
 8003b50:	430a      	orrs	r2, r1
 8003b52:	b292      	uxth	r2, r2
 8003b54:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	18d2      	adds	r2, r2, r3
 8003b60:	214a      	movs	r1, #74	; 0x4a
 8003b62:	187b      	adds	r3, r7, r1
 8003b64:	8812      	ldrh	r2, [r2, #0]
 8003b66:	801a      	strh	r2, [r3, #0]
 8003b68:	187b      	adds	r3, r7, r1
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	2240      	movs	r2, #64	; 0x40
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d016      	beq.n	8003ba0 <USB_ActivateEndpoint+0x664>
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	18d3      	adds	r3, r2, r3
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	2048      	movs	r0, #72	; 0x48
 8003b82:	183b      	adds	r3, r7, r0
 8003b84:	4917      	ldr	r1, [pc, #92]	; (8003be4 <USB_ActivateEndpoint+0x6a8>)
 8003b86:	400a      	ands	r2, r1
 8003b88:	801a      	strh	r2, [r3, #0]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	18d3      	adds	r3, r2, r3
 8003b94:	183a      	adds	r2, r7, r0
 8003b96:	8812      	ldrh	r2, [r2, #0]
 8003b98:	4919      	ldr	r1, [pc, #100]	; (8003c00 <USB_ActivateEndpoint+0x6c4>)
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	b292      	uxth	r2, r2
 8003b9e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	78db      	ldrb	r3, [r3, #3]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d02f      	beq.n	8003c08 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	18d3      	adds	r3, r2, r3
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	2044      	movs	r0, #68	; 0x44
 8003bb8:	183b      	adds	r3, r7, r0
 8003bba:	4912      	ldr	r1, [pc, #72]	; (8003c04 <USB_ActivateEndpoint+0x6c8>)
 8003bbc:	400a      	ands	r2, r1
 8003bbe:	801a      	strh	r2, [r3, #0]
 8003bc0:	183b      	adds	r3, r7, r0
 8003bc2:	183a      	adds	r2, r7, r0
 8003bc4:	8812      	ldrh	r2, [r2, #0]
 8003bc6:	2120      	movs	r1, #32
 8003bc8:	404a      	eors	r2, r1
 8003bca:	801a      	strh	r2, [r3, #0]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	18d3      	adds	r3, r2, r3
 8003bd6:	183a      	adds	r2, r7, r0
 8003bd8:	8812      	ldrh	r2, [r2, #0]
 8003bda:	4905      	ldr	r1, [pc, #20]	; (8003bf0 <USB_ActivateEndpoint+0x6b4>)
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	b292      	uxth	r2, r2
 8003be0:	801a      	strh	r2, [r3, #0]
 8003be2:	e028      	b.n	8003c36 <USB_ActivateEndpoint+0x6fa>
 8003be4:	ffff8f8f 	.word	0xffff8f8f
 8003be8:	ffffc080 	.word	0xffffc080
 8003bec:	ffffbf8f 	.word	0xffffbf8f
 8003bf0:	ffff8080 	.word	0xffff8080
 8003bf4:	ffff8180 	.word	0xffff8180
 8003bf8:	ffff8e8f 	.word	0xffff8e8f
 8003bfc:	00000404 	.word	0x00000404
 8003c00:	ffff80c0 	.word	0xffff80c0
 8003c04:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	18d3      	adds	r3, r2, r3
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	2046      	movs	r0, #70	; 0x46
 8003c18:	183b      	adds	r3, r7, r0
 8003c1a:	4916      	ldr	r1, [pc, #88]	; (8003c74 <USB_ActivateEndpoint+0x738>)
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	801a      	strh	r2, [r3, #0]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	18d3      	adds	r3, r2, r3
 8003c2a:	183a      	adds	r2, r7, r0
 8003c2c:	8812      	ldrh	r2, [r2, #0]
 8003c2e:	4912      	ldr	r1, [pc, #72]	; (8003c78 <USB_ActivateEndpoint+0x73c>)
 8003c30:	430a      	orrs	r2, r1
 8003c32:	b292      	uxth	r2, r2
 8003c34:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	18d3      	adds	r3, r2, r3
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	2042      	movs	r0, #66	; 0x42
 8003c46:	183b      	adds	r3, r7, r0
 8003c48:	490c      	ldr	r1, [pc, #48]	; (8003c7c <USB_ActivateEndpoint+0x740>)
 8003c4a:	400a      	ands	r2, r1
 8003c4c:	801a      	strh	r2, [r3, #0]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	18d3      	adds	r3, r2, r3
 8003c58:	183a      	adds	r2, r7, r0
 8003c5a:	8812      	ldrh	r2, [r2, #0]
 8003c5c:	4906      	ldr	r1, [pc, #24]	; (8003c78 <USB_ActivateEndpoint+0x73c>)
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	b292      	uxth	r2, r2
 8003c62:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003c64:	236f      	movs	r3, #111	; 0x6f
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	781b      	ldrb	r3, [r3, #0]
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b01c      	add	sp, #112	; 0x70
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	ffff8fbf 	.word	0xffff8fbf
 8003c78:	ffff8080 	.word	0xffff8080
 8003c7c:	ffffbf8f 	.word	0xffffbf8f

08003c80 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08c      	sub	sp, #48	; 0x30
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	7b1b      	ldrb	r3, [r3, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d000      	beq.n	8003c94 <USB_DeactivateEndpoint+0x14>
 8003c92:	e07e      	b.n	8003d92 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	785b      	ldrb	r3, [r3, #1]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d03c      	beq.n	8003d16 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	18d2      	adds	r2, r2, r3
 8003ca6:	210c      	movs	r1, #12
 8003ca8:	187b      	adds	r3, r7, r1
 8003caa:	8812      	ldrh	r2, [r2, #0]
 8003cac:	801a      	strh	r2, [r3, #0]
 8003cae:	187b      	adds	r3, r7, r1
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	2240      	movs	r2, #64	; 0x40
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d016      	beq.n	8003ce6 <USB_DeactivateEndpoint+0x66>
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	18d3      	adds	r3, r2, r3
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	200a      	movs	r0, #10
 8003cc8:	183b      	adds	r3, r7, r0
 8003cca:	49c7      	ldr	r1, [pc, #796]	; (8003fe8 <USB_DeactivateEndpoint+0x368>)
 8003ccc:	400a      	ands	r2, r1
 8003cce:	801a      	strh	r2, [r3, #0]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	18d3      	adds	r3, r2, r3
 8003cda:	183a      	adds	r2, r7, r0
 8003cdc:	8812      	ldrh	r2, [r2, #0]
 8003cde:	49c3      	ldr	r1, [pc, #780]	; (8003fec <USB_DeactivateEndpoint+0x36c>)
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	b292      	uxth	r2, r2
 8003ce4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	18d3      	adds	r3, r2, r3
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	2008      	movs	r0, #8
 8003cf6:	183b      	adds	r3, r7, r0
 8003cf8:	49bd      	ldr	r1, [pc, #756]	; (8003ff0 <USB_DeactivateEndpoint+0x370>)
 8003cfa:	400a      	ands	r2, r1
 8003cfc:	801a      	strh	r2, [r3, #0]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	18d3      	adds	r3, r2, r3
 8003d08:	183a      	adds	r2, r7, r0
 8003d0a:	8812      	ldrh	r2, [r2, #0]
 8003d0c:	49b9      	ldr	r1, [pc, #740]	; (8003ff4 <USB_DeactivateEndpoint+0x374>)
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	b292      	uxth	r2, r2
 8003d12:	801a      	strh	r2, [r3, #0]
 8003d14:	e163      	b.n	8003fde <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	18d2      	adds	r2, r2, r3
 8003d20:	2112      	movs	r1, #18
 8003d22:	187b      	adds	r3, r7, r1
 8003d24:	8812      	ldrh	r2, [r2, #0]
 8003d26:	801a      	strh	r2, [r3, #0]
 8003d28:	187b      	adds	r3, r7, r1
 8003d2a:	881a      	ldrh	r2, [r3, #0]
 8003d2c:	2380      	movs	r3, #128	; 0x80
 8003d2e:	01db      	lsls	r3, r3, #7
 8003d30:	4013      	ands	r3, r2
 8003d32:	d016      	beq.n	8003d62 <USB_DeactivateEndpoint+0xe2>
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	18d3      	adds	r3, r2, r3
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	2010      	movs	r0, #16
 8003d44:	183b      	adds	r3, r7, r0
 8003d46:	49a8      	ldr	r1, [pc, #672]	; (8003fe8 <USB_DeactivateEndpoint+0x368>)
 8003d48:	400a      	ands	r2, r1
 8003d4a:	801a      	strh	r2, [r3, #0]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	18d3      	adds	r3, r2, r3
 8003d56:	183a      	adds	r2, r7, r0
 8003d58:	8812      	ldrh	r2, [r2, #0]
 8003d5a:	49a7      	ldr	r1, [pc, #668]	; (8003ff8 <USB_DeactivateEndpoint+0x378>)
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	b292      	uxth	r2, r2
 8003d60:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	18d3      	adds	r3, r2, r3
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	200e      	movs	r0, #14
 8003d72:	183b      	adds	r3, r7, r0
 8003d74:	49a1      	ldr	r1, [pc, #644]	; (8003ffc <USB_DeactivateEndpoint+0x37c>)
 8003d76:	400a      	ands	r2, r1
 8003d78:	801a      	strh	r2, [r3, #0]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	18d3      	adds	r3, r2, r3
 8003d84:	183a      	adds	r2, r7, r0
 8003d86:	8812      	ldrh	r2, [r2, #0]
 8003d88:	499a      	ldr	r1, [pc, #616]	; (8003ff4 <USB_DeactivateEndpoint+0x374>)
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	b292      	uxth	r2, r2
 8003d8e:	801a      	strh	r2, [r3, #0]
 8003d90:	e125      	b.n	8003fde <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	785b      	ldrb	r3, [r3, #1]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d000      	beq.n	8003d9c <USB_DeactivateEndpoint+0x11c>
 8003d9a:	e090      	b.n	8003ebe <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	18d2      	adds	r2, r2, r3
 8003da6:	2120      	movs	r1, #32
 8003da8:	187b      	adds	r3, r7, r1
 8003daa:	8812      	ldrh	r2, [r2, #0]
 8003dac:	801a      	strh	r2, [r3, #0]
 8003dae:	187b      	adds	r3, r7, r1
 8003db0:	881a      	ldrh	r2, [r3, #0]
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	01db      	lsls	r3, r3, #7
 8003db6:	4013      	ands	r3, r2
 8003db8:	d016      	beq.n	8003de8 <USB_DeactivateEndpoint+0x168>
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	18d3      	adds	r3, r2, r3
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	201e      	movs	r0, #30
 8003dca:	183b      	adds	r3, r7, r0
 8003dcc:	4986      	ldr	r1, [pc, #536]	; (8003fe8 <USB_DeactivateEndpoint+0x368>)
 8003dce:	400a      	ands	r2, r1
 8003dd0:	801a      	strh	r2, [r3, #0]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	18d3      	adds	r3, r2, r3
 8003ddc:	183a      	adds	r2, r7, r0
 8003dde:	8812      	ldrh	r2, [r2, #0]
 8003de0:	4985      	ldr	r1, [pc, #532]	; (8003ff8 <USB_DeactivateEndpoint+0x378>)
 8003de2:	430a      	orrs	r2, r1
 8003de4:	b292      	uxth	r2, r2
 8003de6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	18d2      	adds	r2, r2, r3
 8003df2:	211c      	movs	r1, #28
 8003df4:	187b      	adds	r3, r7, r1
 8003df6:	8812      	ldrh	r2, [r2, #0]
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	187b      	adds	r3, r7, r1
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	2240      	movs	r2, #64	; 0x40
 8003e00:	4013      	ands	r3, r2
 8003e02:	d016      	beq.n	8003e32 <USB_DeactivateEndpoint+0x1b2>
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	18d3      	adds	r3, r2, r3
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	201a      	movs	r0, #26
 8003e14:	183b      	adds	r3, r7, r0
 8003e16:	4974      	ldr	r1, [pc, #464]	; (8003fe8 <USB_DeactivateEndpoint+0x368>)
 8003e18:	400a      	ands	r2, r1
 8003e1a:	801a      	strh	r2, [r3, #0]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	18d3      	adds	r3, r2, r3
 8003e26:	183a      	adds	r2, r7, r0
 8003e28:	8812      	ldrh	r2, [r2, #0]
 8003e2a:	4970      	ldr	r1, [pc, #448]	; (8003fec <USB_DeactivateEndpoint+0x36c>)
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	b292      	uxth	r2, r2
 8003e30:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	18d3      	adds	r3, r2, r3
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	2018      	movs	r0, #24
 8003e42:	183b      	adds	r3, r7, r0
 8003e44:	4968      	ldr	r1, [pc, #416]	; (8003fe8 <USB_DeactivateEndpoint+0x368>)
 8003e46:	400a      	ands	r2, r1
 8003e48:	801a      	strh	r2, [r3, #0]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	18d3      	adds	r3, r2, r3
 8003e54:	183a      	adds	r2, r7, r0
 8003e56:	8812      	ldrh	r2, [r2, #0]
 8003e58:	4964      	ldr	r1, [pc, #400]	; (8003fec <USB_DeactivateEndpoint+0x36c>)
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	b292      	uxth	r2, r2
 8003e5e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	18d3      	adds	r3, r2, r3
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	2016      	movs	r0, #22
 8003e70:	183b      	adds	r3, r7, r0
 8003e72:	4962      	ldr	r1, [pc, #392]	; (8003ffc <USB_DeactivateEndpoint+0x37c>)
 8003e74:	400a      	ands	r2, r1
 8003e76:	801a      	strh	r2, [r3, #0]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	18d3      	adds	r3, r2, r3
 8003e82:	183a      	adds	r2, r7, r0
 8003e84:	8812      	ldrh	r2, [r2, #0]
 8003e86:	495b      	ldr	r1, [pc, #364]	; (8003ff4 <USB_DeactivateEndpoint+0x374>)
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	b292      	uxth	r2, r2
 8003e8c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	18d3      	adds	r3, r2, r3
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	2014      	movs	r0, #20
 8003e9e:	183b      	adds	r3, r7, r0
 8003ea0:	4953      	ldr	r1, [pc, #332]	; (8003ff0 <USB_DeactivateEndpoint+0x370>)
 8003ea2:	400a      	ands	r2, r1
 8003ea4:	801a      	strh	r2, [r3, #0]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	18d3      	adds	r3, r2, r3
 8003eb0:	183a      	adds	r2, r7, r0
 8003eb2:	8812      	ldrh	r2, [r2, #0]
 8003eb4:	494f      	ldr	r1, [pc, #316]	; (8003ff4 <USB_DeactivateEndpoint+0x374>)
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	b292      	uxth	r2, r2
 8003eba:	801a      	strh	r2, [r3, #0]
 8003ebc:	e08f      	b.n	8003fde <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	18d2      	adds	r2, r2, r3
 8003ec8:	212e      	movs	r1, #46	; 0x2e
 8003eca:	187b      	adds	r3, r7, r1
 8003ecc:	8812      	ldrh	r2, [r2, #0]
 8003ece:	801a      	strh	r2, [r3, #0]
 8003ed0:	187b      	adds	r3, r7, r1
 8003ed2:	881a      	ldrh	r2, [r3, #0]
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	01db      	lsls	r3, r3, #7
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d016      	beq.n	8003f0a <USB_DeactivateEndpoint+0x28a>
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	18d3      	adds	r3, r2, r3
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	202c      	movs	r0, #44	; 0x2c
 8003eec:	183b      	adds	r3, r7, r0
 8003eee:	493e      	ldr	r1, [pc, #248]	; (8003fe8 <USB_DeactivateEndpoint+0x368>)
 8003ef0:	400a      	ands	r2, r1
 8003ef2:	801a      	strh	r2, [r3, #0]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	18d3      	adds	r3, r2, r3
 8003efe:	183a      	adds	r2, r7, r0
 8003f00:	8812      	ldrh	r2, [r2, #0]
 8003f02:	493d      	ldr	r1, [pc, #244]	; (8003ff8 <USB_DeactivateEndpoint+0x378>)
 8003f04:	430a      	orrs	r2, r1
 8003f06:	b292      	uxth	r2, r2
 8003f08:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	18d2      	adds	r2, r2, r3
 8003f14:	212a      	movs	r1, #42	; 0x2a
 8003f16:	187b      	adds	r3, r7, r1
 8003f18:	8812      	ldrh	r2, [r2, #0]
 8003f1a:	801a      	strh	r2, [r3, #0]
 8003f1c:	187b      	adds	r3, r7, r1
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	2240      	movs	r2, #64	; 0x40
 8003f22:	4013      	ands	r3, r2
 8003f24:	d016      	beq.n	8003f54 <USB_DeactivateEndpoint+0x2d4>
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	18d3      	adds	r3, r2, r3
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	2028      	movs	r0, #40	; 0x28
 8003f36:	183b      	adds	r3, r7, r0
 8003f38:	492b      	ldr	r1, [pc, #172]	; (8003fe8 <USB_DeactivateEndpoint+0x368>)
 8003f3a:	400a      	ands	r2, r1
 8003f3c:	801a      	strh	r2, [r3, #0]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	18d3      	adds	r3, r2, r3
 8003f48:	183a      	adds	r2, r7, r0
 8003f4a:	8812      	ldrh	r2, [r2, #0]
 8003f4c:	4927      	ldr	r1, [pc, #156]	; (8003fec <USB_DeactivateEndpoint+0x36c>)
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	b292      	uxth	r2, r2
 8003f52:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	18d3      	adds	r3, r2, r3
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	2026      	movs	r0, #38	; 0x26
 8003f64:	183b      	adds	r3, r7, r0
 8003f66:	4920      	ldr	r1, [pc, #128]	; (8003fe8 <USB_DeactivateEndpoint+0x368>)
 8003f68:	400a      	ands	r2, r1
 8003f6a:	801a      	strh	r2, [r3, #0]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	18d3      	adds	r3, r2, r3
 8003f76:	183a      	adds	r2, r7, r0
 8003f78:	8812      	ldrh	r2, [r2, #0]
 8003f7a:	491f      	ldr	r1, [pc, #124]	; (8003ff8 <USB_DeactivateEndpoint+0x378>)
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	b292      	uxth	r2, r2
 8003f80:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	18d3      	adds	r3, r2, r3
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	2024      	movs	r0, #36	; 0x24
 8003f92:	183b      	adds	r3, r7, r0
 8003f94:	4916      	ldr	r1, [pc, #88]	; (8003ff0 <USB_DeactivateEndpoint+0x370>)
 8003f96:	400a      	ands	r2, r1
 8003f98:	801a      	strh	r2, [r3, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	18d3      	adds	r3, r2, r3
 8003fa4:	183a      	adds	r2, r7, r0
 8003fa6:	8812      	ldrh	r2, [r2, #0]
 8003fa8:	4912      	ldr	r1, [pc, #72]	; (8003ff4 <USB_DeactivateEndpoint+0x374>)
 8003faa:	430a      	orrs	r2, r1
 8003fac:	b292      	uxth	r2, r2
 8003fae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	18d3      	adds	r3, r2, r3
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	2022      	movs	r0, #34	; 0x22
 8003fc0:	183b      	adds	r3, r7, r0
 8003fc2:	490e      	ldr	r1, [pc, #56]	; (8003ffc <USB_DeactivateEndpoint+0x37c>)
 8003fc4:	400a      	ands	r2, r1
 8003fc6:	801a      	strh	r2, [r3, #0]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	18d3      	adds	r3, r2, r3
 8003fd2:	183a      	adds	r2, r7, r0
 8003fd4:	8812      	ldrh	r2, [r2, #0]
 8003fd6:	4907      	ldr	r1, [pc, #28]	; (8003ff4 <USB_DeactivateEndpoint+0x374>)
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	b292      	uxth	r2, r2
 8003fdc:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	b00c      	add	sp, #48	; 0x30
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	ffff8f8f 	.word	0xffff8f8f
 8003fec:	ffff80c0 	.word	0xffff80c0
 8003ff0:	ffff8fbf 	.word	0xffff8fbf
 8003ff4:	ffff8080 	.word	0xffff8080
 8003ff8:	ffffc080 	.word	0xffffc080
 8003ffc:	ffffbf8f 	.word	0xffffbf8f

08004000 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b0c3      	sub	sp, #268	; 0x10c
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	785b      	ldrb	r3, [r3, #1]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d001      	beq.n	8004016 <USB_EPStartXfer+0x16>
 8004012:	f000 fd2d 	bl	8004a70 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	429a      	cmp	r2, r3
 8004020:	d905      	bls.n	800402e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	1d7a      	adds	r2, r7, #5
 8004028:	32ff      	adds	r2, #255	; 0xff
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	e004      	b.n	8004038 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	1d7a      	adds	r2, r7, #5
 8004034:	32ff      	adds	r2, #255	; 0xff
 8004036:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	7b1b      	ldrb	r3, [r3, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d125      	bne.n	800408c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	6959      	ldr	r1, [r3, #20]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	88da      	ldrh	r2, [r3, #6]
 8004048:	1d7b      	adds	r3, r7, #5
 800404a:	33ff      	adds	r3, #255	; 0xff
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	b29b      	uxth	r3, r3
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f001 fa47 	bl	80054e4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2250      	movs	r2, #80	; 0x50
 800405e:	5a9b      	ldrh	r3, [r3, r2]
 8004060:	b29b      	uxth	r3, r3
 8004062:	001a      	movs	r2, r3
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	189b      	adds	r3, r3, r2
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	00da      	lsls	r2, r3, #3
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	18d3      	adds	r3, r2, r3
 8004074:	4ad7      	ldr	r2, [pc, #860]	; (80043d4 <USB_EPStartXfer+0x3d4>)
 8004076:	4694      	mov	ip, r2
 8004078:	4463      	add	r3, ip
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	1d7b      	adds	r3, r7, #5
 800407e:	33ff      	adds	r3, #255	; 0xff
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	801a      	strh	r2, [r3, #0]
 8004088:	f000 fccd 	bl	8004a26 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	78db      	ldrb	r3, [r3, #3]
 8004090:	2b02      	cmp	r3, #2
 8004092:	d000      	beq.n	8004096 <USB_EPStartXfer+0x96>
 8004094:	e362      	b.n	800475c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6a1a      	ldr	r2, [r3, #32]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d800      	bhi.n	80040a4 <USB_EPStartXfer+0xa4>
 80040a2:	e309      	b.n	80046b8 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	18d3      	adds	r3, r2, r3
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	2056      	movs	r0, #86	; 0x56
 80040b4:	183b      	adds	r3, r7, r0
 80040b6:	49c8      	ldr	r1, [pc, #800]	; (80043d8 <USB_EPStartXfer+0x3d8>)
 80040b8:	400a      	ands	r2, r1
 80040ba:	801a      	strh	r2, [r3, #0]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	18d3      	adds	r3, r2, r3
 80040c6:	183a      	adds	r2, r7, r0
 80040c8:	8812      	ldrh	r2, [r2, #0]
 80040ca:	49c4      	ldr	r1, [pc, #784]	; (80043dc <USB_EPStartXfer+0x3dc>)
 80040cc:	430a      	orrs	r2, r1
 80040ce:	b292      	uxth	r2, r2
 80040d0:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6a1a      	ldr	r2, [r3, #32]
 80040d6:	1d7b      	adds	r3, r7, #5
 80040d8:	33ff      	adds	r3, #255	; 0xff
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	1ad2      	subs	r2, r2, r3
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	18d3      	adds	r3, r2, r3
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	001a      	movs	r2, r3
 80040f2:	2340      	movs	r3, #64	; 0x40
 80040f4:	4013      	ands	r3, r2
 80040f6:	d100      	bne.n	80040fa <USB_EPStartXfer+0xfa>
 80040f8:	e176      	b.n	80043e8 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	633b      	str	r3, [r7, #48]	; 0x30
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	785b      	ldrb	r3, [r3, #1]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d000      	beq.n	8004108 <USB_EPStartXfer+0x108>
 8004106:	e074      	b.n	80041f2 <USB_EPStartXfer+0x1f2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	62bb      	str	r3, [r7, #40]	; 0x28
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2250      	movs	r2, #80	; 0x50
 8004110:	5a9b      	ldrh	r3, [r3, r2]
 8004112:	b29b      	uxth	r3, r3
 8004114:	001a      	movs	r2, r3
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	189b      	adds	r3, r3, r2
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	00da      	lsls	r2, r3, #3
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	18d3      	adds	r3, r2, r3
 8004126:	4aae      	ldr	r2, [pc, #696]	; (80043e0 <USB_EPStartXfer+0x3e0>)
 8004128:	4694      	mov	ip, r2
 800412a:	4463      	add	r3, ip
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	059b      	lsls	r3, r3, #22
 8004136:	0d9b      	lsrs	r3, r3, #22
 8004138:	b29a      	uxth	r2, r3
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	801a      	strh	r2, [r3, #0]
 800413e:	1d7b      	adds	r3, r7, #5
 8004140:	33ff      	adds	r3, #255	; 0xff
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b3e      	cmp	r3, #62	; 0x3e
 8004146:	d924      	bls.n	8004192 <USB_EPStartXfer+0x192>
 8004148:	1d7b      	adds	r3, r7, #5
 800414a:	33ff      	adds	r3, #255	; 0xff
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	1c7a      	adds	r2, r7, #1
 8004152:	32ff      	adds	r2, #255	; 0xff
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	1d7b      	adds	r3, r7, #5
 8004158:	33ff      	adds	r3, #255	; 0xff
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	221f      	movs	r2, #31
 800415e:	4013      	ands	r3, r2
 8004160:	d106      	bne.n	8004170 <USB_EPStartXfer+0x170>
 8004162:	1c7b      	adds	r3, r7, #1
 8004164:	33ff      	adds	r3, #255	; 0xff
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3b01      	subs	r3, #1
 800416a:	1c7a      	adds	r2, r7, #1
 800416c:	32ff      	adds	r2, #255	; 0xff
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b29a      	uxth	r2, r3
 8004176:	1c7b      	adds	r3, r7, #1
 8004178:	33ff      	adds	r3, #255	; 0xff
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	b29b      	uxth	r3, r3
 800417e:	029b      	lsls	r3, r3, #10
 8004180:	b29b      	uxth	r3, r3
 8004182:	4313      	orrs	r3, r2
 8004184:	b29b      	uxth	r3, r3
 8004186:	4a97      	ldr	r2, [pc, #604]	; (80043e4 <USB_EPStartXfer+0x3e4>)
 8004188:	4313      	orrs	r3, r2
 800418a:	b29a      	uxth	r2, r3
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	801a      	strh	r2, [r3, #0]
 8004190:	e04a      	b.n	8004228 <USB_EPStartXfer+0x228>
 8004192:	1d7b      	adds	r3, r7, #5
 8004194:	33ff      	adds	r3, #255	; 0xff
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d108      	bne.n	80041ae <USB_EPStartXfer+0x1ae>
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	4a90      	ldr	r2, [pc, #576]	; (80043e4 <USB_EPStartXfer+0x3e4>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	801a      	strh	r2, [r3, #0]
 80041ac:	e03c      	b.n	8004228 <USB_EPStartXfer+0x228>
 80041ae:	1d7b      	adds	r3, r7, #5
 80041b0:	33ff      	adds	r3, #255	; 0xff
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	1c7a      	adds	r2, r7, #1
 80041b8:	32ff      	adds	r2, #255	; 0xff
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	1d7b      	adds	r3, r7, #5
 80041be:	33ff      	adds	r3, #255	; 0xff
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2201      	movs	r2, #1
 80041c4:	4013      	ands	r3, r2
 80041c6:	d006      	beq.n	80041d6 <USB_EPStartXfer+0x1d6>
 80041c8:	1c7b      	adds	r3, r7, #1
 80041ca:	33ff      	adds	r3, #255	; 0xff
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3301      	adds	r3, #1
 80041d0:	1c7a      	adds	r2, r7, #1
 80041d2:	32ff      	adds	r2, #255	; 0xff
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	b29a      	uxth	r2, r3
 80041dc:	1c7b      	adds	r3, r7, #1
 80041de:	33ff      	adds	r3, #255	; 0xff
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	029b      	lsls	r3, r3, #10
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	4313      	orrs	r3, r2
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	801a      	strh	r2, [r3, #0]
 80041f0:	e01a      	b.n	8004228 <USB_EPStartXfer+0x228>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	785b      	ldrb	r3, [r3, #1]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d116      	bne.n	8004228 <USB_EPStartXfer+0x228>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2250      	movs	r2, #80	; 0x50
 80041fe:	5a9b      	ldrh	r3, [r3, r2]
 8004200:	b29b      	uxth	r3, r3
 8004202:	001a      	movs	r2, r3
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	189b      	adds	r3, r3, r2
 8004208:	633b      	str	r3, [r7, #48]	; 0x30
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	00da      	lsls	r2, r3, #3
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	18d3      	adds	r3, r2, r3
 8004214:	4a72      	ldr	r2, [pc, #456]	; (80043e0 <USB_EPStartXfer+0x3e0>)
 8004216:	4694      	mov	ip, r2
 8004218:	4463      	add	r3, ip
 800421a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800421c:	1d7b      	adds	r3, r7, #5
 800421e:	33ff      	adds	r3, #255	; 0xff
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	b29a      	uxth	r2, r3
 8004224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004226:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004228:	2076      	movs	r0, #118	; 0x76
 800422a:	183b      	adds	r3, r7, r0
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	8952      	ldrh	r2, [r2, #10]
 8004230:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6959      	ldr	r1, [r3, #20]
 8004236:	1d7b      	adds	r3, r7, #5
 8004238:	33ff      	adds	r3, #255	; 0xff
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	b29c      	uxth	r4, r3
 800423e:	183b      	adds	r3, r7, r0
 8004240:	881a      	ldrh	r2, [r3, #0]
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	0023      	movs	r3, r4
 8004246:	f001 f94d 	bl	80054e4 <USB_WritePMA>
            ep->xfer_buff += len;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	1d7b      	adds	r3, r7, #5
 8004250:	33ff      	adds	r3, #255	; 0xff
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	18d2      	adds	r2, r2, r3
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6a1a      	ldr	r2, [r3, #32]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	429a      	cmp	r2, r3
 8004264:	d908      	bls.n	8004278 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	6a1a      	ldr	r2, [r3, #32]
 800426a:	1d7b      	adds	r3, r7, #5
 800426c:	33ff      	adds	r3, #255	; 0xff
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	1ad2      	subs	r2, r2, r3
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	621a      	str	r2, [r3, #32]
 8004276:	e007      	b.n	8004288 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	1d7a      	adds	r2, r7, #5
 800427e:	32ff      	adds	r2, #255	; 0xff
 8004280:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2200      	movs	r2, #0
 8004286:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	785b      	ldrb	r3, [r3, #1]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d000      	beq.n	8004292 <USB_EPStartXfer+0x292>
 8004290:	e070      	b.n	8004374 <USB_EPStartXfer+0x374>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2250      	movs	r2, #80	; 0x50
 800429a:	5a9b      	ldrh	r3, [r3, r2]
 800429c:	b29b      	uxth	r3, r3
 800429e:	001a      	movs	r2, r3
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	00da      	lsls	r2, r3, #3
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	18d3      	adds	r3, r2, r3
 80042b0:	4a48      	ldr	r2, [pc, #288]	; (80043d4 <USB_EPStartXfer+0x3d4>)
 80042b2:	4694      	mov	ip, r2
 80042b4:	4463      	add	r3, ip
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	059b      	lsls	r3, r3, #22
 80042c0:	0d9b      	lsrs	r3, r3, #22
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	801a      	strh	r2, [r3, #0]
 80042c8:	1d7b      	adds	r3, r7, #5
 80042ca:	33ff      	adds	r3, #255	; 0xff
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b3e      	cmp	r3, #62	; 0x3e
 80042d0:	d922      	bls.n	8004318 <USB_EPStartXfer+0x318>
 80042d2:	1d7b      	adds	r3, r7, #5
 80042d4:	33ff      	adds	r3, #255	; 0xff
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	21fc      	movs	r1, #252	; 0xfc
 80042dc:	187a      	adds	r2, r7, r1
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	1d7b      	adds	r3, r7, #5
 80042e2:	33ff      	adds	r3, #255	; 0xff
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	221f      	movs	r2, #31
 80042e8:	4013      	ands	r3, r2
 80042ea:	d104      	bne.n	80042f6 <USB_EPStartXfer+0x2f6>
 80042ec:	187b      	adds	r3, r7, r1
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	187a      	adds	r2, r7, r1
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	23fc      	movs	r3, #252	; 0xfc
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	029b      	lsls	r3, r3, #10
 8004306:	b29b      	uxth	r3, r3
 8004308:	4313      	orrs	r3, r2
 800430a:	b29b      	uxth	r3, r3
 800430c:	4a35      	ldr	r2, [pc, #212]	; (80043e4 <USB_EPStartXfer+0x3e4>)
 800430e:	4313      	orrs	r3, r2
 8004310:	b29a      	uxth	r2, r3
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	e04a      	b.n	80043ae <USB_EPStartXfer+0x3ae>
 8004318:	1d7b      	adds	r3, r7, #5
 800431a:	33ff      	adds	r3, #255	; 0xff
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d108      	bne.n	8004334 <USB_EPStartXfer+0x334>
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29b      	uxth	r3, r3
 8004328:	4a2e      	ldr	r2, [pc, #184]	; (80043e4 <USB_EPStartXfer+0x3e4>)
 800432a:	4313      	orrs	r3, r2
 800432c:	b29a      	uxth	r2, r3
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	801a      	strh	r2, [r3, #0]
 8004332:	e03c      	b.n	80043ae <USB_EPStartXfer+0x3ae>
 8004334:	1d7b      	adds	r3, r7, #5
 8004336:	33ff      	adds	r3, #255	; 0xff
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	085b      	lsrs	r3, r3, #1
 800433c:	21fc      	movs	r1, #252	; 0xfc
 800433e:	187a      	adds	r2, r7, r1
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	1d7b      	adds	r3, r7, #5
 8004344:	33ff      	adds	r3, #255	; 0xff
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2201      	movs	r2, #1
 800434a:	4013      	ands	r3, r2
 800434c:	d004      	beq.n	8004358 <USB_EPStartXfer+0x358>
 800434e:	187b      	adds	r3, r7, r1
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3301      	adds	r3, #1
 8004354:	187a      	adds	r2, r7, r1
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29a      	uxth	r2, r3
 800435e:	23fc      	movs	r3, #252	; 0xfc
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	029b      	lsls	r3, r3, #10
 8004368:	b29b      	uxth	r3, r3
 800436a:	4313      	orrs	r3, r2
 800436c:	b29a      	uxth	r2, r3
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	801a      	strh	r2, [r3, #0]
 8004372:	e01c      	b.n	80043ae <USB_EPStartXfer+0x3ae>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	785b      	ldrb	r3, [r3, #1]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d118      	bne.n	80043ae <USB_EPStartXfer+0x3ae>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	623b      	str	r3, [r7, #32]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2250      	movs	r2, #80	; 0x50
 8004384:	5a9b      	ldrh	r3, [r3, r2]
 8004386:	b29b      	uxth	r3, r3
 8004388:	001a      	movs	r2, r3
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	189b      	adds	r3, r3, r2
 800438e:	623b      	str	r3, [r7, #32]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	00da      	lsls	r2, r3, #3
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	18d3      	adds	r3, r2, r3
 800439a:	4a0e      	ldr	r2, [pc, #56]	; (80043d4 <USB_EPStartXfer+0x3d4>)
 800439c:	4694      	mov	ip, r2
 800439e:	4463      	add	r3, ip
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	1d7b      	adds	r3, r7, #5
 80043a4:	33ff      	adds	r3, #255	; 0xff
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80043ae:	2076      	movs	r0, #118	; 0x76
 80043b0:	183b      	adds	r3, r7, r0
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	8912      	ldrh	r2, [r2, #8]
 80043b6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	6959      	ldr	r1, [r3, #20]
 80043bc:	1d7b      	adds	r3, r7, #5
 80043be:	33ff      	adds	r3, #255	; 0xff
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	b29c      	uxth	r4, r3
 80043c4:	183b      	adds	r3, r7, r0
 80043c6:	881a      	ldrh	r2, [r3, #0]
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	0023      	movs	r3, r4
 80043cc:	f001 f88a 	bl	80054e4 <USB_WritePMA>
 80043d0:	e329      	b.n	8004a26 <USB_EPStartXfer+0xa26>
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	00000402 	.word	0x00000402
 80043d8:	ffff8f8f 	.word	0xffff8f8f
 80043dc:	ffff8180 	.word	0xffff8180
 80043e0:	00000406 	.word	0x00000406
 80043e4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	785b      	ldrb	r3, [r3, #1]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d000      	beq.n	80043f2 <USB_EPStartXfer+0x3f2>
 80043f0:	e070      	b.n	80044d4 <USB_EPStartXfer+0x4d4>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2250      	movs	r2, #80	; 0x50
 80043fa:	5a9b      	ldrh	r3, [r3, r2]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	001a      	movs	r2, r3
 8004400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004402:	189b      	adds	r3, r3, r2
 8004404:	64bb      	str	r3, [r7, #72]	; 0x48
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	00da      	lsls	r2, r3, #3
 800440c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800440e:	18d3      	adds	r3, r2, r3
 8004410:	4acd      	ldr	r2, [pc, #820]	; (8004748 <USB_EPStartXfer+0x748>)
 8004412:	4694      	mov	ip, r2
 8004414:	4463      	add	r3, ip
 8004416:	647b      	str	r3, [r7, #68]	; 0x44
 8004418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	b29b      	uxth	r3, r3
 800441e:	059b      	lsls	r3, r3, #22
 8004420:	0d9b      	lsrs	r3, r3, #22
 8004422:	b29a      	uxth	r2, r3
 8004424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004426:	801a      	strh	r2, [r3, #0]
 8004428:	1d7b      	adds	r3, r7, #5
 800442a:	33ff      	adds	r3, #255	; 0xff
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b3e      	cmp	r3, #62	; 0x3e
 8004430:	d922      	bls.n	8004478 <USB_EPStartXfer+0x478>
 8004432:	1d7b      	adds	r3, r7, #5
 8004434:	33ff      	adds	r3, #255	; 0xff
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	21f8      	movs	r1, #248	; 0xf8
 800443c:	187a      	adds	r2, r7, r1
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	1d7b      	adds	r3, r7, #5
 8004442:	33ff      	adds	r3, #255	; 0xff
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	221f      	movs	r2, #31
 8004448:	4013      	ands	r3, r2
 800444a:	d104      	bne.n	8004456 <USB_EPStartXfer+0x456>
 800444c:	187b      	adds	r3, r7, r1
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3b01      	subs	r3, #1
 8004452:	187a      	adds	r2, r7, r1
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b29a      	uxth	r2, r3
 800445c:	23f8      	movs	r3, #248	; 0xf8
 800445e:	18fb      	adds	r3, r7, r3
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	029b      	lsls	r3, r3, #10
 8004466:	b29b      	uxth	r3, r3
 8004468:	4313      	orrs	r3, r2
 800446a:	b29b      	uxth	r3, r3
 800446c:	4ab7      	ldr	r2, [pc, #732]	; (800474c <USB_EPStartXfer+0x74c>)
 800446e:	4313      	orrs	r3, r2
 8004470:	b29a      	uxth	r2, r3
 8004472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004474:	801a      	strh	r2, [r3, #0]
 8004476:	e04a      	b.n	800450e <USB_EPStartXfer+0x50e>
 8004478:	1d7b      	adds	r3, r7, #5
 800447a:	33ff      	adds	r3, #255	; 0xff
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d108      	bne.n	8004494 <USB_EPStartXfer+0x494>
 8004482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	4ab0      	ldr	r2, [pc, #704]	; (800474c <USB_EPStartXfer+0x74c>)
 800448a:	4313      	orrs	r3, r2
 800448c:	b29a      	uxth	r2, r3
 800448e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004490:	801a      	strh	r2, [r3, #0]
 8004492:	e03c      	b.n	800450e <USB_EPStartXfer+0x50e>
 8004494:	1d7b      	adds	r3, r7, #5
 8004496:	33ff      	adds	r3, #255	; 0xff
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	21f8      	movs	r1, #248	; 0xf8
 800449e:	187a      	adds	r2, r7, r1
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	1d7b      	adds	r3, r7, #5
 80044a4:	33ff      	adds	r3, #255	; 0xff
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2201      	movs	r2, #1
 80044aa:	4013      	ands	r3, r2
 80044ac:	d004      	beq.n	80044b8 <USB_EPStartXfer+0x4b8>
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3301      	adds	r3, #1
 80044b4:	187a      	adds	r2, r7, r1
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	b29a      	uxth	r2, r3
 80044be:	23f8      	movs	r3, #248	; 0xf8
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	029b      	lsls	r3, r3, #10
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	4313      	orrs	r3, r2
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d0:	801a      	strh	r2, [r3, #0]
 80044d2:	e01c      	b.n	800450e <USB_EPStartXfer+0x50e>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	785b      	ldrb	r3, [r3, #1]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d118      	bne.n	800450e <USB_EPStartXfer+0x50e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	653b      	str	r3, [r7, #80]	; 0x50
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2250      	movs	r2, #80	; 0x50
 80044e4:	5a9b      	ldrh	r3, [r3, r2]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	001a      	movs	r2, r3
 80044ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ec:	189b      	adds	r3, r3, r2
 80044ee:	653b      	str	r3, [r7, #80]	; 0x50
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	00da      	lsls	r2, r3, #3
 80044f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f8:	18d3      	adds	r3, r2, r3
 80044fa:	4a93      	ldr	r2, [pc, #588]	; (8004748 <USB_EPStartXfer+0x748>)
 80044fc:	4694      	mov	ip, r2
 80044fe:	4463      	add	r3, ip
 8004500:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004502:	1d7b      	adds	r3, r7, #5
 8004504:	33ff      	adds	r3, #255	; 0xff
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	b29a      	uxth	r2, r3
 800450a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800450e:	2076      	movs	r0, #118	; 0x76
 8004510:	183b      	adds	r3, r7, r0
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	8912      	ldrh	r2, [r2, #8]
 8004516:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	6959      	ldr	r1, [r3, #20]
 800451c:	1d7b      	adds	r3, r7, #5
 800451e:	33ff      	adds	r3, #255	; 0xff
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	b29c      	uxth	r4, r3
 8004524:	183b      	adds	r3, r7, r0
 8004526:	881a      	ldrh	r2, [r3, #0]
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	0023      	movs	r3, r4
 800452c:	f000 ffda 	bl	80054e4 <USB_WritePMA>
            ep->xfer_buff += len;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	695a      	ldr	r2, [r3, #20]
 8004534:	1d7b      	adds	r3, r7, #5
 8004536:	33ff      	adds	r3, #255	; 0xff
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	18d2      	adds	r2, r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6a1a      	ldr	r2, [r3, #32]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	429a      	cmp	r2, r3
 800454a:	d908      	bls.n	800455e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	6a1a      	ldr	r2, [r3, #32]
 8004550:	1d7b      	adds	r3, r7, #5
 8004552:	33ff      	adds	r3, #255	; 0xff
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	1ad2      	subs	r2, r2, r3
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	621a      	str	r2, [r3, #32]
 800455c:	e007      	b.n	800456e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	1d7a      	adds	r2, r7, #5
 8004564:	32ff      	adds	r2, #255	; 0xff
 8004566:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2200      	movs	r2, #0
 800456c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	643b      	str	r3, [r7, #64]	; 0x40
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	785b      	ldrb	r3, [r3, #1]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d000      	beq.n	800457c <USB_EPStartXfer+0x57c>
 800457a:	e070      	b.n	800465e <USB_EPStartXfer+0x65e>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2250      	movs	r2, #80	; 0x50
 8004584:	5a9b      	ldrh	r3, [r3, r2]
 8004586:	b29b      	uxth	r3, r3
 8004588:	001a      	movs	r2, r3
 800458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458c:	189b      	adds	r3, r3, r2
 800458e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	00da      	lsls	r2, r3, #3
 8004596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004598:	18d3      	adds	r3, r2, r3
 800459a:	4a6d      	ldr	r2, [pc, #436]	; (8004750 <USB_EPStartXfer+0x750>)
 800459c:	4694      	mov	ip, r2
 800459e:	4463      	add	r3, ip
 80045a0:	637b      	str	r3, [r7, #52]	; 0x34
 80045a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	059b      	lsls	r3, r3, #22
 80045aa:	0d9b      	lsrs	r3, r3, #22
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b0:	801a      	strh	r2, [r3, #0]
 80045b2:	1d7b      	adds	r3, r7, #5
 80045b4:	33ff      	adds	r3, #255	; 0xff
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b3e      	cmp	r3, #62	; 0x3e
 80045ba:	d922      	bls.n	8004602 <USB_EPStartXfer+0x602>
 80045bc:	1d7b      	adds	r3, r7, #5
 80045be:	33ff      	adds	r3, #255	; 0xff
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	21f4      	movs	r1, #244	; 0xf4
 80045c6:	187a      	adds	r2, r7, r1
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	1d7b      	adds	r3, r7, #5
 80045cc:	33ff      	adds	r3, #255	; 0xff
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	221f      	movs	r2, #31
 80045d2:	4013      	ands	r3, r2
 80045d4:	d104      	bne.n	80045e0 <USB_EPStartXfer+0x5e0>
 80045d6:	187b      	adds	r3, r7, r1
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3b01      	subs	r3, #1
 80045dc:	187a      	adds	r2, r7, r1
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	23f4      	movs	r3, #244	; 0xf4
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	029b      	lsls	r3, r3, #10
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	4313      	orrs	r3, r2
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	4a55      	ldr	r2, [pc, #340]	; (800474c <USB_EPStartXfer+0x74c>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fe:	801a      	strh	r2, [r3, #0]
 8004600:	e048      	b.n	8004694 <USB_EPStartXfer+0x694>
 8004602:	1d7b      	adds	r3, r7, #5
 8004604:	33ff      	adds	r3, #255	; 0xff
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d108      	bne.n	800461e <USB_EPStartXfer+0x61e>
 800460c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29b      	uxth	r3, r3
 8004612:	4a4e      	ldr	r2, [pc, #312]	; (800474c <USB_EPStartXfer+0x74c>)
 8004614:	4313      	orrs	r3, r2
 8004616:	b29a      	uxth	r2, r3
 8004618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461a:	801a      	strh	r2, [r3, #0]
 800461c:	e03a      	b.n	8004694 <USB_EPStartXfer+0x694>
 800461e:	1d7b      	adds	r3, r7, #5
 8004620:	33ff      	adds	r3, #255	; 0xff
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	21f4      	movs	r1, #244	; 0xf4
 8004628:	187a      	adds	r2, r7, r1
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	1d7b      	adds	r3, r7, #5
 800462e:	33ff      	adds	r3, #255	; 0xff
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2201      	movs	r2, #1
 8004634:	4013      	ands	r3, r2
 8004636:	d004      	beq.n	8004642 <USB_EPStartXfer+0x642>
 8004638:	187b      	adds	r3, r7, r1
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3301      	adds	r3, #1
 800463e:	187a      	adds	r2, r7, r1
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	b29a      	uxth	r2, r3
 8004648:	23f4      	movs	r3, #244	; 0xf4
 800464a:	18fb      	adds	r3, r7, r3
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	b29b      	uxth	r3, r3
 8004650:	029b      	lsls	r3, r3, #10
 8004652:	b29b      	uxth	r3, r3
 8004654:	4313      	orrs	r3, r2
 8004656:	b29a      	uxth	r2, r3
 8004658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465a:	801a      	strh	r2, [r3, #0]
 800465c:	e01a      	b.n	8004694 <USB_EPStartXfer+0x694>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	785b      	ldrb	r3, [r3, #1]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d116      	bne.n	8004694 <USB_EPStartXfer+0x694>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2250      	movs	r2, #80	; 0x50
 800466a:	5a9b      	ldrh	r3, [r3, r2]
 800466c:	b29b      	uxth	r3, r3
 800466e:	001a      	movs	r2, r3
 8004670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004672:	189b      	adds	r3, r3, r2
 8004674:	643b      	str	r3, [r7, #64]	; 0x40
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	00da      	lsls	r2, r3, #3
 800467c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800467e:	18d3      	adds	r3, r2, r3
 8004680:	4a33      	ldr	r2, [pc, #204]	; (8004750 <USB_EPStartXfer+0x750>)
 8004682:	4694      	mov	ip, r2
 8004684:	4463      	add	r3, ip
 8004686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004688:	1d7b      	adds	r3, r7, #5
 800468a:	33ff      	adds	r3, #255	; 0xff
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	b29a      	uxth	r2, r3
 8004690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004692:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004694:	2076      	movs	r0, #118	; 0x76
 8004696:	183b      	adds	r3, r7, r0
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	8952      	ldrh	r2, [r2, #10]
 800469c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	6959      	ldr	r1, [r3, #20]
 80046a2:	1d7b      	adds	r3, r7, #5
 80046a4:	33ff      	adds	r3, #255	; 0xff
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	b29c      	uxth	r4, r3
 80046aa:	183b      	adds	r3, r7, r0
 80046ac:	881a      	ldrh	r2, [r3, #0]
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	0023      	movs	r3, r4
 80046b2:	f000 ff17 	bl	80054e4 <USB_WritePMA>
 80046b6:	e1b6      	b.n	8004a26 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	1d7a      	adds	r2, r7, #5
 80046be:	32ff      	adds	r2, #255	; 0xff
 80046c0:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	18d3      	adds	r3, r2, r3
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	2062      	movs	r0, #98	; 0x62
 80046d2:	183b      	adds	r3, r7, r0
 80046d4:	491f      	ldr	r1, [pc, #124]	; (8004754 <USB_EPStartXfer+0x754>)
 80046d6:	400a      	ands	r2, r1
 80046d8:	801a      	strh	r2, [r3, #0]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	18d3      	adds	r3, r2, r3
 80046e4:	183a      	adds	r2, r7, r0
 80046e6:	8812      	ldrh	r2, [r2, #0]
 80046e8:	491b      	ldr	r1, [pc, #108]	; (8004758 <USB_EPStartXfer+0x758>)
 80046ea:	430a      	orrs	r2, r1
 80046ec:	b292      	uxth	r2, r2
 80046ee:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2250      	movs	r2, #80	; 0x50
 80046f8:	5a9b      	ldrh	r3, [r3, r2]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	001a      	movs	r2, r3
 80046fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004700:	189b      	adds	r3, r3, r2
 8004702:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	00da      	lsls	r2, r3, #3
 800470a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800470c:	18d3      	adds	r3, r2, r3
 800470e:	4a0e      	ldr	r2, [pc, #56]	; (8004748 <USB_EPStartXfer+0x748>)
 8004710:	4694      	mov	ip, r2
 8004712:	4463      	add	r3, ip
 8004714:	65bb      	str	r3, [r7, #88]	; 0x58
 8004716:	1d7b      	adds	r3, r7, #5
 8004718:	33ff      	adds	r3, #255	; 0xff
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	b29a      	uxth	r2, r3
 800471e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004720:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004722:	2076      	movs	r0, #118	; 0x76
 8004724:	183b      	adds	r3, r7, r0
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	8912      	ldrh	r2, [r2, #8]
 800472a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	6959      	ldr	r1, [r3, #20]
 8004730:	1d7b      	adds	r3, r7, #5
 8004732:	33ff      	adds	r3, #255	; 0xff
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	b29c      	uxth	r4, r3
 8004738:	183b      	adds	r3, r7, r0
 800473a:	881a      	ldrh	r2, [r3, #0]
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	0023      	movs	r3, r4
 8004740:	f000 fed0 	bl	80054e4 <USB_WritePMA>
 8004744:	e16f      	b.n	8004a26 <USB_EPStartXfer+0xa26>
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	00000402 	.word	0x00000402
 800474c:	ffff8000 	.word	0xffff8000
 8004750:	00000406 	.word	0x00000406
 8004754:	ffff8e8f 	.word	0xffff8e8f
 8004758:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	6a1a      	ldr	r2, [r3, #32]
 8004760:	1d7b      	adds	r3, r7, #5
 8004762:	33ff      	adds	r3, #255	; 0xff
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	1ad2      	subs	r2, r2, r3
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	18d3      	adds	r3, r2, r3
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	001a      	movs	r2, r3
 800477c:	2340      	movs	r3, #64	; 0x40
 800477e:	4013      	ands	r3, r2
 8004780:	d100      	bne.n	8004784 <USB_EPStartXfer+0x784>
 8004782:	e0a4      	b.n	80048ce <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	673b      	str	r3, [r7, #112]	; 0x70
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	785b      	ldrb	r3, [r3, #1]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d000      	beq.n	8004792 <USB_EPStartXfer+0x792>
 8004790:	e070      	b.n	8004874 <USB_EPStartXfer+0x874>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	66bb      	str	r3, [r7, #104]	; 0x68
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2250      	movs	r2, #80	; 0x50
 800479a:	5a9b      	ldrh	r3, [r3, r2]
 800479c:	b29b      	uxth	r3, r3
 800479e:	001a      	movs	r2, r3
 80047a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047a2:	189b      	adds	r3, r3, r2
 80047a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	00da      	lsls	r2, r3, #3
 80047ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ae:	18d3      	adds	r3, r2, r3
 80047b0:	4abc      	ldr	r2, [pc, #752]	; (8004aa4 <USB_EPStartXfer+0xaa4>)
 80047b2:	4694      	mov	ip, r2
 80047b4:	4463      	add	r3, ip
 80047b6:	667b      	str	r3, [r7, #100]	; 0x64
 80047b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	059b      	lsls	r3, r3, #22
 80047c0:	0d9b      	lsrs	r3, r3, #22
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047c6:	801a      	strh	r2, [r3, #0]
 80047c8:	1d7b      	adds	r3, r7, #5
 80047ca:	33ff      	adds	r3, #255	; 0xff
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b3e      	cmp	r3, #62	; 0x3e
 80047d0:	d922      	bls.n	8004818 <USB_EPStartXfer+0x818>
 80047d2:	1d7b      	adds	r3, r7, #5
 80047d4:	33ff      	adds	r3, #255	; 0xff
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	095b      	lsrs	r3, r3, #5
 80047da:	21f0      	movs	r1, #240	; 0xf0
 80047dc:	187a      	adds	r2, r7, r1
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	1d7b      	adds	r3, r7, #5
 80047e2:	33ff      	adds	r3, #255	; 0xff
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	221f      	movs	r2, #31
 80047e8:	4013      	ands	r3, r2
 80047ea:	d104      	bne.n	80047f6 <USB_EPStartXfer+0x7f6>
 80047ec:	187b      	adds	r3, r7, r1
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	187a      	adds	r2, r7, r1
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	23f0      	movs	r3, #240	; 0xf0
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	029b      	lsls	r3, r3, #10
 8004806:	b29b      	uxth	r3, r3
 8004808:	4313      	orrs	r3, r2
 800480a:	b29b      	uxth	r3, r3
 800480c:	4aa6      	ldr	r2, [pc, #664]	; (8004aa8 <USB_EPStartXfer+0xaa8>)
 800480e:	4313      	orrs	r3, r2
 8004810:	b29a      	uxth	r2, r3
 8004812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004814:	801a      	strh	r2, [r3, #0]
 8004816:	e048      	b.n	80048aa <USB_EPStartXfer+0x8aa>
 8004818:	1d7b      	adds	r3, r7, #5
 800481a:	33ff      	adds	r3, #255	; 0xff
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d108      	bne.n	8004834 <USB_EPStartXfer+0x834>
 8004822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	4a9f      	ldr	r2, [pc, #636]	; (8004aa8 <USB_EPStartXfer+0xaa8>)
 800482a:	4313      	orrs	r3, r2
 800482c:	b29a      	uxth	r2, r3
 800482e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004830:	801a      	strh	r2, [r3, #0]
 8004832:	e03a      	b.n	80048aa <USB_EPStartXfer+0x8aa>
 8004834:	1d7b      	adds	r3, r7, #5
 8004836:	33ff      	adds	r3, #255	; 0xff
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	085b      	lsrs	r3, r3, #1
 800483c:	21f0      	movs	r1, #240	; 0xf0
 800483e:	187a      	adds	r2, r7, r1
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	1d7b      	adds	r3, r7, #5
 8004844:	33ff      	adds	r3, #255	; 0xff
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2201      	movs	r2, #1
 800484a:	4013      	ands	r3, r2
 800484c:	d004      	beq.n	8004858 <USB_EPStartXfer+0x858>
 800484e:	187b      	adds	r3, r7, r1
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3301      	adds	r3, #1
 8004854:	187a      	adds	r2, r7, r1
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	b29a      	uxth	r2, r3
 800485e:	23f0      	movs	r3, #240	; 0xf0
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	029b      	lsls	r3, r3, #10
 8004868:	b29b      	uxth	r3, r3
 800486a:	4313      	orrs	r3, r2
 800486c:	b29a      	uxth	r2, r3
 800486e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004870:	801a      	strh	r2, [r3, #0]
 8004872:	e01a      	b.n	80048aa <USB_EPStartXfer+0x8aa>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	785b      	ldrb	r3, [r3, #1]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d116      	bne.n	80048aa <USB_EPStartXfer+0x8aa>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2250      	movs	r2, #80	; 0x50
 8004880:	5a9b      	ldrh	r3, [r3, r2]
 8004882:	b29b      	uxth	r3, r3
 8004884:	001a      	movs	r2, r3
 8004886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004888:	189b      	adds	r3, r3, r2
 800488a:	673b      	str	r3, [r7, #112]	; 0x70
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	00da      	lsls	r2, r3, #3
 8004892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004894:	18d3      	adds	r3, r2, r3
 8004896:	4a83      	ldr	r2, [pc, #524]	; (8004aa4 <USB_EPStartXfer+0xaa4>)
 8004898:	4694      	mov	ip, r2
 800489a:	4463      	add	r3, ip
 800489c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800489e:	1d7b      	adds	r3, r7, #5
 80048a0:	33ff      	adds	r3, #255	; 0xff
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80048aa:	2076      	movs	r0, #118	; 0x76
 80048ac:	183b      	adds	r3, r7, r0
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	8952      	ldrh	r2, [r2, #10]
 80048b2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	6959      	ldr	r1, [r3, #20]
 80048b8:	1d7b      	adds	r3, r7, #5
 80048ba:	33ff      	adds	r3, #255	; 0xff
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	b29c      	uxth	r4, r3
 80048c0:	183b      	adds	r3, r7, r0
 80048c2:	881a      	ldrh	r2, [r3, #0]
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	0023      	movs	r3, r4
 80048c8:	f000 fe0c 	bl	80054e4 <USB_WritePMA>
 80048cc:	e0ab      	b.n	8004a26 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	785b      	ldrb	r3, [r3, #1]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d000      	beq.n	80048d8 <USB_EPStartXfer+0x8d8>
 80048d6:	e070      	b.n	80049ba <USB_EPStartXfer+0x9ba>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2250      	movs	r2, #80	; 0x50
 80048e0:	5a9b      	ldrh	r3, [r3, r2]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	001a      	movs	r2, r3
 80048e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048e8:	189b      	adds	r3, r3, r2
 80048ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	00da      	lsls	r2, r3, #3
 80048f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048f4:	18d3      	adds	r3, r2, r3
 80048f6:	4a6d      	ldr	r2, [pc, #436]	; (8004aac <USB_EPStartXfer+0xaac>)
 80048f8:	4694      	mov	ip, r2
 80048fa:	4463      	add	r3, ip
 80048fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80048fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b29b      	uxth	r3, r3
 8004904:	059b      	lsls	r3, r3, #22
 8004906:	0d9b      	lsrs	r3, r3, #22
 8004908:	b29a      	uxth	r2, r3
 800490a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800490c:	801a      	strh	r2, [r3, #0]
 800490e:	1d7b      	adds	r3, r7, #5
 8004910:	33ff      	adds	r3, #255	; 0xff
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b3e      	cmp	r3, #62	; 0x3e
 8004916:	d922      	bls.n	800495e <USB_EPStartXfer+0x95e>
 8004918:	1d7b      	adds	r3, r7, #5
 800491a:	33ff      	adds	r3, #255	; 0xff
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	21ec      	movs	r1, #236	; 0xec
 8004922:	187a      	adds	r2, r7, r1
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	1d7b      	adds	r3, r7, #5
 8004928:	33ff      	adds	r3, #255	; 0xff
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	221f      	movs	r2, #31
 800492e:	4013      	ands	r3, r2
 8004930:	d104      	bne.n	800493c <USB_EPStartXfer+0x93c>
 8004932:	187b      	adds	r3, r7, r1
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3b01      	subs	r3, #1
 8004938:	187a      	adds	r2, r7, r1
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	b29a      	uxth	r2, r3
 8004942:	23ec      	movs	r3, #236	; 0xec
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	b29b      	uxth	r3, r3
 800494a:	029b      	lsls	r3, r3, #10
 800494c:	b29b      	uxth	r3, r3
 800494e:	4313      	orrs	r3, r2
 8004950:	b29b      	uxth	r3, r3
 8004952:	4a55      	ldr	r2, [pc, #340]	; (8004aa8 <USB_EPStartXfer+0xaa8>)
 8004954:	4313      	orrs	r3, r2
 8004956:	b29a      	uxth	r2, r3
 8004958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800495a:	801a      	strh	r2, [r3, #0]
 800495c:	e052      	b.n	8004a04 <USB_EPStartXfer+0xa04>
 800495e:	1d7b      	adds	r3, r7, #5
 8004960:	33ff      	adds	r3, #255	; 0xff
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d108      	bne.n	800497a <USB_EPStartXfer+0x97a>
 8004968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	4a4e      	ldr	r2, [pc, #312]	; (8004aa8 <USB_EPStartXfer+0xaa8>)
 8004970:	4313      	orrs	r3, r2
 8004972:	b29a      	uxth	r2, r3
 8004974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004976:	801a      	strh	r2, [r3, #0]
 8004978:	e044      	b.n	8004a04 <USB_EPStartXfer+0xa04>
 800497a:	1d7b      	adds	r3, r7, #5
 800497c:	33ff      	adds	r3, #255	; 0xff
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	21ec      	movs	r1, #236	; 0xec
 8004984:	187a      	adds	r2, r7, r1
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	1d7b      	adds	r3, r7, #5
 800498a:	33ff      	adds	r3, #255	; 0xff
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2201      	movs	r2, #1
 8004990:	4013      	ands	r3, r2
 8004992:	d004      	beq.n	800499e <USB_EPStartXfer+0x99e>
 8004994:	187b      	adds	r3, r7, r1
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3301      	adds	r3, #1
 800499a:	187a      	adds	r2, r7, r1
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	23ec      	movs	r3, #236	; 0xec
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	029b      	lsls	r3, r3, #10
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	4313      	orrs	r3, r2
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049b6:	801a      	strh	r2, [r3, #0]
 80049b8:	e024      	b.n	8004a04 <USB_EPStartXfer+0xa04>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	785b      	ldrb	r3, [r3, #1]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d120      	bne.n	8004a04 <USB_EPStartXfer+0xa04>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2184      	movs	r1, #132	; 0x84
 80049c6:	187a      	adds	r2, r7, r1
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2250      	movs	r2, #80	; 0x50
 80049ce:	5a9b      	ldrh	r3, [r3, r2]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	001a      	movs	r2, r3
 80049d4:	187b      	adds	r3, r7, r1
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	189b      	adds	r3, r3, r2
 80049da:	187a      	adds	r2, r7, r1
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	00da      	lsls	r2, r3, #3
 80049e4:	187b      	adds	r3, r7, r1
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	18d3      	adds	r3, r2, r3
 80049ea:	4a30      	ldr	r2, [pc, #192]	; (8004aac <USB_EPStartXfer+0xaac>)
 80049ec:	4694      	mov	ip, r2
 80049ee:	4463      	add	r3, ip
 80049f0:	2180      	movs	r1, #128	; 0x80
 80049f2:	187a      	adds	r2, r7, r1
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	1d7b      	adds	r3, r7, #5
 80049f8:	33ff      	adds	r3, #255	; 0xff
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	187b      	adds	r3, r7, r1
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004a04:	2076      	movs	r0, #118	; 0x76
 8004a06:	183b      	adds	r3, r7, r0
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	8912      	ldrh	r2, [r2, #8]
 8004a0c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6959      	ldr	r1, [r3, #20]
 8004a12:	1d7b      	adds	r3, r7, #5
 8004a14:	33ff      	adds	r3, #255	; 0xff
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	b29c      	uxth	r4, r3
 8004a1a:	183b      	adds	r3, r7, r0
 8004a1c:	881a      	ldrh	r2, [r3, #0]
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	0023      	movs	r3, r4
 8004a22:	f000 fd5f 	bl	80054e4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	18d3      	adds	r3, r2, r3
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	200a      	movs	r0, #10
 8004a36:	183b      	adds	r3, r7, r0
 8004a38:	491d      	ldr	r1, [pc, #116]	; (8004ab0 <USB_EPStartXfer+0xab0>)
 8004a3a:	400a      	ands	r2, r1
 8004a3c:	801a      	strh	r2, [r3, #0]
 8004a3e:	183b      	adds	r3, r7, r0
 8004a40:	183a      	adds	r2, r7, r0
 8004a42:	8812      	ldrh	r2, [r2, #0]
 8004a44:	2110      	movs	r1, #16
 8004a46:	404a      	eors	r2, r1
 8004a48:	801a      	strh	r2, [r3, #0]
 8004a4a:	183b      	adds	r3, r7, r0
 8004a4c:	183a      	adds	r2, r7, r0
 8004a4e:	8812      	ldrh	r2, [r2, #0]
 8004a50:	2120      	movs	r1, #32
 8004a52:	404a      	eors	r2, r1
 8004a54:	801a      	strh	r2, [r3, #0]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	18d3      	adds	r3, r2, r3
 8004a60:	183a      	adds	r2, r7, r0
 8004a62:	8812      	ldrh	r2, [r2, #0]
 8004a64:	4913      	ldr	r1, [pc, #76]	; (8004ab4 <USB_EPStartXfer+0xab4>)
 8004a66:	430a      	orrs	r2, r1
 8004a68:	b292      	uxth	r2, r2
 8004a6a:	801a      	strh	r2, [r3, #0]
 8004a6c:	f000 fbf4 	bl	8005258 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	7b1b      	ldrb	r3, [r3, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d000      	beq.n	8004a7a <USB_EPStartXfer+0xa7a>
 8004a78:	e0a9      	b.n	8004bce <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d918      	bls.n	8004ab8 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	1d7a      	adds	r2, r7, #5
 8004a8c:	32ff      	adds	r2, #255	; 0xff
 8004a8e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	699a      	ldr	r2, [r3, #24]
 8004a94:	1d7b      	adds	r3, r7, #5
 8004a96:	33ff      	adds	r3, #255	; 0xff
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	1ad2      	subs	r2, r2, r3
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	619a      	str	r2, [r3, #24]
 8004aa0:	e012      	b.n	8004ac8 <USB_EPStartXfer+0xac8>
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	00000406 	.word	0x00000406
 8004aa8:	ffff8000 	.word	0xffff8000
 8004aac:	00000402 	.word	0x00000402
 8004ab0:	ffff8fbf 	.word	0xffff8fbf
 8004ab4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	1d7a      	adds	r2, r7, #5
 8004abe:	32ff      	adds	r2, #255	; 0xff
 8004ac0:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2190      	movs	r1, #144	; 0x90
 8004acc:	187a      	adds	r2, r7, r1
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2250      	movs	r2, #80	; 0x50
 8004ad4:	5a9b      	ldrh	r3, [r3, r2]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	001a      	movs	r2, r3
 8004ada:	187b      	adds	r3, r7, r1
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	189b      	adds	r3, r3, r2
 8004ae0:	187a      	adds	r2, r7, r1
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	00da      	lsls	r2, r3, #3
 8004aea:	187b      	adds	r3, r7, r1
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	18d3      	adds	r3, r2, r3
 8004af0:	4acf      	ldr	r2, [pc, #828]	; (8004e30 <USB_EPStartXfer+0xe30>)
 8004af2:	4694      	mov	ip, r2
 8004af4:	4463      	add	r3, ip
 8004af6:	218c      	movs	r1, #140	; 0x8c
 8004af8:	187a      	adds	r2, r7, r1
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	187b      	adds	r3, r7, r1
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	059b      	lsls	r3, r3, #22
 8004b06:	0d9b      	lsrs	r3, r3, #22
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	187b      	adds	r3, r7, r1
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	801a      	strh	r2, [r3, #0]
 8004b10:	1d7b      	adds	r3, r7, #5
 8004b12:	33ff      	adds	r3, #255	; 0xff
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b3e      	cmp	r3, #62	; 0x3e
 8004b18:	d925      	bls.n	8004b66 <USB_EPStartXfer+0xb66>
 8004b1a:	1d7b      	adds	r3, r7, #5
 8004b1c:	33ff      	adds	r3, #255	; 0xff
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	21e8      	movs	r1, #232	; 0xe8
 8004b24:	187a      	adds	r2, r7, r1
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	1d7b      	adds	r3, r7, #5
 8004b2a:	33ff      	adds	r3, #255	; 0xff
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	221f      	movs	r2, #31
 8004b30:	4013      	ands	r3, r2
 8004b32:	d104      	bne.n	8004b3e <USB_EPStartXfer+0xb3e>
 8004b34:	187b      	adds	r3, r7, r1
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	187a      	adds	r2, r7, r1
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	218c      	movs	r1, #140	; 0x8c
 8004b40:	187b      	adds	r3, r7, r1
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	23e8      	movs	r3, #232	; 0xe8
 8004b4a:	18fb      	adds	r3, r7, r3
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	029b      	lsls	r3, r3, #10
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	4313      	orrs	r3, r2
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	4ab6      	ldr	r2, [pc, #728]	; (8004e34 <USB_EPStartXfer+0xe34>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	187b      	adds	r3, r7, r1
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	801a      	strh	r2, [r3, #0]
 8004b64:	e353      	b.n	800520e <USB_EPStartXfer+0x120e>
 8004b66:	1d7b      	adds	r3, r7, #5
 8004b68:	33ff      	adds	r3, #255	; 0xff
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10b      	bne.n	8004b88 <USB_EPStartXfer+0xb88>
 8004b70:	218c      	movs	r1, #140	; 0x8c
 8004b72:	187b      	adds	r3, r7, r1
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	4aae      	ldr	r2, [pc, #696]	; (8004e34 <USB_EPStartXfer+0xe34>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	187b      	adds	r3, r7, r1
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	801a      	strh	r2, [r3, #0]
 8004b86:	e342      	b.n	800520e <USB_EPStartXfer+0x120e>
 8004b88:	1d7b      	adds	r3, r7, #5
 8004b8a:	33ff      	adds	r3, #255	; 0xff
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	085b      	lsrs	r3, r3, #1
 8004b90:	21e8      	movs	r1, #232	; 0xe8
 8004b92:	187a      	adds	r2, r7, r1
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	1d7b      	adds	r3, r7, #5
 8004b98:	33ff      	adds	r3, #255	; 0xff
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d004      	beq.n	8004bac <USB_EPStartXfer+0xbac>
 8004ba2:	187b      	adds	r3, r7, r1
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	187a      	adds	r2, r7, r1
 8004baa:	6013      	str	r3, [r2, #0]
 8004bac:	218c      	movs	r1, #140	; 0x8c
 8004bae:	187b      	adds	r3, r7, r1
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	23e8      	movs	r3, #232	; 0xe8
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	029b      	lsls	r3, r3, #10
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	187b      	adds	r3, r7, r1
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	801a      	strh	r2, [r3, #0]
 8004bcc:	e31f      	b.n	800520e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	78db      	ldrb	r3, [r3, #3]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d000      	beq.n	8004bd8 <USB_EPStartXfer+0xbd8>
 8004bd6:	e191      	b.n	8004efc <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d000      	beq.n	8004be2 <USB_EPStartXfer+0xbe2>
 8004be0:	e07c      	b.n	8004cdc <USB_EPStartXfer+0xcdc>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	21ac      	movs	r1, #172	; 0xac
 8004be6:	187a      	adds	r2, r7, r1
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2250      	movs	r2, #80	; 0x50
 8004bee:	5a9b      	ldrh	r3, [r3, r2]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	001a      	movs	r2, r3
 8004bf4:	187b      	adds	r3, r7, r1
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	189b      	adds	r3, r3, r2
 8004bfa:	187a      	adds	r2, r7, r1
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	00da      	lsls	r2, r3, #3
 8004c04:	187b      	adds	r3, r7, r1
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	18d3      	adds	r3, r2, r3
 8004c0a:	4a8b      	ldr	r2, [pc, #556]	; (8004e38 <USB_EPStartXfer+0xe38>)
 8004c0c:	4694      	mov	ip, r2
 8004c0e:	4463      	add	r3, ip
 8004c10:	21a8      	movs	r1, #168	; 0xa8
 8004c12:	187a      	adds	r2, r7, r1
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	187b      	adds	r3, r7, r1
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	059b      	lsls	r3, r3, #22
 8004c20:	0d9b      	lsrs	r3, r3, #22
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	187b      	adds	r3, r7, r1
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	801a      	strh	r2, [r3, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b3e      	cmp	r3, #62	; 0x3e
 8004c30:	d923      	bls.n	8004c7a <USB_EPStartXfer+0xc7a>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	21e4      	movs	r1, #228	; 0xe4
 8004c3a:	187a      	adds	r2, r7, r1
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	221f      	movs	r2, #31
 8004c44:	4013      	ands	r3, r2
 8004c46:	d104      	bne.n	8004c52 <USB_EPStartXfer+0xc52>
 8004c48:	187b      	adds	r3, r7, r1
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	187a      	adds	r2, r7, r1
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	21a8      	movs	r1, #168	; 0xa8
 8004c54:	187b      	adds	r3, r7, r1
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	23e4      	movs	r3, #228	; 0xe4
 8004c5e:	18fb      	adds	r3, r7, r3
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	029b      	lsls	r3, r3, #10
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	4a71      	ldr	r2, [pc, #452]	; (8004e34 <USB_EPStartXfer+0xe34>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	187b      	adds	r3, r7, r1
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	801a      	strh	r2, [r3, #0]
 8004c78:	e054      	b.n	8004d24 <USB_EPStartXfer+0xd24>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10b      	bne.n	8004c9a <USB_EPStartXfer+0xc9a>
 8004c82:	21a8      	movs	r1, #168	; 0xa8
 8004c84:	187b      	adds	r3, r7, r1
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	4a69      	ldr	r2, [pc, #420]	; (8004e34 <USB_EPStartXfer+0xe34>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	187b      	adds	r3, r7, r1
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	801a      	strh	r2, [r3, #0]
 8004c98:	e044      	b.n	8004d24 <USB_EPStartXfer+0xd24>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	21e4      	movs	r1, #228	; 0xe4
 8004ca2:	187a      	adds	r2, r7, r1
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2201      	movs	r2, #1
 8004cac:	4013      	ands	r3, r2
 8004cae:	d004      	beq.n	8004cba <USB_EPStartXfer+0xcba>
 8004cb0:	187b      	adds	r3, r7, r1
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	187a      	adds	r2, r7, r1
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	21a8      	movs	r1, #168	; 0xa8
 8004cbc:	187b      	adds	r3, r7, r1
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	23e4      	movs	r3, #228	; 0xe4
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	029b      	lsls	r3, r3, #10
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	187b      	adds	r3, r7, r1
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	801a      	strh	r2, [r3, #0]
 8004cda:	e023      	b.n	8004d24 <USB_EPStartXfer+0xd24>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	785b      	ldrb	r3, [r3, #1]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d11f      	bne.n	8004d24 <USB_EPStartXfer+0xd24>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	21b4      	movs	r1, #180	; 0xb4
 8004ce8:	187a      	adds	r2, r7, r1
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2250      	movs	r2, #80	; 0x50
 8004cf0:	5a9b      	ldrh	r3, [r3, r2]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	001a      	movs	r2, r3
 8004cf6:	187b      	adds	r3, r7, r1
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	189b      	adds	r3, r3, r2
 8004cfc:	187a      	adds	r2, r7, r1
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	00da      	lsls	r2, r3, #3
 8004d06:	187b      	adds	r3, r7, r1
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	18d3      	adds	r3, r2, r3
 8004d0c:	4a4a      	ldr	r2, [pc, #296]	; (8004e38 <USB_EPStartXfer+0xe38>)
 8004d0e:	4694      	mov	ip, r2
 8004d10:	4463      	add	r3, ip
 8004d12:	21b0      	movs	r1, #176	; 0xb0
 8004d14:	187a      	adds	r2, r7, r1
 8004d16:	6013      	str	r3, [r2, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	187b      	adds	r3, r7, r1
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	801a      	strh	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	22a4      	movs	r2, #164	; 0xa4
 8004d28:	18ba      	adds	r2, r7, r2
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	785b      	ldrb	r3, [r3, #1]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d000      	beq.n	8004d36 <USB_EPStartXfer+0xd36>
 8004d34:	e082      	b.n	8004e3c <USB_EPStartXfer+0xe3c>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	219c      	movs	r1, #156	; 0x9c
 8004d3a:	187a      	adds	r2, r7, r1
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2250      	movs	r2, #80	; 0x50
 8004d42:	5a9b      	ldrh	r3, [r3, r2]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	001a      	movs	r2, r3
 8004d48:	187b      	adds	r3, r7, r1
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	189b      	adds	r3, r3, r2
 8004d4e:	187a      	adds	r2, r7, r1
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	00da      	lsls	r2, r3, #3
 8004d58:	187b      	adds	r3, r7, r1
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	18d3      	adds	r3, r2, r3
 8004d5e:	4a34      	ldr	r2, [pc, #208]	; (8004e30 <USB_EPStartXfer+0xe30>)
 8004d60:	4694      	mov	ip, r2
 8004d62:	4463      	add	r3, ip
 8004d64:	2198      	movs	r1, #152	; 0x98
 8004d66:	187a      	adds	r2, r7, r1
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	187b      	adds	r3, r7, r1
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	059b      	lsls	r3, r3, #22
 8004d74:	0d9b      	lsrs	r3, r3, #22
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	187b      	adds	r3, r7, r1
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	801a      	strh	r2, [r3, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b3e      	cmp	r3, #62	; 0x3e
 8004d84:	d923      	bls.n	8004dce <USB_EPStartXfer+0xdce>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	21e0      	movs	r1, #224	; 0xe0
 8004d8e:	187a      	adds	r2, r7, r1
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	221f      	movs	r2, #31
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d104      	bne.n	8004da6 <USB_EPStartXfer+0xda6>
 8004d9c:	187b      	adds	r3, r7, r1
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	187a      	adds	r2, r7, r1
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	2198      	movs	r1, #152	; 0x98
 8004da8:	187b      	adds	r3, r7, r1
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	23e0      	movs	r3, #224	; 0xe0
 8004db2:	18fb      	adds	r3, r7, r3
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	029b      	lsls	r3, r3, #10
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <USB_EPStartXfer+0xe34>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	187b      	adds	r3, r7, r1
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	801a      	strh	r2, [r3, #0]
 8004dcc:	e057      	b.n	8004e7e <USB_EPStartXfer+0xe7e>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10b      	bne.n	8004dee <USB_EPStartXfer+0xdee>
 8004dd6:	2198      	movs	r1, #152	; 0x98
 8004dd8:	187b      	adds	r3, r7, r1
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	4a14      	ldr	r2, [pc, #80]	; (8004e34 <USB_EPStartXfer+0xe34>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	187b      	adds	r3, r7, r1
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	801a      	strh	r2, [r3, #0]
 8004dec:	e047      	b.n	8004e7e <USB_EPStartXfer+0xe7e>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	085b      	lsrs	r3, r3, #1
 8004df4:	21e0      	movs	r1, #224	; 0xe0
 8004df6:	187a      	adds	r2, r7, r1
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	4013      	ands	r3, r2
 8004e02:	d004      	beq.n	8004e0e <USB_EPStartXfer+0xe0e>
 8004e04:	187b      	adds	r3, r7, r1
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	187a      	adds	r2, r7, r1
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	2198      	movs	r1, #152	; 0x98
 8004e10:	187b      	adds	r3, r7, r1
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	23e0      	movs	r3, #224	; 0xe0
 8004e1a:	18fb      	adds	r3, r7, r3
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	029b      	lsls	r3, r3, #10
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	4313      	orrs	r3, r2
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	187b      	adds	r3, r7, r1
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	e026      	b.n	8004e7e <USB_EPStartXfer+0xe7e>
 8004e30:	00000406 	.word	0x00000406
 8004e34:	ffff8000 	.word	0xffff8000
 8004e38:	00000402 	.word	0x00000402
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	785b      	ldrb	r3, [r3, #1]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d11c      	bne.n	8004e7e <USB_EPStartXfer+0xe7e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2250      	movs	r2, #80	; 0x50
 8004e48:	5a9b      	ldrh	r3, [r3, r2]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	001a      	movs	r2, r3
 8004e4e:	21a4      	movs	r1, #164	; 0xa4
 8004e50:	187b      	adds	r3, r7, r1
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	189b      	adds	r3, r3, r2
 8004e56:	187a      	adds	r2, r7, r1
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	00da      	lsls	r2, r3, #3
 8004e60:	187b      	adds	r3, r7, r1
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	18d3      	adds	r3, r2, r3
 8004e66:	4ad2      	ldr	r2, [pc, #840]	; (80051b0 <USB_EPStartXfer+0x11b0>)
 8004e68:	4694      	mov	ip, r2
 8004e6a:	4463      	add	r3, ip
 8004e6c:	21a0      	movs	r1, #160	; 0xa0
 8004e6e:	187a      	adds	r2, r7, r1
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	187b      	adds	r3, r7, r1
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d100      	bne.n	8004e88 <USB_EPStartXfer+0xe88>
 8004e86:	e1c2      	b.n	800520e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	18d2      	adds	r2, r2, r3
 8004e92:	2196      	movs	r1, #150	; 0x96
 8004e94:	187b      	adds	r3, r7, r1
 8004e96:	8812      	ldrh	r2, [r2, #0]
 8004e98:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004e9a:	187b      	adds	r3, r7, r1
 8004e9c:	881a      	ldrh	r2, [r3, #0]
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	01db      	lsls	r3, r3, #7
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d004      	beq.n	8004eb0 <USB_EPStartXfer+0xeb0>
 8004ea6:	187b      	adds	r3, r7, r1
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	2240      	movs	r2, #64	; 0x40
 8004eac:	4013      	ands	r3, r2
 8004eae:	d10d      	bne.n	8004ecc <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004eb0:	2196      	movs	r1, #150	; 0x96
 8004eb2:	187b      	adds	r3, r7, r1
 8004eb4:	881a      	ldrh	r2, [r3, #0]
 8004eb6:	2380      	movs	r3, #128	; 0x80
 8004eb8:	01db      	lsls	r3, r3, #7
 8004eba:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004ebc:	d000      	beq.n	8004ec0 <USB_EPStartXfer+0xec0>
 8004ebe:	e1a6      	b.n	800520e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004ec0:	187b      	adds	r3, r7, r1
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	2240      	movs	r2, #64	; 0x40
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	d000      	beq.n	8004ecc <USB_EPStartXfer+0xecc>
 8004eca:	e1a0      	b.n	800520e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	18d3      	adds	r3, r2, r3
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	2094      	movs	r0, #148	; 0x94
 8004edc:	183b      	adds	r3, r7, r0
 8004ede:	49b5      	ldr	r1, [pc, #724]	; (80051b4 <USB_EPStartXfer+0x11b4>)
 8004ee0:	400a      	ands	r2, r1
 8004ee2:	801a      	strh	r2, [r3, #0]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	18d3      	adds	r3, r2, r3
 8004eee:	183a      	adds	r2, r7, r0
 8004ef0:	8812      	ldrh	r2, [r2, #0]
 8004ef2:	49b1      	ldr	r1, [pc, #708]	; (80051b8 <USB_EPStartXfer+0x11b8>)
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	b292      	uxth	r2, r2
 8004ef8:	801a      	strh	r2, [r3, #0]
 8004efa:	e188      	b.n	800520e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	78db      	ldrb	r3, [r3, #3]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d000      	beq.n	8004f06 <USB_EPStartXfer+0xf06>
 8004f04:	e181      	b.n	800520a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d90d      	bls.n	8004f2e <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	1d7a      	adds	r2, r7, #5
 8004f18:	32ff      	adds	r2, #255	; 0xff
 8004f1a:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	699a      	ldr	r2, [r3, #24]
 8004f20:	1d7b      	adds	r3, r7, #5
 8004f22:	33ff      	adds	r3, #255	; 0xff
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	1ad2      	subs	r2, r2, r3
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	619a      	str	r2, [r3, #24]
 8004f2c:	e007      	b.n	8004f3e <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	1d7a      	adds	r2, r7, #5
 8004f34:	32ff      	adds	r2, #255	; 0xff
 8004f36:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	785b      	ldrb	r3, [r3, #1]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d000      	beq.n	8004f48 <USB_EPStartXfer+0xf48>
 8004f46:	e082      	b.n	800504e <USB_EPStartXfer+0x104e>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	21cc      	movs	r1, #204	; 0xcc
 8004f4c:	187a      	adds	r2, r7, r1
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2250      	movs	r2, #80	; 0x50
 8004f54:	5a9b      	ldrh	r3, [r3, r2]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	001a      	movs	r2, r3
 8004f5a:	187b      	adds	r3, r7, r1
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	189b      	adds	r3, r3, r2
 8004f60:	187a      	adds	r2, r7, r1
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	00da      	lsls	r2, r3, #3
 8004f6a:	187b      	adds	r3, r7, r1
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	18d3      	adds	r3, r2, r3
 8004f70:	4a92      	ldr	r2, [pc, #584]	; (80051bc <USB_EPStartXfer+0x11bc>)
 8004f72:	4694      	mov	ip, r2
 8004f74:	4463      	add	r3, ip
 8004f76:	21c8      	movs	r1, #200	; 0xc8
 8004f78:	187a      	adds	r2, r7, r1
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	187b      	adds	r3, r7, r1
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	059b      	lsls	r3, r3, #22
 8004f86:	0d9b      	lsrs	r3, r3, #22
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	187b      	adds	r3, r7, r1
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	801a      	strh	r2, [r3, #0]
 8004f90:	1d7b      	adds	r3, r7, #5
 8004f92:	33ff      	adds	r3, #255	; 0xff
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b3e      	cmp	r3, #62	; 0x3e
 8004f98:	d925      	bls.n	8004fe6 <USB_EPStartXfer+0xfe6>
 8004f9a:	1d7b      	adds	r3, r7, #5
 8004f9c:	33ff      	adds	r3, #255	; 0xff
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	21dc      	movs	r1, #220	; 0xdc
 8004fa4:	187a      	adds	r2, r7, r1
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	1d7b      	adds	r3, r7, #5
 8004faa:	33ff      	adds	r3, #255	; 0xff
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	221f      	movs	r2, #31
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d104      	bne.n	8004fbe <USB_EPStartXfer+0xfbe>
 8004fb4:	187b      	adds	r3, r7, r1
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	187a      	adds	r2, r7, r1
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	21c8      	movs	r1, #200	; 0xc8
 8004fc0:	187b      	adds	r3, r7, r1
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	23dc      	movs	r3, #220	; 0xdc
 8004fca:	18fb      	adds	r3, r7, r3
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	029b      	lsls	r3, r3, #10
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	4a79      	ldr	r2, [pc, #484]	; (80051c0 <USB_EPStartXfer+0x11c0>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	187b      	adds	r3, r7, r1
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	801a      	strh	r2, [r3, #0]
 8004fe4:	e058      	b.n	8005098 <USB_EPStartXfer+0x1098>
 8004fe6:	1d7b      	adds	r3, r7, #5
 8004fe8:	33ff      	adds	r3, #255	; 0xff
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10b      	bne.n	8005008 <USB_EPStartXfer+0x1008>
 8004ff0:	21c8      	movs	r1, #200	; 0xc8
 8004ff2:	187b      	adds	r3, r7, r1
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	4a71      	ldr	r2, [pc, #452]	; (80051c0 <USB_EPStartXfer+0x11c0>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	187b      	adds	r3, r7, r1
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	801a      	strh	r2, [r3, #0]
 8005006:	e047      	b.n	8005098 <USB_EPStartXfer+0x1098>
 8005008:	1d7b      	adds	r3, r7, #5
 800500a:	33ff      	adds	r3, #255	; 0xff
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	21dc      	movs	r1, #220	; 0xdc
 8005012:	187a      	adds	r2, r7, r1
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	1d7b      	adds	r3, r7, #5
 8005018:	33ff      	adds	r3, #255	; 0xff
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2201      	movs	r2, #1
 800501e:	4013      	ands	r3, r2
 8005020:	d004      	beq.n	800502c <USB_EPStartXfer+0x102c>
 8005022:	187b      	adds	r3, r7, r1
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3301      	adds	r3, #1
 8005028:	187a      	adds	r2, r7, r1
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	21c8      	movs	r1, #200	; 0xc8
 800502e:	187b      	adds	r3, r7, r1
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29a      	uxth	r2, r3
 8005036:	23dc      	movs	r3, #220	; 0xdc
 8005038:	18fb      	adds	r3, r7, r3
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
 800503e:	029b      	lsls	r3, r3, #10
 8005040:	b29b      	uxth	r3, r3
 8005042:	4313      	orrs	r3, r2
 8005044:	b29a      	uxth	r2, r3
 8005046:	187b      	adds	r3, r7, r1
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	801a      	strh	r2, [r3, #0]
 800504c:	e024      	b.n	8005098 <USB_EPStartXfer+0x1098>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	785b      	ldrb	r3, [r3, #1]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d120      	bne.n	8005098 <USB_EPStartXfer+0x1098>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	21d4      	movs	r1, #212	; 0xd4
 800505a:	187a      	adds	r2, r7, r1
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2250      	movs	r2, #80	; 0x50
 8005062:	5a9b      	ldrh	r3, [r3, r2]
 8005064:	b29b      	uxth	r3, r3
 8005066:	001a      	movs	r2, r3
 8005068:	187b      	adds	r3, r7, r1
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	189b      	adds	r3, r3, r2
 800506e:	187a      	adds	r2, r7, r1
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	00da      	lsls	r2, r3, #3
 8005078:	187b      	adds	r3, r7, r1
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	18d3      	adds	r3, r2, r3
 800507e:	4a4f      	ldr	r2, [pc, #316]	; (80051bc <USB_EPStartXfer+0x11bc>)
 8005080:	4694      	mov	ip, r2
 8005082:	4463      	add	r3, ip
 8005084:	21d0      	movs	r1, #208	; 0xd0
 8005086:	187a      	adds	r2, r7, r1
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	1d7b      	adds	r3, r7, #5
 800508c:	33ff      	adds	r3, #255	; 0xff
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	b29a      	uxth	r2, r3
 8005092:	187b      	adds	r3, r7, r1
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	801a      	strh	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	22c4      	movs	r2, #196	; 0xc4
 800509c:	18ba      	adds	r2, r7, r2
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	785b      	ldrb	r3, [r3, #1]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d000      	beq.n	80050aa <USB_EPStartXfer+0x10aa>
 80050a8:	e08c      	b.n	80051c4 <USB_EPStartXfer+0x11c4>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	21bc      	movs	r1, #188	; 0xbc
 80050ae:	187a      	adds	r2, r7, r1
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2250      	movs	r2, #80	; 0x50
 80050b6:	5a9b      	ldrh	r3, [r3, r2]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	001a      	movs	r2, r3
 80050bc:	187b      	adds	r3, r7, r1
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	189b      	adds	r3, r3, r2
 80050c2:	187a      	adds	r2, r7, r1
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	00da      	lsls	r2, r3, #3
 80050cc:	187b      	adds	r3, r7, r1
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	18d3      	adds	r3, r2, r3
 80050d2:	4a37      	ldr	r2, [pc, #220]	; (80051b0 <USB_EPStartXfer+0x11b0>)
 80050d4:	4694      	mov	ip, r2
 80050d6:	4463      	add	r3, ip
 80050d8:	21b8      	movs	r1, #184	; 0xb8
 80050da:	187a      	adds	r2, r7, r1
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	187b      	adds	r3, r7, r1
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	059b      	lsls	r3, r3, #22
 80050e8:	0d9b      	lsrs	r3, r3, #22
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	187b      	adds	r3, r7, r1
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	801a      	strh	r2, [r3, #0]
 80050f2:	1d7b      	adds	r3, r7, #5
 80050f4:	33ff      	adds	r3, #255	; 0xff
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b3e      	cmp	r3, #62	; 0x3e
 80050fa:	d925      	bls.n	8005148 <USB_EPStartXfer+0x1148>
 80050fc:	1d7b      	adds	r3, r7, #5
 80050fe:	33ff      	adds	r3, #255	; 0xff
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	21d8      	movs	r1, #216	; 0xd8
 8005106:	187a      	adds	r2, r7, r1
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	1d7b      	adds	r3, r7, #5
 800510c:	33ff      	adds	r3, #255	; 0xff
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	221f      	movs	r2, #31
 8005112:	4013      	ands	r3, r2
 8005114:	d104      	bne.n	8005120 <USB_EPStartXfer+0x1120>
 8005116:	187b      	adds	r3, r7, r1
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3b01      	subs	r3, #1
 800511c:	187a      	adds	r2, r7, r1
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	21b8      	movs	r1, #184	; 0xb8
 8005122:	187b      	adds	r3, r7, r1
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	b29a      	uxth	r2, r3
 800512a:	23d8      	movs	r3, #216	; 0xd8
 800512c:	18fb      	adds	r3, r7, r3
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	b29b      	uxth	r3, r3
 8005132:	029b      	lsls	r3, r3, #10
 8005134:	b29b      	uxth	r3, r3
 8005136:	4313      	orrs	r3, r2
 8005138:	b29b      	uxth	r3, r3
 800513a:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <USB_EPStartXfer+0x11c0>)
 800513c:	4313      	orrs	r3, r2
 800513e:	b29a      	uxth	r2, r3
 8005140:	187b      	adds	r3, r7, r1
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	801a      	strh	r2, [r3, #0]
 8005146:	e062      	b.n	800520e <USB_EPStartXfer+0x120e>
 8005148:	1d7b      	adds	r3, r7, #5
 800514a:	33ff      	adds	r3, #255	; 0xff
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10b      	bne.n	800516a <USB_EPStartXfer+0x116a>
 8005152:	21b8      	movs	r1, #184	; 0xb8
 8005154:	187b      	adds	r3, r7, r1
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	b29b      	uxth	r3, r3
 800515c:	4a18      	ldr	r2, [pc, #96]	; (80051c0 <USB_EPStartXfer+0x11c0>)
 800515e:	4313      	orrs	r3, r2
 8005160:	b29a      	uxth	r2, r3
 8005162:	187b      	adds	r3, r7, r1
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	801a      	strh	r2, [r3, #0]
 8005168:	e051      	b.n	800520e <USB_EPStartXfer+0x120e>
 800516a:	1d7b      	adds	r3, r7, #5
 800516c:	33ff      	adds	r3, #255	; 0xff
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	085b      	lsrs	r3, r3, #1
 8005172:	21d8      	movs	r1, #216	; 0xd8
 8005174:	187a      	adds	r2, r7, r1
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	1d7b      	adds	r3, r7, #5
 800517a:	33ff      	adds	r3, #255	; 0xff
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2201      	movs	r2, #1
 8005180:	4013      	ands	r3, r2
 8005182:	d004      	beq.n	800518e <USB_EPStartXfer+0x118e>
 8005184:	187b      	adds	r3, r7, r1
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3301      	adds	r3, #1
 800518a:	187a      	adds	r2, r7, r1
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	21b8      	movs	r1, #184	; 0xb8
 8005190:	187b      	adds	r3, r7, r1
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29a      	uxth	r2, r3
 8005198:	23d8      	movs	r3, #216	; 0xd8
 800519a:	18fb      	adds	r3, r7, r3
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	029b      	lsls	r3, r3, #10
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	4313      	orrs	r3, r2
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	187b      	adds	r3, r7, r1
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	801a      	strh	r2, [r3, #0]
 80051ae:	e02e      	b.n	800520e <USB_EPStartXfer+0x120e>
 80051b0:	00000406 	.word	0x00000406
 80051b4:	ffff8f8f 	.word	0xffff8f8f
 80051b8:	ffff80c0 	.word	0xffff80c0
 80051bc:	00000402 	.word	0x00000402
 80051c0:	ffff8000 	.word	0xffff8000
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d120      	bne.n	800520e <USB_EPStartXfer+0x120e>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2250      	movs	r2, #80	; 0x50
 80051d0:	5a9b      	ldrh	r3, [r3, r2]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	001a      	movs	r2, r3
 80051d6:	21c4      	movs	r1, #196	; 0xc4
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	189b      	adds	r3, r3, r2
 80051de:	187a      	adds	r2, r7, r1
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	00da      	lsls	r2, r3, #3
 80051e8:	187b      	adds	r3, r7, r1
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	18d3      	adds	r3, r2, r3
 80051ee:	4a1d      	ldr	r2, [pc, #116]	; (8005264 <USB_EPStartXfer+0x1264>)
 80051f0:	4694      	mov	ip, r2
 80051f2:	4463      	add	r3, ip
 80051f4:	21c0      	movs	r1, #192	; 0xc0
 80051f6:	187a      	adds	r2, r7, r1
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	1d7b      	adds	r3, r7, #5
 80051fc:	33ff      	adds	r3, #255	; 0xff
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	b29a      	uxth	r2, r3
 8005202:	187b      	adds	r3, r7, r1
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	801a      	strh	r2, [r3, #0]
 8005208:	e001      	b.n	800520e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e025      	b.n	800525a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	18d3      	adds	r3, r2, r3
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	b29a      	uxth	r2, r3
 800521c:	208a      	movs	r0, #138	; 0x8a
 800521e:	183b      	adds	r3, r7, r0
 8005220:	4911      	ldr	r1, [pc, #68]	; (8005268 <USB_EPStartXfer+0x1268>)
 8005222:	400a      	ands	r2, r1
 8005224:	801a      	strh	r2, [r3, #0]
 8005226:	183b      	adds	r3, r7, r0
 8005228:	183a      	adds	r2, r7, r0
 800522a:	8812      	ldrh	r2, [r2, #0]
 800522c:	2180      	movs	r1, #128	; 0x80
 800522e:	0149      	lsls	r1, r1, #5
 8005230:	404a      	eors	r2, r1
 8005232:	801a      	strh	r2, [r3, #0]
 8005234:	183b      	adds	r3, r7, r0
 8005236:	183a      	adds	r2, r7, r0
 8005238:	8812      	ldrh	r2, [r2, #0]
 800523a:	2180      	movs	r1, #128	; 0x80
 800523c:	0189      	lsls	r1, r1, #6
 800523e:	404a      	eors	r2, r1
 8005240:	801a      	strh	r2, [r3, #0]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	18d3      	adds	r3, r2, r3
 800524c:	183a      	adds	r2, r7, r0
 800524e:	8812      	ldrh	r2, [r2, #0]
 8005250:	4906      	ldr	r1, [pc, #24]	; (800526c <USB_EPStartXfer+0x126c>)
 8005252:	430a      	orrs	r2, r1
 8005254:	b292      	uxth	r2, r2
 8005256:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	0018      	movs	r0, r3
 800525c:	46bd      	mov	sp, r7
 800525e:	b043      	add	sp, #268	; 0x10c
 8005260:	bd90      	pop	{r4, r7, pc}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	00000406 	.word	0x00000406
 8005268:	ffffbf8f 	.word	0xffffbf8f
 800526c:	ffff8080 	.word	0xffff8080

08005270 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	785b      	ldrb	r3, [r3, #1]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01d      	beq.n	80052be <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	18d3      	adds	r3, r2, r3
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	b29a      	uxth	r2, r3
 8005290:	200c      	movs	r0, #12
 8005292:	183b      	adds	r3, r7, r0
 8005294:	491b      	ldr	r1, [pc, #108]	; (8005304 <USB_EPSetStall+0x94>)
 8005296:	400a      	ands	r2, r1
 8005298:	801a      	strh	r2, [r3, #0]
 800529a:	183b      	adds	r3, r7, r0
 800529c:	183a      	adds	r2, r7, r0
 800529e:	8812      	ldrh	r2, [r2, #0]
 80052a0:	2110      	movs	r1, #16
 80052a2:	404a      	eors	r2, r1
 80052a4:	801a      	strh	r2, [r3, #0]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	18d3      	adds	r3, r2, r3
 80052b0:	183a      	adds	r2, r7, r0
 80052b2:	8812      	ldrh	r2, [r2, #0]
 80052b4:	4914      	ldr	r1, [pc, #80]	; (8005308 <USB_EPSetStall+0x98>)
 80052b6:	430a      	orrs	r2, r1
 80052b8:	b292      	uxth	r2, r2
 80052ba:	801a      	strh	r2, [r3, #0]
 80052bc:	e01d      	b.n	80052fa <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	18d3      	adds	r3, r2, r3
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	200e      	movs	r0, #14
 80052ce:	183b      	adds	r3, r7, r0
 80052d0:	490e      	ldr	r1, [pc, #56]	; (800530c <USB_EPSetStall+0x9c>)
 80052d2:	400a      	ands	r2, r1
 80052d4:	801a      	strh	r2, [r3, #0]
 80052d6:	183b      	adds	r3, r7, r0
 80052d8:	183a      	adds	r2, r7, r0
 80052da:	8812      	ldrh	r2, [r2, #0]
 80052dc:	2180      	movs	r1, #128	; 0x80
 80052de:	0149      	lsls	r1, r1, #5
 80052e0:	404a      	eors	r2, r1
 80052e2:	801a      	strh	r2, [r3, #0]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	18d3      	adds	r3, r2, r3
 80052ee:	183a      	adds	r2, r7, r0
 80052f0:	8812      	ldrh	r2, [r2, #0]
 80052f2:	4905      	ldr	r1, [pc, #20]	; (8005308 <USB_EPSetStall+0x98>)
 80052f4:	430a      	orrs	r2, r1
 80052f6:	b292      	uxth	r2, r2
 80052f8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	0018      	movs	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	b004      	add	sp, #16
 8005302:	bd80      	pop	{r7, pc}
 8005304:	ffff8fbf 	.word	0xffff8fbf
 8005308:	ffff8080 	.word	0xffff8080
 800530c:	ffffbf8f 	.word	0xffffbf8f

08005310 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	7b1b      	ldrb	r3, [r3, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d000      	beq.n	8005324 <USB_EPClearStall+0x14>
 8005322:	e095      	b.n	8005450 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	785b      	ldrb	r3, [r3, #1]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d046      	beq.n	80053ba <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	18d2      	adds	r2, r2, r3
 8005336:	2110      	movs	r1, #16
 8005338:	187b      	adds	r3, r7, r1
 800533a:	8812      	ldrh	r2, [r2, #0]
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	187b      	adds	r3, r7, r1
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	2240      	movs	r2, #64	; 0x40
 8005344:	4013      	ands	r3, r2
 8005346:	d016      	beq.n	8005376 <USB_EPClearStall+0x66>
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	18d3      	adds	r3, r2, r3
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29a      	uxth	r2, r3
 8005356:	200e      	movs	r0, #14
 8005358:	183b      	adds	r3, r7, r0
 800535a:	4940      	ldr	r1, [pc, #256]	; (800545c <USB_EPClearStall+0x14c>)
 800535c:	400a      	ands	r2, r1
 800535e:	801a      	strh	r2, [r3, #0]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	18d3      	adds	r3, r2, r3
 800536a:	183a      	adds	r2, r7, r0
 800536c:	8812      	ldrh	r2, [r2, #0]
 800536e:	493c      	ldr	r1, [pc, #240]	; (8005460 <USB_EPClearStall+0x150>)
 8005370:	430a      	orrs	r2, r1
 8005372:	b292      	uxth	r2, r2
 8005374:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	78db      	ldrb	r3, [r3, #3]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d068      	beq.n	8005450 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	18d3      	adds	r3, r2, r3
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	b29a      	uxth	r2, r3
 800538c:	200c      	movs	r0, #12
 800538e:	183b      	adds	r3, r7, r0
 8005390:	4934      	ldr	r1, [pc, #208]	; (8005464 <USB_EPClearStall+0x154>)
 8005392:	400a      	ands	r2, r1
 8005394:	801a      	strh	r2, [r3, #0]
 8005396:	183b      	adds	r3, r7, r0
 8005398:	183a      	adds	r2, r7, r0
 800539a:	8812      	ldrh	r2, [r2, #0]
 800539c:	2120      	movs	r1, #32
 800539e:	404a      	eors	r2, r1
 80053a0:	801a      	strh	r2, [r3, #0]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	18d3      	adds	r3, r2, r3
 80053ac:	183a      	adds	r2, r7, r0
 80053ae:	8812      	ldrh	r2, [r2, #0]
 80053b0:	492d      	ldr	r1, [pc, #180]	; (8005468 <USB_EPClearStall+0x158>)
 80053b2:	430a      	orrs	r2, r1
 80053b4:	b292      	uxth	r2, r2
 80053b6:	801a      	strh	r2, [r3, #0]
 80053b8:	e04a      	b.n	8005450 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	18d2      	adds	r2, r2, r3
 80053c4:	2116      	movs	r1, #22
 80053c6:	187b      	adds	r3, r7, r1
 80053c8:	8812      	ldrh	r2, [r2, #0]
 80053ca:	801a      	strh	r2, [r3, #0]
 80053cc:	187b      	adds	r3, r7, r1
 80053ce:	881a      	ldrh	r2, [r3, #0]
 80053d0:	2380      	movs	r3, #128	; 0x80
 80053d2:	01db      	lsls	r3, r3, #7
 80053d4:	4013      	ands	r3, r2
 80053d6:	d016      	beq.n	8005406 <USB_EPClearStall+0xf6>
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	18d3      	adds	r3, r2, r3
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	2014      	movs	r0, #20
 80053e8:	183b      	adds	r3, r7, r0
 80053ea:	491c      	ldr	r1, [pc, #112]	; (800545c <USB_EPClearStall+0x14c>)
 80053ec:	400a      	ands	r2, r1
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	18d3      	adds	r3, r2, r3
 80053fa:	183a      	adds	r2, r7, r0
 80053fc:	8812      	ldrh	r2, [r2, #0]
 80053fe:	491b      	ldr	r1, [pc, #108]	; (800546c <USB_EPClearStall+0x15c>)
 8005400:	430a      	orrs	r2, r1
 8005402:	b292      	uxth	r2, r2
 8005404:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	18d3      	adds	r3, r2, r3
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	b29a      	uxth	r2, r3
 8005414:	2012      	movs	r0, #18
 8005416:	183b      	adds	r3, r7, r0
 8005418:	4915      	ldr	r1, [pc, #84]	; (8005470 <USB_EPClearStall+0x160>)
 800541a:	400a      	ands	r2, r1
 800541c:	801a      	strh	r2, [r3, #0]
 800541e:	183b      	adds	r3, r7, r0
 8005420:	183a      	adds	r2, r7, r0
 8005422:	8812      	ldrh	r2, [r2, #0]
 8005424:	2180      	movs	r1, #128	; 0x80
 8005426:	0149      	lsls	r1, r1, #5
 8005428:	404a      	eors	r2, r1
 800542a:	801a      	strh	r2, [r3, #0]
 800542c:	183b      	adds	r3, r7, r0
 800542e:	183a      	adds	r2, r7, r0
 8005430:	8812      	ldrh	r2, [r2, #0]
 8005432:	2180      	movs	r1, #128	; 0x80
 8005434:	0189      	lsls	r1, r1, #6
 8005436:	404a      	eors	r2, r1
 8005438:	801a      	strh	r2, [r3, #0]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	18d3      	adds	r3, r2, r3
 8005444:	183a      	adds	r2, r7, r0
 8005446:	8812      	ldrh	r2, [r2, #0]
 8005448:	4907      	ldr	r1, [pc, #28]	; (8005468 <USB_EPClearStall+0x158>)
 800544a:	430a      	orrs	r2, r1
 800544c:	b292      	uxth	r2, r2
 800544e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	0018      	movs	r0, r3
 8005454:	46bd      	mov	sp, r7
 8005456:	b006      	add	sp, #24
 8005458:	bd80      	pop	{r7, pc}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	ffff8f8f 	.word	0xffff8f8f
 8005460:	ffff80c0 	.word	0xffff80c0
 8005464:	ffff8fbf 	.word	0xffff8fbf
 8005468:	ffff8080 	.word	0xffff8080
 800546c:	ffffc080 	.word	0xffffc080
 8005470:	ffffbf8f 	.word	0xffffbf8f

08005474 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	000a      	movs	r2, r1
 800547e:	1cfb      	adds	r3, r7, #3
 8005480:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8005482:	1cfb      	adds	r3, r7, #3
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d103      	bne.n	8005492 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	224c      	movs	r2, #76	; 0x4c
 800548e:	2180      	movs	r1, #128	; 0x80
 8005490:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	0018      	movs	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	b002      	add	sp, #8
 800549a:	bd80      	pop	{r7, pc}

0800549c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2258      	movs	r2, #88	; 0x58
 80054a8:	5a9b      	ldrh	r3, [r3, r2]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	4a05      	ldr	r2, [pc, #20]	; (80054c4 <USB_DevConnect+0x28>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	b299      	uxth	r1, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2258      	movs	r2, #88	; 0x58
 80054b6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	0018      	movs	r0, r3
 80054bc:	46bd      	mov	sp, r7
 80054be:	b002      	add	sp, #8
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	ffff8000 	.word	0xffff8000

080054c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2244      	movs	r2, #68	; 0x44
 80054d4:	5a9b      	ldrh	r3, [r3, r2]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80054da:	68fb      	ldr	r3, [r7, #12]
}
 80054dc:	0018      	movs	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	b004      	add	sp, #16
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08a      	sub	sp, #40	; 0x28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	0019      	movs	r1, r3
 80054f0:	1dbb      	adds	r3, r7, #6
 80054f2:	801a      	strh	r2, [r3, #0]
 80054f4:	1d3b      	adds	r3, r7, #4
 80054f6:	1c0a      	adds	r2, r1, #0
 80054f8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80054fa:	1d3b      	adds	r3, r7, #4
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	3301      	adds	r3, #1
 8005500:	085b      	lsrs	r3, r3, #1
 8005502:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800550c:	1dbb      	adds	r3, r7, #6
 800550e:	881a      	ldrh	r2, [r3, #0]
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	18d3      	adds	r3, r2, r3
 8005514:	2280      	movs	r2, #128	; 0x80
 8005516:	00d2      	lsls	r2, r2, #3
 8005518:	4694      	mov	ip, r2
 800551a:	4463      	add	r3, ip
 800551c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
 8005522:	e020      	b.n	8005566 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	781a      	ldrb	r2, [r3, #0]
 8005528:	2112      	movs	r1, #18
 800552a:	187b      	adds	r3, r7, r1
 800552c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	3301      	adds	r3, #1
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	021b      	lsls	r3, r3, #8
 8005536:	b21a      	sxth	r2, r3
 8005538:	187b      	adds	r3, r7, r1
 800553a:	2000      	movs	r0, #0
 800553c:	5e1b      	ldrsh	r3, [r3, r0]
 800553e:	4313      	orrs	r3, r2
 8005540:	b21a      	sxth	r2, r3
 8005542:	187b      	adds	r3, r7, r1
 8005544:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	187a      	adds	r2, r7, r1
 800554a:	8812      	ldrh	r2, [r2, #0]
 800554c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	3302      	adds	r3, #2
 8005552:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	3301      	adds	r3, #1
 8005558:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	3301      	adds	r3, #1
 800555e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	3b01      	subs	r3, #1
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1db      	bne.n	8005524 <USB_WritePMA+0x40>
  }
}
 800556c:	46c0      	nop			; (mov r8, r8)
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	46bd      	mov	sp, r7
 8005572:	b00a      	add	sp, #40	; 0x28
 8005574:	bd80      	pop	{r7, pc}

08005576 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b08a      	sub	sp, #40	; 0x28
 800557a:	af00      	add	r7, sp, #0
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	0019      	movs	r1, r3
 8005582:	1dbb      	adds	r3, r7, #6
 8005584:	801a      	strh	r2, [r3, #0]
 8005586:	1d3b      	adds	r3, r7, #4
 8005588:	1c0a      	adds	r2, r1, #0
 800558a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800558c:	1d3b      	adds	r3, r7, #4
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	b29b      	uxth	r3, r3
 8005594:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800559e:	1dbb      	adds	r3, r7, #6
 80055a0:	881a      	ldrh	r2, [r3, #0]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	18d3      	adds	r3, r2, r3
 80055a6:	2280      	movs	r2, #128	; 0x80
 80055a8:	00d2      	lsls	r2, r2, #3
 80055aa:	4694      	mov	ip, r2
 80055ac:	4463      	add	r3, ip
 80055ae:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
 80055b4:	e018      	b.n	80055e8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	3302      	adds	r3, #2
 80055c2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	3301      	adds	r3, #1
 80055d0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	0a1b      	lsrs	r3, r3, #8
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	3301      	adds	r3, #1
 80055e0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	3b01      	subs	r3, #1
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e3      	bne.n	80055b6 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80055ee:	1d3b      	adds	r3, r7, #4
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	2201      	movs	r2, #1
 80055f4:	4013      	ands	r3, r2
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	b2da      	uxtb	r2, r3
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	701a      	strb	r2, [r3, #0]
  }
}
 800560c:	46c0      	nop			; (mov r8, r8)
 800560e:	46bd      	mov	sp, r7
 8005610:	b00a      	add	sp, #40	; 0x28
 8005612:	bd80      	pop	{r7, pc}

08005614 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	000a      	movs	r2, r1
 800561e:	1cfb      	adds	r3, r7, #3
 8005620:	701a      	strb	r2, [r3, #0]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	7c1b      	ldrb	r3, [r3, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d116      	bne.n	8005658 <USBD_MSC_Init+0x44>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800562a:	2380      	movs	r3, #128	; 0x80
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	2101      	movs	r1, #1
 8005634:	f003 f813 	bl	800865e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	23b6      	movs	r3, #182	; 0xb6
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	2101      	movs	r1, #1
 8005640:	50d1      	str	r1, [r2, r3]

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8005642:	2380      	movs	r3, #128	; 0x80
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	2202      	movs	r2, #2
 800564a:	2181      	movs	r1, #129	; 0x81
 800564c:	f003 f807 	bl	800865e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	62da      	str	r2, [r3, #44]	; 0x2c
 8005656:	e013      	b.n	8005680 <USBD_MSC_Init+0x6c>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	2340      	movs	r3, #64	; 0x40
 800565c:	2202      	movs	r2, #2
 800565e:	2101      	movs	r1, #1
 8005660:	f002 fffd 	bl	800865e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	23b6      	movs	r3, #182	; 0xb6
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	2101      	movs	r1, #1
 800566c:	50d1      	str	r1, [r2, r3]

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	2340      	movs	r3, #64	; 0x40
 8005672:	2202      	movs	r2, #2
 8005674:	2181      	movs	r1, #129	; 0x81
 8005676:	f002 fff2 	bl	800865e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8005680:	239b      	movs	r3, #155	; 0x9b
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	0018      	movs	r0, r3
 8005686:	f003 f9ad 	bl	80089e4 <USBD_static_malloc>
 800568a:	0001      	movs	r1, r0
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	23ae      	movs	r3, #174	; 0xae
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	23ae      	movs	r3, #174	; 0xae
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	58d3      	ldr	r3, [r2, r3]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <USBD_MSC_Init+0x90>
  {
    return USBD_FAIL;
 80056a0:	2302      	movs	r3, #2
 80056a2:	e004      	b.n	80056ae <USBD_MSC_Init+0x9a>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	0018      	movs	r0, r3
 80056a8:	f000 fa00 	bl	8005aac <MSC_BOT_Init>

  return USBD_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	0018      	movs	r0, r3
 80056b0:	46bd      	mov	sp, r7
 80056b2:	b002      	add	sp, #8
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b082      	sub	sp, #8
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	000a      	movs	r2, r1
 80056c0:	1cfb      	adds	r3, r7, #3
 80056c2:	701a      	strb	r2, [r3, #0]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2101      	movs	r1, #1
 80056c8:	0018      	movs	r0, r3
 80056ca:	f002 ffff 	bl	80086cc <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	23b6      	movs	r3, #182	; 0xb6
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	2100      	movs	r1, #0
 80056d6:	50d1      	str	r1, [r2, r3]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2181      	movs	r1, #129	; 0x81
 80056dc:	0018      	movs	r0, r3
 80056de:	f002 fff5 	bl	80086cc <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	0018      	movs	r0, r3
 80056ec:	f000 fa32 	bl	8005b54 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	23ae      	movs	r3, #174	; 0xae
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	58d3      	ldr	r3, [r2, r3]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00b      	beq.n	8005714 <USBD_MSC_DeInit+0x5e>
  {
    USBD_free(pdev->pClassData);
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	23ae      	movs	r3, #174	; 0xae
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	58d3      	ldr	r3, [r2, r3]
 8005704:	0018      	movs	r0, r3
 8005706:	f003 f979 	bl	80089fc <USBD_static_free>
    pdev->pClassData  = NULL;
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	23ae      	movs	r3, #174	; 0xae
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	2100      	movs	r1, #0
 8005712:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	0018      	movs	r0, r3
 8005718:	46bd      	mov	sp, r7
 800571a:	b002      	add	sp, #8
 800571c:	bd80      	pop	{r7, pc}

0800571e <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b086      	sub	sp, #24
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	23ae      	movs	r3, #174	; 0xae
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	58d3      	ldr	r3, [r2, r3]
 8005730:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8005732:	2317      	movs	r3, #23
 8005734:	18fb      	adds	r3, r7, r3
 8005736:	2200      	movs	r2, #0
 8005738:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800573a:	230e      	movs	r3, #14
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	2200      	movs	r2, #0
 8005740:	801a      	strh	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	001a      	movs	r2, r3
 8005748:	2360      	movs	r3, #96	; 0x60
 800574a:	4013      	ands	r3, r2
 800574c:	d05b      	beq.n	8005806 <USBD_MSC_Setup+0xe8>
 800574e:	2b20      	cmp	r3, #32
 8005750:	d000      	beq.n	8005754 <USBD_MSC_Setup+0x36>
 8005752:	e128      	b.n	80059a6 <USBD_MSC_Setup+0x288>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	2bfe      	cmp	r3, #254	; 0xfe
 800575a:	d002      	beq.n	8005762 <USBD_MSC_Setup+0x44>
 800575c:	2bff      	cmp	r3, #255	; 0xff
 800575e:	d029      	beq.n	80057b4 <USBD_MSC_Setup+0x96>
 8005760:	e045      	b.n	80057ee <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	885b      	ldrh	r3, [r3, #2]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d119      	bne.n	800579e <USBD_MSC_Setup+0x80>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	88db      	ldrh	r3, [r3, #6]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d115      	bne.n	800579e <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8005778:	2b00      	cmp	r3, #0
 800577a:	da10      	bge.n	800579e <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	23af      	movs	r3, #175	; 0xaf
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	58d3      	ldr	r3, [r2, r3]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	4798      	blx	r3
 8005788:	0003      	movs	r3, r0
 800578a:	001a      	movs	r2, r3
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8005790:	6939      	ldr	r1, [r7, #16]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	0018      	movs	r0, r3
 8005798:	f002 fbb2 	bl	8007f00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800579c:	e032      	b.n	8005804 <USBD_MSC_Setup+0xe6>
            USBD_CtlError(pdev, req);
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	0011      	movs	r1, r2
 80057a4:	0018      	movs	r0, r3
 80057a6:	f002 fb2d 	bl	8007e04 <USBD_CtlError>
            ret = USBD_FAIL;
 80057aa:	2317      	movs	r3, #23
 80057ac:	18fb      	adds	r3, r7, r3
 80057ae:	2202      	movs	r2, #2
 80057b0:	701a      	strb	r2, [r3, #0]
          break;
 80057b2:	e027      	b.n	8005804 <USBD_MSC_Setup+0xe6>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	885b      	ldrh	r3, [r3, #2]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10d      	bne.n	80057d8 <USBD_MSC_Setup+0xba>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	88db      	ldrh	r3, [r3, #6]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d109      	bne.n	80057d8 <USBD_MSC_Setup+0xba>
              ((req->bmRequest & 0x80U) != 0x80U))
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	db04      	blt.n	80057d8 <USBD_MSC_Setup+0xba>
          {
            MSC_BOT_Reset(pdev);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	0018      	movs	r0, r3
 80057d2:	f000 f9a3 	bl	8005b1c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057d6:	e015      	b.n	8005804 <USBD_MSC_Setup+0xe6>
            USBD_CtlError(pdev, req);
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	0011      	movs	r1, r2
 80057de:	0018      	movs	r0, r3
 80057e0:	f002 fb10 	bl	8007e04 <USBD_CtlError>
            ret = USBD_FAIL;
 80057e4:	2317      	movs	r3, #23
 80057e6:	18fb      	adds	r3, r7, r3
 80057e8:	2202      	movs	r2, #2
 80057ea:	701a      	strb	r2, [r3, #0]
          break;
 80057ec:	e00a      	b.n	8005804 <USBD_MSC_Setup+0xe6>

        default:
          USBD_CtlError(pdev, req);
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	0011      	movs	r1, r2
 80057f4:	0018      	movs	r0, r3
 80057f6:	f002 fb05 	bl	8007e04 <USBD_CtlError>
          ret = USBD_FAIL;
 80057fa:	2317      	movs	r3, #23
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	2202      	movs	r2, #2
 8005800:	701a      	strb	r2, [r3, #0]
          break;
 8005802:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005804:	e0da      	b.n	80059bc <USBD_MSC_Setup+0x29e>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	785b      	ldrb	r3, [r3, #1]
 800580a:	2b0b      	cmp	r3, #11
 800580c:	d03c      	beq.n	8005888 <USBD_MSC_Setup+0x16a>
 800580e:	dd00      	ble.n	8005812 <USBD_MSC_Setup+0xf4>
 8005810:	e0bd      	b.n	800598e <USBD_MSC_Setup+0x270>
 8005812:	2b0a      	cmp	r3, #10
 8005814:	d01f      	beq.n	8005856 <USBD_MSC_Setup+0x138>
 8005816:	dd00      	ble.n	800581a <USBD_MSC_Setup+0xfc>
 8005818:	e0b9      	b.n	800598e <USBD_MSC_Setup+0x270>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <USBD_MSC_Setup+0x106>
 800581e:	2b01      	cmp	r3, #1
 8005820:	d04a      	beq.n	80058b8 <USBD_MSC_Setup+0x19a>
 8005822:	e0b4      	b.n	800598e <USBD_MSC_Setup+0x270>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	23a7      	movs	r3, #167	; 0xa7
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	5cd3      	ldrb	r3, [r2, r3]
 800582c:	2b03      	cmp	r3, #3
 800582e:	d107      	bne.n	8005840 <USBD_MSC_Setup+0x122>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005830:	230e      	movs	r3, #14
 8005832:	18f9      	adds	r1, r7, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	0018      	movs	r0, r3
 800583a:	f002 fb61 	bl	8007f00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800583e:	e0b1      	b.n	80059a4 <USBD_MSC_Setup+0x286>
            USBD_CtlError(pdev, req);
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	0011      	movs	r1, r2
 8005846:	0018      	movs	r0, r3
 8005848:	f002 fadc 	bl	8007e04 <USBD_CtlError>
            ret = USBD_FAIL;
 800584c:	2317      	movs	r3, #23
 800584e:	18fb      	adds	r3, r7, r3
 8005850:	2202      	movs	r2, #2
 8005852:	701a      	strb	r2, [r3, #0]
          break;
 8005854:	e0a6      	b.n	80059a4 <USBD_MSC_Setup+0x286>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	23a7      	movs	r3, #167	; 0xa7
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	5cd3      	ldrb	r3, [r2, r3]
 800585e:	2b03      	cmp	r3, #3
 8005860:	d107      	bne.n	8005872 <USBD_MSC_Setup+0x154>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1d19      	adds	r1, r3, #4
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	0018      	movs	r0, r3
 800586c:	f002 fb48 	bl	8007f00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005870:	e098      	b.n	80059a4 <USBD_MSC_Setup+0x286>
            USBD_CtlError(pdev, req);
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	0011      	movs	r1, r2
 8005878:	0018      	movs	r0, r3
 800587a:	f002 fac3 	bl	8007e04 <USBD_CtlError>
            ret = USBD_FAIL;
 800587e:	2317      	movs	r3, #23
 8005880:	18fb      	adds	r3, r7, r3
 8005882:	2202      	movs	r2, #2
 8005884:	701a      	strb	r2, [r3, #0]
          break;
 8005886:	e08d      	b.n	80059a4 <USBD_MSC_Setup+0x286>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	23a7      	movs	r3, #167	; 0xa7
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	5cd3      	ldrb	r3, [r2, r3]
 8005890:	2b03      	cmp	r3, #3
 8005892:	d106      	bne.n	80058a2 <USBD_MSC_Setup+0x184>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	885b      	ldrh	r3, [r3, #2]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	001a      	movs	r2, r3
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058a0:	e080      	b.n	80059a4 <USBD_MSC_Setup+0x286>
            USBD_CtlError(pdev, req);
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	0011      	movs	r1, r2
 80058a8:	0018      	movs	r0, r3
 80058aa:	f002 faab 	bl	8007e04 <USBD_CtlError>
            ret = USBD_FAIL;
 80058ae:	2317      	movs	r3, #23
 80058b0:	18fb      	adds	r3, r7, r3
 80058b2:	2202      	movs	r2, #2
 80058b4:	701a      	strb	r2, [r3, #0]
          break;
 80058b6:	e075      	b.n	80059a4 <USBD_MSC_Setup+0x286>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	889b      	ldrh	r3, [r3, #4]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	0011      	movs	r1, r2
 80058c2:	0018      	movs	r0, r3
 80058c4:	f002 ff2d 	bl	8008722 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	889b      	ldrh	r3, [r3, #4]
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	0011      	movs	r1, r2
 80058d2:	0018      	movs	r0, r3
 80058d4:	f002 fefa 	bl	80086cc <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	889b      	ldrh	r3, [r3, #4]
 80058dc:	b25b      	sxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	da24      	bge.n	800592c <USBD_MSC_Setup+0x20e>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	889b      	ldrh	r3, [r3, #4]
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	001a      	movs	r2, r3
 80058ea:	230f      	movs	r3, #15
 80058ec:	401a      	ands	r2, r3
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	0013      	movs	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	189b      	adds	r3, r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	18cb      	adds	r3, r1, r3
 80058fa:	3318      	adds	r3, #24
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	7c1b      	ldrb	r3, [r3, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d107      	bne.n	8005918 <USBD_MSC_Setup+0x1fa>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8005908:	2380      	movs	r3, #128	; 0x80
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	2181      	movs	r1, #129	; 0x81
 8005912:	f002 fea4 	bl	800865e <USBD_LL_OpenEP>
 8005916:	e005      	b.n	8005924 <USBD_MSC_Setup+0x206>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	2340      	movs	r3, #64	; 0x40
 800591c:	2202      	movs	r2, #2
 800591e:	2181      	movs	r1, #129	; 0x81
 8005920:	f002 fe9d 	bl	800865e <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	62da      	str	r2, [r3, #44]	; 0x2c
 800592a:	e027      	b.n	800597c <USBD_MSC_Setup+0x25e>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	889b      	ldrh	r3, [r3, #4]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	001a      	movs	r2, r3
 8005934:	230f      	movs	r3, #15
 8005936:	401a      	ands	r2, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	23ac      	movs	r3, #172	; 0xac
 800593c:	0059      	lsls	r1, r3, #1
 800593e:	0013      	movs	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	189b      	adds	r3, r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	18c3      	adds	r3, r0, r3
 8005948:	185b      	adds	r3, r3, r1
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	7c1b      	ldrb	r3, [r3, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d107      	bne.n	8005966 <USBD_MSC_Setup+0x248>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8005956:	2380      	movs	r3, #128	; 0x80
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	2202      	movs	r2, #2
 800595e:	2101      	movs	r1, #1
 8005960:	f002 fe7d 	bl	800865e <USBD_LL_OpenEP>
 8005964:	e005      	b.n	8005972 <USBD_MSC_Setup+0x254>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	2340      	movs	r3, #64	; 0x40
 800596a:	2202      	movs	r2, #2
 800596c:	2101      	movs	r1, #1
 800596e:	f002 fe76 	bl	800865e <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	23b6      	movs	r3, #182	; 0xb6
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	2101      	movs	r1, #1
 800597a:	50d1      	str	r1, [r2, r3]
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	889b      	ldrh	r3, [r3, #4]
 8005980:	b2da      	uxtb	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	0011      	movs	r1, r2
 8005986:	0018      	movs	r0, r3
 8005988:	f000 fa9a 	bl	8005ec0 <MSC_BOT_CplClrFeature>
          break;
 800598c:	e00a      	b.n	80059a4 <USBD_MSC_Setup+0x286>

        default:
          USBD_CtlError(pdev, req);
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	0011      	movs	r1, r2
 8005994:	0018      	movs	r0, r3
 8005996:	f002 fa35 	bl	8007e04 <USBD_CtlError>
          ret = USBD_FAIL;
 800599a:	2317      	movs	r3, #23
 800599c:	18fb      	adds	r3, r7, r3
 800599e:	2202      	movs	r2, #2
 80059a0:	701a      	strb	r2, [r3, #0]
          break;
 80059a2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80059a4:	e00a      	b.n	80059bc <USBD_MSC_Setup+0x29e>

    default:
      USBD_CtlError(pdev, req);
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	0011      	movs	r1, r2
 80059ac:	0018      	movs	r0, r3
 80059ae:	f002 fa29 	bl	8007e04 <USBD_CtlError>
      ret = USBD_FAIL;
 80059b2:	2317      	movs	r3, #23
 80059b4:	18fb      	adds	r3, r7, r3
 80059b6:	2202      	movs	r2, #2
 80059b8:	701a      	strb	r2, [r3, #0]
      break;
 80059ba:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80059bc:	2317      	movs	r3, #23
 80059be:	18fb      	adds	r3, r7, r3
 80059c0:	781b      	ldrb	r3, [r3, #0]
}
 80059c2:	0018      	movs	r0, r3
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b006      	add	sp, #24
 80059c8:	bd80      	pop	{r7, pc}

080059ca <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	000a      	movs	r2, r1
 80059d4:	1cfb      	adds	r3, r7, #3
 80059d6:	701a      	strb	r2, [r3, #0]
  MSC_BOT_DataIn(pdev, epnum);
 80059d8:	1cfb      	adds	r3, r7, #3
 80059da:	781a      	ldrb	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	0011      	movs	r1, r2
 80059e0:	0018      	movs	r0, r3
 80059e2:	f000 f8c7 	bl	8005b74 <MSC_BOT_DataIn>

  return USBD_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	0018      	movs	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	b002      	add	sp, #8
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	000a      	movs	r2, r1
 80059fa:	1cfb      	adds	r3, r7, #3
 80059fc:	701a      	strb	r2, [r3, #0]
  MSC_BOT_DataOut(pdev, epnum);
 80059fe:	1cfb      	adds	r3, r7, #3
 8005a00:	781a      	ldrb	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	0011      	movs	r1, r2
 8005a06:	0018      	movs	r0, r3
 8005a08:	f000 f8ec 	bl	8005be4 <MSC_BOT_DataOut>

  return USBD_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	0018      	movs	r0, r3
 8005a10:	46bd      	mov	sp, r7
 8005a12:	b002      	add	sp, #8
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2220      	movs	r2, #32
 8005a24:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8005a26:	4b02      	ldr	r3, [pc, #8]	; (8005a30 <USBD_MSC_GetHSCfgDesc+0x18>)
}
 8005a28:	0018      	movs	r0, r3
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	b002      	add	sp, #8
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	20000444 	.word	0x20000444

08005a34 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8005a42:	4b02      	ldr	r3, [pc, #8]	; (8005a4c <USBD_MSC_GetFSCfgDesc+0x18>)
}
 8005a44:	0018      	movs	r0, r3
 8005a46:	46bd      	mov	sp, r7
 8005a48:	b002      	add	sp, #8
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	20000464 	.word	0x20000464

08005a50 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8005a5e:	4b02      	ldr	r3, [pc, #8]	; (8005a68 <USBD_MSC_GetOtherSpeedCfgDesc+0x18>)
}
 8005a60:	0018      	movs	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	b002      	add	sp, #8
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	20000484 	.word	0x20000484

08005a6c <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	220a      	movs	r2, #10
 8005a78:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8005a7a:	4b02      	ldr	r3, [pc, #8]	; (8005a84 <USBD_MSC_GetDeviceQualifierDescriptor+0x18>)
}
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	b002      	add	sp, #8
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	200004a4 	.word	0x200004a4

08005a88 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d004      	beq.n	8005aa2 <USBD_MSC_RegisterStorage+0x1a>
  {
    pdev->pUserData = fops;
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	23af      	movs	r3, #175	; 0xaf
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	6839      	ldr	r1, [r7, #0]
 8005aa0:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	b002      	add	sp, #8
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	23ae      	movs	r3, #174	; 0xae
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	58d3      	ldr	r3, [r2, r3]
 8005abc:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4a12      	ldr	r2, [pc, #72]	; (8005b18 <MSC_BOT_Init+0x6c>)
 8005ace:	2100      	movs	r1, #0
 8005ad0:	5499      	strb	r1, [r3, r2]
  hmsc->scsi_sense_head = 0U;
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	2397      	movs	r3, #151	; 0x97
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	2100      	movs	r1, #0
 8005ada:	54d1      	strb	r1, [r2, r3]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	23af      	movs	r3, #175	; 0xaf
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	58d3      	ldr	r3, [r2, r3]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2101      	movs	r1, #1
 8005aee:	0018      	movs	r0, r3
 8005af0:	f002 fe17 	bl	8008722 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2181      	movs	r1, #129	; 0x81
 8005af8:	0018      	movs	r0, r3
 8005afa:	f002 fe12 	bl	8008722 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2283      	movs	r2, #131	; 0x83
 8005b02:	0092      	lsls	r2, r2, #2
 8005b04:	189a      	adds	r2, r3, r2
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	231f      	movs	r3, #31
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	f002 ff1d 	bl	800894a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8005b10:	46c0      	nop			; (mov r8, r8)
 8005b12:	46bd      	mov	sp, r7
 8005b14:	b004      	add	sp, #16
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	0000025d 	.word	0x0000025d

08005b1c <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	23ae      	movs	r3, #174	; 0xae
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	58d3      	ldr	r3, [r2, r3]
 8005b2c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2283      	movs	r2, #131	; 0x83
 8005b3e:	0092      	lsls	r2, r2, #2
 8005b40:	189a      	adds	r2, r3, r2
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	231f      	movs	r3, #31
 8005b46:	2101      	movs	r1, #1
 8005b48:	f002 feff 	bl	800894a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8005b4c:	46c0      	nop			; (mov r8, r8)
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	b004      	add	sp, #16
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	23ae      	movs	r3, #174	; 0xae
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	58d3      	ldr	r3, [r2, r3]
 8005b64:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	721a      	strb	r2, [r3, #8]
}
 8005b6c:	46c0      	nop			; (mov r8, r8)
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	b004      	add	sp, #16
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	000a      	movs	r2, r1
 8005b7e:	1cfb      	adds	r3, r7, #3
 8005b80:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	23ae      	movs	r3, #174	; 0xae
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	58d3      	ldr	r3, [r2, r3]
 8005b8a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	7a1b      	ldrb	r3, [r3, #8]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d004      	beq.n	8005b9e <MSC_BOT_DataIn+0x2a>
 8005b94:	db1b      	blt.n	8005bce <MSC_BOT_DataIn+0x5a>
 8005b96:	3b03      	subs	r3, #3
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d818      	bhi.n	8005bce <MSC_BOT_DataIn+0x5a>
 8005b9c:	e011      	b.n	8005bc2 <MSC_BOT_DataIn+0x4e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4a0e      	ldr	r2, [pc, #56]	; (8005bdc <MSC_BOT_DataIn+0x68>)
 8005ba2:	5c99      	ldrb	r1, [r3, r2]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4a0e      	ldr	r2, [pc, #56]	; (8005be0 <MSC_BOT_DataIn+0x6c>)
 8005ba8:	189a      	adds	r2, r3, r2
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f000 f9b3 	bl	8005f18 <SCSI_ProcessCmd>
 8005bb2:	1e03      	subs	r3, r0, #0
 8005bb4:	da0d      	bge.n	8005bd2 <MSC_BOT_DataIn+0x5e>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2101      	movs	r1, #1
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f000 f91a 	bl	8005df4 <MSC_BOT_SendCSW>
      }
      break;
 8005bc0:	e007      	b.n	8005bd2 <MSC_BOT_DataIn+0x5e>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f000 f914 	bl	8005df4 <MSC_BOT_SendCSW>
      break;
 8005bcc:	e002      	b.n	8005bd4 <MSC_BOT_DataIn+0x60>

    default:
      break;
 8005bce:	46c0      	nop			; (mov r8, r8)
 8005bd0:	e000      	b.n	8005bd4 <MSC_BOT_DataIn+0x60>
      break;
 8005bd2:	46c0      	nop			; (mov r8, r8)
  }
}
 8005bd4:	46c0      	nop			; (mov r8, r8)
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	b004      	add	sp, #16
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	00000219 	.word	0x00000219
 8005be0:	0000021b 	.word	0x0000021b

08005be4 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	000a      	movs	r2, r1
 8005bee:	1cfb      	adds	r3, r7, #3
 8005bf0:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	23ae      	movs	r3, #174	; 0xae
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	58d3      	ldr	r3, [r2, r3]
 8005bfa:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	7a1b      	ldrb	r3, [r3, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <MSC_BOT_DataOut+0x26>
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d005      	beq.n	8005c14 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8005c08:	e016      	b.n	8005c38 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f000 f81b 	bl	8005c48 <MSC_BOT_CBW_Decode>
      break;
 8005c12:	e011      	b.n	8005c38 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4a0a      	ldr	r2, [pc, #40]	; (8005c40 <MSC_BOT_DataOut+0x5c>)
 8005c18:	5c99      	ldrb	r1, [r3, r2]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4a09      	ldr	r2, [pc, #36]	; (8005c44 <MSC_BOT_DataOut+0x60>)
 8005c1e:	189a      	adds	r2, r3, r2
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	0018      	movs	r0, r3
 8005c24:	f000 f978 	bl	8005f18 <SCSI_ProcessCmd>
 8005c28:	1e03      	subs	r3, r0, #0
 8005c2a:	da04      	bge.n	8005c36 <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2101      	movs	r1, #1
 8005c30:	0018      	movs	r0, r3
 8005c32:	f000 f8df 	bl	8005df4 <MSC_BOT_SendCSW>
      break;
 8005c36:	46c0      	nop			; (mov r8, r8)
  }
}
 8005c38:	46c0      	nop			; (mov r8, r8)
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	b004      	add	sp, #16
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	00000219 	.word	0x00000219
 8005c44:	0000021b 	.word	0x0000021b

08005c48 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	23ae      	movs	r3, #174	; 0xae
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	58d3      	ldr	r3, [r2, r3]
 8005c58:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	2384      	movs	r3, #132	; 0x84
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	58d1      	ldr	r1, [r2, r3]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	238c      	movs	r3, #140	; 0x8c
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	50d1      	str	r1, [r2, r3]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	2385      	movs	r3, #133	; 0x85
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	58d1      	ldr	r1, [r2, r3]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	238d      	movs	r3, #141	; 0x8d
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	50d1      	str	r1, [r2, r3]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f002 fe9a 	bl	80089b8 <USBD_LL_GetRxDataSize>
 8005c84:	0003      	movs	r3, r0
 8005c86:	2b1f      	cmp	r3, #31
 8005c88:	d115      	bne.n	8005cb6 <MSC_BOT_CBW_Decode+0x6e>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	2383      	movs	r3, #131	; 0x83
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	58d3      	ldr	r3, [r2, r3]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8005c92:	4a35      	ldr	r2, [pc, #212]	; (8005d68 <MSC_BOT_CBW_Decode+0x120>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d10e      	bne.n	8005cb6 <MSC_BOT_CBW_Decode+0x6e>
      (hmsc->cbw.bLUN > 1U) ||
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4a34      	ldr	r2, [pc, #208]	; (8005d6c <MSC_BOT_CBW_Decode+0x124>)
 8005c9c:	5c9b      	ldrb	r3, [r3, r2]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d809      	bhi.n	8005cb6 <MSC_BOT_CBW_Decode+0x6e>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4a32      	ldr	r2, [pc, #200]	; (8005d70 <MSC_BOT_CBW_Decode+0x128>)
 8005ca6:	5c9b      	ldrb	r3, [r3, r2]
      (hmsc->cbw.bLUN > 1U) ||
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d004      	beq.n	8005cb6 <MSC_BOT_CBW_Decode+0x6e>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4a30      	ldr	r2, [pc, #192]	; (8005d70 <MSC_BOT_CBW_Decode+0x128>)
 8005cb0:	5c9b      	ldrb	r3, [r3, r2]
 8005cb2:	2b10      	cmp	r3, #16
 8005cb4:	d90f      	bls.n	8005cd6 <MSC_BOT_CBW_Decode+0x8e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4a2c      	ldr	r2, [pc, #176]	; (8005d6c <MSC_BOT_CBW_Decode+0x124>)
 8005cba:	5c99      	ldrb	r1, [r3, r2]
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	2320      	movs	r3, #32
 8005cc0:	2205      	movs	r2, #5
 8005cc2:	f000 fc4d 	bl	8006560 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f000 f8c2 	bl	8005e58 <MSC_BOT_Abort>
 8005cd4:	e044      	b.n	8005d60 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4a24      	ldr	r2, [pc, #144]	; (8005d6c <MSC_BOT_CBW_Decode+0x124>)
 8005cda:	5c99      	ldrb	r1, [r3, r2]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4a25      	ldr	r2, [pc, #148]	; (8005d74 <MSC_BOT_CBW_Decode+0x12c>)
 8005ce0:	189a      	adds	r2, r3, r2
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f000 f917 	bl	8005f18 <SCSI_ProcessCmd>
 8005cea:	1e03      	subs	r3, r0, #0
 8005cec:	da0e      	bge.n	8005d0c <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	7a1b      	ldrb	r3, [r3, #8]
 8005cf2:	2b05      	cmp	r3, #5
 8005cf4:	d105      	bne.n	8005d02 <MSC_BOT_CBW_Decode+0xba>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f000 f87a 	bl	8005df4 <MSC_BOT_SendCSW>
 8005d00:	e02e      	b.n	8005d60 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	0018      	movs	r0, r3
 8005d06:	f000 f8a7 	bl	8005e58 <MSC_BOT_Abort>
 8005d0a:	e029      	b.n	8005d60 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	7a1b      	ldrb	r3, [r3, #8]
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d024      	beq.n	8005d5e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d020      	beq.n	8005d5e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d01c      	beq.n	8005d5e <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	895b      	ldrh	r3, [r3, #10]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d009      	beq.n	8005d40 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	330c      	adds	r3, #12
 8005d30:	0019      	movs	r1, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	895a      	ldrh	r2, [r3, #10]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	0018      	movs	r0, r3
 8005d3a:	f000 f81d 	bl	8005d78 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8005d3e:	e00f      	b.n	8005d60 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	895b      	ldrh	r3, [r3, #10]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d105      	bne.n	8005d54 <MSC_BOT_CBW_Decode+0x10c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f000 f851 	bl	8005df4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8005d52:	e005      	b.n	8005d60 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	0018      	movs	r0, r3
 8005d58:	f000 f87e 	bl	8005e58 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8005d5c:	e000      	b.n	8005d60 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8005d5e:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8005d60:	46bd      	mov	sp, r7
 8005d62:	b004      	add	sp, #16
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	43425355 	.word	0x43425355
 8005d6c:	00000219 	.word	0x00000219
 8005d70:	0000021a 	.word	0x0000021a
 8005d74:	0000021b 	.word	0x0000021b

08005d78 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	1dbb      	adds	r3, r7, #6
 8005d84:	801a      	strh	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	23ae      	movs	r3, #174	; 0xae
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	58d3      	ldr	r3, [r2, r3]
 8005d8e:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	2385      	movs	r3, #133	; 0x85
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	58d2      	ldr	r2, [r2, r3]
 8005d98:	1dbb      	adds	r3, r7, #6
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d205      	bcs.n	8005dac <MSC_BOT_SendData+0x34>
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	2385      	movs	r3, #133	; 0x85
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	58d3      	ldr	r3, [r2, r3]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	e001      	b.n	8005db0 <MSC_BOT_SendData+0x38>
 8005dac:	1dbb      	adds	r3, r7, #6
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	2012      	movs	r0, #18
 8005db2:	183a      	adds	r2, r7, r0
 8005db4:	8013      	strh	r3, [r2, #0]

  hmsc->csw.dDataResidue -= len;
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	238d      	movs	r3, #141	; 0x8d
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	58d2      	ldr	r2, [r2, r3]
 8005dbe:	1dbb      	adds	r3, r7, #6
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	1ad1      	subs	r1, r2, r3
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	238d      	movs	r3, #141	; 0x8d
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	50d1      	str	r1, [r2, r3]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	238e      	movs	r3, #142	; 0x8e
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	54d1      	strb	r1, [r2, r3]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2204      	movs	r2, #4
 8005dda:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8005ddc:	183b      	adds	r3, r7, r0
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	2181      	movs	r1, #129	; 0x81
 8005de6:	f002 fd79 	bl	80088dc <USBD_LL_Transmit>
}
 8005dea:	46c0      	nop			; (mov r8, r8)
 8005dec:	46bd      	mov	sp, r7
 8005dee:	b006      	add	sp, #24
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	000a      	movs	r2, r1
 8005dfe:	1cfb      	adds	r3, r7, #3
 8005e00:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	23ae      	movs	r3, #174	; 0xae
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	58d3      	ldr	r3, [r2, r3]
 8005e0a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	238b      	movs	r3, #139	; 0x8b
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4910      	ldr	r1, [pc, #64]	; (8005e54 <MSC_BOT_SendCSW+0x60>)
 8005e14:	50d1      	str	r1, [r2, r3]
  hmsc->csw.bStatus = CSW_Status;
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	1cf9      	adds	r1, r7, #3
 8005e1a:	238e      	movs	r3, #142	; 0x8e
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	7809      	ldrb	r1, [r1, #0]
 8005e20:	54d1      	strb	r1, [r2, r3]
  hmsc->bot_state = USBD_BOT_IDLE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	228b      	movs	r2, #139	; 0x8b
 8005e2c:	0092      	lsls	r2, r2, #2
 8005e2e:	189a      	adds	r2, r3, r2
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	230d      	movs	r3, #13
 8005e34:	2181      	movs	r1, #129	; 0x81
 8005e36:	f002 fd51 	bl	80088dc <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2283      	movs	r2, #131	; 0x83
 8005e3e:	0092      	lsls	r2, r2, #2
 8005e40:	189a      	adds	r2, r3, r2
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	231f      	movs	r3, #31
 8005e46:	2101      	movs	r1, #1
 8005e48:	f002 fd7f 	bl	800894a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8005e4c:	46c0      	nop			; (mov r8, r8)
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b004      	add	sp, #16
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	53425355 	.word	0x53425355

08005e58 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	23ae      	movs	r3, #174	; 0xae
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	58d3      	ldr	r3, [r2, r3]
 8005e68:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	2386      	movs	r3, #134	; 0x86
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	5cd3      	ldrb	r3, [r2, r3]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10e      	bne.n	8005e94 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	2385      	movs	r3, #133	; 0x85
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	58d3      	ldr	r3, [r2, r3]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d008      	beq.n	8005e94 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d104      	bne.n	8005e94 <MSC_BOT_Abort+0x3c>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	0018      	movs	r0, r3
 8005e90:	f002 fc72 	bl	8008778 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2181      	movs	r1, #129	; 0x81
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f002 fc6d 	bl	8008778 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	7a5b      	ldrb	r3, [r3, #9]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d108      	bne.n	8005eb8 <MSC_BOT_Abort+0x60>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2283      	movs	r2, #131	; 0x83
 8005eaa:	0092      	lsls	r2, r2, #2
 8005eac:	189a      	adds	r2, r3, r2
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	231f      	movs	r3, #31
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	f002 fd49 	bl	800894a <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8005eb8:	46c0      	nop			; (mov r8, r8)
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	b004      	add	sp, #16
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	000a      	movs	r2, r1
 8005eca:	1cfb      	adds	r3, r7, #3
 8005ecc:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	23ae      	movs	r3, #174	; 0xae
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	58d3      	ldr	r3, [r2, r3]
 8005ed6:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	7a5b      	ldrb	r3, [r3, #9]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d108      	bne.n	8005ef2 <MSC_BOT_CplClrFeature+0x32>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2181      	movs	r1, #129	; 0x81
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	f002 fc47 	bl	8008778 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	725a      	strb	r2, [r3, #9]
 8005ef0:	e00f      	b.n	8005f12 <MSC_BOT_CplClrFeature+0x52>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8005ef2:	1cfb      	adds	r3, r7, #3
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	b25b      	sxtb	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	da09      	bge.n	8005f10 <MSC_BOT_CplClrFeature+0x50>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	7a5b      	ldrb	r3, [r3, #9]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d005      	beq.n	8005f10 <MSC_BOT_CplClrFeature+0x50>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2101      	movs	r1, #1
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f7ff ff73 	bl	8005df4 <MSC_BOT_SendCSW>
 8005f0e:	e000      	b.n	8005f12 <MSC_BOT_CplClrFeature+0x52>
  }
  else
  {
    return;
 8005f10:	46c0      	nop			; (mov r8, r8)
  }
}
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b004      	add	sp, #16
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	607a      	str	r2, [r7, #4]
 8005f22:	230b      	movs	r3, #11
 8005f24:	18fb      	adds	r3, r7, r3
 8005f26:	1c0a      	adds	r2, r1, #0
 8005f28:	701a      	strb	r2, [r3, #0]
  switch (cmd[0])
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b5a      	cmp	r3, #90	; 0x5a
 8005f30:	d870      	bhi.n	8006014 <SCSI_ProcessCmd+0xfc>
 8005f32:	009a      	lsls	r2, r3, #2
 8005f34:	4b3f      	ldr	r3, [pc, #252]	; (8006034 <SCSI_ProcessCmd+0x11c>)
 8005f36:	18d3      	adds	r3, r2, r3
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	469f      	mov	pc, r3
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	230b      	movs	r3, #11
 8005f40:	18fb      	adds	r3, r7, r3
 8005f42:	7819      	ldrb	r1, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	0018      	movs	r0, r3
 8005f48:	f000 f876 	bl	8006038 <SCSI_TestUnitReady>
      break;
 8005f4c:	e06d      	b.n	800602a <SCSI_ProcessCmd+0x112>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	230b      	movs	r3, #11
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	7819      	ldrb	r1, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f000 fa7f 	bl	800645c <SCSI_RequestSense>
      break;
 8005f5e:	e064      	b.n	800602a <SCSI_ProcessCmd+0x112>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	230b      	movs	r3, #11
 8005f64:	18fb      	adds	r3, r7, r3
 8005f66:	7819      	ldrb	r1, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	f000 f8a6 	bl	80060bc <SCSI_Inquiry>
      break;
 8005f70:	e05b      	b.n	800602a <SCSI_ProcessCmd+0x112>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	230b      	movs	r3, #11
 8005f76:	18fb      	adds	r3, r7, r3
 8005f78:	7819      	ldrb	r1, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f000 fb31 	bl	80065e4 <SCSI_StartStopUnit>
      break;
 8005f82:	e052      	b.n	800602a <SCSI_ProcessCmd+0x112>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	230b      	movs	r3, #11
 8005f88:	18fb      	adds	r3, r7, r3
 8005f8a:	7819      	ldrb	r1, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	0018      	movs	r0, r3
 8005f90:	f000 fb28 	bl	80065e4 <SCSI_StartStopUnit>
      break;
 8005f94:	e049      	b.n	800602a <SCSI_ProcessCmd+0x112>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	230b      	movs	r3, #11
 8005f9a:	18fb      	adds	r3, r7, r3
 8005f9c:	7819      	ldrb	r1, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	f000 f9f3 	bl	800638c <SCSI_ModeSense6>
      break;
 8005fa6:	e040      	b.n	800602a <SCSI_ProcessCmd+0x112>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	230b      	movs	r3, #11
 8005fac:	18fb      	adds	r3, r7, r3
 8005fae:	7819      	ldrb	r1, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f000 fa1e 	bl	80063f4 <SCSI_ModeSense10>
      break;
 8005fb8:	e037      	b.n	800602a <SCSI_ProcessCmd+0x112>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	230b      	movs	r3, #11
 8005fbe:	18fb      	adds	r3, r7, r3
 8005fc0:	7819      	ldrb	r1, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	f000 f969 	bl	800629c <SCSI_ReadFormatCapacity>
      break;
 8005fca:	e02e      	b.n	800602a <SCSI_ProcessCmd+0x112>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	230b      	movs	r3, #11
 8005fd0:	18fb      	adds	r3, r7, r3
 8005fd2:	7819      	ldrb	r1, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	f000 f8ea 	bl	80061b0 <SCSI_ReadCapacity10>
      break;
 8005fdc:	e025      	b.n	800602a <SCSI_ProcessCmd+0x112>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	230b      	movs	r3, #11
 8005fe2:	18fb      	adds	r3, r7, r3
 8005fe4:	7819      	ldrb	r1, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f000 fb11 	bl	8006610 <SCSI_Read10>
      break;
 8005fee:	e01c      	b.n	800602a <SCSI_ProcessCmd+0x112>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	230b      	movs	r3, #11
 8005ff4:	18fb      	adds	r3, r7, r3
 8005ff6:	7819      	ldrb	r1, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f000 fbae 	bl	800675c <SCSI_Write10>
      break;
 8006000:	e013      	b.n	800602a <SCSI_ProcessCmd+0x112>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	230b      	movs	r3, #11
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	7819      	ldrb	r1, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	0018      	movs	r0, r3
 800600e:	f000 fc71 	bl	80068f4 <SCSI_Verify10>
      break;
 8006012:	e00a      	b.n	800602a <SCSI_ProcessCmd+0x112>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006014:	230b      	movs	r3, #11
 8006016:	18fb      	adds	r3, r7, r3
 8006018:	7819      	ldrb	r1, [r3, #0]
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	2320      	movs	r3, #32
 800601e:	2205      	movs	r2, #5
 8006020:	f000 fa9e 	bl	8006560 <SCSI_SenseCode>
      return -1;
 8006024:	2301      	movs	r3, #1
 8006026:	425b      	negs	r3, r3
 8006028:	e000      	b.n	800602c <SCSI_ProcessCmd+0x114>
  }

  return 0;
 800602a:	2300      	movs	r3, #0
}
 800602c:	0018      	movs	r0, r3
 800602e:	46bd      	mov	sp, r7
 8006030:	b004      	add	sp, #16
 8006032:	bd80      	pop	{r7, pc}
 8006034:	08008b84 	.word	0x08008b84

08006038 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006038:	b590      	push	{r4, r7, lr}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	607a      	str	r2, [r7, #4]
 8006042:	230b      	movs	r3, #11
 8006044:	18fb      	adds	r3, r7, r3
 8006046:	1c0a      	adds	r2, r1, #0
 8006048:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	23ae      	movs	r3, #174	; 0xae
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	58d3      	ldr	r3, [r2, r3]
 8006052:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	2385      	movs	r3, #133	; 0x85
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	58d3      	ldr	r3, [r2, r3]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	4a15      	ldr	r2, [pc, #84]	; (80060b8 <SCSI_TestUnitReady+0x80>)
 8006064:	5c99      	ldrb	r1, [r3, r2]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	2320      	movs	r3, #32
 800606a:	2205      	movs	r2, #5
 800606c:	f000 fa78 	bl	8006560 <SCSI_SenseCode>

    return -1;
 8006070:	2301      	movs	r3, #1
 8006072:	425b      	negs	r3, r3
 8006074:	e01c      	b.n	80060b0 <SCSI_TestUnitReady+0x78>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	23af      	movs	r3, #175	; 0xaf
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	58d3      	ldr	r3, [r2, r3]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	240b      	movs	r4, #11
 8006082:	193a      	adds	r2, r7, r4
 8006084:	7812      	ldrb	r2, [r2, #0]
 8006086:	0010      	movs	r0, r2
 8006088:	4798      	blx	r3
 800608a:	1e03      	subs	r3, r0, #0
 800608c:	d00c      	beq.n	80060a8 <SCSI_TestUnitReady+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800608e:	193b      	adds	r3, r7, r4
 8006090:	7819      	ldrb	r1, [r3, #0]
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	233a      	movs	r3, #58	; 0x3a
 8006096:	2202      	movs	r2, #2
 8006098:	f000 fa62 	bl	8006560 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2205      	movs	r2, #5
 80060a0:	721a      	strb	r2, [r3, #8]

    return -1;
 80060a2:	2301      	movs	r3, #1
 80060a4:	425b      	negs	r3, r3
 80060a6:	e003      	b.n	80060b0 <SCSI_TestUnitReady+0x78>
  }
  hmsc->bot_data_length = 0U;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2200      	movs	r2, #0
 80060ac:	815a      	strh	r2, [r3, #10]

  return 0;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	0018      	movs	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b007      	add	sp, #28
 80060b6:	bd90      	pop	{r4, r7, pc}
 80060b8:	00000219 	.word	0x00000219

080060bc <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	607a      	str	r2, [r7, #4]
 80060c6:	230b      	movs	r3, #11
 80060c8:	18fb      	adds	r3, r7, r3
 80060ca:	1c0a      	adds	r2, r1, #0
 80060cc:	701a      	strb	r2, [r3, #0]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	23ae      	movs	r3, #174	; 0xae
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	58d3      	ldr	r3, [r2, r3]
 80060d6:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3301      	adds	r3, #1
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	001a      	movs	r2, r3
 80060e0:	2301      	movs	r3, #1
 80060e2:	4013      	ands	r3, r2
 80060e4:	d01e      	beq.n	8006124 <SCSI_Inquiry+0x68>
  {
    len = LENGTH_INQUIRY_PAGE00;
 80060e6:	211e      	movs	r1, #30
 80060e8:	187b      	adds	r3, r7, r1
 80060ea:	2207      	movs	r2, #7
 80060ec:	801a      	strh	r2, [r3, #0]
    hmsc->bot_data_length = len;
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	187a      	adds	r2, r7, r1
 80060f2:	8812      	ldrh	r2, [r2, #0]
 80060f4:	815a      	strh	r2, [r3, #10]

    while (len)
 80060f6:	e00f      	b.n	8006118 <SCSI_Inquiry+0x5c>
    {
      len--;
 80060f8:	211e      	movs	r1, #30
 80060fa:	187b      	adds	r3, r7, r1
 80060fc:	881a      	ldrh	r2, [r3, #0]
 80060fe:	187b      	adds	r3, r7, r1
 8006100:	3a01      	subs	r2, #1
 8006102:	801a      	strh	r2, [r3, #0]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8006104:	187b      	adds	r3, r7, r1
 8006106:	881a      	ldrh	r2, [r3, #0]
 8006108:	187b      	adds	r3, r7, r1
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	4927      	ldr	r1, [pc, #156]	; (80061ac <SCSI_Inquiry+0xf0>)
 800610e:	5c89      	ldrb	r1, [r1, r2]
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	18d3      	adds	r3, r2, r3
 8006114:	1c0a      	adds	r2, r1, #0
 8006116:	731a      	strb	r2, [r3, #12]
    while (len)
 8006118:	231e      	movs	r3, #30
 800611a:	18fb      	adds	r3, r7, r3
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1ea      	bne.n	80060f8 <SCSI_Inquiry+0x3c>
 8006122:	e03e      	b.n	80061a2 <SCSI_Inquiry+0xe6>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	23af      	movs	r3, #175	; 0xaf
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	58d3      	ldr	r3, [r2, r3]
 800612c:	69d9      	ldr	r1, [r3, #28]
 800612e:	230b      	movs	r3, #11
 8006130:	18fb      	adds	r3, r7, r3
 8006132:	781a      	ldrb	r2, [r3, #0]
 8006134:	0013      	movs	r3, r2
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	189b      	adds	r3, r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	18cb      	adds	r3, r1, r3
 800613e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	3304      	adds	r3, #4
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	b29a      	uxth	r2, r3
 8006148:	211e      	movs	r1, #30
 800614a:	187b      	adds	r3, r7, r1
 800614c:	3205      	adds	r2, #5
 800614e:	801a      	strh	r2, [r3, #0]

    if (params[4] <= len)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3304      	adds	r3, #4
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	187a      	adds	r2, r7, r1
 800615a:	8812      	ldrh	r2, [r2, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d304      	bcc.n	800616a <SCSI_Inquiry+0xae>
    {
      len = params[4];
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3304      	adds	r3, #4
 8006164:	781a      	ldrb	r2, [r3, #0]
 8006166:	187b      	adds	r3, r7, r1
 8006168:	801a      	strh	r2, [r3, #0]
    }
    hmsc->bot_data_length = len;
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	221e      	movs	r2, #30
 800616e:	18ba      	adds	r2, r7, r2
 8006170:	8812      	ldrh	r2, [r2, #0]
 8006172:	815a      	strh	r2, [r3, #10]

    while (len)
 8006174:	e010      	b.n	8006198 <SCSI_Inquiry+0xdc>
    {
      len--;
 8006176:	211e      	movs	r1, #30
 8006178:	187b      	adds	r3, r7, r1
 800617a:	881a      	ldrh	r2, [r3, #0]
 800617c:	187b      	adds	r3, r7, r1
 800617e:	3a01      	subs	r2, #1
 8006180:	801a      	strh	r2, [r3, #0]
      hmsc->bot_data[len] = pPage[len];
 8006182:	187b      	adds	r3, r7, r1
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	18d2      	adds	r2, r2, r3
 800618a:	187b      	adds	r3, r7, r1
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	7811      	ldrb	r1, [r2, #0]
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	18d3      	adds	r3, r2, r3
 8006194:	1c0a      	adds	r2, r1, #0
 8006196:	731a      	strb	r2, [r3, #12]
    while (len)
 8006198:	231e      	movs	r3, #30
 800619a:	18fb      	adds	r3, r7, r3
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e9      	bne.n	8006176 <SCSI_Inquiry+0xba>
    }
  }

  return 0;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	0018      	movs	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	b008      	add	sp, #32
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	08008b6c 	.word	0x08008b6c

080061b0 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80061b0:	b5b0      	push	{r4, r5, r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	607a      	str	r2, [r7, #4]
 80061ba:	200b      	movs	r0, #11
 80061bc:	183b      	adds	r3, r7, r0
 80061be:	1c0a      	adds	r2, r1, #0
 80061c0:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	23ae      	movs	r3, #174	; 0xae
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	58d3      	ldr	r3, [r2, r3]
 80061ca:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	23af      	movs	r3, #175	; 0xaf
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	58d3      	ldr	r3, [r2, r3]
 80061d4:	685c      	ldr	r4, [r3, #4]
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2298      	movs	r2, #152	; 0x98
 80061da:	0092      	lsls	r2, r2, #2
 80061dc:	1899      	adds	r1, r3, r2
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	4a2d      	ldr	r2, [pc, #180]	; (8006298 <SCSI_ReadCapacity10+0xe8>)
 80061e2:	189a      	adds	r2, r3, r2
 80061e4:	0005      	movs	r5, r0
 80061e6:	183b      	adds	r3, r7, r0
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	0018      	movs	r0, r3
 80061ec:	47a0      	blx	r4
 80061ee:	1e03      	subs	r3, r0, #0
 80061f0:	d009      	beq.n	8006206 <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80061f2:	197b      	adds	r3, r7, r5
 80061f4:	7819      	ldrb	r1, [r3, #0]
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	233a      	movs	r3, #58	; 0x3a
 80061fa:	2202      	movs	r2, #2
 80061fc:	f000 f9b0 	bl	8006560 <SCSI_SenseCode>
    return -1;
 8006200:	2301      	movs	r3, #1
 8006202:	425b      	negs	r3, r3
 8006204:	e043      	b.n	800628e <SCSI_ReadCapacity10+0xde>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	2398      	movs	r3, #152	; 0x98
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	58d3      	ldr	r3, [r2, r3]
 800620e:	3b01      	subs	r3, #1
 8006210:	0e1b      	lsrs	r3, r3, #24
 8006212:	b2da      	uxtb	r2, r3
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	2398      	movs	r3, #152	; 0x98
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	58d3      	ldr	r3, [r2, r3]
 8006220:	3b01      	subs	r3, #1
 8006222:	0c1b      	lsrs	r3, r3, #16
 8006224:	b2da      	uxtb	r2, r3
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	2398      	movs	r3, #152	; 0x98
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	58d3      	ldr	r3, [r2, r3]
 8006232:	3b01      	subs	r3, #1
 8006234:	0a1b      	lsrs	r3, r3, #8
 8006236:	b2da      	uxtb	r2, r3
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	2398      	movs	r3, #152	; 0x98
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	58d3      	ldr	r3, [r2, r3]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	3b01      	subs	r3, #1
 8006248:	b2da      	uxtb	r2, r3
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	4a11      	ldr	r2, [pc, #68]	; (8006298 <SCSI_ReadCapacity10+0xe8>)
 8006252:	5a9b      	ldrh	r3, [r3, r2]
 8006254:	161b      	asrs	r3, r3, #24
 8006256:	b2da      	uxtb	r2, r3
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	4a0e      	ldr	r2, [pc, #56]	; (8006298 <SCSI_ReadCapacity10+0xe8>)
 8006260:	5a9b      	ldrh	r3, [r3, r2]
 8006262:	141b      	asrs	r3, r3, #16
 8006264:	b2da      	uxtb	r2, r3
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	4a0a      	ldr	r2, [pc, #40]	; (8006298 <SCSI_ReadCapacity10+0xe8>)
 800626e:	5a9b      	ldrh	r3, [r3, r2]
 8006270:	0a1b      	lsrs	r3, r3, #8
 8006272:	b29b      	uxth	r3, r3
 8006274:	b2da      	uxtb	r2, r3
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	4a06      	ldr	r2, [pc, #24]	; (8006298 <SCSI_ReadCapacity10+0xe8>)
 800627e:	5a9b      	ldrh	r3, [r3, r2]
 8006280:	b2da      	uxtb	r2, r3
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2208      	movs	r2, #8
 800628a:	815a      	strh	r2, [r3, #10]
    return 0;
 800628c:	2300      	movs	r3, #0
  }
}
 800628e:	0018      	movs	r0, r3
 8006290:	46bd      	mov	sp, r7
 8006292:	b006      	add	sp, #24
 8006294:	bdb0      	pop	{r4, r5, r7, pc}
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	0000025e 	.word	0x0000025e

0800629c <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800629c:	b5b0      	push	{r4, r5, r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	607a      	str	r2, [r7, #4]
 80062a6:	230b      	movs	r3, #11
 80062a8:	18fb      	adds	r3, r7, r3
 80062aa:	1c0a      	adds	r2, r1, #0
 80062ac:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	23ae      	movs	r3, #174	; 0xae
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	58d3      	ldr	r3, [r2, r3]
 80062b6:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 80062b8:	231e      	movs	r3, #30
 80062ba:	18fb      	adds	r3, r7, r3
 80062bc:	2200      	movs	r2, #0
 80062be:	801a      	strh	r2, [r3, #0]
 80062c0:	e00b      	b.n	80062da <SCSI_ReadFormatCapacity+0x3e>
  {
    hmsc->bot_data[i] = 0U;
 80062c2:	211e      	movs	r1, #30
 80062c4:	187b      	adds	r3, r7, r1
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	18d3      	adds	r3, r2, r3
 80062cc:	2200      	movs	r2, #0
 80062ce:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 80062d0:	187b      	adds	r3, r7, r1
 80062d2:	881a      	ldrh	r2, [r3, #0]
 80062d4:	187b      	adds	r3, r7, r1
 80062d6:	3201      	adds	r2, #1
 80062d8:	801a      	strh	r2, [r3, #0]
 80062da:	231e      	movs	r3, #30
 80062dc:	18fb      	adds	r3, r7, r3
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	2b0b      	cmp	r3, #11
 80062e2:	d9ee      	bls.n	80062c2 <SCSI_ReadFormatCapacity+0x26>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	23af      	movs	r3, #175	; 0xaf
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	58d3      	ldr	r3, [r2, r3]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2216      	movs	r2, #22
 80062f0:	18bc      	adds	r4, r7, r2
 80062f2:	2210      	movs	r2, #16
 80062f4:	18b9      	adds	r1, r7, r2
 80062f6:	250b      	movs	r5, #11
 80062f8:	197a      	adds	r2, r7, r5
 80062fa:	7810      	ldrb	r0, [r2, #0]
 80062fc:	0022      	movs	r2, r4
 80062fe:	4798      	blx	r3
 8006300:	1e03      	subs	r3, r0, #0
 8006302:	d009      	beq.n	8006318 <SCSI_ReadFormatCapacity+0x7c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006304:	197b      	adds	r3, r7, r5
 8006306:	7819      	ldrb	r1, [r3, #0]
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	233a      	movs	r3, #58	; 0x3a
 800630c:	2202      	movs	r2, #2
 800630e:	f000 f927 	bl	8006560 <SCSI_SenseCode>
    return -1;
 8006312:	2301      	movs	r3, #1
 8006314:	425b      	negs	r3, r3
 8006316:	e034      	b.n	8006382 <SCSI_ReadFormatCapacity+0xe6>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	2208      	movs	r2, #8
 800631c:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	3b01      	subs	r3, #1
 8006322:	0e1b      	lsrs	r3, r3, #24
 8006324:	b2da      	uxtb	r2, r3
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	3b01      	subs	r3, #1
 800632e:	0c1b      	lsrs	r3, r3, #16
 8006330:	b2da      	uxtb	r2, r3
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	3b01      	subs	r3, #1
 800633a:	0a1b      	lsrs	r3, r3, #8
 800633c:	b2da      	uxtb	r2, r3
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	3b01      	subs	r3, #1
 8006348:	b2da      	uxtb	r2, r3
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2202      	movs	r2, #2
 8006352:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8006354:	2116      	movs	r1, #22
 8006356:	187b      	adds	r3, r7, r1
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	141b      	asrs	r3, r3, #16
 800635c:	b2da      	uxtb	r2, r3
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8006362:	187b      	adds	r3, r7, r1
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	0a1b      	lsrs	r3, r3, #8
 8006368:	b29b      	uxth	r3, r3
 800636a:	b2da      	uxtb	r2, r3
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8006370:	187b      	adds	r3, r7, r1
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b2da      	uxtb	r2, r3
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	220c      	movs	r2, #12
 800637e:	815a      	strh	r2, [r3, #10]
    return 0;
 8006380:	2300      	movs	r3, #0
  }
}
 8006382:	0018      	movs	r0, r3
 8006384:	46bd      	mov	sp, r7
 8006386:	b008      	add	sp, #32
 8006388:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800638c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	607a      	str	r2, [r7, #4]
 8006396:	230b      	movs	r3, #11
 8006398:	18fb      	adds	r3, r7, r3
 800639a:	1c0a      	adds	r2, r1, #0
 800639c:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	23ae      	movs	r3, #174	; 0xae
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	58d3      	ldr	r3, [r2, r3]
 80063a6:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 80063a8:	2116      	movs	r1, #22
 80063aa:	187b      	adds	r3, r7, r1
 80063ac:	2208      	movs	r2, #8
 80063ae:	801a      	strh	r2, [r3, #0]
  hmsc->bot_data_length = len;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	187a      	adds	r2, r7, r1
 80063b4:	8812      	ldrh	r2, [r2, #0]
 80063b6:	815a      	strh	r2, [r3, #10]

  while (len)
 80063b8:	e00f      	b.n	80063da <SCSI_ModeSense6+0x4e>
  {
    len--;
 80063ba:	2116      	movs	r1, #22
 80063bc:	187b      	adds	r3, r7, r1
 80063be:	881a      	ldrh	r2, [r3, #0]
 80063c0:	187b      	adds	r3, r7, r1
 80063c2:	3a01      	subs	r2, #1
 80063c4:	801a      	strh	r2, [r3, #0]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 80063c6:	187b      	adds	r3, r7, r1
 80063c8:	881a      	ldrh	r2, [r3, #0]
 80063ca:	187b      	adds	r3, r7, r1
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	4908      	ldr	r1, [pc, #32]	; (80063f0 <SCSI_ModeSense6+0x64>)
 80063d0:	5c89      	ldrb	r1, [r1, r2]
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	18d3      	adds	r3, r2, r3
 80063d6:	1c0a      	adds	r2, r1, #0
 80063d8:	731a      	strb	r2, [r3, #12]
  while (len)
 80063da:	2316      	movs	r3, #22
 80063dc:	18fb      	adds	r3, r7, r3
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1ea      	bne.n	80063ba <SCSI_ModeSense6+0x2e>
  }
  return 0;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	0018      	movs	r0, r3
 80063e8:	46bd      	mov	sp, r7
 80063ea:	b006      	add	sp, #24
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	46c0      	nop			; (mov r8, r8)
 80063f0:	08008b74 	.word	0x08008b74

080063f4 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	607a      	str	r2, [r7, #4]
 80063fe:	230b      	movs	r3, #11
 8006400:	18fb      	adds	r3, r7, r3
 8006402:	1c0a      	adds	r2, r1, #0
 8006404:	701a      	strb	r2, [r3, #0]
  uint16_t len = 8U;
 8006406:	2116      	movs	r1, #22
 8006408:	187b      	adds	r3, r7, r1
 800640a:	2208      	movs	r2, #8
 800640c:	801a      	strh	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	23ae      	movs	r3, #174	; 0xae
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	58d3      	ldr	r3, [r2, r3]
 8006416:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	187a      	adds	r2, r7, r1
 800641c:	8812      	ldrh	r2, [r2, #0]
 800641e:	815a      	strh	r2, [r3, #10]

  while (len)
 8006420:	e00f      	b.n	8006442 <SCSI_ModeSense10+0x4e>
  {
    len--;
 8006422:	2116      	movs	r1, #22
 8006424:	187b      	adds	r3, r7, r1
 8006426:	881a      	ldrh	r2, [r3, #0]
 8006428:	187b      	adds	r3, r7, r1
 800642a:	3a01      	subs	r2, #1
 800642c:	801a      	strh	r2, [r3, #0]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800642e:	187b      	adds	r3, r7, r1
 8006430:	881a      	ldrh	r2, [r3, #0]
 8006432:	187b      	adds	r3, r7, r1
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	4908      	ldr	r1, [pc, #32]	; (8006458 <SCSI_ModeSense10+0x64>)
 8006438:	5c89      	ldrb	r1, [r1, r2]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	18d3      	adds	r3, r2, r3
 800643e:	1c0a      	adds	r2, r1, #0
 8006440:	731a      	strb	r2, [r3, #12]
  while (len)
 8006442:	2316      	movs	r3, #22
 8006444:	18fb      	adds	r3, r7, r3
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1ea      	bne.n	8006422 <SCSI_ModeSense10+0x2e>
  }

  return 0;
 800644c:	2300      	movs	r3, #0
}
 800644e:	0018      	movs	r0, r3
 8006450:	46bd      	mov	sp, r7
 8006452:	b006      	add	sp, #24
 8006454:	bd80      	pop	{r7, pc}
 8006456:	46c0      	nop			; (mov r8, r8)
 8006458:	08008b7c 	.word	0x08008b7c

0800645c <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	607a      	str	r2, [r7, #4]
 8006466:	230b      	movs	r3, #11
 8006468:	18fb      	adds	r3, r7, r3
 800646a:	1c0a      	adds	r2, r1, #0
 800646c:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	23ae      	movs	r3, #174	; 0xae
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	58d3      	ldr	r3, [r2, r3]
 8006476:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8006478:	2317      	movs	r3, #23
 800647a:	18fb      	adds	r3, r7, r3
 800647c:	2200      	movs	r2, #0
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	e00b      	b.n	800649a <SCSI_RequestSense+0x3e>
  {
    hmsc->bot_data[i] = 0U;
 8006482:	2117      	movs	r1, #23
 8006484:	187b      	adds	r3, r7, r1
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	18d3      	adds	r3, r2, r3
 800648c:	2200      	movs	r2, #0
 800648e:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8006490:	187b      	adds	r3, r7, r1
 8006492:	781a      	ldrb	r2, [r3, #0]
 8006494:	187b      	adds	r3, r7, r1
 8006496:	3201      	adds	r2, #1
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	2317      	movs	r3, #23
 800649c:	18fb      	adds	r3, r7, r3
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b11      	cmp	r3, #17
 80064a2:	d9ee      	bls.n	8006482 <SCSI_RequestSense+0x26>
  }

  hmsc->bot_data[0] = 0x70U;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	2270      	movs	r2, #112	; 0x70
 80064a8:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	220c      	movs	r2, #12
 80064ae:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	2397      	movs	r3, #151	; 0x97
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	5cd2      	ldrb	r2, [r2, r3]
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	4928      	ldr	r1, [pc, #160]	; (800655c <SCSI_RequestSense+0x100>)
 80064bc:	5c5b      	ldrb	r3, [r3, r1]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d038      	beq.n	8006534 <SCSI_RequestSense+0xd8>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	2397      	movs	r3, #151	; 0x97
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	5cd3      	ldrb	r3, [r2, r3]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	3347      	adds	r3, #71	; 0x47
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	18d3      	adds	r3, r2, r3
 80064d2:	3304      	adds	r3, #4
 80064d4:	781a      	ldrb	r2, [r3, #0]
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	2397      	movs	r3, #151	; 0x97
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	5cd3      	ldrb	r3, [r2, r3]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	3347      	adds	r3, #71	; 0x47
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	18d3      	adds	r3, r2, r3
 80064ea:	3309      	adds	r3, #9
 80064ec:	781a      	ldrb	r2, [r3, #0]
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	2397      	movs	r3, #151	; 0x97
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	5cd3      	ldrb	r3, [r2, r3]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	3347      	adds	r3, #71	; 0x47
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	18d3      	adds	r3, r2, r3
 8006502:	3308      	adds	r3, #8
 8006504:	781a      	ldrb	r2, [r3, #0]
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	2397      	movs	r3, #151	; 0x97
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	5cd3      	ldrb	r3, [r2, r3]
 8006512:	3301      	adds	r3, #1
 8006514:	b2d9      	uxtb	r1, r3
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	2397      	movs	r3, #151	; 0x97
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	54d1      	strb	r1, [r2, r3]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	2397      	movs	r3, #151	; 0x97
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	5cd3      	ldrb	r3, [r2, r3]
 8006526:	2b04      	cmp	r3, #4
 8006528:	d104      	bne.n	8006534 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	2397      	movs	r3, #151	; 0x97
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	2100      	movs	r1, #0
 8006532:	54d1      	strb	r1, [r2, r3]
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	2212      	movs	r2, #18
 8006538:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3304      	adds	r3, #4
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b12      	cmp	r3, #18
 8006542:	d805      	bhi.n	8006550 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3304      	adds	r3, #4
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	b29a      	uxth	r2, r3
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8006550:	2300      	movs	r3, #0
}
 8006552:	0018      	movs	r0, r3
 8006554:	46bd      	mov	sp, r7
 8006556:	b006      	add	sp, #24
 8006558:	bd80      	pop	{r7, pc}
 800655a:	46c0      	nop			; (mov r8, r8)
 800655c:	0000025d 	.word	0x0000025d

08006560 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8006560:	b590      	push	{r4, r7, lr}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	000c      	movs	r4, r1
 800656a:	0010      	movs	r0, r2
 800656c:	0019      	movs	r1, r3
 800656e:	1cfb      	adds	r3, r7, #3
 8006570:	1c22      	adds	r2, r4, #0
 8006572:	701a      	strb	r2, [r3, #0]
 8006574:	1cbb      	adds	r3, r7, #2
 8006576:	1c02      	adds	r2, r0, #0
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	1c7b      	adds	r3, r7, #1
 800657c:	1c0a      	adds	r2, r1, #0
 800657e:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	23ae      	movs	r3, #174	; 0xae
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	58d3      	ldr	r3, [r2, r3]
 8006588:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	4a14      	ldr	r2, [pc, #80]	; (80065e0 <SCSI_SenseCode+0x80>)
 800658e:	5c9b      	ldrb	r3, [r3, r2]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	3347      	adds	r3, #71	; 0x47
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	18d3      	adds	r3, r2, r3
 8006598:	3304      	adds	r3, #4
 800659a:	1cba      	adds	r2, r7, #2
 800659c:	7812      	ldrb	r2, [r2, #0]
 800659e:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4a0f      	ldr	r2, [pc, #60]	; (80065e0 <SCSI_SenseCode+0x80>)
 80065a4:	5c9b      	ldrb	r3, [r3, r2]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	3347      	adds	r3, #71	; 0x47
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	18d3      	adds	r3, r2, r3
 80065ae:	3308      	adds	r3, #8
 80065b0:	2200      	movs	r2, #0
 80065b2:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_tail++;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4a0a      	ldr	r2, [pc, #40]	; (80065e0 <SCSI_SenseCode+0x80>)
 80065b8:	5c9b      	ldrb	r3, [r3, r2]
 80065ba:	3301      	adds	r3, #1
 80065bc:	b2d9      	uxtb	r1, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4a07      	ldr	r2, [pc, #28]	; (80065e0 <SCSI_SenseCode+0x80>)
 80065c2:	5499      	strb	r1, [r3, r2]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4a06      	ldr	r2, [pc, #24]	; (80065e0 <SCSI_SenseCode+0x80>)
 80065c8:	5c9b      	ldrb	r3, [r3, r2]
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d103      	bne.n	80065d6 <SCSI_SenseCode+0x76>
  {
    hmsc->scsi_sense_tail = 0U;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4a03      	ldr	r2, [pc, #12]	; (80065e0 <SCSI_SenseCode+0x80>)
 80065d2:	2100      	movs	r1, #0
 80065d4:	5499      	strb	r1, [r3, r2]
  }
}
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	46bd      	mov	sp, r7
 80065da:	b005      	add	sp, #20
 80065dc:	bd90      	pop	{r4, r7, pc}
 80065de:	46c0      	nop			; (mov r8, r8)
 80065e0:	0000025d 	.word	0x0000025d

080065e4 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	607a      	str	r2, [r7, #4]
 80065ee:	230b      	movs	r3, #11
 80065f0:	18fb      	adds	r3, r7, r3
 80065f2:	1c0a      	adds	r2, r1, #0
 80065f4:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	23ae      	movs	r3, #174	; 0xae
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	58d3      	ldr	r3, [r2, r3]
 80065fe:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2200      	movs	r2, #0
 8006604:	815a      	strh	r2, [r3, #10]
  return 0;
 8006606:	2300      	movs	r3, #0
}
 8006608:	0018      	movs	r0, r3
 800660a:	46bd      	mov	sp, r7
 800660c:	b006      	add	sp, #24
 800660e:	bd80      	pop	{r7, pc}

08006610 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006610:	b590      	push	{r4, r7, lr}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	607a      	str	r2, [r7, #4]
 800661a:	230b      	movs	r3, #11
 800661c:	18fb      	adds	r3, r7, r3
 800661e:	1c0a      	adds	r2, r1, #0
 8006620:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	23ae      	movs	r3, #174	; 0xae
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	58d3      	ldr	r3, [r2, r3]
 800662a:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	7a1b      	ldrb	r3, [r3, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d000      	beq.n	8006636 <SCSI_Read10+0x26>
 8006634:	e07c      	b.n	8006730 <SCSI_Read10+0x120>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	2386      	movs	r3, #134	; 0x86
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	5cd3      	ldrb	r3, [r2, r3]
 800663e:	b25b      	sxtb	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	db0a      	blt.n	800665a <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	4a43      	ldr	r2, [pc, #268]	; (8006754 <SCSI_Read10+0x144>)
 8006648:	5c99      	ldrb	r1, [r3, r2]
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	2320      	movs	r3, #32
 800664e:	2205      	movs	r2, #5
 8006650:	f7ff ff86 	bl	8006560 <SCSI_SenseCode>
      return -1;
 8006654:	2301      	movs	r3, #1
 8006656:	425b      	negs	r3, r3
 8006658:	e077      	b.n	800674a <SCSI_Read10+0x13a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	23af      	movs	r3, #175	; 0xaf
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	58d3      	ldr	r3, [r2, r3]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	240b      	movs	r4, #11
 8006666:	193a      	adds	r2, r7, r4
 8006668:	7812      	ldrb	r2, [r2, #0]
 800666a:	0010      	movs	r0, r2
 800666c:	4798      	blx	r3
 800666e:	1e03      	subs	r3, r0, #0
 8006670:	d009      	beq.n	8006686 <SCSI_Read10+0x76>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006672:	193b      	adds	r3, r7, r4
 8006674:	7819      	ldrb	r1, [r3, #0]
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	233a      	movs	r3, #58	; 0x3a
 800667a:	2202      	movs	r2, #2
 800667c:	f7ff ff70 	bl	8006560 <SCSI_SenseCode>
      return -1;
 8006680:	2301      	movs	r3, #1
 8006682:	425b      	negs	r3, r3
 8006684:	e061      	b.n	800674a <SCSI_Read10+0x13a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3302      	adds	r3, #2
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	3303      	adds	r3, #3
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006696:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3304      	adds	r3, #4
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80066a0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	3205      	adds	r2, #5
 80066a6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80066a8:	4313      	orrs	r3, r2
 80066aa:	0019      	movs	r1, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	2399      	movs	r3, #153	; 0x99
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	50d1      	str	r1, [r2, r3]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3307      	adds	r3, #7
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	021b      	lsls	r3, r3, #8
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	3208      	adds	r2, #8
 80066c0:	7812      	ldrb	r2, [r2, #0]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	0019      	movs	r1, r3
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	239a      	movs	r3, #154	; 0x9a
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	50d1      	str	r1, [r2, r3]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	2399      	movs	r3, #153	; 0x99
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	58d4      	ldr	r4, [r2, r3]
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	239a      	movs	r3, #154	; 0x9a
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	58d2      	ldr	r2, [r2, r3]
 80066de:	230b      	movs	r3, #11
 80066e0:	18fb      	adds	r3, r7, r3
 80066e2:	7819      	ldrb	r1, [r3, #0]
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	0013      	movs	r3, r2
 80066e8:	0022      	movs	r2, r4
 80066ea:	f000 f93f 	bl	800696c <SCSI_CheckAddressRange>
 80066ee:	1e03      	subs	r3, r0, #0
 80066f0:	da02      	bge.n	80066f8 <SCSI_Read10+0xe8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80066f2:	2301      	movs	r3, #1
 80066f4:	425b      	negs	r3, r3
 80066f6:	e028      	b.n	800674a <SCSI_Read10+0x13a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2202      	movs	r2, #2
 80066fc:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	2385      	movs	r3, #133	; 0x85
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	58d2      	ldr	r2, [r2, r3]
 8006706:	6979      	ldr	r1, [r7, #20]
 8006708:	239a      	movs	r3, #154	; 0x9a
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	58cb      	ldr	r3, [r1, r3]
 800670e:	6979      	ldr	r1, [r7, #20]
 8006710:	4811      	ldr	r0, [pc, #68]	; (8006758 <SCSI_Read10+0x148>)
 8006712:	5a09      	ldrh	r1, [r1, r0]
 8006714:	434b      	muls	r3, r1
 8006716:	429a      	cmp	r2, r3
 8006718:	d00a      	beq.n	8006730 <SCSI_Read10+0x120>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	4a0d      	ldr	r2, [pc, #52]	; (8006754 <SCSI_Read10+0x144>)
 800671e:	5c99      	ldrb	r1, [r3, r2]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	2320      	movs	r3, #32
 8006724:	2205      	movs	r2, #5
 8006726:	f7ff ff1b 	bl	8006560 <SCSI_SenseCode>
      return -1;
 800672a:	2301      	movs	r3, #1
 800672c:	425b      	negs	r3, r3
 800672e:	e00c      	b.n	800674a <SCSI_Read10+0x13a>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2280      	movs	r2, #128	; 0x80
 8006734:	0092      	lsls	r2, r2, #2
 8006736:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8006738:	230b      	movs	r3, #11
 800673a:	18fb      	adds	r3, r7, r3
 800673c:	781a      	ldrb	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	0011      	movs	r1, r2
 8006742:	0018      	movs	r0, r3
 8006744:	f000 f93a 	bl	80069bc <SCSI_ProcessRead>
 8006748:	0003      	movs	r3, r0
}
 800674a:	0018      	movs	r0, r3
 800674c:	46bd      	mov	sp, r7
 800674e:	b007      	add	sp, #28
 8006750:	bd90      	pop	{r4, r7, pc}
 8006752:	46c0      	nop			; (mov r8, r8)
 8006754:	00000219 	.word	0x00000219
 8006758:	0000025e 	.word	0x0000025e

0800675c <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800675c:	b590      	push	{r4, r7, lr}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	607a      	str	r2, [r7, #4]
 8006766:	230b      	movs	r3, #11
 8006768:	18fb      	adds	r3, r7, r3
 800676a:	1c0a      	adds	r2, r1, #0
 800676c:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	23ae      	movs	r3, #174	; 0xae
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	58d3      	ldr	r3, [r2, r3]
 8006776:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	7a1b      	ldrb	r3, [r3, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d000      	beq.n	8006782 <SCSI_Write10+0x26>
 8006780:	e0a7      	b.n	80068d2 <SCSI_Write10+0x176>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	2386      	movs	r3, #134	; 0x86
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	5cd3      	ldrb	r3, [r2, r3]
 800678a:	b25b      	sxtb	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	da0a      	bge.n	80067a6 <SCSI_Write10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	4a56      	ldr	r2, [pc, #344]	; (80068ec <SCSI_Write10+0x190>)
 8006794:	5c99      	ldrb	r1, [r3, r2]
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	2320      	movs	r3, #32
 800679a:	2205      	movs	r2, #5
 800679c:	f7ff fee0 	bl	8006560 <SCSI_SenseCode>
      return -1;
 80067a0:	2301      	movs	r3, #1
 80067a2:	425b      	negs	r3, r3
 80067a4:	e09e      	b.n	80068e4 <SCSI_Write10+0x188>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	23af      	movs	r3, #175	; 0xaf
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	58d3      	ldr	r3, [r2, r3]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	240b      	movs	r4, #11
 80067b2:	193a      	adds	r2, r7, r4
 80067b4:	7812      	ldrb	r2, [r2, #0]
 80067b6:	0010      	movs	r0, r2
 80067b8:	4798      	blx	r3
 80067ba:	1e03      	subs	r3, r0, #0
 80067bc:	d009      	beq.n	80067d2 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80067be:	193b      	adds	r3, r7, r4
 80067c0:	7819      	ldrb	r1, [r3, #0]
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	233a      	movs	r3, #58	; 0x3a
 80067c6:	2202      	movs	r2, #2
 80067c8:	f7ff feca 	bl	8006560 <SCSI_SenseCode>
      return -1;
 80067cc:	2301      	movs	r3, #1
 80067ce:	425b      	negs	r3, r3
 80067d0:	e088      	b.n	80068e4 <SCSI_Write10+0x188>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	23af      	movs	r3, #175	; 0xaf
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	58d3      	ldr	r3, [r2, r3]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	240b      	movs	r4, #11
 80067de:	193a      	adds	r2, r7, r4
 80067e0:	7812      	ldrb	r2, [r2, #0]
 80067e2:	0010      	movs	r0, r2
 80067e4:	4798      	blx	r3
 80067e6:	1e03      	subs	r3, r0, #0
 80067e8:	d009      	beq.n	80067fe <SCSI_Write10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80067ea:	193b      	adds	r3, r7, r4
 80067ec:	7819      	ldrb	r1, [r3, #0]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	2327      	movs	r3, #39	; 0x27
 80067f2:	2202      	movs	r2, #2
 80067f4:	f7ff feb4 	bl	8006560 <SCSI_SenseCode>
      return -1;
 80067f8:	2301      	movs	r3, #1
 80067fa:	425b      	negs	r3, r3
 80067fc:	e072      	b.n	80068e4 <SCSI_Write10+0x188>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3302      	adds	r3, #2
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	3303      	adds	r3, #3
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800680e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3304      	adds	r3, #4
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006818:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	3205      	adds	r2, #5
 800681e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8006820:	4313      	orrs	r3, r2
 8006822:	0019      	movs	r1, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	2399      	movs	r3, #153	; 0x99
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	50d1      	str	r1, [r2, r3]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3307      	adds	r3, #7
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	3208      	adds	r2, #8
 8006838:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800683a:	4313      	orrs	r3, r2
 800683c:	0019      	movs	r1, r3
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	239a      	movs	r3, #154	; 0x9a
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	50d1      	str	r1, [r2, r3]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	2399      	movs	r3, #153	; 0x99
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	58d4      	ldr	r4, [r2, r3]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	239a      	movs	r3, #154	; 0x9a
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	58d2      	ldr	r2, [r2, r3]
 8006856:	230b      	movs	r3, #11
 8006858:	18fb      	adds	r3, r7, r3
 800685a:	7819      	ldrb	r1, [r3, #0]
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	0013      	movs	r3, r2
 8006860:	0022      	movs	r2, r4
 8006862:	f000 f883 	bl	800696c <SCSI_CheckAddressRange>
 8006866:	1e03      	subs	r3, r0, #0
 8006868:	da02      	bge.n	8006870 <SCSI_Write10+0x114>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800686a:	2301      	movs	r3, #1
 800686c:	425b      	negs	r3, r3
 800686e:	e039      	b.n	80068e4 <SCSI_Write10+0x188>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	239a      	movs	r3, #154	; 0x9a
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	58d3      	ldr	r3, [r2, r3]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	491d      	ldr	r1, [pc, #116]	; (80068f0 <SCSI_Write10+0x194>)
 800687c:	5a52      	ldrh	r2, [r2, r1]
 800687e:	4353      	muls	r3, r2
 8006880:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	2385      	movs	r3, #133	; 0x85
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	58d3      	ldr	r3, [r2, r3]
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	429a      	cmp	r2, r3
 800688e:	d00a      	beq.n	80068a6 <SCSI_Write10+0x14a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	4a16      	ldr	r2, [pc, #88]	; (80068ec <SCSI_Write10+0x190>)
 8006894:	5c99      	ldrb	r1, [r3, r2]
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	2320      	movs	r3, #32
 800689a:	2205      	movs	r2, #5
 800689c:	f7ff fe60 	bl	8006560 <SCSI_SenseCode>
      return -1;
 80068a0:	2301      	movs	r3, #1
 80068a2:	425b      	negs	r3, r3
 80068a4:	e01e      	b.n	80068e4 <SCSI_Write10+0x188>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	2280      	movs	r2, #128	; 0x80
 80068aa:	0092      	lsls	r2, r2, #2
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d901      	bls.n	80068b4 <SCSI_Write10+0x158>
 80068b0:	2380      	movs	r3, #128	; 0x80
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2201      	movs	r2, #1
 80068ba:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	330c      	adds	r3, #12
 80068c0:	001a      	movs	r2, r3
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	2101      	movs	r1, #1
 80068ca:	f002 f83e 	bl	800894a <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 80068ce:	2300      	movs	r3, #0
 80068d0:	e008      	b.n	80068e4 <SCSI_Write10+0x188>
    return SCSI_ProcessWrite(pdev, lun);
 80068d2:	230b      	movs	r3, #11
 80068d4:	18fb      	adds	r3, r7, r3
 80068d6:	781a      	ldrb	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	0011      	movs	r1, r2
 80068dc:	0018      	movs	r0, r3
 80068de:	f000 f8f7 	bl	8006ad0 <SCSI_ProcessWrite>
 80068e2:	0003      	movs	r3, r0
}
 80068e4:	0018      	movs	r0, r3
 80068e6:	46bd      	mov	sp, r7
 80068e8:	b007      	add	sp, #28
 80068ea:	bd90      	pop	{r4, r7, pc}
 80068ec:	00000219 	.word	0x00000219
 80068f0:	0000025e 	.word	0x0000025e

080068f4 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80068f4:	b590      	push	{r4, r7, lr}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	607a      	str	r2, [r7, #4]
 80068fe:	200b      	movs	r0, #11
 8006900:	183b      	adds	r3, r7, r0
 8006902:	1c0a      	adds	r2, r1, #0
 8006904:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	23ae      	movs	r3, #174	; 0xae
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	58d3      	ldr	r3, [r2, r3]
 800690e:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3301      	adds	r3, #1
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	001a      	movs	r2, r3
 8006918:	2302      	movs	r3, #2
 800691a:	4013      	ands	r3, r2
 800691c:	d009      	beq.n	8006932 <SCSI_Verify10+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800691e:	183b      	adds	r3, r7, r0
 8006920:	7819      	ldrb	r1, [r3, #0]
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	2324      	movs	r3, #36	; 0x24
 8006926:	2205      	movs	r2, #5
 8006928:	f7ff fe1a 	bl	8006560 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800692c:	2301      	movs	r3, #1
 800692e:	425b      	negs	r3, r3
 8006930:	e018      	b.n	8006964 <SCSI_Verify10+0x70>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	2399      	movs	r3, #153	; 0x99
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	58d4      	ldr	r4, [r2, r3]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	239a      	movs	r3, #154	; 0x9a
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	58d2      	ldr	r2, [r2, r3]
 8006942:	230b      	movs	r3, #11
 8006944:	18fb      	adds	r3, r7, r3
 8006946:	7819      	ldrb	r1, [r3, #0]
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	0013      	movs	r3, r2
 800694c:	0022      	movs	r2, r4
 800694e:	f000 f80d 	bl	800696c <SCSI_CheckAddressRange>
 8006952:	1e03      	subs	r3, r0, #0
 8006954:	da02      	bge.n	800695c <SCSI_Verify10+0x68>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8006956:	2301      	movs	r3, #1
 8006958:	425b      	negs	r3, r3
 800695a:	e003      	b.n	8006964 <SCSI_Verify10+0x70>
  }
  hmsc->bot_data_length = 0U;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2200      	movs	r2, #0
 8006960:	815a      	strh	r2, [r3, #10]
  return 0;
 8006962:	2300      	movs	r3, #0
}
 8006964:	0018      	movs	r0, r3
 8006966:	46bd      	mov	sp, r7
 8006968:	b007      	add	sp, #28
 800696a:	bd90      	pop	{r4, r7, pc}

0800696c <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	607a      	str	r2, [r7, #4]
 8006976:	603b      	str	r3, [r7, #0]
 8006978:	200b      	movs	r0, #11
 800697a:	183b      	adds	r3, r7, r0
 800697c:	1c0a      	adds	r2, r1, #0
 800697e:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	23ae      	movs	r3, #174	; 0xae
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	58d3      	ldr	r3, [r2, r3]
 8006988:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	18d2      	adds	r2, r2, r3
 8006990:	6979      	ldr	r1, [r7, #20]
 8006992:	2398      	movs	r3, #152	; 0x98
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	58cb      	ldr	r3, [r1, r3]
 8006998:	429a      	cmp	r2, r3
 800699a:	d909      	bls.n	80069b0 <SCSI_CheckAddressRange+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800699c:	183b      	adds	r3, r7, r0
 800699e:	7819      	ldrb	r1, [r3, #0]
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	2321      	movs	r3, #33	; 0x21
 80069a4:	2205      	movs	r2, #5
 80069a6:	f7ff fddb 	bl	8006560 <SCSI_SenseCode>
    return -1;
 80069aa:	2301      	movs	r3, #1
 80069ac:	425b      	negs	r3, r3
 80069ae:	e000      	b.n	80069b2 <SCSI_CheckAddressRange+0x46>
  }
  return 0;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	0018      	movs	r0, r3
 80069b4:	46bd      	mov	sp, r7
 80069b6:	b006      	add	sp, #24
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 80069bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	000a      	movs	r2, r1
 80069c6:	1cfb      	adds	r3, r7, #3
 80069c8:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	23ae      	movs	r3, #174	; 0xae
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	58d3      	ldr	r3, [r2, r3]
 80069d2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	239a      	movs	r3, #154	; 0x9a
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	58d3      	ldr	r3, [r2, r3]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	493b      	ldr	r1, [pc, #236]	; (8006acc <SCSI_ProcessRead+0x110>)
 80069e0:	5a52      	ldrh	r2, [r2, r1]
 80069e2:	4353      	muls	r3, r2
 80069e4:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2280      	movs	r2, #128	; 0x80
 80069ea:	0092      	lsls	r2, r2, #2
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d901      	bls.n	80069f4 <SCSI_ProcessRead+0x38>
 80069f0:	2380      	movs	r3, #128	; 0x80
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	23af      	movs	r3, #175	; 0xaf
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	58d3      	ldr	r3, [r2, r3]
 80069fe:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	330c      	adds	r3, #12
 8006a04:	001d      	movs	r5, r3
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	2399      	movs	r3, #153	; 0x99
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	58d6      	ldr	r6, [r2, r3]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	4a2e      	ldr	r2, [pc, #184]	; (8006acc <SCSI_ProcessRead+0x110>)
 8006a12:	5a9b      	ldrh	r3, [r3, r2]
 8006a14:	0019      	movs	r1, r3
 8006a16:	68b8      	ldr	r0, [r7, #8]
 8006a18:	f7f9 fb76 	bl	8000108 <__udivsi3>
 8006a1c:	0003      	movs	r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	1cfb      	adds	r3, r7, #3
 8006a22:	7818      	ldrb	r0, [r3, #0]
 8006a24:	0013      	movs	r3, r2
 8006a26:	0032      	movs	r2, r6
 8006a28:	0029      	movs	r1, r5
 8006a2a:	47a0      	blx	r4
 8006a2c:	1e03      	subs	r3, r0, #0
 8006a2e:	da09      	bge.n	8006a44 <SCSI_ProcessRead+0x88>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8006a30:	1cfb      	adds	r3, r7, #3
 8006a32:	7819      	ldrb	r1, [r3, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	2311      	movs	r3, #17
 8006a38:	2204      	movs	r2, #4
 8006a3a:	f7ff fd91 	bl	8006560 <SCSI_SenseCode>
    return -1;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	425b      	negs	r3, r3
 8006a42:	e03e      	b.n	8006ac2 <SCSI_ProcessRead+0x106>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	330c      	adds	r3, #12
 8006a48:	001a      	movs	r2, r3
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	2181      	movs	r1, #129	; 0x81
 8006a52:	f001 ff43 	bl	80088dc <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	2399      	movs	r3, #153	; 0x99
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	58d4      	ldr	r4, [r2, r3]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4a1a      	ldr	r2, [pc, #104]	; (8006acc <SCSI_ProcessRead+0x110>)
 8006a62:	5a9b      	ldrh	r3, [r3, r2]
 8006a64:	0019      	movs	r1, r3
 8006a66:	68b8      	ldr	r0, [r7, #8]
 8006a68:	f7f9 fb4e 	bl	8000108 <__udivsi3>
 8006a6c:	0003      	movs	r3, r0
 8006a6e:	18e1      	adds	r1, r4, r3
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	2399      	movs	r3, #153	; 0x99
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	50d1      	str	r1, [r2, r3]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	239a      	movs	r3, #154	; 0x9a
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	58d4      	ldr	r4, [r2, r3]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4a12      	ldr	r2, [pc, #72]	; (8006acc <SCSI_ProcessRead+0x110>)
 8006a84:	5a9b      	ldrh	r3, [r3, r2]
 8006a86:	0019      	movs	r1, r3
 8006a88:	68b8      	ldr	r0, [r7, #8]
 8006a8a:	f7f9 fb3d 	bl	8000108 <__udivsi3>
 8006a8e:	0003      	movs	r3, r0
 8006a90:	1ae1      	subs	r1, r4, r3
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	239a      	movs	r3, #154	; 0x9a
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	50d1      	str	r1, [r2, r3]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	238d      	movs	r3, #141	; 0x8d
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	58d2      	ldr	r2, [r2, r3]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	1ad1      	subs	r1, r2, r3
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	238d      	movs	r3, #141	; 0x8d
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	50d1      	str	r1, [r2, r3]

  if (hmsc->scsi_blk_len == 0U)
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	239a      	movs	r3, #154	; 0x9a
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	58d3      	ldr	r3, [r2, r3]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d102      	bne.n	8006ac0 <SCSI_ProcessRead+0x104>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2203      	movs	r2, #3
 8006abe:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	b005      	add	sp, #20
 8006ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aca:	46c0      	nop			; (mov r8, r8)
 8006acc:	0000025e 	.word	0x0000025e

08006ad0 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8006ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	000a      	movs	r2, r1
 8006ada:	1cfb      	adds	r3, r7, #3
 8006adc:	701a      	strb	r2, [r3, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	23ae      	movs	r3, #174	; 0xae
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	58d3      	ldr	r3, [r2, r3]
 8006ae6:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	239a      	movs	r3, #154	; 0x9a
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	58d3      	ldr	r3, [r2, r3]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4944      	ldr	r1, [pc, #272]	; (8006c04 <SCSI_ProcessWrite+0x134>)
 8006af4:	5a52      	ldrh	r2, [r2, r1]
 8006af6:	4353      	muls	r3, r2
 8006af8:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2280      	movs	r2, #128	; 0x80
 8006afe:	0092      	lsls	r2, r2, #2
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d901      	bls.n	8006b08 <SCSI_ProcessWrite+0x38>
 8006b04:	2380      	movs	r3, #128	; 0x80
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	23af      	movs	r3, #175	; 0xaf
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	58d3      	ldr	r3, [r2, r3]
 8006b12:	695c      	ldr	r4, [r3, #20]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	330c      	adds	r3, #12
 8006b18:	001d      	movs	r5, r3
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	2399      	movs	r3, #153	; 0x99
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	58d6      	ldr	r6, [r2, r3]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4a37      	ldr	r2, [pc, #220]	; (8006c04 <SCSI_ProcessWrite+0x134>)
 8006b26:	5a9b      	ldrh	r3, [r3, r2]
 8006b28:	0019      	movs	r1, r3
 8006b2a:	68b8      	ldr	r0, [r7, #8]
 8006b2c:	f7f9 faec 	bl	8000108 <__udivsi3>
 8006b30:	0003      	movs	r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	1cfb      	adds	r3, r7, #3
 8006b36:	7818      	ldrb	r0, [r3, #0]
 8006b38:	0013      	movs	r3, r2
 8006b3a:	0032      	movs	r2, r6
 8006b3c:	0029      	movs	r1, r5
 8006b3e:	47a0      	blx	r4
 8006b40:	1e03      	subs	r3, r0, #0
 8006b42:	da09      	bge.n	8006b58 <SCSI_ProcessWrite+0x88>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8006b44:	1cfb      	adds	r3, r7, #3
 8006b46:	7819      	ldrb	r1, [r3, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	2204      	movs	r2, #4
 8006b4e:	f7ff fd07 	bl	8006560 <SCSI_SenseCode>

    return -1;
 8006b52:	2301      	movs	r3, #1
 8006b54:	425b      	negs	r3, r3
 8006b56:	e050      	b.n	8006bfa <SCSI_ProcessWrite+0x12a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	2399      	movs	r3, #153	; 0x99
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	58d4      	ldr	r4, [r2, r3]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4a28      	ldr	r2, [pc, #160]	; (8006c04 <SCSI_ProcessWrite+0x134>)
 8006b64:	5a9b      	ldrh	r3, [r3, r2]
 8006b66:	0019      	movs	r1, r3
 8006b68:	68b8      	ldr	r0, [r7, #8]
 8006b6a:	f7f9 facd 	bl	8000108 <__udivsi3>
 8006b6e:	0003      	movs	r3, r0
 8006b70:	18e1      	adds	r1, r4, r3
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	2399      	movs	r3, #153	; 0x99
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	50d1      	str	r1, [r2, r3]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	239a      	movs	r3, #154	; 0x9a
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	58d4      	ldr	r4, [r2, r3]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	4a1f      	ldr	r2, [pc, #124]	; (8006c04 <SCSI_ProcessWrite+0x134>)
 8006b86:	5a9b      	ldrh	r3, [r3, r2]
 8006b88:	0019      	movs	r1, r3
 8006b8a:	68b8      	ldr	r0, [r7, #8]
 8006b8c:	f7f9 fabc 	bl	8000108 <__udivsi3>
 8006b90:	0003      	movs	r3, r0
 8006b92:	1ae1      	subs	r1, r4, r3
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	239a      	movs	r3, #154	; 0x9a
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	50d1      	str	r1, [r2, r3]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	238d      	movs	r3, #141	; 0x8d
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	58d2      	ldr	r2, [r2, r3]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	1ad1      	subs	r1, r2, r3
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	238d      	movs	r3, #141	; 0x8d
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	50d1      	str	r1, [r2, r3]

  if (hmsc->scsi_blk_len == 0U)
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	239a      	movs	r3, #154	; 0x9a
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	58d3      	ldr	r3, [r2, r3]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d105      	bne.n	8006bc8 <SCSI_ProcessWrite+0xf8>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f7ff f917 	bl	8005df4 <MSC_BOT_SendCSW>
 8006bc6:	e017      	b.n	8006bf8 <SCSI_ProcessWrite+0x128>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	239a      	movs	r3, #154	; 0x9a
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	58d3      	ldr	r3, [r2, r3]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	490c      	ldr	r1, [pc, #48]	; (8006c04 <SCSI_ProcessWrite+0x134>)
 8006bd4:	5a52      	ldrh	r2, [r2, r1]
 8006bd6:	4353      	muls	r3, r2
 8006bd8:	2280      	movs	r2, #128	; 0x80
 8006bda:	0092      	lsls	r2, r2, #2
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d901      	bls.n	8006be4 <SCSI_ProcessWrite+0x114>
 8006be0:	2380      	movs	r3, #128	; 0x80
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	330c      	adds	r3, #12
 8006bea:	001a      	movs	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	f001 fea9 	bl	800894a <USBD_LL_PrepareReceive>
  }

  return 0;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	b005      	add	sp, #20
 8006c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	0000025e 	.word	0x0000025e

08006c08 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	1dfb      	adds	r3, r7, #7
 8006c14:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e020      	b.n	8006c62 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	23ad      	movs	r3, #173	; 0xad
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	58d3      	ldr	r3, [r2, r3]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d004      	beq.n	8006c36 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	23ad      	movs	r3, #173	; 0xad
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	2100      	movs	r1, #0
 8006c34:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d004      	beq.n	8006c46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	23ac      	movs	r3, #172	; 0xac
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	68b9      	ldr	r1, [r7, #8]
 8006c44:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	23a7      	movs	r3, #167	; 0xa7
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	1dfa      	adds	r2, r7, #7
 8006c54:	7812      	ldrb	r2, [r2, #0]
 8006c56:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	0018      	movs	r0, r3
 8006c5c:	f001 fc82 	bl	8008564 <USBD_LL_Init>

  return USBD_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	0018      	movs	r0, r3
 8006c64:	46bd      	mov	sp, r7
 8006c66:	b004      	add	sp, #16
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006c74:	200f      	movs	r0, #15
 8006c76:	183b      	adds	r3, r7, r0
 8006c78:	2200      	movs	r2, #0
 8006c7a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d008      	beq.n	8006c94 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	23ad      	movs	r3, #173	; 0xad
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8006c8c:	183b      	adds	r3, r7, r0
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	e003      	b.n	8006c9c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006c94:	230f      	movs	r3, #15
 8006c96:	18fb      	adds	r3, r7, r3
 8006c98:	2202      	movs	r2, #2
 8006c9a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006c9c:	230f      	movs	r3, #15
 8006c9e:	18fb      	adds	r3, r7, r3
 8006ca0:	781b      	ldrb	r3, [r3, #0]
}
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	b004      	add	sp, #16
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b082      	sub	sp, #8
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	f001 fcad 	bl	8008614 <USBD_LL_Start>

  return USBD_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	b002      	add	sp, #8
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	0018      	movs	r0, r3
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	b002      	add	sp, #8
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006cd6:	b590      	push	{r4, r7, lr}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	000a      	movs	r2, r1
 8006ce0:	1cfb      	adds	r3, r7, #3
 8006ce2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006ce4:	240f      	movs	r4, #15
 8006ce6:	193b      	adds	r3, r7, r4
 8006ce8:	2202      	movs	r2, #2
 8006cea:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	23ad      	movs	r3, #173	; 0xad
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	58d3      	ldr	r3, [r2, r3]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00e      	beq.n	8006d16 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	23ad      	movs	r3, #173	; 0xad
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	58d3      	ldr	r3, [r2, r3]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	1cfa      	adds	r2, r7, #3
 8006d04:	7811      	ldrb	r1, [r2, #0]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	0010      	movs	r0, r2
 8006d0a:	4798      	blx	r3
 8006d0c:	1e03      	subs	r3, r0, #0
 8006d0e:	d102      	bne.n	8006d16 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8006d10:	193b      	adds	r3, r7, r4
 8006d12:	2200      	movs	r2, #0
 8006d14:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8006d16:	230f      	movs	r3, #15
 8006d18:	18fb      	adds	r3, r7, r3
 8006d1a:	781b      	ldrb	r3, [r3, #0]
}
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	b005      	add	sp, #20
 8006d22:	bd90      	pop	{r4, r7, pc}

08006d24 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	000a      	movs	r2, r1
 8006d2e:	1cfb      	adds	r3, r7, #3
 8006d30:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	23ad      	movs	r3, #173	; 0xad
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	58d3      	ldr	r3, [r2, r3]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	1cfa      	adds	r2, r7, #3
 8006d3e:	7811      	ldrb	r1, [r2, #0]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	0010      	movs	r0, r2
 8006d44:	4798      	blx	r3

  return USBD_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	0018      	movs	r0, r3
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	b002      	add	sp, #8
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	22aa      	movs	r2, #170	; 0xaa
 8006d5e:	0092      	lsls	r2, r2, #2
 8006d60:	4694      	mov	ip, r2
 8006d62:	4463      	add	r3, ip
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	0011      	movs	r1, r2
 8006d68:	0018      	movs	r0, r3
 8006d6a:	f001 f810 	bl	8007d8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	23a5      	movs	r3, #165	; 0xa5
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	2101      	movs	r1, #1
 8006d76:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a23      	ldr	r2, [pc, #140]	; (8006e08 <USBD_LL_SetupStage+0xb8>)
 8006d7c:	5a9b      	ldrh	r3, [r3, r2]
 8006d7e:	0019      	movs	r1, r3
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	23a6      	movs	r3, #166	; 0xa6
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	23aa      	movs	r3, #170	; 0xaa
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	5cd3      	ldrb	r3, [r2, r3]
 8006d90:	001a      	movs	r2, r3
 8006d92:	231f      	movs	r3, #31
 8006d94:	4013      	ands	r3, r2
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d019      	beq.n	8006dce <USBD_LL_SetupStage+0x7e>
 8006d9a:	d822      	bhi.n	8006de2 <USBD_LL_SetupStage+0x92>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <USBD_LL_SetupStage+0x56>
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d00a      	beq.n	8006dba <USBD_LL_SetupStage+0x6a>
 8006da4:	e01d      	b.n	8006de2 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	22aa      	movs	r2, #170	; 0xaa
 8006daa:	0092      	lsls	r2, r2, #2
 8006dac:	189a      	adds	r2, r3, r2
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	0011      	movs	r1, r2
 8006db2:	0018      	movs	r0, r3
 8006db4:	f000 fa10 	bl	80071d8 <USBD_StdDevReq>
      break;
 8006db8:	e020      	b.n	8006dfc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	22aa      	movs	r2, #170	; 0xaa
 8006dbe:	0092      	lsls	r2, r2, #2
 8006dc0:	189a      	adds	r2, r3, r2
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	0011      	movs	r1, r2
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	f000 fa78 	bl	80072bc <USBD_StdItfReq>
      break;
 8006dcc:	e016      	b.n	8006dfc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	22aa      	movs	r2, #170	; 0xaa
 8006dd2:	0092      	lsls	r2, r2, #2
 8006dd4:	189a      	adds	r2, r3, r2
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	0011      	movs	r1, r2
 8006dda:	0018      	movs	r0, r3
 8006ddc:	f000 fac5 	bl	800736a <USBD_StdEPReq>
      break;
 8006de0:	e00c      	b.n	8006dfc <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	23aa      	movs	r3, #170	; 0xaa
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	5cd3      	ldrb	r3, [r2, r3]
 8006dea:	227f      	movs	r2, #127	; 0x7f
 8006dec:	4393      	bics	r3, r2
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	0011      	movs	r1, r2
 8006df4:	0018      	movs	r0, r3
 8006df6:	f001 fcbf 	bl	8008778 <USBD_LL_StallEP>
      break;
 8006dfa:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	0018      	movs	r0, r3
 8006e00:	46bd      	mov	sp, r7
 8006e02:	b002      	add	sp, #8
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	46c0      	nop			; (mov r8, r8)
 8006e08:	000002ae 	.word	0x000002ae

08006e0c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	607a      	str	r2, [r7, #4]
 8006e16:	200b      	movs	r0, #11
 8006e18:	183b      	adds	r3, r7, r0
 8006e1a:	1c0a      	adds	r2, r1, #0
 8006e1c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e1e:	183b      	adds	r3, r7, r0
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d154      	bne.n	8006ed0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	3355      	adds	r3, #85	; 0x55
 8006e2a:	33ff      	adds	r3, #255	; 0xff
 8006e2c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	23a5      	movs	r3, #165	; 0xa5
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	58d3      	ldr	r3, [r2, r3]
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d139      	bne.n	8006eae <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d919      	bls.n	8006e7a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	1ad2      	subs	r2, r2, r3
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d203      	bcs.n	8006e68 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	e002      	b.n	8006e6e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	001a      	movs	r2, r3
 8006e74:	f001 f877 	bl	8007f66 <USBD_CtlContinueRx>
 8006e78:	e045      	b.n	8006f06 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	23ad      	movs	r3, #173	; 0xad
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	58d3      	ldr	r3, [r2, r3]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00d      	beq.n	8006ea4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	23a7      	movs	r3, #167	; 0xa7
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e90:	2b03      	cmp	r3, #3
 8006e92:	d107      	bne.n	8006ea4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	23ad      	movs	r3, #173	; 0xad
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	58d3      	ldr	r3, [r2, r3]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	0010      	movs	r0, r2
 8006ea2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f001 f870 	bl	8007f8c <USBD_CtlSendStatus>
 8006eac:	e02b      	b.n	8006f06 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	23a5      	movs	r3, #165	; 0xa5
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	58d3      	ldr	r3, [r2, r3]
 8006eb6:	2b05      	cmp	r3, #5
 8006eb8:	d125      	bne.n	8006f06 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	23a5      	movs	r3, #165	; 0xa5
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	0018      	movs	r0, r3
 8006eca:	f001 fc55 	bl	8008778 <USBD_LL_StallEP>
 8006ece:	e01a      	b.n	8006f06 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	23ad      	movs	r3, #173	; 0xad
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	58d3      	ldr	r3, [r2, r3]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d011      	beq.n	8006f02 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	23a7      	movs	r3, #167	; 0xa7
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d10b      	bne.n	8006f02 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	23ad      	movs	r3, #173	; 0xad
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	58d3      	ldr	r3, [r2, r3]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	220b      	movs	r2, #11
 8006ef6:	18ba      	adds	r2, r7, r2
 8006ef8:	7811      	ldrb	r1, [r2, #0]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	0010      	movs	r0, r2
 8006efe:	4798      	blx	r3
 8006f00:	e001      	b.n	8006f06 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f02:	2302      	movs	r3, #2
 8006f04:	e000      	b.n	8006f08 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	0018      	movs	r0, r3
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	b006      	add	sp, #24
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	607a      	str	r2, [r7, #4]
 8006f1a:	200b      	movs	r0, #11
 8006f1c:	183b      	adds	r3, r7, r0
 8006f1e:	1c0a      	adds	r2, r1, #0
 8006f20:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f22:	183b      	adds	r3, r7, r0
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d000      	beq.n	8006f2c <USBD_LL_DataInStage+0x1c>
 8006f2a:	e08e      	b.n	800704a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3314      	adds	r3, #20
 8006f30:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	23a5      	movs	r3, #165	; 0xa5
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	58d3      	ldr	r3, [r2, r3]
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d164      	bne.n	8007008 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d915      	bls.n	8006f76 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	68da      	ldr	r2, [r3, #12]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	1ad2      	subs	r2, r2, r3
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	0018      	movs	r0, r3
 8006f64:	f000 ffec 	bl	8007f40 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2100      	movs	r1, #0
 8006f70:	f001 fceb 	bl	800894a <USBD_LL_PrepareReceive>
 8006f74:	e059      	b.n	800702a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	0019      	movs	r1, r3
 8006f80:	0010      	movs	r0, r2
 8006f82:	f7f9 f947 	bl	8000214 <__aeabi_uidivmod>
 8006f86:	1e0b      	subs	r3, r1, #0
 8006f88:	d11f      	bne.n	8006fca <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d319      	bcc.n	8006fca <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	68f9      	ldr	r1, [r7, #12]
 8006f9c:	23a6      	movs	r3, #166	; 0xa6
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d211      	bcs.n	8006fca <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	2100      	movs	r1, #0
 8006fac:	0018      	movs	r0, r3
 8006fae:	f000 ffc7 	bl	8007f40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	23a6      	movs	r3, #166	; 0xa6
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	2100      	movs	r1, #0
 8006fba:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	f001 fcc1 	bl	800894a <USBD_LL_PrepareReceive>
 8006fc8:	e02f      	b.n	800702a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	23ad      	movs	r3, #173	; 0xad
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	58d3      	ldr	r3, [r2, r3]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00d      	beq.n	8006ff4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	23a7      	movs	r3, #167	; 0xa7
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fe0:	2b03      	cmp	r3, #3
 8006fe2:	d107      	bne.n	8006ff4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	23ad      	movs	r3, #173	; 0xad
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	58d3      	ldr	r3, [r2, r3]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	0010      	movs	r0, r2
 8006ff2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2180      	movs	r1, #128	; 0x80
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	f001 fbbd 	bl	8008778 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	0018      	movs	r0, r3
 8007002:	f000 ffd7 	bl	8007fb4 <USBD_CtlReceiveStatus>
 8007006:	e010      	b.n	800702a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	23a5      	movs	r3, #165	; 0xa5
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	58d3      	ldr	r3, [r2, r3]
 8007010:	2b04      	cmp	r3, #4
 8007012:	d005      	beq.n	8007020 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	23a5      	movs	r3, #165	; 0xa5
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800701c:	2b00      	cmp	r3, #0
 800701e:	d104      	bne.n	800702a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2180      	movs	r1, #128	; 0x80
 8007024:	0018      	movs	r0, r3
 8007026:	f001 fba7 	bl	8008778 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	23a8      	movs	r3, #168	; 0xa8
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	5cd3      	ldrb	r3, [r2, r3]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d124      	bne.n	8007080 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	0018      	movs	r0, r3
 800703a:	f7ff fe43 	bl	8006cc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	23a8      	movs	r3, #168	; 0xa8
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	2100      	movs	r1, #0
 8007046:	54d1      	strb	r1, [r2, r3]
 8007048:	e01a      	b.n	8007080 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	23ad      	movs	r3, #173	; 0xad
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	58d3      	ldr	r3, [r2, r3]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d011      	beq.n	800707c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	23a7      	movs	r3, #167	; 0xa7
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8007060:	2b03      	cmp	r3, #3
 8007062:	d10b      	bne.n	800707c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	23ad      	movs	r3, #173	; 0xad
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	58d3      	ldr	r3, [r2, r3]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	220b      	movs	r2, #11
 8007070:	18ba      	adds	r2, r7, r2
 8007072:	7811      	ldrb	r1, [r2, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	0010      	movs	r0, r2
 8007078:	4798      	blx	r3
 800707a:	e001      	b.n	8007080 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800707c:	2302      	movs	r3, #2
 800707e:	e000      	b.n	8007082 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	0018      	movs	r0, r3
 8007084:	46bd      	mov	sp, r7
 8007086:	b006      	add	sp, #24
 8007088:	bd80      	pop	{r7, pc}

0800708a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b082      	sub	sp, #8
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	2340      	movs	r3, #64	; 0x40
 8007096:	2200      	movs	r2, #0
 8007098:	2100      	movs	r1, #0
 800709a:	f001 fae0 	bl	800865e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	23ac      	movs	r3, #172	; 0xac
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	2101      	movs	r1, #1
 80070a6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	23b2      	movs	r3, #178	; 0xb2
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	2140      	movs	r1, #64	; 0x40
 80070b0:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	2340      	movs	r3, #64	; 0x40
 80070b6:	2200      	movs	r2, #0
 80070b8:	2180      	movs	r1, #128	; 0x80
 80070ba:	f001 fad0 	bl	800865e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2240      	movs	r2, #64	; 0x40
 80070c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	23a7      	movs	r3, #167	; 0xa7
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	2101      	movs	r1, #1
 80070d2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	23a5      	movs	r3, #165	; 0xa5
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	2100      	movs	r1, #0
 80070dc:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	23a9      	movs	r3, #169	; 0xa9
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	2100      	movs	r1, #0
 80070ec:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	23ae      	movs	r3, #174	; 0xae
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	58d3      	ldr	r3, [r2, r3]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00a      	beq.n	8007110 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	23ad      	movs	r3, #173	; 0xad
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	58d3      	ldr	r3, [r2, r3]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	b2d9      	uxtb	r1, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	0018      	movs	r0, r3
 800710e:	4790      	blx	r2
  }

  return USBD_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	0018      	movs	r0, r3
 8007114:	46bd      	mov	sp, r7
 8007116:	b002      	add	sp, #8
 8007118:	bd80      	pop	{r7, pc}

0800711a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	000a      	movs	r2, r1
 8007124:	1cfb      	adds	r3, r7, #3
 8007126:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	1cfa      	adds	r2, r7, #3
 800712c:	7812      	ldrb	r2, [r2, #0]
 800712e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	0018      	movs	r0, r3
 8007134:	46bd      	mov	sp, r7
 8007136:	b002      	add	sp, #8
 8007138:	bd80      	pop	{r7, pc}
	...

0800713c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	23a7      	movs	r3, #167	; 0xa7
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	5cd1      	ldrb	r1, [r2, r3]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a06      	ldr	r2, [pc, #24]	; (8007168 <USBD_LL_Suspend+0x2c>)
 8007150:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	23a7      	movs	r3, #167	; 0xa7
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	2104      	movs	r1, #4
 800715a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	0018      	movs	r0, r3
 8007160:	46bd      	mov	sp, r7
 8007162:	b002      	add	sp, #8
 8007164:	bd80      	pop	{r7, pc}
 8007166:	46c0      	nop			; (mov r8, r8)
 8007168:	0000029d 	.word	0x0000029d

0800716c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	23a7      	movs	r3, #167	; 0xa7
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	5cd3      	ldrb	r3, [r2, r3]
 800717c:	2b04      	cmp	r3, #4
 800717e:	d106      	bne.n	800718e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a05      	ldr	r2, [pc, #20]	; (8007198 <USBD_LL_Resume+0x2c>)
 8007184:	5c99      	ldrb	r1, [r3, r2]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	23a7      	movs	r3, #167	; 0xa7
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	0018      	movs	r0, r3
 8007192:	46bd      	mov	sp, r7
 8007194:	b002      	add	sp, #8
 8007196:	bd80      	pop	{r7, pc}
 8007198:	0000029d 	.word	0x0000029d

0800719c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	23a7      	movs	r3, #167	; 0xa7
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	5cd3      	ldrb	r3, [r2, r3]
 80071ac:	2b03      	cmp	r3, #3
 80071ae:	d10e      	bne.n	80071ce <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	23ad      	movs	r3, #173	; 0xad
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	58d3      	ldr	r3, [r2, r3]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d007      	beq.n	80071ce <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	23ad      	movs	r3, #173	; 0xad
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	58d3      	ldr	r3, [r2, r3]
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	0010      	movs	r0, r2
 80071cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	0018      	movs	r0, r3
 80071d2:	46bd      	mov	sp, r7
 80071d4:	b002      	add	sp, #8
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071e2:	230f      	movs	r3, #15
 80071e4:	18fb      	adds	r3, r7, r3
 80071e6:	2200      	movs	r2, #0
 80071e8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	001a      	movs	r2, r3
 80071f0:	2360      	movs	r3, #96	; 0x60
 80071f2:	4013      	ands	r3, r2
 80071f4:	2b40      	cmp	r3, #64	; 0x40
 80071f6:	d004      	beq.n	8007202 <USBD_StdDevReq+0x2a>
 80071f8:	d84f      	bhi.n	800729a <USBD_StdDevReq+0xc2>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00b      	beq.n	8007216 <USBD_StdDevReq+0x3e>
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d14b      	bne.n	800729a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	23ad      	movs	r3, #173	; 0xad
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	58d3      	ldr	r3, [r2, r3]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	0010      	movs	r0, r2
 8007212:	4798      	blx	r3
      break;
 8007214:	e048      	b.n	80072a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	785b      	ldrb	r3, [r3, #1]
 800721a:	2b09      	cmp	r3, #9
 800721c:	d835      	bhi.n	800728a <USBD_StdDevReq+0xb2>
 800721e:	009a      	lsls	r2, r3, #2
 8007220:	4b25      	ldr	r3, [pc, #148]	; (80072b8 <USBD_StdDevReq+0xe0>)
 8007222:	18d3      	adds	r3, r2, r3
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	0011      	movs	r1, r2
 800722e:	0018      	movs	r0, r3
 8007230:	f000 fa52 	bl	80076d8 <USBD_GetDescriptor>
          break;
 8007234:	e030      	b.n	8007298 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	0011      	movs	r1, r2
 800723c:	0018      	movs	r0, r3
 800723e:	f000 fbfd 	bl	8007a3c <USBD_SetAddress>
          break;
 8007242:	e029      	b.n	8007298 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	0011      	movs	r1, r2
 800724a:	0018      	movs	r0, r3
 800724c:	f000 fc4a 	bl	8007ae4 <USBD_SetConfig>
          break;
 8007250:	e022      	b.n	8007298 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	0011      	movs	r1, r2
 8007258:	0018      	movs	r0, r3
 800725a:	f000 fce7 	bl	8007c2c <USBD_GetConfig>
          break;
 800725e:	e01b      	b.n	8007298 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	0011      	movs	r1, r2
 8007266:	0018      	movs	r0, r3
 8007268:	f000 fd1b 	bl	8007ca2 <USBD_GetStatus>
          break;
 800726c:	e014      	b.n	8007298 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	0011      	movs	r1, r2
 8007274:	0018      	movs	r0, r3
 8007276:	f000 fd4e 	bl	8007d16 <USBD_SetFeature>
          break;
 800727a:	e00d      	b.n	8007298 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	0011      	movs	r1, r2
 8007282:	0018      	movs	r0, r3
 8007284:	f000 fd5d 	bl	8007d42 <USBD_ClrFeature>
          break;
 8007288:	e006      	b.n	8007298 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	0011      	movs	r1, r2
 8007290:	0018      	movs	r0, r3
 8007292:	f000 fdb7 	bl	8007e04 <USBD_CtlError>
          break;
 8007296:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007298:	e006      	b.n	80072a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	0011      	movs	r1, r2
 80072a0:	0018      	movs	r0, r3
 80072a2:	f000 fdaf 	bl	8007e04 <USBD_CtlError>
      break;
 80072a6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80072a8:	230f      	movs	r3, #15
 80072aa:	18fb      	adds	r3, r7, r3
 80072ac:	781b      	ldrb	r3, [r3, #0]
}
 80072ae:	0018      	movs	r0, r3
 80072b0:	46bd      	mov	sp, r7
 80072b2:	b004      	add	sp, #16
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	46c0      	nop			; (mov r8, r8)
 80072b8:	08008cf0 	.word	0x08008cf0

080072bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80072bc:	b5b0      	push	{r4, r5, r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072c6:	230f      	movs	r3, #15
 80072c8:	18fb      	adds	r3, r7, r3
 80072ca:	2200      	movs	r2, #0
 80072cc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	001a      	movs	r2, r3
 80072d4:	2360      	movs	r3, #96	; 0x60
 80072d6:	4013      	ands	r3, r2
 80072d8:	2b40      	cmp	r3, #64	; 0x40
 80072da:	d004      	beq.n	80072e6 <USBD_StdItfReq+0x2a>
 80072dc:	d839      	bhi.n	8007352 <USBD_StdItfReq+0x96>
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <USBD_StdItfReq+0x2a>
 80072e2:	2b20      	cmp	r3, #32
 80072e4:	d135      	bne.n	8007352 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	23a7      	movs	r3, #167	; 0xa7
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	5cd3      	ldrb	r3, [r2, r3]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d825      	bhi.n	8007340 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	889b      	ldrh	r3, [r3, #4]
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d819      	bhi.n	8007332 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	23ad      	movs	r3, #173	; 0xad
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	58d3      	ldr	r3, [r2, r3]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	250f      	movs	r5, #15
 800730a:	197c      	adds	r4, r7, r5
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	0010      	movs	r0, r2
 8007312:	4798      	blx	r3
 8007314:	0003      	movs	r3, r0
 8007316:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	88db      	ldrh	r3, [r3, #6]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d116      	bne.n	800734e <USBD_StdItfReq+0x92>
 8007320:	197b      	adds	r3, r7, r5
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d112      	bne.n	800734e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	0018      	movs	r0, r3
 800732c:	f000 fe2e 	bl	8007f8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007330:	e00d      	b.n	800734e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	0011      	movs	r1, r2
 8007338:	0018      	movs	r0, r3
 800733a:	f000 fd63 	bl	8007e04 <USBD_CtlError>
          break;
 800733e:	e006      	b.n	800734e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	0011      	movs	r1, r2
 8007346:	0018      	movs	r0, r3
 8007348:	f000 fd5c 	bl	8007e04 <USBD_CtlError>
          break;
 800734c:	e000      	b.n	8007350 <USBD_StdItfReq+0x94>
          break;
 800734e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007350:	e006      	b.n	8007360 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	0011      	movs	r1, r2
 8007358:	0018      	movs	r0, r3
 800735a:	f000 fd53 	bl	8007e04 <USBD_CtlError>
      break;
 800735e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	0018      	movs	r0, r3
 8007364:	46bd      	mov	sp, r7
 8007366:	b004      	add	sp, #16
 8007368:	bdb0      	pop	{r4, r5, r7, pc}

0800736a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800736a:	b5b0      	push	{r4, r5, r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007374:	230f      	movs	r3, #15
 8007376:	18fb      	adds	r3, r7, r3
 8007378:	2200      	movs	r2, #0
 800737a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	889a      	ldrh	r2, [r3, #4]
 8007380:	230e      	movs	r3, #14
 8007382:	18fb      	adds	r3, r7, r3
 8007384:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	001a      	movs	r2, r3
 800738c:	2360      	movs	r3, #96	; 0x60
 800738e:	4013      	ands	r3, r2
 8007390:	2b40      	cmp	r3, #64	; 0x40
 8007392:	d006      	beq.n	80073a2 <USBD_StdEPReq+0x38>
 8007394:	d900      	bls.n	8007398 <USBD_StdEPReq+0x2e>
 8007396:	e190      	b.n	80076ba <USBD_StdEPReq+0x350>
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00c      	beq.n	80073b6 <USBD_StdEPReq+0x4c>
 800739c:	2b20      	cmp	r3, #32
 800739e:	d000      	beq.n	80073a2 <USBD_StdEPReq+0x38>
 80073a0:	e18b      	b.n	80076ba <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	23ad      	movs	r3, #173	; 0xad
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	58d3      	ldr	r3, [r2, r3]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	0010      	movs	r0, r2
 80073b2:	4798      	blx	r3
      break;
 80073b4:	e188      	b.n	80076c8 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	001a      	movs	r2, r3
 80073bc:	2360      	movs	r3, #96	; 0x60
 80073be:	4013      	ands	r3, r2
 80073c0:	2b20      	cmp	r3, #32
 80073c2:	d10f      	bne.n	80073e4 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	23ad      	movs	r3, #173	; 0xad
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	58d3      	ldr	r3, [r2, r3]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	250f      	movs	r5, #15
 80073d0:	197c      	adds	r4, r7, r5
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	0010      	movs	r0, r2
 80073d8:	4798      	blx	r3
 80073da:	0003      	movs	r3, r0
 80073dc:	7023      	strb	r3, [r4, #0]

        return ret;
 80073de:	197b      	adds	r3, r7, r5
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	e174      	b.n	80076ce <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	785b      	ldrb	r3, [r3, #1]
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d007      	beq.n	80073fc <USBD_StdEPReq+0x92>
 80073ec:	dd00      	ble.n	80073f0 <USBD_StdEPReq+0x86>
 80073ee:	e15c      	b.n	80076aa <USBD_StdEPReq+0x340>
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d100      	bne.n	80073f6 <USBD_StdEPReq+0x8c>
 80073f4:	e092      	b.n	800751c <USBD_StdEPReq+0x1b2>
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d04b      	beq.n	8007492 <USBD_StdEPReq+0x128>
 80073fa:	e156      	b.n	80076aa <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	23a7      	movs	r3, #167	; 0xa7
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	5cd3      	ldrb	r3, [r2, r3]
 8007404:	2b02      	cmp	r3, #2
 8007406:	d002      	beq.n	800740e <USBD_StdEPReq+0xa4>
 8007408:	2b03      	cmp	r3, #3
 800740a:	d01d      	beq.n	8007448 <USBD_StdEPReq+0xde>
 800740c:	e039      	b.n	8007482 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800740e:	220e      	movs	r2, #14
 8007410:	18bb      	adds	r3, r7, r2
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d010      	beq.n	800743a <USBD_StdEPReq+0xd0>
 8007418:	18bb      	adds	r3, r7, r2
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b80      	cmp	r3, #128	; 0x80
 800741e:	d00c      	beq.n	800743a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007420:	18bb      	adds	r3, r7, r2
 8007422:	781a      	ldrb	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	0011      	movs	r1, r2
 8007428:	0018      	movs	r0, r3
 800742a:	f001 f9a5 	bl	8008778 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2180      	movs	r1, #128	; 0x80
 8007432:	0018      	movs	r0, r3
 8007434:	f001 f9a0 	bl	8008778 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007438:	e02a      	b.n	8007490 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	0011      	movs	r1, r2
 8007440:	0018      	movs	r0, r3
 8007442:	f000 fcdf 	bl	8007e04 <USBD_CtlError>
              break;
 8007446:	e023      	b.n	8007490 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	885b      	ldrh	r3, [r3, #2]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d113      	bne.n	8007478 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8007450:	220e      	movs	r2, #14
 8007452:	18bb      	adds	r3, r7, r2
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00e      	beq.n	8007478 <USBD_StdEPReq+0x10e>
 800745a:	18bb      	adds	r3, r7, r2
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b80      	cmp	r3, #128	; 0x80
 8007460:	d00a      	beq.n	8007478 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	88db      	ldrh	r3, [r3, #6]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d106      	bne.n	8007478 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800746a:	18bb      	adds	r3, r7, r2
 800746c:	781a      	ldrb	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	0011      	movs	r1, r2
 8007472:	0018      	movs	r0, r3
 8007474:	f001 f980 	bl	8008778 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	0018      	movs	r0, r3
 800747c:	f000 fd86 	bl	8007f8c <USBD_CtlSendStatus>

              break;
 8007480:	e006      	b.n	8007490 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	0011      	movs	r1, r2
 8007488:	0018      	movs	r0, r3
 800748a:	f000 fcbb 	bl	8007e04 <USBD_CtlError>
              break;
 800748e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007490:	e112      	b.n	80076b8 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	23a7      	movs	r3, #167	; 0xa7
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	5cd3      	ldrb	r3, [r2, r3]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d002      	beq.n	80074a4 <USBD_StdEPReq+0x13a>
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d01d      	beq.n	80074de <USBD_StdEPReq+0x174>
 80074a2:	e032      	b.n	800750a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074a4:	220e      	movs	r2, #14
 80074a6:	18bb      	adds	r3, r7, r2
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d010      	beq.n	80074d0 <USBD_StdEPReq+0x166>
 80074ae:	18bb      	adds	r3, r7, r2
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	2b80      	cmp	r3, #128	; 0x80
 80074b4:	d00c      	beq.n	80074d0 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80074b6:	18bb      	adds	r3, r7, r2
 80074b8:	781a      	ldrb	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	0011      	movs	r1, r2
 80074be:	0018      	movs	r0, r3
 80074c0:	f001 f95a 	bl	8008778 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2180      	movs	r1, #128	; 0x80
 80074c8:	0018      	movs	r0, r3
 80074ca:	f001 f955 	bl	8008778 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074ce:	e024      	b.n	800751a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	0011      	movs	r1, r2
 80074d6:	0018      	movs	r0, r3
 80074d8:	f000 fc94 	bl	8007e04 <USBD_CtlError>
              break;
 80074dc:	e01d      	b.n	800751a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	885b      	ldrh	r3, [r3, #2]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d118      	bne.n	8007518 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074e6:	210e      	movs	r1, #14
 80074e8:	187b      	adds	r3, r7, r1
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	227f      	movs	r2, #127	; 0x7f
 80074ee:	4013      	ands	r3, r2
 80074f0:	d006      	beq.n	8007500 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80074f2:	187b      	adds	r3, r7, r1
 80074f4:	781a      	ldrb	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	0011      	movs	r1, r2
 80074fa:	0018      	movs	r0, r3
 80074fc:	f001 f967 	bl	80087ce <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	0018      	movs	r0, r3
 8007504:	f000 fd42 	bl	8007f8c <USBD_CtlSendStatus>
              }
              break;
 8007508:	e006      	b.n	8007518 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	0011      	movs	r1, r2
 8007510:	0018      	movs	r0, r3
 8007512:	f000 fc77 	bl	8007e04 <USBD_CtlError>
              break;
 8007516:	e000      	b.n	800751a <USBD_StdEPReq+0x1b0>
              break;
 8007518:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800751a:	e0cd      	b.n	80076b8 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	23a7      	movs	r3, #167	; 0xa7
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	5cd3      	ldrb	r3, [r2, r3]
 8007524:	2b02      	cmp	r3, #2
 8007526:	d002      	beq.n	800752e <USBD_StdEPReq+0x1c4>
 8007528:	2b03      	cmp	r3, #3
 800752a:	d03c      	beq.n	80075a6 <USBD_StdEPReq+0x23c>
 800752c:	e0b5      	b.n	800769a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800752e:	220e      	movs	r2, #14
 8007530:	18bb      	adds	r3, r7, r2
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00a      	beq.n	800754e <USBD_StdEPReq+0x1e4>
 8007538:	18bb      	adds	r3, r7, r2
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	2b80      	cmp	r3, #128	; 0x80
 800753e:	d006      	beq.n	800754e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	0011      	movs	r1, r2
 8007546:	0018      	movs	r0, r3
 8007548:	f000 fc5c 	bl	8007e04 <USBD_CtlError>
                break;
 800754c:	e0ac      	b.n	80076a8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800754e:	220e      	movs	r2, #14
 8007550:	18bb      	adds	r3, r7, r2
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	b25b      	sxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	da0c      	bge.n	8007574 <USBD_StdEPReq+0x20a>
 800755a:	18bb      	adds	r3, r7, r2
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	227f      	movs	r2, #127	; 0x7f
 8007560:	401a      	ands	r2, r3
 8007562:	0013      	movs	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	189b      	adds	r3, r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	3310      	adds	r3, #16
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	18d3      	adds	r3, r2, r3
 8007570:	3304      	adds	r3, #4
 8007572:	e00d      	b.n	8007590 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007574:	230e      	movs	r3, #14
 8007576:	18fb      	adds	r3, r7, r3
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	227f      	movs	r2, #127	; 0x7f
 800757c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800757e:	0013      	movs	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	189b      	adds	r3, r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	3351      	adds	r3, #81	; 0x51
 8007588:	33ff      	adds	r3, #255	; 0xff
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	18d3      	adds	r3, r2, r3
 800758e:	3304      	adds	r3, #4
 8007590:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2200      	movs	r2, #0
 8007596:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007598:	68b9      	ldr	r1, [r7, #8]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2202      	movs	r2, #2
 800759e:	0018      	movs	r0, r3
 80075a0:	f000 fcae 	bl	8007f00 <USBD_CtlSendData>
              break;
 80075a4:	e080      	b.n	80076a8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80075a6:	220e      	movs	r2, #14
 80075a8:	18bb      	adds	r3, r7, r2
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	b25b      	sxtb	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	da14      	bge.n	80075dc <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075b2:	18bb      	adds	r3, r7, r2
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	220f      	movs	r2, #15
 80075b8:	401a      	ands	r2, r3
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	0013      	movs	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	189b      	adds	r3, r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	18cb      	adds	r3, r1, r3
 80075c6:	3318      	adds	r3, #24
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d11e      	bne.n	800760c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	0011      	movs	r1, r2
 80075d4:	0018      	movs	r0, r3
 80075d6:	f000 fc15 	bl	8007e04 <USBD_CtlError>
                  break;
 80075da:	e065      	b.n	80076a8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80075dc:	230e      	movs	r3, #14
 80075de:	18fb      	adds	r3, r7, r3
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	220f      	movs	r2, #15
 80075e4:	401a      	ands	r2, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	23ac      	movs	r3, #172	; 0xac
 80075ea:	0059      	lsls	r1, r3, #1
 80075ec:	0013      	movs	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	189b      	adds	r3, r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	18c3      	adds	r3, r0, r3
 80075f6:	185b      	adds	r3, r3, r1
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d106      	bne.n	800760c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	0011      	movs	r1, r2
 8007604:	0018      	movs	r0, r3
 8007606:	f000 fbfd 	bl	8007e04 <USBD_CtlError>
                  break;
 800760a:	e04d      	b.n	80076a8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800760c:	220e      	movs	r2, #14
 800760e:	18bb      	adds	r3, r7, r2
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	b25b      	sxtb	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	da0c      	bge.n	8007632 <USBD_StdEPReq+0x2c8>
 8007618:	18bb      	adds	r3, r7, r2
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	227f      	movs	r2, #127	; 0x7f
 800761e:	401a      	ands	r2, r3
 8007620:	0013      	movs	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	189b      	adds	r3, r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	3310      	adds	r3, #16
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	18d3      	adds	r3, r2, r3
 800762e:	3304      	adds	r3, #4
 8007630:	e00d      	b.n	800764e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007632:	230e      	movs	r3, #14
 8007634:	18fb      	adds	r3, r7, r3
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	227f      	movs	r2, #127	; 0x7f
 800763a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800763c:	0013      	movs	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	189b      	adds	r3, r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	3351      	adds	r3, #81	; 0x51
 8007646:	33ff      	adds	r3, #255	; 0xff
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	18d3      	adds	r3, r2, r3
 800764c:	3304      	adds	r3, #4
 800764e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007650:	220e      	movs	r2, #14
 8007652:	18bb      	adds	r3, r7, r2
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <USBD_StdEPReq+0x2f8>
 800765a:	18bb      	adds	r3, r7, r2
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	2b80      	cmp	r3, #128	; 0x80
 8007660:	d103      	bne.n	800766a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2200      	movs	r2, #0
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	e010      	b.n	800768c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800766a:	230e      	movs	r3, #14
 800766c:	18fb      	adds	r3, r7, r3
 800766e:	781a      	ldrb	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	0011      	movs	r1, r2
 8007674:	0018      	movs	r0, r3
 8007676:	f001 f8d5 	bl	8008824 <USBD_LL_IsStallEP>
 800767a:	1e03      	subs	r3, r0, #0
 800767c:	d003      	beq.n	8007686 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2201      	movs	r2, #1
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	e002      	b.n	800768c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2200      	movs	r2, #0
 800768a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800768c:	68b9      	ldr	r1, [r7, #8]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2202      	movs	r2, #2
 8007692:	0018      	movs	r0, r3
 8007694:	f000 fc34 	bl	8007f00 <USBD_CtlSendData>
              break;
 8007698:	e006      	b.n	80076a8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	0011      	movs	r1, r2
 80076a0:	0018      	movs	r0, r3
 80076a2:	f000 fbaf 	bl	8007e04 <USBD_CtlError>
              break;
 80076a6:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80076a8:	e006      	b.n	80076b8 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	0011      	movs	r1, r2
 80076b0:	0018      	movs	r0, r3
 80076b2:	f000 fba7 	bl	8007e04 <USBD_CtlError>
          break;
 80076b6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80076b8:	e006      	b.n	80076c8 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	0011      	movs	r1, r2
 80076c0:	0018      	movs	r0, r3
 80076c2:	f000 fb9f 	bl	8007e04 <USBD_CtlError>
      break;
 80076c6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80076c8:	230f      	movs	r3, #15
 80076ca:	18fb      	adds	r3, r7, r3
 80076cc:	781b      	ldrb	r3, [r3, #0]
}
 80076ce:	0018      	movs	r0, r3
 80076d0:	46bd      	mov	sp, r7
 80076d2:	b004      	add	sp, #16
 80076d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080076d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076e2:	2308      	movs	r3, #8
 80076e4:	18fb      	adds	r3, r7, r3
 80076e6:	2200      	movs	r2, #0
 80076e8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80076ee:	230b      	movs	r3, #11
 80076f0:	18fb      	adds	r3, r7, r3
 80076f2:	2200      	movs	r2, #0
 80076f4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	885b      	ldrh	r3, [r3, #2]
 80076fa:	0a1b      	lsrs	r3, r3, #8
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2b07      	cmp	r3, #7
 8007700:	d900      	bls.n	8007704 <USBD_GetDescriptor+0x2c>
 8007702:	e159      	b.n	80079b8 <USBD_GetDescriptor+0x2e0>
 8007704:	009a      	lsls	r2, r3, #2
 8007706:	4bcb      	ldr	r3, [pc, #812]	; (8007a34 <USBD_GetDescriptor+0x35c>)
 8007708:	18d3      	adds	r3, r2, r3
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	23ac      	movs	r3, #172	; 0xac
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	58d3      	ldr	r3, [r2, r3]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	7c12      	ldrb	r2, [r2, #16]
 800771c:	2108      	movs	r1, #8
 800771e:	1879      	adds	r1, r7, r1
 8007720:	0010      	movs	r0, r2
 8007722:	4798      	blx	r3
 8007724:	0003      	movs	r3, r0
 8007726:	60fb      	str	r3, [r7, #12]
      break;
 8007728:	e153      	b.n	80079d2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	7c1b      	ldrb	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10f      	bne.n	8007752 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	23ad      	movs	r3, #173	; 0xad
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	58d3      	ldr	r3, [r2, r3]
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	2208      	movs	r2, #8
 800773e:	18ba      	adds	r2, r7, r2
 8007740:	0010      	movs	r0, r2
 8007742:	4798      	blx	r3
 8007744:	0003      	movs	r3, r0
 8007746:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3301      	adds	r3, #1
 800774c:	2202      	movs	r2, #2
 800774e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007750:	e13f      	b.n	80079d2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	23ad      	movs	r3, #173	; 0xad
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	58d3      	ldr	r3, [r2, r3]
 800775a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775c:	2208      	movs	r2, #8
 800775e:	18ba      	adds	r2, r7, r2
 8007760:	0010      	movs	r0, r2
 8007762:	4798      	blx	r3
 8007764:	0003      	movs	r3, r0
 8007766:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3301      	adds	r3, #1
 800776c:	2202      	movs	r2, #2
 800776e:	701a      	strb	r2, [r3, #0]
      break;
 8007770:	e12f      	b.n	80079d2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	885b      	ldrh	r3, [r3, #2]
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b05      	cmp	r3, #5
 800777a:	d900      	bls.n	800777e <USBD_GetDescriptor+0xa6>
 800777c:	e0d0      	b.n	8007920 <USBD_GetDescriptor+0x248>
 800777e:	009a      	lsls	r2, r3, #2
 8007780:	4bad      	ldr	r3, [pc, #692]	; (8007a38 <USBD_GetDescriptor+0x360>)
 8007782:	18d3      	adds	r3, r2, r3
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	23ac      	movs	r3, #172	; 0xac
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	58d3      	ldr	r3, [r2, r3]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00d      	beq.n	80077b2 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	23ac      	movs	r3, #172	; 0xac
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	58d3      	ldr	r3, [r2, r3]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	7c12      	ldrb	r2, [r2, #16]
 80077a4:	2108      	movs	r1, #8
 80077a6:	1879      	adds	r1, r7, r1
 80077a8:	0010      	movs	r0, r2
 80077aa:	4798      	blx	r3
 80077ac:	0003      	movs	r3, r0
 80077ae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077b0:	e0c3      	b.n	800793a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	0011      	movs	r1, r2
 80077b8:	0018      	movs	r0, r3
 80077ba:	f000 fb23 	bl	8007e04 <USBD_CtlError>
            err++;
 80077be:	210b      	movs	r1, #11
 80077c0:	187b      	adds	r3, r7, r1
 80077c2:	781a      	ldrb	r2, [r3, #0]
 80077c4:	187b      	adds	r3, r7, r1
 80077c6:	3201      	adds	r2, #1
 80077c8:	701a      	strb	r2, [r3, #0]
          break;
 80077ca:	e0b6      	b.n	800793a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	23ac      	movs	r3, #172	; 0xac
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	58d3      	ldr	r3, [r2, r3]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00d      	beq.n	80077f6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	23ac      	movs	r3, #172	; 0xac
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	58d3      	ldr	r3, [r2, r3]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	7c12      	ldrb	r2, [r2, #16]
 80077e8:	2108      	movs	r1, #8
 80077ea:	1879      	adds	r1, r7, r1
 80077ec:	0010      	movs	r0, r2
 80077ee:	4798      	blx	r3
 80077f0:	0003      	movs	r3, r0
 80077f2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077f4:	e0a1      	b.n	800793a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	0011      	movs	r1, r2
 80077fc:	0018      	movs	r0, r3
 80077fe:	f000 fb01 	bl	8007e04 <USBD_CtlError>
            err++;
 8007802:	210b      	movs	r1, #11
 8007804:	187b      	adds	r3, r7, r1
 8007806:	781a      	ldrb	r2, [r3, #0]
 8007808:	187b      	adds	r3, r7, r1
 800780a:	3201      	adds	r2, #1
 800780c:	701a      	strb	r2, [r3, #0]
          break;
 800780e:	e094      	b.n	800793a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	23ac      	movs	r3, #172	; 0xac
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	58d3      	ldr	r3, [r2, r3]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00d      	beq.n	800783a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	23ac      	movs	r3, #172	; 0xac
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	58d3      	ldr	r3, [r2, r3]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	7c12      	ldrb	r2, [r2, #16]
 800782c:	2108      	movs	r1, #8
 800782e:	1879      	adds	r1, r7, r1
 8007830:	0010      	movs	r0, r2
 8007832:	4798      	blx	r3
 8007834:	0003      	movs	r3, r0
 8007836:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007838:	e07f      	b.n	800793a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	0011      	movs	r1, r2
 8007840:	0018      	movs	r0, r3
 8007842:	f000 fadf 	bl	8007e04 <USBD_CtlError>
            err++;
 8007846:	210b      	movs	r1, #11
 8007848:	187b      	adds	r3, r7, r1
 800784a:	781a      	ldrb	r2, [r3, #0]
 800784c:	187b      	adds	r3, r7, r1
 800784e:	3201      	adds	r2, #1
 8007850:	701a      	strb	r2, [r3, #0]
          break;
 8007852:	e072      	b.n	800793a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	23ac      	movs	r3, #172	; 0xac
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	58d3      	ldr	r3, [r2, r3]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00d      	beq.n	800787e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	23ac      	movs	r3, #172	; 0xac
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	58d3      	ldr	r3, [r2, r3]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	7c12      	ldrb	r2, [r2, #16]
 8007870:	2108      	movs	r1, #8
 8007872:	1879      	adds	r1, r7, r1
 8007874:	0010      	movs	r0, r2
 8007876:	4798      	blx	r3
 8007878:	0003      	movs	r3, r0
 800787a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800787c:	e05d      	b.n	800793a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	0011      	movs	r1, r2
 8007884:	0018      	movs	r0, r3
 8007886:	f000 fabd 	bl	8007e04 <USBD_CtlError>
            err++;
 800788a:	210b      	movs	r1, #11
 800788c:	187b      	adds	r3, r7, r1
 800788e:	781a      	ldrb	r2, [r3, #0]
 8007890:	187b      	adds	r3, r7, r1
 8007892:	3201      	adds	r2, #1
 8007894:	701a      	strb	r2, [r3, #0]
          break;
 8007896:	e050      	b.n	800793a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	23ac      	movs	r3, #172	; 0xac
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	58d3      	ldr	r3, [r2, r3]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00d      	beq.n	80078c2 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	23ac      	movs	r3, #172	; 0xac
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	58d3      	ldr	r3, [r2, r3]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	7c12      	ldrb	r2, [r2, #16]
 80078b4:	2108      	movs	r1, #8
 80078b6:	1879      	adds	r1, r7, r1
 80078b8:	0010      	movs	r0, r2
 80078ba:	4798      	blx	r3
 80078bc:	0003      	movs	r3, r0
 80078be:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078c0:	e03b      	b.n	800793a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	0011      	movs	r1, r2
 80078c8:	0018      	movs	r0, r3
 80078ca:	f000 fa9b 	bl	8007e04 <USBD_CtlError>
            err++;
 80078ce:	210b      	movs	r1, #11
 80078d0:	187b      	adds	r3, r7, r1
 80078d2:	781a      	ldrb	r2, [r3, #0]
 80078d4:	187b      	adds	r3, r7, r1
 80078d6:	3201      	adds	r2, #1
 80078d8:	701a      	strb	r2, [r3, #0]
          break;
 80078da:	e02e      	b.n	800793a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	23ac      	movs	r3, #172	; 0xac
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	58d3      	ldr	r3, [r2, r3]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00d      	beq.n	8007906 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	23ac      	movs	r3, #172	; 0xac
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	58d3      	ldr	r3, [r2, r3]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	7c12      	ldrb	r2, [r2, #16]
 80078f8:	2108      	movs	r1, #8
 80078fa:	1879      	adds	r1, r7, r1
 80078fc:	0010      	movs	r0, r2
 80078fe:	4798      	blx	r3
 8007900:	0003      	movs	r3, r0
 8007902:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007904:	e019      	b.n	800793a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	0011      	movs	r1, r2
 800790c:	0018      	movs	r0, r3
 800790e:	f000 fa79 	bl	8007e04 <USBD_CtlError>
            err++;
 8007912:	210b      	movs	r1, #11
 8007914:	187b      	adds	r3, r7, r1
 8007916:	781a      	ldrb	r2, [r3, #0]
 8007918:	187b      	adds	r3, r7, r1
 800791a:	3201      	adds	r2, #1
 800791c:	701a      	strb	r2, [r3, #0]
          break;
 800791e:	e00c      	b.n	800793a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	0011      	movs	r1, r2
 8007926:	0018      	movs	r0, r3
 8007928:	f000 fa6c 	bl	8007e04 <USBD_CtlError>
          err++;
 800792c:	210b      	movs	r1, #11
 800792e:	187b      	adds	r3, r7, r1
 8007930:	781a      	ldrb	r2, [r3, #0]
 8007932:	187b      	adds	r3, r7, r1
 8007934:	3201      	adds	r2, #1
 8007936:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8007938:	e04b      	b.n	80079d2 <USBD_GetDescriptor+0x2fa>
 800793a:	e04a      	b.n	80079d2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	7c1b      	ldrb	r3, [r3, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10b      	bne.n	800795c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	23ad      	movs	r3, #173	; 0xad
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	58d3      	ldr	r3, [r2, r3]
 800794c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794e:	2208      	movs	r2, #8
 8007950:	18ba      	adds	r2, r7, r2
 8007952:	0010      	movs	r0, r2
 8007954:	4798      	blx	r3
 8007956:	0003      	movs	r3, r0
 8007958:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800795a:	e03a      	b.n	80079d2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	0011      	movs	r1, r2
 8007962:	0018      	movs	r0, r3
 8007964:	f000 fa4e 	bl	8007e04 <USBD_CtlError>
        err++;
 8007968:	210b      	movs	r1, #11
 800796a:	187b      	adds	r3, r7, r1
 800796c:	781a      	ldrb	r2, [r3, #0]
 800796e:	187b      	adds	r3, r7, r1
 8007970:	3201      	adds	r2, #1
 8007972:	701a      	strb	r2, [r3, #0]
      break;
 8007974:	e02d      	b.n	80079d2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	7c1b      	ldrb	r3, [r3, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10f      	bne.n	800799e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	23ad      	movs	r3, #173	; 0xad
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	58d3      	ldr	r3, [r2, r3]
 8007986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007988:	2208      	movs	r2, #8
 800798a:	18ba      	adds	r2, r7, r2
 800798c:	0010      	movs	r0, r2
 800798e:	4798      	blx	r3
 8007990:	0003      	movs	r3, r0
 8007992:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3301      	adds	r3, #1
 8007998:	2207      	movs	r2, #7
 800799a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800799c:	e019      	b.n	80079d2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	0011      	movs	r1, r2
 80079a4:	0018      	movs	r0, r3
 80079a6:	f000 fa2d 	bl	8007e04 <USBD_CtlError>
        err++;
 80079aa:	210b      	movs	r1, #11
 80079ac:	187b      	adds	r3, r7, r1
 80079ae:	781a      	ldrb	r2, [r3, #0]
 80079b0:	187b      	adds	r3, r7, r1
 80079b2:	3201      	adds	r2, #1
 80079b4:	701a      	strb	r2, [r3, #0]
      break;
 80079b6:	e00c      	b.n	80079d2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	0011      	movs	r1, r2
 80079be:	0018      	movs	r0, r3
 80079c0:	f000 fa20 	bl	8007e04 <USBD_CtlError>
      err++;
 80079c4:	210b      	movs	r1, #11
 80079c6:	187b      	adds	r3, r7, r1
 80079c8:	781a      	ldrb	r2, [r3, #0]
 80079ca:	187b      	adds	r3, r7, r1
 80079cc:	3201      	adds	r2, #1
 80079ce:	701a      	strb	r2, [r3, #0]
      break;
 80079d0:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 80079d2:	230b      	movs	r3, #11
 80079d4:	18fb      	adds	r3, r7, r3
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d127      	bne.n	8007a2c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80079dc:	2108      	movs	r1, #8
 80079de:	187b      	adds	r3, r7, r1
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d019      	beq.n	8007a1a <USBD_GetDescriptor+0x342>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	88db      	ldrh	r3, [r3, #6]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d015      	beq.n	8007a1a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	88da      	ldrh	r2, [r3, #6]
 80079f2:	187b      	adds	r3, r7, r1
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	1c18      	adds	r0, r3, #0
 80079f8:	1c11      	adds	r1, r2, #0
 80079fa:	b28a      	uxth	r2, r1
 80079fc:	b283      	uxth	r3, r0
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d900      	bls.n	8007a04 <USBD_GetDescriptor+0x32c>
 8007a02:	1c01      	adds	r1, r0, #0
 8007a04:	b28a      	uxth	r2, r1
 8007a06:	2108      	movs	r1, #8
 8007a08:	187b      	adds	r3, r7, r1
 8007a0a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a0c:	187b      	adds	r3, r7, r1
 8007a0e:	881a      	ldrh	r2, [r3, #0]
 8007a10:	68f9      	ldr	r1, [r7, #12]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	0018      	movs	r0, r3
 8007a16:	f000 fa73 	bl	8007f00 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	88db      	ldrh	r3, [r3, #6]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d105      	bne.n	8007a2e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	0018      	movs	r0, r3
 8007a26:	f000 fab1 	bl	8007f8c <USBD_CtlSendStatus>
 8007a2a:	e000      	b.n	8007a2e <USBD_GetDescriptor+0x356>
    return;
 8007a2c:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	b004      	add	sp, #16
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	08008d18 	.word	0x08008d18
 8007a38:	08008d38 	.word	0x08008d38

08007a3c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a3c:	b590      	push	{r4, r7, lr}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	889b      	ldrh	r3, [r3, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d13d      	bne.n	8007aca <USBD_SetAddress+0x8e>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	88db      	ldrh	r3, [r3, #6]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d139      	bne.n	8007aca <USBD_SetAddress+0x8e>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	885b      	ldrh	r3, [r3, #2]
 8007a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a5c:	d835      	bhi.n	8007aca <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	885b      	ldrh	r3, [r3, #2]
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	230f      	movs	r3, #15
 8007a66:	18fb      	adds	r3, r7, r3
 8007a68:	217f      	movs	r1, #127	; 0x7f
 8007a6a:	400a      	ands	r2, r1
 8007a6c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	23a7      	movs	r3, #167	; 0xa7
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	5cd3      	ldrb	r3, [r2, r3]
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d106      	bne.n	8007a88 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	0011      	movs	r1, r2
 8007a80:	0018      	movs	r0, r3
 8007a82:	f000 f9bf 	bl	8007e04 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a86:	e027      	b.n	8007ad8 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	240f      	movs	r4, #15
 8007a8c:	193a      	adds	r2, r7, r4
 8007a8e:	4914      	ldr	r1, [pc, #80]	; (8007ae0 <USBD_SetAddress+0xa4>)
 8007a90:	7812      	ldrb	r2, [r2, #0]
 8007a92:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a94:	193b      	adds	r3, r7, r4
 8007a96:	781a      	ldrb	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	0011      	movs	r1, r2
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	f000 fef2 	bl	8008886 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	f000 fa71 	bl	8007f8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007aaa:	193b      	adds	r3, r7, r4
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d005      	beq.n	8007abe <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	23a7      	movs	r3, #167	; 0xa7
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	2102      	movs	r1, #2
 8007aba:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007abc:	e00c      	b.n	8007ad8 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	23a7      	movs	r3, #167	; 0xa7
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac8:	e006      	b.n	8007ad8 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	0011      	movs	r1, r2
 8007ad0:	0018      	movs	r0, r3
 8007ad2:	f000 f997 	bl	8007e04 <USBD_CtlError>
  }
}
 8007ad6:	46c0      	nop			; (mov r8, r8)
 8007ad8:	46c0      	nop			; (mov r8, r8)
 8007ada:	46bd      	mov	sp, r7
 8007adc:	b005      	add	sp, #20
 8007ade:	bd90      	pop	{r4, r7, pc}
 8007ae0:	0000029e 	.word	0x0000029e

08007ae4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	885b      	ldrh	r3, [r3, #2]
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	4b4c      	ldr	r3, [pc, #304]	; (8007c28 <USBD_SetConfig+0x144>)
 8007af6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007af8:	4b4b      	ldr	r3, [pc, #300]	; (8007c28 <USBD_SetConfig+0x144>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d906      	bls.n	8007b0e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	0011      	movs	r1, r2
 8007b06:	0018      	movs	r0, r3
 8007b08:	f000 f97c 	bl	8007e04 <USBD_CtlError>
 8007b0c:	e088      	b.n	8007c20 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	23a7      	movs	r3, #167	; 0xa7
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	5cd3      	ldrb	r3, [r2, r3]
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d002      	beq.n	8007b20 <USBD_SetConfig+0x3c>
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d029      	beq.n	8007b72 <USBD_SetConfig+0x8e>
 8007b1e:	e071      	b.n	8007c04 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007b20:	4b41      	ldr	r3, [pc, #260]	; (8007c28 <USBD_SetConfig+0x144>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d01f      	beq.n	8007b68 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8007b28:	4b3f      	ldr	r3, [pc, #252]	; (8007c28 <USBD_SetConfig+0x144>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	001a      	movs	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	23a7      	movs	r3, #167	; 0xa7
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	2103      	movs	r1, #3
 8007b3a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b3c:	4b3a      	ldr	r3, [pc, #232]	; (8007c28 <USBD_SetConfig+0x144>)
 8007b3e:	781a      	ldrb	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	0011      	movs	r1, r2
 8007b44:	0018      	movs	r0, r3
 8007b46:	f7ff f8c6 	bl	8006cd6 <USBD_SetClassConfig>
 8007b4a:	0003      	movs	r3, r0
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d106      	bne.n	8007b5e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	0011      	movs	r1, r2
 8007b56:	0018      	movs	r0, r3
 8007b58:	f000 f954 	bl	8007e04 <USBD_CtlError>
            return;
 8007b5c:	e060      	b.n	8007c20 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	0018      	movs	r0, r3
 8007b62:	f000 fa13 	bl	8007f8c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b66:	e05b      	b.n	8007c20 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	0018      	movs	r0, r3
 8007b6c:	f000 fa0e 	bl	8007f8c <USBD_CtlSendStatus>
        break;
 8007b70:	e056      	b.n	8007c20 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007b72:	4b2d      	ldr	r3, [pc, #180]	; (8007c28 <USBD_SetConfig+0x144>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d115      	bne.n	8007ba6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	23a7      	movs	r3, #167	; 0xa7
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	2102      	movs	r1, #2
 8007b82:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8007b84:	4b28      	ldr	r3, [pc, #160]	; (8007c28 <USBD_SetConfig+0x144>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	001a      	movs	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007b8e:	4b26      	ldr	r3, [pc, #152]	; (8007c28 <USBD_SetConfig+0x144>)
 8007b90:	781a      	ldrb	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	0011      	movs	r1, r2
 8007b96:	0018      	movs	r0, r3
 8007b98:	f7ff f8c4 	bl	8006d24 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	0018      	movs	r0, r3
 8007ba0:	f000 f9f4 	bl	8007f8c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ba4:	e03c      	b.n	8007c20 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8007ba6:	4b20      	ldr	r3, [pc, #128]	; (8007c28 <USBD_SetConfig+0x144>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	001a      	movs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d022      	beq.n	8007bfa <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	0011      	movs	r1, r2
 8007bbe:	0018      	movs	r0, r3
 8007bc0:	f7ff f8b0 	bl	8006d24 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007bc4:	4b18      	ldr	r3, [pc, #96]	; (8007c28 <USBD_SetConfig+0x144>)
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	001a      	movs	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007bce:	4b16      	ldr	r3, [pc, #88]	; (8007c28 <USBD_SetConfig+0x144>)
 8007bd0:	781a      	ldrb	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	0011      	movs	r1, r2
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	f7ff f87d 	bl	8006cd6 <USBD_SetClassConfig>
 8007bdc:	0003      	movs	r3, r0
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d106      	bne.n	8007bf0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	0011      	movs	r1, r2
 8007be8:	0018      	movs	r0, r3
 8007bea:	f000 f90b 	bl	8007e04 <USBD_CtlError>
            return;
 8007bee:	e017      	b.n	8007c20 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	f000 f9ca 	bl	8007f8c <USBD_CtlSendStatus>
        break;
 8007bf8:	e012      	b.n	8007c20 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	0018      	movs	r0, r3
 8007bfe:	f000 f9c5 	bl	8007f8c <USBD_CtlSendStatus>
        break;
 8007c02:	e00d      	b.n	8007c20 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	0011      	movs	r1, r2
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	f000 f8fa 	bl	8007e04 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007c10:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <USBD_SetConfig+0x144>)
 8007c12:	781a      	ldrb	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	0011      	movs	r1, r2
 8007c18:	0018      	movs	r0, r3
 8007c1a:	f7ff f883 	bl	8006d24 <USBD_ClrClassConfig>
        break;
 8007c1e:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007c20:	46bd      	mov	sp, r7
 8007c22:	b002      	add	sp, #8
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	46c0      	nop			; (mov r8, r8)
 8007c28:	20000540 	.word	0x20000540

08007c2c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	88db      	ldrh	r3, [r3, #6]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d006      	beq.n	8007c4c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	0011      	movs	r1, r2
 8007c44:	0018      	movs	r0, r3
 8007c46:	f000 f8dd 	bl	8007e04 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c4a:	e026      	b.n	8007c9a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	23a7      	movs	r3, #167	; 0xa7
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	5cd3      	ldrb	r3, [r2, r3]
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	dc02      	bgt.n	8007c5e <USBD_GetConfig+0x32>
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	dc03      	bgt.n	8007c64 <USBD_GetConfig+0x38>
 8007c5c:	e016      	b.n	8007c8c <USBD_GetConfig+0x60>
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d00c      	beq.n	8007c7c <USBD_GetConfig+0x50>
 8007c62:	e013      	b.n	8007c8c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	0019      	movs	r1, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	0018      	movs	r0, r3
 8007c76:	f000 f943 	bl	8007f00 <USBD_CtlSendData>
        break;
 8007c7a:	e00e      	b.n	8007c9a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	1d19      	adds	r1, r3, #4
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	0018      	movs	r0, r3
 8007c86:	f000 f93b 	bl	8007f00 <USBD_CtlSendData>
        break;
 8007c8a:	e006      	b.n	8007c9a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	0011      	movs	r1, r2
 8007c92:	0018      	movs	r0, r3
 8007c94:	f000 f8b6 	bl	8007e04 <USBD_CtlError>
        break;
 8007c98:	46c0      	nop			; (mov r8, r8)
}
 8007c9a:	46c0      	nop			; (mov r8, r8)
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	b002      	add	sp, #8
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	23a7      	movs	r3, #167	; 0xa7
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	5cd3      	ldrb	r3, [r2, r3]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d822      	bhi.n	8007d00 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	88db      	ldrh	r3, [r3, #6]
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d006      	beq.n	8007cd0 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	0011      	movs	r1, r2
 8007cc8:	0018      	movs	r0, r3
 8007cca:	f000 f89b 	bl	8007e04 <USBD_CtlError>
        break;
 8007cce:	e01e      	b.n	8007d0e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	23a9      	movs	r3, #169	; 0xa9
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	58d3      	ldr	r3, [r2, r3]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d005      	beq.n	8007cee <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	330c      	adds	r3, #12
 8007cf2:	0019      	movs	r1, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	0018      	movs	r0, r3
 8007cfa:	f000 f901 	bl	8007f00 <USBD_CtlSendData>
      break;
 8007cfe:	e006      	b.n	8007d0e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	0011      	movs	r1, r2
 8007d06:	0018      	movs	r0, r3
 8007d08:	f000 f87c 	bl	8007e04 <USBD_CtlError>
      break;
 8007d0c:	46c0      	nop			; (mov r8, r8)
  }
}
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	46bd      	mov	sp, r7
 8007d12:	b002      	add	sp, #8
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b082      	sub	sp, #8
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	885b      	ldrh	r3, [r3, #2]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d108      	bne.n	8007d3a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	23a9      	movs	r3, #169	; 0xa9
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	2101      	movs	r1, #1
 8007d30:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	0018      	movs	r0, r3
 8007d36:	f000 f929 	bl	8007f8c <USBD_CtlSendStatus>
  }
}
 8007d3a:	46c0      	nop			; (mov r8, r8)
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	b002      	add	sp, #8
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b082      	sub	sp, #8
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	23a7      	movs	r3, #167	; 0xa7
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	5cd3      	ldrb	r3, [r2, r3]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d80d      	bhi.n	8007d76 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	885b      	ldrh	r3, [r3, #2]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d110      	bne.n	8007d84 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	23a9      	movs	r3, #169	; 0xa9
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	2100      	movs	r1, #0
 8007d6a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	0018      	movs	r0, r3
 8007d70:	f000 f90c 	bl	8007f8c <USBD_CtlSendStatus>
      }
      break;
 8007d74:	e006      	b.n	8007d84 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	0011      	movs	r1, r2
 8007d7c:	0018      	movs	r0, r3
 8007d7e:	f000 f841 	bl	8007e04 <USBD_CtlError>
      break;
 8007d82:	e000      	b.n	8007d86 <USBD_ClrFeature+0x44>
      break;
 8007d84:	46c0      	nop			; (mov r8, r8)
  }
}
 8007d86:	46c0      	nop			; (mov r8, r8)
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	b002      	add	sp, #8
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781a      	ldrb	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	785a      	ldrb	r2, [r3, #1]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	3302      	adds	r3, #2
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	3303      	adds	r3, #3
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	021b      	lsls	r3, r3, #8
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	18d3      	adds	r3, r2, r3
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	3305      	adds	r3, #5
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	021b      	lsls	r3, r3, #8
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	18d3      	adds	r3, r2, r3
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	3306      	adds	r3, #6
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	3307      	adds	r3, #7
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	021b      	lsls	r3, r3, #8
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	18d3      	adds	r3, r2, r3
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	80da      	strh	r2, [r3, #6]

}
 8007dfc:	46c0      	nop			; (mov r8, r8)
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	b002      	add	sp, #8
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2180      	movs	r1, #128	; 0x80
 8007e12:	0018      	movs	r0, r3
 8007e14:	f000 fcb0 	bl	8008778 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	0018      	movs	r0, r3
 8007e1e:	f000 fcab 	bl	8008778 <USBD_LL_StallEP>
}
 8007e22:	46c0      	nop			; (mov r8, r8)
 8007e24:	46bd      	mov	sp, r7
 8007e26:	b002      	add	sp, #8
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e2a:	b590      	push	{r4, r7, lr}
 8007e2c:	b087      	sub	sp, #28
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e36:	2417      	movs	r4, #23
 8007e38:	193b      	adds	r3, r7, r4
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d03c      	beq.n	8007ebe <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	0018      	movs	r0, r3
 8007e48:	f000 f83d 	bl	8007ec6 <USBD_GetLen>
 8007e4c:	0003      	movs	r3, r0
 8007e4e:	3301      	adds	r3, #1
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	18db      	adds	r3, r3, r3
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007e5a:	193b      	adds	r3, r7, r4
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	193a      	adds	r2, r7, r4
 8007e60:	1c59      	adds	r1, r3, #1
 8007e62:	7011      	strb	r1, [r2, #0]
 8007e64:	001a      	movs	r2, r3
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	189b      	adds	r3, r3, r2
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	7812      	ldrb	r2, [r2, #0]
 8007e6e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007e70:	193b      	adds	r3, r7, r4
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	193a      	adds	r2, r7, r4
 8007e76:	1c59      	adds	r1, r3, #1
 8007e78:	7011      	strb	r1, [r2, #0]
 8007e7a:	001a      	movs	r2, r3
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	189b      	adds	r3, r3, r2
 8007e80:	2203      	movs	r2, #3
 8007e82:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007e84:	e017      	b.n	8007eb6 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	60fa      	str	r2, [r7, #12]
 8007e8c:	2417      	movs	r4, #23
 8007e8e:	193a      	adds	r2, r7, r4
 8007e90:	7812      	ldrb	r2, [r2, #0]
 8007e92:	1939      	adds	r1, r7, r4
 8007e94:	1c50      	adds	r0, r2, #1
 8007e96:	7008      	strb	r0, [r1, #0]
 8007e98:	0011      	movs	r1, r2
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	1852      	adds	r2, r2, r1
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007ea2:	193b      	adds	r3, r7, r4
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	193a      	adds	r2, r7, r4
 8007ea8:	1c59      	adds	r1, r3, #1
 8007eaa:	7011      	strb	r1, [r2, #0]
 8007eac:	001a      	movs	r2, r3
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	189b      	adds	r3, r3, r2
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e3      	bne.n	8007e86 <USBD_GetString+0x5c>
    }
  }
}
 8007ebe:	46c0      	nop			; (mov r8, r8)
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	b007      	add	sp, #28
 8007ec4:	bd90      	pop	{r4, r7, pc}

08007ec6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b084      	sub	sp, #16
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ece:	230f      	movs	r3, #15
 8007ed0:	18fb      	adds	r3, r7, r3
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8007ed6:	e008      	b.n	8007eea <USBD_GetLen+0x24>
  {
    len++;
 8007ed8:	210f      	movs	r1, #15
 8007eda:	187b      	adds	r3, r7, r1
 8007edc:	781a      	ldrb	r2, [r3, #0]
 8007ede:	187b      	adds	r3, r7, r1
 8007ee0:	3201      	adds	r2, #1
 8007ee2:	701a      	strb	r2, [r3, #0]
    buf++;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1f2      	bne.n	8007ed8 <USBD_GetLen+0x12>
  }

  return len;
 8007ef2:	230f      	movs	r3, #15
 8007ef4:	18fb      	adds	r3, r7, r3
 8007ef6:	781b      	ldrb	r3, [r3, #0]
}
 8007ef8:	0018      	movs	r0, r3
 8007efa:	46bd      	mov	sp, r7
 8007efc:	b004      	add	sp, #16
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	1dbb      	adds	r3, r7, #6
 8007f0c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	23a5      	movs	r3, #165	; 0xa5
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	2102      	movs	r1, #2
 8007f16:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8007f18:	1dbb      	adds	r3, r7, #6
 8007f1a:	881a      	ldrh	r2, [r3, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007f20:	1dbb      	adds	r3, r7, #6
 8007f22:	881a      	ldrh	r2, [r3, #0]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f28:	1dbb      	adds	r3, r7, #6
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	2100      	movs	r1, #0
 8007f32:	f000 fcd3 	bl	80088dc <USBD_LL_Transmit>

  return USBD_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	0018      	movs	r0, r3
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	b004      	add	sp, #16
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	1dbb      	adds	r3, r7, #6
 8007f4c:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f4e:	1dbb      	adds	r3, r7, #6
 8007f50:	881b      	ldrh	r3, [r3, #0]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	2100      	movs	r1, #0
 8007f58:	f000 fcc0 	bl	80088dc <USBD_LL_Transmit>

  return USBD_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	0018      	movs	r0, r3
 8007f60:	46bd      	mov	sp, r7
 8007f62:	b004      	add	sp, #16
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	1dbb      	adds	r3, r7, #6
 8007f72:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f74:	1dbb      	adds	r3, r7, #6
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	f000 fce4 	bl	800894a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	0018      	movs	r0, r3
 8007f86:	46bd      	mov	sp, r7
 8007f88:	b004      	add	sp, #16
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	23a5      	movs	r3, #165	; 0xa5
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	2104      	movs	r1, #4
 8007f9c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	f000 fc99 	bl	80088dc <USBD_LL_Transmit>

  return USBD_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	0018      	movs	r0, r3
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	b002      	add	sp, #8
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	23a5      	movs	r3, #165	; 0xa5
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	2105      	movs	r1, #5
 8007fc4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	2300      	movs	r3, #0
 8007fca:	2200      	movs	r2, #0
 8007fcc:	2100      	movs	r1, #0
 8007fce:	f000 fcbc 	bl	800894a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	0018      	movs	r0, r3
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	b002      	add	sp, #8
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007fe0:	4914      	ldr	r1, [pc, #80]	; (8008034 <MX_USB_DEVICE_Init+0x58>)
 8007fe2:	4b15      	ldr	r3, [pc, #84]	; (8008038 <MX_USB_DEVICE_Init+0x5c>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	0018      	movs	r0, r3
 8007fe8:	f7fe fe0e 	bl	8006c08 <USBD_Init>
 8007fec:	1e03      	subs	r3, r0, #0
 8007fee:	d001      	beq.n	8007ff4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ff0:	f7f8 faf2 	bl	80005d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8007ff4:	4a11      	ldr	r2, [pc, #68]	; (800803c <MX_USB_DEVICE_Init+0x60>)
 8007ff6:	4b10      	ldr	r3, [pc, #64]	; (8008038 <MX_USB_DEVICE_Init+0x5c>)
 8007ff8:	0011      	movs	r1, r2
 8007ffa:	0018      	movs	r0, r3
 8007ffc:	f7fe fe35 	bl	8006c6a <USBD_RegisterClass>
 8008000:	1e03      	subs	r3, r0, #0
 8008002:	d001      	beq.n	8008008 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8008004:	f7f8 fae8 	bl	80005d8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8008008:	4a0d      	ldr	r2, [pc, #52]	; (8008040 <MX_USB_DEVICE_Init+0x64>)
 800800a:	4b0b      	ldr	r3, [pc, #44]	; (8008038 <MX_USB_DEVICE_Init+0x5c>)
 800800c:	0011      	movs	r1, r2
 800800e:	0018      	movs	r0, r3
 8008010:	f7fd fd3a 	bl	8005a88 <USBD_MSC_RegisterStorage>
 8008014:	1e03      	subs	r3, r0, #0
 8008016:	d001      	beq.n	800801c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8008018:	f7f8 fade 	bl	80005d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800801c:	4b06      	ldr	r3, [pc, #24]	; (8008038 <MX_USB_DEVICE_Init+0x5c>)
 800801e:	0018      	movs	r0, r3
 8008020:	f7fe fe43 	bl	8006caa <USBD_Start>
 8008024:	1e03      	subs	r3, r0, #0
 8008026:	d001      	beq.n	800802c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8008028:	f7f8 fad6 	bl	80005d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800802c:	46c0      	nop			; (mov r8, r8)
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	46c0      	nop			; (mov r8, r8)
 8008034:	200004b0 	.word	0x200004b0
 8008038:	20000544 	.word	0x20000544
 800803c:	2000040c 	.word	0x2000040c
 8008040:	20000500 	.word	0x20000500

08008044 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	0002      	movs	r2, r0
 800804c:	6039      	str	r1, [r7, #0]
 800804e:	1dfb      	adds	r3, r7, #7
 8008050:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2212      	movs	r2, #18
 8008056:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008058:	4b02      	ldr	r3, [pc, #8]	; (8008064 <USBD_FS_DeviceDescriptor+0x20>)
}
 800805a:	0018      	movs	r0, r3
 800805c:	46bd      	mov	sp, r7
 800805e:	b002      	add	sp, #8
 8008060:	bd80      	pop	{r7, pc}
 8008062:	46c0      	nop			; (mov r8, r8)
 8008064:	200004cc 	.word	0x200004cc

08008068 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	0002      	movs	r2, r0
 8008070:	6039      	str	r1, [r7, #0]
 8008072:	1dfb      	adds	r3, r7, #7
 8008074:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2204      	movs	r2, #4
 800807a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800807c:	4b02      	ldr	r3, [pc, #8]	; (8008088 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800807e:	0018      	movs	r0, r3
 8008080:	46bd      	mov	sp, r7
 8008082:	b002      	add	sp, #8
 8008084:	bd80      	pop	{r7, pc}
 8008086:	46c0      	nop			; (mov r8, r8)
 8008088:	200004e0 	.word	0x200004e0

0800808c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	0002      	movs	r2, r0
 8008094:	6039      	str	r1, [r7, #0]
 8008096:	1dfb      	adds	r3, r7, #7
 8008098:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800809a:	1dfb      	adds	r3, r7, #7
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d106      	bne.n	80080b0 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	4908      	ldr	r1, [pc, #32]	; (80080c8 <USBD_FS_ProductStrDescriptor+0x3c>)
 80080a6:	4b09      	ldr	r3, [pc, #36]	; (80080cc <USBD_FS_ProductStrDescriptor+0x40>)
 80080a8:	0018      	movs	r0, r3
 80080aa:	f7ff febe 	bl	8007e2a <USBD_GetString>
 80080ae:	e005      	b.n	80080bc <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	4905      	ldr	r1, [pc, #20]	; (80080c8 <USBD_FS_ProductStrDescriptor+0x3c>)
 80080b4:	4b05      	ldr	r3, [pc, #20]	; (80080cc <USBD_FS_ProductStrDescriptor+0x40>)
 80080b6:	0018      	movs	r0, r3
 80080b8:	f7ff feb7 	bl	8007e2a <USBD_GetString>
  }
  return USBD_StrDesc;
 80080bc:	4b02      	ldr	r3, [pc, #8]	; (80080c8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80080be:	0018      	movs	r0, r3
 80080c0:	46bd      	mov	sp, r7
 80080c2:	b002      	add	sp, #8
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	46c0      	nop			; (mov r8, r8)
 80080c8:	20000808 	.word	0x20000808
 80080cc:	08008b0c 	.word	0x08008b0c

080080d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	0002      	movs	r2, r0
 80080d8:	6039      	str	r1, [r7, #0]
 80080da:	1dfb      	adds	r3, r7, #7
 80080dc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	4904      	ldr	r1, [pc, #16]	; (80080f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080e2:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80080e4:	0018      	movs	r0, r3
 80080e6:	f7ff fea0 	bl	8007e2a <USBD_GetString>
  return USBD_StrDesc;
 80080ea:	4b02      	ldr	r3, [pc, #8]	; (80080f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80080ec:	0018      	movs	r0, r3
 80080ee:	46bd      	mov	sp, r7
 80080f0:	b002      	add	sp, #8
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	20000808 	.word	0x20000808
 80080f8:	08008b20 	.word	0x08008b20

080080fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	0002      	movs	r2, r0
 8008104:	6039      	str	r1, [r7, #0]
 8008106:	1dfb      	adds	r3, r7, #7
 8008108:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	221a      	movs	r2, #26
 800810e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008110:	f000 f84c 	bl	80081ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008114:	4b02      	ldr	r3, [pc, #8]	; (8008120 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8008116:	0018      	movs	r0, r3
 8008118:	46bd      	mov	sp, r7
 800811a:	b002      	add	sp, #8
 800811c:	bd80      	pop	{r7, pc}
 800811e:	46c0      	nop			; (mov r8, r8)
 8008120:	200004e4 	.word	0x200004e4

08008124 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	0002      	movs	r2, r0
 800812c:	6039      	str	r1, [r7, #0]
 800812e:	1dfb      	adds	r3, r7, #7
 8008130:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8008132:	1dfb      	adds	r3, r7, #7
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d106      	bne.n	8008148 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	4908      	ldr	r1, [pc, #32]	; (8008160 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800813e:	4b09      	ldr	r3, [pc, #36]	; (8008164 <USBD_FS_ConfigStrDescriptor+0x40>)
 8008140:	0018      	movs	r0, r3
 8008142:	f7ff fe72 	bl	8007e2a <USBD_GetString>
 8008146:	e005      	b.n	8008154 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	4905      	ldr	r1, [pc, #20]	; (8008160 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800814c:	4b05      	ldr	r3, [pc, #20]	; (8008164 <USBD_FS_ConfigStrDescriptor+0x40>)
 800814e:	0018      	movs	r0, r3
 8008150:	f7ff fe6b 	bl	8007e2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008154:	4b02      	ldr	r3, [pc, #8]	; (8008160 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8008156:	0018      	movs	r0, r3
 8008158:	46bd      	mov	sp, r7
 800815a:	b002      	add	sp, #8
 800815c:	bd80      	pop	{r7, pc}
 800815e:	46c0      	nop			; (mov r8, r8)
 8008160:	20000808 	.word	0x20000808
 8008164:	08008b34 	.word	0x08008b34

08008168 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	0002      	movs	r2, r0
 8008170:	6039      	str	r1, [r7, #0]
 8008172:	1dfb      	adds	r3, r7, #7
 8008174:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8008176:	1dfb      	adds	r3, r7, #7
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d106      	bne.n	800818c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	4908      	ldr	r1, [pc, #32]	; (80081a4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8008182:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8008184:	0018      	movs	r0, r3
 8008186:	f7ff fe50 	bl	8007e2a <USBD_GetString>
 800818a:	e005      	b.n	8008198 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	4905      	ldr	r1, [pc, #20]	; (80081a4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8008190:	4b05      	ldr	r3, [pc, #20]	; (80081a8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8008192:	0018      	movs	r0, r3
 8008194:	f7ff fe49 	bl	8007e2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008198:	4b02      	ldr	r3, [pc, #8]	; (80081a4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800819a:	0018      	movs	r0, r3
 800819c:	46bd      	mov	sp, r7
 800819e:	b002      	add	sp, #8
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	46c0      	nop			; (mov r8, r8)
 80081a4:	20000808 	.word	0x20000808
 80081a8:	08008b40 	.word	0x08008b40

080081ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80081b2:	4b10      	ldr	r3, [pc, #64]	; (80081f4 <Get_SerialNum+0x48>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80081b8:	4b0f      	ldr	r3, [pc, #60]	; (80081f8 <Get_SerialNum+0x4c>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80081be:	4b0f      	ldr	r3, [pc, #60]	; (80081fc <Get_SerialNum+0x50>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	18d3      	adds	r3, r2, r3
 80081ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00b      	beq.n	80081ea <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081d2:	490b      	ldr	r1, [pc, #44]	; (8008200 <Get_SerialNum+0x54>)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2208      	movs	r2, #8
 80081d8:	0018      	movs	r0, r3
 80081da:	f000 f815 	bl	8008208 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081de:	4909      	ldr	r1, [pc, #36]	; (8008204 <Get_SerialNum+0x58>)
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2204      	movs	r2, #4
 80081e4:	0018      	movs	r0, r3
 80081e6:	f000 f80f 	bl	8008208 <IntToUnicode>
  }
}
 80081ea:	46c0      	nop			; (mov r8, r8)
 80081ec:	46bd      	mov	sp, r7
 80081ee:	b004      	add	sp, #16
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	46c0      	nop			; (mov r8, r8)
 80081f4:	1ff80050 	.word	0x1ff80050
 80081f8:	1ff80054 	.word	0x1ff80054
 80081fc:	1ff80058 	.word	0x1ff80058
 8008200:	200004e6 	.word	0x200004e6
 8008204:	200004f6 	.word	0x200004f6

08008208 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	1dfb      	adds	r3, r7, #7
 8008214:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8008216:	2117      	movs	r1, #23
 8008218:	187b      	adds	r3, r7, r1
 800821a:	2200      	movs	r2, #0
 800821c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800821e:	187b      	adds	r3, r7, r1
 8008220:	2200      	movs	r2, #0
 8008222:	701a      	strb	r2, [r3, #0]
 8008224:	e02f      	b.n	8008286 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	0f1b      	lsrs	r3, r3, #28
 800822a:	2b09      	cmp	r3, #9
 800822c:	d80d      	bhi.n	800824a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	0f1b      	lsrs	r3, r3, #28
 8008232:	b2da      	uxtb	r2, r3
 8008234:	2317      	movs	r3, #23
 8008236:	18fb      	adds	r3, r7, r3
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	0019      	movs	r1, r3
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	185b      	adds	r3, r3, r1
 8008242:	3230      	adds	r2, #48	; 0x30
 8008244:	b2d2      	uxtb	r2, r2
 8008246:	701a      	strb	r2, [r3, #0]
 8008248:	e00c      	b.n	8008264 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	0f1b      	lsrs	r3, r3, #28
 800824e:	b2da      	uxtb	r2, r3
 8008250:	2317      	movs	r3, #23
 8008252:	18fb      	adds	r3, r7, r3
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	0019      	movs	r1, r3
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	185b      	adds	r3, r3, r1
 800825e:	3237      	adds	r2, #55	; 0x37
 8008260:	b2d2      	uxtb	r2, r2
 8008262:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800826a:	2117      	movs	r1, #23
 800826c:	187b      	adds	r3, r7, r1
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	3301      	adds	r3, #1
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	18d3      	adds	r3, r2, r3
 8008278:	2200      	movs	r2, #0
 800827a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800827c:	187b      	adds	r3, r7, r1
 800827e:	781a      	ldrb	r2, [r3, #0]
 8008280:	187b      	adds	r3, r7, r1
 8008282:	3201      	adds	r2, #1
 8008284:	701a      	strb	r2, [r3, #0]
 8008286:	2317      	movs	r3, #23
 8008288:	18fa      	adds	r2, r7, r3
 800828a:	1dfb      	adds	r3, r7, #7
 800828c:	7812      	ldrb	r2, [r2, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	429a      	cmp	r2, r3
 8008292:	d3c8      	bcc.n	8008226 <IntToUnicode+0x1e>
  }
}
 8008294:	46c0      	nop			; (mov r8, r8)
 8008296:	46c0      	nop			; (mov r8, r8)
 8008298:	46bd      	mov	sp, r7
 800829a:	b006      	add	sp, #24
 800829c:	bd80      	pop	{r7, pc}

0800829e <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b082      	sub	sp, #8
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	0002      	movs	r2, r0
 80082a6:	1dfb      	adds	r3, r7, #7
 80082a8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80082aa:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80082ac:	0018      	movs	r0, r3
 80082ae:	46bd      	mov	sp, r7
 80082b0:	b002      	add	sp, #8
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	607a      	str	r2, [r7, #4]
 80082be:	230f      	movs	r3, #15
 80082c0:	18fb      	adds	r3, r7, r3
 80082c2:	1c02      	adds	r2, r0, #0
 80082c4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	2202      	movs	r2, #2
 80082ca:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2280      	movs	r2, #128	; 0x80
 80082d0:	0092      	lsls	r2, r2, #2
 80082d2:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80082d4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80082d6:	0018      	movs	r0, r3
 80082d8:	46bd      	mov	sp, r7
 80082da:	b004      	add	sp, #16
 80082dc:	bd80      	pop	{r7, pc}

080082de <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	0002      	movs	r2, r0
 80082e6:	1dfb      	adds	r3, r7, #7
 80082e8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80082ea:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80082ec:	0018      	movs	r0, r3
 80082ee:	46bd      	mov	sp, r7
 80082f0:	b002      	add	sp, #8
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	0002      	movs	r2, r0
 80082fc:	1dfb      	adds	r3, r7, #7
 80082fe:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008300:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008302:	0018      	movs	r0, r3
 8008304:	46bd      	mov	sp, r7
 8008306:	b002      	add	sp, #8
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	607a      	str	r2, [r7, #4]
 8008316:	0019      	movs	r1, r3
 8008318:	230f      	movs	r3, #15
 800831a:	18fb      	adds	r3, r7, r3
 800831c:	1c02      	adds	r2, r0, #0
 800831e:	701a      	strb	r2, [r3, #0]
 8008320:	200c      	movs	r0, #12
 8008322:	183b      	adds	r3, r7, r0
 8008324:	1c0a      	adds	r2, r1, #0
 8008326:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 6 */
	memcpy(buf, (void*)&etx_buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	025a      	lsls	r2, r3, #9
 800832c:	4b07      	ldr	r3, [pc, #28]	; (800834c <STORAGE_Read_FS+0x40>)
 800832e:	18d1      	adds	r1, r2, r3
 8008330:	183b      	adds	r3, r7, r0
 8008332:	881b      	ldrh	r3, [r3, #0]
 8008334:	025b      	lsls	r3, r3, #9
 8008336:	001a      	movs	r2, r3
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	0018      	movs	r0, r3
 800833c:	f000 fbd0 	bl	8008ae0 <memcpy>
	  return (USBD_OK);
 8008340:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008342:	0018      	movs	r0, r3
 8008344:	46bd      	mov	sp, r7
 8008346:	b004      	add	sp, #16
 8008348:	bd80      	pop	{r7, pc}
 800834a:	46c0      	nop			; (mov r8, r8)
 800834c:	20000000 	.word	0x20000000

08008350 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8008350:	b590      	push	{r4, r7, lr}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	607a      	str	r2, [r7, #4]
 800835a:	0019      	movs	r1, r3
 800835c:	230f      	movs	r3, #15
 800835e:	18fb      	adds	r3, r7, r3
 8008360:	1c02      	adds	r2, r0, #0
 8008362:	701a      	strb	r2, [r3, #0]
 8008364:	240c      	movs	r4, #12
 8008366:	193b      	adds	r3, r7, r4
 8008368:	1c0a      	adds	r2, r1, #0
 800836a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
	memcpy((void*)&etx_buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	025a      	lsls	r2, r3, #9
 8008370:	4b07      	ldr	r3, [pc, #28]	; (8008390 <STORAGE_Write_FS+0x40>)
 8008372:	18d0      	adds	r0, r2, r3
 8008374:	193b      	adds	r3, r7, r4
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	025b      	lsls	r3, r3, #9
 800837a:	001a      	movs	r2, r3
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	0019      	movs	r1, r3
 8008380:	f000 fbae 	bl	8008ae0 <memcpy>
	  return (USBD_OK);
 8008384:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8008386:	0018      	movs	r0, r3
 8008388:	46bd      	mov	sp, r7
 800838a:	b005      	add	sp, #20
 800838c:	bd90      	pop	{r4, r7, pc}
 800838e:	46c0      	nop			; (mov r8, r8)
 8008390:	20000000 	.word	0x20000000

08008394 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8008398:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800839a:	0018      	movs	r0, r3
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a0a      	ldr	r2, [pc, #40]	; (80083d8 <HAL_PCD_MspInit+0x38>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d10e      	bne.n	80083d0 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80083b2:	4b0a      	ldr	r3, [pc, #40]	; (80083dc <HAL_PCD_MspInit+0x3c>)
 80083b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083b6:	4b09      	ldr	r3, [pc, #36]	; (80083dc <HAL_PCD_MspInit+0x3c>)
 80083b8:	2180      	movs	r1, #128	; 0x80
 80083ba:	0409      	lsls	r1, r1, #16
 80083bc:	430a      	orrs	r2, r1
 80083be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80083c0:	2200      	movs	r2, #0
 80083c2:	2100      	movs	r1, #0
 80083c4:	201f      	movs	r0, #31
 80083c6:	f7f8 fa91 	bl	80008ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80083ca:	201f      	movs	r0, #31
 80083cc:	f7f8 faa3 	bl	8000916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80083d0:	46c0      	nop			; (mov r8, r8)
 80083d2:	46bd      	mov	sp, r7
 80083d4:	b002      	add	sp, #8
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	40005c00 	.word	0x40005c00
 80083dc:	40021000 	.word	0x40021000

080083e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	23bc      	movs	r3, #188	; 0xbc
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	58d2      	ldr	r2, [r2, r3]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	21ac      	movs	r1, #172	; 0xac
 80083f4:	0089      	lsls	r1, r1, #2
 80083f6:	468c      	mov	ip, r1
 80083f8:	4463      	add	r3, ip
 80083fa:	0019      	movs	r1, r3
 80083fc:	0010      	movs	r0, r2
 80083fe:	f7fe fca7 	bl	8006d50 <USBD_LL_SetupStage>
}
 8008402:	46c0      	nop			; (mov r8, r8)
 8008404:	46bd      	mov	sp, r7
 8008406:	b002      	add	sp, #8
 8008408:	bd80      	pop	{r7, pc}

0800840a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800840a:	b590      	push	{r4, r7, lr}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	000a      	movs	r2, r1
 8008414:	1cfb      	adds	r3, r7, #3
 8008416:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	23bc      	movs	r3, #188	; 0xbc
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	58d4      	ldr	r4, [r2, r3]
 8008420:	1cfb      	adds	r3, r7, #3
 8008422:	781a      	ldrb	r2, [r3, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	23be      	movs	r3, #190	; 0xbe
 8008428:	0059      	lsls	r1, r3, #1
 800842a:	0013      	movs	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	189b      	adds	r3, r3, r2
 8008430:	00db      	lsls	r3, r3, #3
 8008432:	18c3      	adds	r3, r0, r3
 8008434:	185b      	adds	r3, r3, r1
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	1cfb      	adds	r3, r7, #3
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	0019      	movs	r1, r3
 800843e:	0020      	movs	r0, r4
 8008440:	f7fe fce4 	bl	8006e0c <USBD_LL_DataOutStage>
}
 8008444:	46c0      	nop			; (mov r8, r8)
 8008446:	46bd      	mov	sp, r7
 8008448:	b003      	add	sp, #12
 800844a:	bd90      	pop	{r4, r7, pc}

0800844c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	000a      	movs	r2, r1
 8008456:	1cfb      	adds	r3, r7, #3
 8008458:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	23bc      	movs	r3, #188	; 0xbc
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	58d0      	ldr	r0, [r2, r3]
 8008462:	1cfb      	adds	r3, r7, #3
 8008464:	781a      	ldrb	r2, [r3, #0]
 8008466:	6879      	ldr	r1, [r7, #4]
 8008468:	0013      	movs	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	189b      	adds	r3, r3, r2
 800846e:	00db      	lsls	r3, r3, #3
 8008470:	18cb      	adds	r3, r1, r3
 8008472:	333c      	adds	r3, #60	; 0x3c
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	1cfb      	adds	r3, r7, #3
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	0019      	movs	r1, r3
 800847c:	f7fe fd48 	bl	8006f10 <USBD_LL_DataInStage>
}
 8008480:	46c0      	nop			; (mov r8, r8)
 8008482:	46bd      	mov	sp, r7
 8008484:	b002      	add	sp, #8
 8008486:	bd80      	pop	{r7, pc}

08008488 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	23bc      	movs	r3, #188	; 0xbc
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	58d3      	ldr	r3, [r2, r3]
 8008498:	0018      	movs	r0, r3
 800849a:	f7fe fe7f 	bl	800719c <USBD_LL_SOF>
}
 800849e:	46c0      	nop			; (mov r8, r8)
 80084a0:	46bd      	mov	sp, r7
 80084a2:	b002      	add	sp, #8
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084ae:	230f      	movs	r3, #15
 80084b0:	18fb      	adds	r3, r7, r3
 80084b2:	2201      	movs	r2, #1
 80084b4:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d001      	beq.n	80084c2 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80084be:	f7f8 f88b 	bl	80005d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	23bc      	movs	r3, #188	; 0xbc
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	58d2      	ldr	r2, [r2, r3]
 80084ca:	230f      	movs	r3, #15
 80084cc:	18fb      	adds	r3, r7, r3
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	0019      	movs	r1, r3
 80084d2:	0010      	movs	r0, r2
 80084d4:	f7fe fe21 	bl	800711a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	23bc      	movs	r3, #188	; 0xbc
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	58d3      	ldr	r3, [r2, r3]
 80084e0:	0018      	movs	r0, r3
 80084e2:	f7fe fdd2 	bl	800708a <USBD_LL_Reset>
}
 80084e6:	46c0      	nop			; (mov r8, r8)
 80084e8:	46bd      	mov	sp, r7
 80084ea:	b004      	add	sp, #16
 80084ec:	bd80      	pop	{r7, pc}
	...

080084f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	23bc      	movs	r3, #188	; 0xbc
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	58d3      	ldr	r3, [r2, r3]
 8008500:	0018      	movs	r0, r3
 8008502:	f7fe fe1b 	bl	800713c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d005      	beq.n	800851a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800850e:	4b05      	ldr	r3, [pc, #20]	; (8008524 <HAL_PCD_SuspendCallback+0x34>)
 8008510:	691a      	ldr	r2, [r3, #16]
 8008512:	4b04      	ldr	r3, [pc, #16]	; (8008524 <HAL_PCD_SuspendCallback+0x34>)
 8008514:	2106      	movs	r1, #6
 8008516:	430a      	orrs	r2, r1
 8008518:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800851a:	46c0      	nop			; (mov r8, r8)
 800851c:	46bd      	mov	sp, r7
 800851e:	b002      	add	sp, #8
 8008520:	bd80      	pop	{r7, pc}
 8008522:	46c0      	nop			; (mov r8, r8)
 8008524:	e000ed00 	.word	0xe000ed00

08008528 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d007      	beq.n	8008548 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008538:	4b09      	ldr	r3, [pc, #36]	; (8008560 <HAL_PCD_ResumeCallback+0x38>)
 800853a:	691a      	ldr	r2, [r3, #16]
 800853c:	4b08      	ldr	r3, [pc, #32]	; (8008560 <HAL_PCD_ResumeCallback+0x38>)
 800853e:	2106      	movs	r1, #6
 8008540:	438a      	bics	r2, r1
 8008542:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8008544:	f000 fa62 	bl	8008a0c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	23bc      	movs	r3, #188	; 0xbc
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	58d3      	ldr	r3, [r2, r3]
 8008550:	0018      	movs	r0, r3
 8008552:	f7fe fe0b 	bl	800716c <USBD_LL_Resume>
}
 8008556:	46c0      	nop			; (mov r8, r8)
 8008558:	46bd      	mov	sp, r7
 800855a:	b002      	add	sp, #8
 800855c:	bd80      	pop	{r7, pc}
 800855e:	46c0      	nop			; (mov r8, r8)
 8008560:	e000ed00 	.word	0xe000ed00

08008564 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800856c:	4a27      	ldr	r2, [pc, #156]	; (800860c <USBD_LL_Init+0xa8>)
 800856e:	23bc      	movs	r3, #188	; 0xbc
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	6879      	ldr	r1, [r7, #4]
 8008574:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	23b0      	movs	r3, #176	; 0xb0
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4923      	ldr	r1, [pc, #140]	; (800860c <USBD_LL_Init+0xa8>)
 800857e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8008580:	4b22      	ldr	r3, [pc, #136]	; (800860c <USBD_LL_Init+0xa8>)
 8008582:	4a23      	ldr	r2, [pc, #140]	; (8008610 <USBD_LL_Init+0xac>)
 8008584:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008586:	4b21      	ldr	r3, [pc, #132]	; (800860c <USBD_LL_Init+0xa8>)
 8008588:	2208      	movs	r2, #8
 800858a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800858c:	4b1f      	ldr	r3, [pc, #124]	; (800860c <USBD_LL_Init+0xa8>)
 800858e:	2202      	movs	r2, #2
 8008590:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008592:	4b1e      	ldr	r3, [pc, #120]	; (800860c <USBD_LL_Init+0xa8>)
 8008594:	2202      	movs	r2, #2
 8008596:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008598:	4b1c      	ldr	r3, [pc, #112]	; (800860c <USBD_LL_Init+0xa8>)
 800859a:	2200      	movs	r2, #0
 800859c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800859e:	4b1b      	ldr	r3, [pc, #108]	; (800860c <USBD_LL_Init+0xa8>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80085a4:	4b19      	ldr	r3, [pc, #100]	; (800860c <USBD_LL_Init+0xa8>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80085aa:	4b18      	ldr	r3, [pc, #96]	; (800860c <USBD_LL_Init+0xa8>)
 80085ac:	0018      	movs	r0, r3
 80085ae:	f7f8 f9cf 	bl	8000950 <HAL_PCD_Init>
 80085b2:	1e03      	subs	r3, r0, #0
 80085b4:	d001      	beq.n	80085ba <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80085b6:	f7f8 f80f 	bl	80005d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	23b0      	movs	r3, #176	; 0xb0
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	58d0      	ldr	r0, [r2, r3]
 80085c2:	2318      	movs	r3, #24
 80085c4:	2200      	movs	r2, #0
 80085c6:	2100      	movs	r1, #0
 80085c8:	f7f9 ff9c 	bl	8002504 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	23b0      	movs	r3, #176	; 0xb0
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	58d0      	ldr	r0, [r2, r3]
 80085d4:	2358      	movs	r3, #88	; 0x58
 80085d6:	2200      	movs	r2, #0
 80085d8:	2180      	movs	r1, #128	; 0x80
 80085da:	f7f9 ff93 	bl	8002504 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	23b0      	movs	r3, #176	; 0xb0
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	58d0      	ldr	r0, [r2, r3]
 80085e6:	2398      	movs	r3, #152	; 0x98
 80085e8:	2200      	movs	r2, #0
 80085ea:	2181      	movs	r1, #129	; 0x81
 80085ec:	f7f9 ff8a 	bl	8002504 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	23b0      	movs	r3, #176	; 0xb0
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	58d0      	ldr	r0, [r2, r3]
 80085f8:	23d8      	movs	r3, #216	; 0xd8
 80085fa:	2200      	movs	r2, #0
 80085fc:	2101      	movs	r1, #1
 80085fe:	f7f9 ff81 	bl	8002504 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	0018      	movs	r0, r3
 8008606:	46bd      	mov	sp, r7
 8008608:	b002      	add	sp, #8
 800860a:	bd80      	pop	{r7, pc}
 800860c:	20000a08 	.word	0x20000a08
 8008610:	40005c00 	.word	0x40005c00

08008614 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800861c:	210f      	movs	r1, #15
 800861e:	187b      	adds	r3, r7, r1
 8008620:	2200      	movs	r2, #0
 8008622:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008624:	260e      	movs	r6, #14
 8008626:	19bb      	adds	r3, r7, r6
 8008628:	2200      	movs	r2, #0
 800862a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	23b0      	movs	r3, #176	; 0xb0
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	58d3      	ldr	r3, [r2, r3]
 8008634:	000d      	movs	r5, r1
 8008636:	187c      	adds	r4, r7, r1
 8008638:	0018      	movs	r0, r3
 800863a:	f7f8 fa89 	bl	8000b50 <HAL_PCD_Start>
 800863e:	0003      	movs	r3, r0
 8008640:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008642:	19bc      	adds	r4, r7, r6
 8008644:	197b      	adds	r3, r7, r5
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	0018      	movs	r0, r3
 800864a:	f000 f9e6 	bl	8008a1a <USBD_Get_USB_Status>
 800864e:	0003      	movs	r3, r0
 8008650:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008652:	19bb      	adds	r3, r7, r6
 8008654:	781b      	ldrb	r3, [r3, #0]
}
 8008656:	0018      	movs	r0, r3
 8008658:	46bd      	mov	sp, r7
 800865a:	b005      	add	sp, #20
 800865c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800865e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800865e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008660:	b085      	sub	sp, #20
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	000c      	movs	r4, r1
 8008668:	0010      	movs	r0, r2
 800866a:	0019      	movs	r1, r3
 800866c:	1cfb      	adds	r3, r7, #3
 800866e:	1c22      	adds	r2, r4, #0
 8008670:	701a      	strb	r2, [r3, #0]
 8008672:	1cbb      	adds	r3, r7, #2
 8008674:	1c02      	adds	r2, r0, #0
 8008676:	701a      	strb	r2, [r3, #0]
 8008678:	003b      	movs	r3, r7
 800867a:	1c0a      	adds	r2, r1, #0
 800867c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800867e:	260f      	movs	r6, #15
 8008680:	19bb      	adds	r3, r7, r6
 8008682:	2200      	movs	r2, #0
 8008684:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008686:	250e      	movs	r5, #14
 8008688:	197b      	adds	r3, r7, r5
 800868a:	2200      	movs	r2, #0
 800868c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	23b0      	movs	r3, #176	; 0xb0
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	58d0      	ldr	r0, [r2, r3]
 8008696:	19bc      	adds	r4, r7, r6
 8008698:	1cbb      	adds	r3, r7, #2
 800869a:	781d      	ldrb	r5, [r3, #0]
 800869c:	003b      	movs	r3, r7
 800869e:	881a      	ldrh	r2, [r3, #0]
 80086a0:	1cfb      	adds	r3, r7, #3
 80086a2:	7819      	ldrb	r1, [r3, #0]
 80086a4:	002b      	movs	r3, r5
 80086a6:	f7f8 fbe8 	bl	8000e7a <HAL_PCD_EP_Open>
 80086aa:	0003      	movs	r3, r0
 80086ac:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086ae:	250e      	movs	r5, #14
 80086b0:	197c      	adds	r4, r7, r5
 80086b2:	19bb      	adds	r3, r7, r6
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	0018      	movs	r0, r3
 80086b8:	f000 f9af 	bl	8008a1a <USBD_Get_USB_Status>
 80086bc:	0003      	movs	r3, r0
 80086be:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80086c0:	197b      	adds	r3, r7, r5
 80086c2:	781b      	ldrb	r3, [r3, #0]
}
 80086c4:	0018      	movs	r0, r3
 80086c6:	46bd      	mov	sp, r7
 80086c8:	b005      	add	sp, #20
 80086ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086cc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	000a      	movs	r2, r1
 80086d6:	1cfb      	adds	r3, r7, #3
 80086d8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086da:	210f      	movs	r1, #15
 80086dc:	187b      	adds	r3, r7, r1
 80086de:	2200      	movs	r2, #0
 80086e0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086e2:	260e      	movs	r6, #14
 80086e4:	19bb      	adds	r3, r7, r6
 80086e6:	2200      	movs	r2, #0
 80086e8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	23b0      	movs	r3, #176	; 0xb0
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	58d2      	ldr	r2, [r2, r3]
 80086f2:	000d      	movs	r5, r1
 80086f4:	187c      	adds	r4, r7, r1
 80086f6:	1cfb      	adds	r3, r7, #3
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	0019      	movs	r1, r3
 80086fc:	0010      	movs	r0, r2
 80086fe:	f7f8 fc2b 	bl	8000f58 <HAL_PCD_EP_Close>
 8008702:	0003      	movs	r3, r0
 8008704:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008706:	19bc      	adds	r4, r7, r6
 8008708:	197b      	adds	r3, r7, r5
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	0018      	movs	r0, r3
 800870e:	f000 f984 	bl	8008a1a <USBD_Get_USB_Status>
 8008712:	0003      	movs	r3, r0
 8008714:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008716:	19bb      	adds	r3, r7, r6
 8008718:	781b      	ldrb	r3, [r3, #0]
}
 800871a:	0018      	movs	r0, r3
 800871c:	46bd      	mov	sp, r7
 800871e:	b005      	add	sp, #20
 8008720:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008722 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008722:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008724:	b085      	sub	sp, #20
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	000a      	movs	r2, r1
 800872c:	1cfb      	adds	r3, r7, #3
 800872e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008730:	210f      	movs	r1, #15
 8008732:	187b      	adds	r3, r7, r1
 8008734:	2200      	movs	r2, #0
 8008736:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008738:	260e      	movs	r6, #14
 800873a:	19bb      	adds	r3, r7, r6
 800873c:	2200      	movs	r2, #0
 800873e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	23b0      	movs	r3, #176	; 0xb0
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	58d2      	ldr	r2, [r2, r3]
 8008748:	000d      	movs	r5, r1
 800874a:	187c      	adds	r4, r7, r1
 800874c:	1cfb      	adds	r3, r7, #3
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	0019      	movs	r1, r3
 8008752:	0010      	movs	r0, r2
 8008754:	f7f8 fd97 	bl	8001286 <HAL_PCD_EP_Flush>
 8008758:	0003      	movs	r3, r0
 800875a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800875c:	19bc      	adds	r4, r7, r6
 800875e:	197b      	adds	r3, r7, r5
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	0018      	movs	r0, r3
 8008764:	f000 f959 	bl	8008a1a <USBD_Get_USB_Status>
 8008768:	0003      	movs	r3, r0
 800876a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800876c:	19bb      	adds	r3, r7, r6
 800876e:	781b      	ldrb	r3, [r3, #0]
}
 8008770:	0018      	movs	r0, r3
 8008772:	46bd      	mov	sp, r7
 8008774:	b005      	add	sp, #20
 8008776:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008778 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	000a      	movs	r2, r1
 8008782:	1cfb      	adds	r3, r7, #3
 8008784:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008786:	210f      	movs	r1, #15
 8008788:	187b      	adds	r3, r7, r1
 800878a:	2200      	movs	r2, #0
 800878c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800878e:	260e      	movs	r6, #14
 8008790:	19bb      	adds	r3, r7, r6
 8008792:	2200      	movs	r2, #0
 8008794:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	23b0      	movs	r3, #176	; 0xb0
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	58d2      	ldr	r2, [r2, r3]
 800879e:	000d      	movs	r5, r1
 80087a0:	187c      	adds	r4, r7, r1
 80087a2:	1cfb      	adds	r3, r7, #3
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	0019      	movs	r1, r3
 80087a8:	0010      	movs	r0, r2
 80087aa:	f7f8 fcb2 	bl	8001112 <HAL_PCD_EP_SetStall>
 80087ae:	0003      	movs	r3, r0
 80087b0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087b2:	19bc      	adds	r4, r7, r6
 80087b4:	197b      	adds	r3, r7, r5
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	0018      	movs	r0, r3
 80087ba:	f000 f92e 	bl	8008a1a <USBD_Get_USB_Status>
 80087be:	0003      	movs	r3, r0
 80087c0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80087c2:	19bb      	adds	r3, r7, r6
 80087c4:	781b      	ldrb	r3, [r3, #0]
}
 80087c6:	0018      	movs	r0, r3
 80087c8:	46bd      	mov	sp, r7
 80087ca:	b005      	add	sp, #20
 80087cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080087ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087d0:	b085      	sub	sp, #20
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	000a      	movs	r2, r1
 80087d8:	1cfb      	adds	r3, r7, #3
 80087da:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087dc:	210f      	movs	r1, #15
 80087de:	187b      	adds	r3, r7, r1
 80087e0:	2200      	movs	r2, #0
 80087e2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087e4:	260e      	movs	r6, #14
 80087e6:	19bb      	adds	r3, r7, r6
 80087e8:	2200      	movs	r2, #0
 80087ea:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	23b0      	movs	r3, #176	; 0xb0
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	58d2      	ldr	r2, [r2, r3]
 80087f4:	000d      	movs	r5, r1
 80087f6:	187c      	adds	r4, r7, r1
 80087f8:	1cfb      	adds	r3, r7, #3
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	0019      	movs	r1, r3
 80087fe:	0010      	movs	r0, r2
 8008800:	f7f8 fce3 	bl	80011ca <HAL_PCD_EP_ClrStall>
 8008804:	0003      	movs	r3, r0
 8008806:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008808:	19bc      	adds	r4, r7, r6
 800880a:	197b      	adds	r3, r7, r5
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	0018      	movs	r0, r3
 8008810:	f000 f903 	bl	8008a1a <USBD_Get_USB_Status>
 8008814:	0003      	movs	r3, r0
 8008816:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008818:	19bb      	adds	r3, r7, r6
 800881a:	781b      	ldrb	r3, [r3, #0]
}
 800881c:	0018      	movs	r0, r3
 800881e:	46bd      	mov	sp, r7
 8008820:	b005      	add	sp, #20
 8008822:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008824 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	000a      	movs	r2, r1
 800882e:	1cfb      	adds	r3, r7, #3
 8008830:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	23b0      	movs	r3, #176	; 0xb0
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	58d3      	ldr	r3, [r2, r3]
 800883a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800883c:	1cfb      	adds	r3, r7, #3
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	b25b      	sxtb	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	da0d      	bge.n	8008862 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008846:	1cfb      	adds	r3, r7, #3
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	227f      	movs	r2, #127	; 0x7f
 800884c:	4013      	ands	r3, r2
 800884e:	68f9      	ldr	r1, [r7, #12]
 8008850:	1c5a      	adds	r2, r3, #1
 8008852:	0013      	movs	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	189b      	adds	r3, r3, r2
 8008858:	00db      	lsls	r3, r3, #3
 800885a:	18cb      	adds	r3, r1, r3
 800885c:	3302      	adds	r3, #2
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	e00d      	b.n	800887e <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008862:	1cfb      	adds	r3, r7, #3
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	227f      	movs	r2, #127	; 0x7f
 8008868:	401a      	ands	r2, r3
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	23b5      	movs	r3, #181	; 0xb5
 800886e:	0059      	lsls	r1, r3, #1
 8008870:	0013      	movs	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	189b      	adds	r3, r3, r2
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	18c3      	adds	r3, r0, r3
 800887a:	185b      	adds	r3, r3, r1
 800887c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800887e:	0018      	movs	r0, r3
 8008880:	46bd      	mov	sp, r7
 8008882:	b004      	add	sp, #16
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008886:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008888:	b085      	sub	sp, #20
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	000a      	movs	r2, r1
 8008890:	1cfb      	adds	r3, r7, #3
 8008892:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008894:	210f      	movs	r1, #15
 8008896:	187b      	adds	r3, r7, r1
 8008898:	2200      	movs	r2, #0
 800889a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800889c:	260e      	movs	r6, #14
 800889e:	19bb      	adds	r3, r7, r6
 80088a0:	2200      	movs	r2, #0
 80088a2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	23b0      	movs	r3, #176	; 0xb0
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	58d2      	ldr	r2, [r2, r3]
 80088ac:	000d      	movs	r5, r1
 80088ae:	187c      	adds	r4, r7, r1
 80088b0:	1cfb      	adds	r3, r7, #3
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	0019      	movs	r1, r3
 80088b6:	0010      	movs	r0, r2
 80088b8:	f7f8 fab4 	bl	8000e24 <HAL_PCD_SetAddress>
 80088bc:	0003      	movs	r3, r0
 80088be:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088c0:	19bc      	adds	r4, r7, r6
 80088c2:	197b      	adds	r3, r7, r5
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	0018      	movs	r0, r3
 80088c8:	f000 f8a7 	bl	8008a1a <USBD_Get_USB_Status>
 80088cc:	0003      	movs	r3, r0
 80088ce:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80088d0:	19bb      	adds	r3, r7, r6
 80088d2:	781b      	ldrb	r3, [r3, #0]
}
 80088d4:	0018      	movs	r0, r3
 80088d6:	46bd      	mov	sp, r7
 80088d8:	b005      	add	sp, #20
 80088da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080088dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088de:	b087      	sub	sp, #28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	0008      	movs	r0, r1
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	0019      	movs	r1, r3
 80088ea:	230b      	movs	r3, #11
 80088ec:	18fb      	adds	r3, r7, r3
 80088ee:	1c02      	adds	r2, r0, #0
 80088f0:	701a      	strb	r2, [r3, #0]
 80088f2:	2408      	movs	r4, #8
 80088f4:	193b      	adds	r3, r7, r4
 80088f6:	1c0a      	adds	r2, r1, #0
 80088f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088fa:	2117      	movs	r1, #23
 80088fc:	187b      	adds	r3, r7, r1
 80088fe:	2200      	movs	r2, #0
 8008900:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008902:	2516      	movs	r5, #22
 8008904:	197b      	adds	r3, r7, r5
 8008906:	2200      	movs	r2, #0
 8008908:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	23b0      	movs	r3, #176	; 0xb0
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	58d0      	ldr	r0, [r2, r3]
 8008912:	193b      	adds	r3, r7, r4
 8008914:	881d      	ldrh	r5, [r3, #0]
 8008916:	000e      	movs	r6, r1
 8008918:	187c      	adds	r4, r7, r1
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	230b      	movs	r3, #11
 800891e:	18fb      	adds	r3, r7, r3
 8008920:	7819      	ldrb	r1, [r3, #0]
 8008922:	002b      	movs	r3, r5
 8008924:	f7f8 fbb9 	bl	800109a <HAL_PCD_EP_Transmit>
 8008928:	0003      	movs	r3, r0
 800892a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800892c:	2516      	movs	r5, #22
 800892e:	197c      	adds	r4, r7, r5
 8008930:	19bb      	adds	r3, r7, r6
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	0018      	movs	r0, r3
 8008936:	f000 f870 	bl	8008a1a <USBD_Get_USB_Status>
 800893a:	0003      	movs	r3, r0
 800893c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800893e:	197b      	adds	r3, r7, r5
 8008940:	781b      	ldrb	r3, [r3, #0]
}
 8008942:	0018      	movs	r0, r3
 8008944:	46bd      	mov	sp, r7
 8008946:	b007      	add	sp, #28
 8008948:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800894a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800894a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800894c:	b087      	sub	sp, #28
 800894e:	af00      	add	r7, sp, #0
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	0008      	movs	r0, r1
 8008954:	607a      	str	r2, [r7, #4]
 8008956:	0019      	movs	r1, r3
 8008958:	230b      	movs	r3, #11
 800895a:	18fb      	adds	r3, r7, r3
 800895c:	1c02      	adds	r2, r0, #0
 800895e:	701a      	strb	r2, [r3, #0]
 8008960:	2408      	movs	r4, #8
 8008962:	193b      	adds	r3, r7, r4
 8008964:	1c0a      	adds	r2, r1, #0
 8008966:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008968:	2117      	movs	r1, #23
 800896a:	187b      	adds	r3, r7, r1
 800896c:	2200      	movs	r2, #0
 800896e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008970:	2516      	movs	r5, #22
 8008972:	197b      	adds	r3, r7, r5
 8008974:	2200      	movs	r2, #0
 8008976:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	23b0      	movs	r3, #176	; 0xb0
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	58d0      	ldr	r0, [r2, r3]
 8008980:	193b      	adds	r3, r7, r4
 8008982:	881d      	ldrh	r5, [r3, #0]
 8008984:	000e      	movs	r6, r1
 8008986:	187c      	adds	r4, r7, r1
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	230b      	movs	r3, #11
 800898c:	18fb      	adds	r3, r7, r3
 800898e:	7819      	ldrb	r1, [r3, #0]
 8008990:	002b      	movs	r3, r5
 8008992:	f7f8 fb32 	bl	8000ffa <HAL_PCD_EP_Receive>
 8008996:	0003      	movs	r3, r0
 8008998:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800899a:	2516      	movs	r5, #22
 800899c:	197c      	adds	r4, r7, r5
 800899e:	19bb      	adds	r3, r7, r6
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	0018      	movs	r0, r3
 80089a4:	f000 f839 	bl	8008a1a <USBD_Get_USB_Status>
 80089a8:	0003      	movs	r3, r0
 80089aa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80089ac:	197b      	adds	r3, r7, r5
 80089ae:	781b      	ldrb	r3, [r3, #0]
}
 80089b0:	0018      	movs	r0, r3
 80089b2:	46bd      	mov	sp, r7
 80089b4:	b007      	add	sp, #28
 80089b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089b8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	000a      	movs	r2, r1
 80089c2:	1cfb      	adds	r3, r7, #3
 80089c4:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	23b0      	movs	r3, #176	; 0xb0
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	58d2      	ldr	r2, [r2, r3]
 80089ce:	1cfb      	adds	r3, r7, #3
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	0019      	movs	r1, r3
 80089d4:	0010      	movs	r0, r2
 80089d6:	f7f8 fb47 	bl	8001068 <HAL_PCD_EP_GetRxCount>
 80089da:	0003      	movs	r3, r0
}
 80089dc:	0018      	movs	r0, r3
 80089de:	46bd      	mov	sp, r7
 80089e0:	b002      	add	sp, #8
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80089ec:	4b02      	ldr	r3, [pc, #8]	; (80089f8 <USBD_static_malloc+0x14>)
}
 80089ee:	0018      	movs	r0, r3
 80089f0:	46bd      	mov	sp, r7
 80089f2:	b002      	add	sp, #8
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	46c0      	nop			; (mov r8, r8)
 80089f8:	20000cfc 	.word	0x20000cfc

080089fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]

}
 8008a04:	46c0      	nop			; (mov r8, r8)
 8008a06:	46bd      	mov	sp, r7
 8008a08:	b002      	add	sp, #8
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008a10:	f7f7 fd56 	bl	80004c0 <SystemClock_Config>
}
 8008a14:	46c0      	nop			; (mov r8, r8)
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	0002      	movs	r2, r0
 8008a22:	1dfb      	adds	r3, r7, #7
 8008a24:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a26:	230f      	movs	r3, #15
 8008a28:	18fb      	adds	r3, r7, r3
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8008a2e:	1dfb      	adds	r3, r7, #7
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d017      	beq.n	8008a66 <USBD_Get_USB_Status+0x4c>
 8008a36:	dc1b      	bgt.n	8008a70 <USBD_Get_USB_Status+0x56>
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d00f      	beq.n	8008a5c <USBD_Get_USB_Status+0x42>
 8008a3c:	dc18      	bgt.n	8008a70 <USBD_Get_USB_Status+0x56>
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <USBD_Get_USB_Status+0x2e>
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d005      	beq.n	8008a52 <USBD_Get_USB_Status+0x38>
 8008a46:	e013      	b.n	8008a70 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a48:	230f      	movs	r3, #15
 8008a4a:	18fb      	adds	r3, r7, r3
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	701a      	strb	r2, [r3, #0]
    break;
 8008a50:	e013      	b.n	8008a7a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a52:	230f      	movs	r3, #15
 8008a54:	18fb      	adds	r3, r7, r3
 8008a56:	2202      	movs	r2, #2
 8008a58:	701a      	strb	r2, [r3, #0]
    break;
 8008a5a:	e00e      	b.n	8008a7a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a5c:	230f      	movs	r3, #15
 8008a5e:	18fb      	adds	r3, r7, r3
 8008a60:	2201      	movs	r2, #1
 8008a62:	701a      	strb	r2, [r3, #0]
    break;
 8008a64:	e009      	b.n	8008a7a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a66:	230f      	movs	r3, #15
 8008a68:	18fb      	adds	r3, r7, r3
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	701a      	strb	r2, [r3, #0]
    break;
 8008a6e:	e004      	b.n	8008a7a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8008a70:	230f      	movs	r3, #15
 8008a72:	18fb      	adds	r3, r7, r3
 8008a74:	2202      	movs	r2, #2
 8008a76:	701a      	strb	r2, [r3, #0]
    break;
 8008a78:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8008a7a:	230f      	movs	r3, #15
 8008a7c:	18fb      	adds	r3, r7, r3
 8008a7e:	781b      	ldrb	r3, [r3, #0]
}
 8008a80:	0018      	movs	r0, r3
 8008a82:	46bd      	mov	sp, r7
 8008a84:	b004      	add	sp, #16
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <memset>:
 8008a88:	0003      	movs	r3, r0
 8008a8a:	1882      	adds	r2, r0, r2
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d100      	bne.n	8008a92 <memset+0xa>
 8008a90:	4770      	bx	lr
 8008a92:	7019      	strb	r1, [r3, #0]
 8008a94:	3301      	adds	r3, #1
 8008a96:	e7f9      	b.n	8008a8c <memset+0x4>

08008a98 <__libc_init_array>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	2600      	movs	r6, #0
 8008a9c:	4c0c      	ldr	r4, [pc, #48]	; (8008ad0 <__libc_init_array+0x38>)
 8008a9e:	4d0d      	ldr	r5, [pc, #52]	; (8008ad4 <__libc_init_array+0x3c>)
 8008aa0:	1b64      	subs	r4, r4, r5
 8008aa2:	10a4      	asrs	r4, r4, #2
 8008aa4:	42a6      	cmp	r6, r4
 8008aa6:	d109      	bne.n	8008abc <__libc_init_array+0x24>
 8008aa8:	2600      	movs	r6, #0
 8008aaa:	f000 f823 	bl	8008af4 <_init>
 8008aae:	4c0a      	ldr	r4, [pc, #40]	; (8008ad8 <__libc_init_array+0x40>)
 8008ab0:	4d0a      	ldr	r5, [pc, #40]	; (8008adc <__libc_init_array+0x44>)
 8008ab2:	1b64      	subs	r4, r4, r5
 8008ab4:	10a4      	asrs	r4, r4, #2
 8008ab6:	42a6      	cmp	r6, r4
 8008ab8:	d105      	bne.n	8008ac6 <__libc_init_array+0x2e>
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	00b3      	lsls	r3, r6, #2
 8008abe:	58eb      	ldr	r3, [r5, r3]
 8008ac0:	4798      	blx	r3
 8008ac2:	3601      	adds	r6, #1
 8008ac4:	e7ee      	b.n	8008aa4 <__libc_init_array+0xc>
 8008ac6:	00b3      	lsls	r3, r6, #2
 8008ac8:	58eb      	ldr	r3, [r5, r3]
 8008aca:	4798      	blx	r3
 8008acc:	3601      	adds	r6, #1
 8008ace:	e7f2      	b.n	8008ab6 <__libc_init_array+0x1e>
 8008ad0:	08008d7c 	.word	0x08008d7c
 8008ad4:	08008d7c 	.word	0x08008d7c
 8008ad8:	08008d80 	.word	0x08008d80
 8008adc:	08008d7c 	.word	0x08008d7c

08008ae0 <memcpy>:
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	b510      	push	{r4, lr}
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d100      	bne.n	8008aea <memcpy+0xa>
 8008ae8:	bd10      	pop	{r4, pc}
 8008aea:	5ccc      	ldrb	r4, [r1, r3]
 8008aec:	54c4      	strb	r4, [r0, r3]
 8008aee:	3301      	adds	r3, #1
 8008af0:	e7f8      	b.n	8008ae4 <memcpy+0x4>
	...

08008af4 <_init>:
 8008af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af6:	46c0      	nop			; (mov r8, r8)
 8008af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008afa:	bc08      	pop	{r3}
 8008afc:	469e      	mov	lr, r3
 8008afe:	4770      	bx	lr

08008b00 <_fini>:
 8008b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b02:	46c0      	nop			; (mov r8, r8)
 8008b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b06:	bc08      	pop	{r3}
 8008b08:	469e      	mov	lr, r3
 8008b0a:	4770      	bx	lr
