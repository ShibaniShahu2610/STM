
19_USB_VIRTUAL_COMPORT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b84  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08007c44  08007c44  00017c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007da8  08007da8  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08007da8  08007da8  00017da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007db0  08007db0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007db0  08007db0  00017db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007db4  08007db4  00017db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000121c  20000180  08007f38  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000139c  08007f38  0002139c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc38  00000000  00000000  000201eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028df  00000000  00000000  0002be23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  0002e708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000078c  00000000  00000000  0002f158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000156d9  00000000  00000000  0002f8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e688  00000000  00000000  00044fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000771bc  00000000  00000000  00053645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002328  00000000  00000000  000ca804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000ccb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000180 	.word	0x20000180
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007c2c 	.word	0x08007c2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000184 	.word	0x20000184
 8000104:	08007c2c 	.word	0x08007c2c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 f916 	bl	80006ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f81a 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f88e 	bl	80005e4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004c8:	f006 fe26 	bl	8007118 <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  CDC_Transmit_FS((uint8_t *) data, strlen(data));
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <main+0x3c>)
 80004ce:	681c      	ldr	r4, [r3, #0]
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <main+0x3c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	0018      	movs	r0, r3
 80004d6:	f7ff fe17 	bl	8000108 <strlen>
 80004da:	0003      	movs	r3, r0
 80004dc:	b29b      	uxth	r3, r3
 80004de:	0019      	movs	r1, r3
 80004e0:	0020      	movs	r0, r4
 80004e2:	f006 feb9 	bl	8007258 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 80004e6:	23fa      	movs	r3, #250	; 0xfa
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 f96e 	bl	80007cc <HAL_Delay>
	  CDC_Transmit_FS((uint8_t *) data, strlen(data));
 80004f0:	e7ec      	b.n	80004cc <main+0x14>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	20000000 	.word	0x20000000

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b09d      	sub	sp, #116	; 0x74
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	2438      	movs	r4, #56	; 0x38
 8000500:	193b      	adds	r3, r7, r4
 8000502:	0018      	movs	r0, r3
 8000504:	2338      	movs	r3, #56	; 0x38
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f007 fb59 	bl	8007bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050e:	2324      	movs	r3, #36	; 0x24
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	0018      	movs	r0, r3
 8000514:	2314      	movs	r3, #20
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f007 fb51 	bl	8007bc0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800051e:	003b      	movs	r3, r7
 8000520:	0018      	movs	r0, r3
 8000522:	2324      	movs	r3, #36	; 0x24
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f007 fb4a 	bl	8007bc0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <SystemClock_Config+0xe4>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a2b      	ldr	r2, [pc, #172]	; (80005e0 <SystemClock_Config+0xe8>)
 8000532:	401a      	ands	r2, r3
 8000534:	4b29      	ldr	r3, [pc, #164]	; (80005dc <SystemClock_Config+0xe4>)
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	0109      	lsls	r1, r1, #4
 800053a:	430a      	orrs	r2, r1
 800053c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800053e:	0021      	movs	r1, r4
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2222      	movs	r2, #34	; 0x22
 8000544:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2201      	movs	r2, #1
 800054a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2210      	movs	r2, #16
 8000550:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2201      	movs	r2, #1
 8000556:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2202      	movs	r2, #2
 800055c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2280      	movs	r2, #128	; 0x80
 800056e:	03d2      	lsls	r2, r2, #15
 8000570:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	187b      	adds	r3, r7, r1
 8000574:	0018      	movs	r0, r3
 8000576:	f002 f87d 	bl	8002674 <HAL_RCC_OscConfig>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800057e:	f000 f847 	bl	8000610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	2124      	movs	r1, #36	; 0x24
 8000584:	187b      	adds	r3, r7, r1
 8000586:	220f      	movs	r2, #15
 8000588:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2203      	movs	r2, #3
 800058e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	00d2      	lsls	r2, r2, #3
 80005a2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2101      	movs	r1, #1
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 fc27 	bl	8002dfc <HAL_RCC_ClockConfig>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005b2:	f000 f82d 	bl	8000610 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2240      	movs	r2, #64	; 0x40
 80005ba:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005bc:	003b      	movs	r3, r7
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	04d2      	lsls	r2, r2, #19
 80005c2:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c4:	003b      	movs	r3, r7
 80005c6:	0018      	movs	r0, r3
 80005c8:	f002 fe06 	bl	80031d8 <HAL_RCCEx_PeriphCLKConfig>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80005d0:	f000 f81e 	bl	8000610 <Error_Handler>
  }
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b01d      	add	sp, #116	; 0x74
 80005da:	bd90      	pop	{r4, r7, pc}
 80005dc:	40007000 	.word	0x40007000
 80005e0:	ffffe7ff 	.word	0xffffe7ff

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_GPIO_Init+0x28>)
 80005ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <MX_GPIO_Init+0x28>)
 80005f0:	2101      	movs	r1, #1
 80005f2:	430a      	orrs	r2, r1
 80005f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <MX_GPIO_Init+0x28>)
 80005f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005fa:	2201      	movs	r2, #1
 80005fc:	4013      	ands	r3, r2
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b002      	add	sp, #8
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	40021000 	.word	0x40021000

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000618:	e7fe      	b.n	8000618 <Error_Handler+0x8>
	...

0800061c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_MspInit+0x24>)
 8000622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_MspInit+0x24>)
 8000626:	2101      	movs	r1, #1
 8000628:	430a      	orrs	r2, r1
 800062a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <HAL_MspInit+0x24>)
 800062e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <HAL_MspInit+0x24>)
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	0549      	lsls	r1, r1, #21
 8000636:	430a      	orrs	r2, r1
 8000638:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000648:	e7fe      	b.n	8000648 <NMI_Handler+0x4>

0800064a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler+0x4>

08000650 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000668:	f000 f894 	bl	8000794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <USB_IRQHandler+0x14>)
 800067a:	0018      	movs	r0, r3
 800067c:	f000 face 	bl	8000c1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	20000e88 	.word	0x20000e88

0800068c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800069c:	f7ff fff6 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a2:	490d      	ldr	r1, [pc, #52]	; (80006d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a4:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <LoopForever+0xe>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a8:	e002      	b.n	80006b0 <LoopCopyDataInit>

080006aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ae:	3304      	adds	r3, #4

080006b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b4:	d3f9      	bcc.n	80006aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b8:	4c0a      	ldr	r4, [pc, #40]	; (80006e4 <LoopForever+0x16>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006bc:	e001      	b.n	80006c2 <LoopFillZerobss>

080006be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c0:	3204      	adds	r2, #4

080006c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c4:	d3fb      	bcc.n	80006be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006c6:	f007 fa83 	bl	8007bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006ca:	f7ff fef5 	bl	80004b8 <main>

080006ce <LoopForever>:

LoopForever:
    b LoopForever
 80006ce:	e7fe      	b.n	80006ce <LoopForever>
  ldr   r0, =_estack
 80006d0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80006dc:	08007db8 	.word	0x08007db8
  ldr r2, =_sbss
 80006e0:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80006e4:	2000139c 	.word	0x2000139c

080006e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_COMP_IRQHandler>
	...

080006ec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <HAL_Init+0x3c>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <HAL_Init+0x3c>)
 80006fe:	2140      	movs	r1, #64	; 0x40
 8000700:	430a      	orrs	r2, r1
 8000702:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000704:	2000      	movs	r0, #0
 8000706:	f000 f811 	bl	800072c <HAL_InitTick>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d003      	beq.n	8000716 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	e001      	b.n	800071a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000716:	f7ff ff81 	bl	800061c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	781b      	ldrb	r3, [r3, #0]
}
 800071e:	0018      	movs	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	b002      	add	sp, #8
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	40022000 	.word	0x40022000

0800072c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <HAL_InitTick+0x5c>)
 8000736:	681c      	ldr	r4, [r3, #0]
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <HAL_InitTick+0x60>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	0019      	movs	r1, r3
 800073e:	23fa      	movs	r3, #250	; 0xfa
 8000740:	0098      	lsls	r0, r3, #2
 8000742:	f7ff fce9 	bl	8000118 <__udivsi3>
 8000746:	0003      	movs	r3, r0
 8000748:	0019      	movs	r1, r3
 800074a:	0020      	movs	r0, r4
 800074c:	f7ff fce4 	bl	8000118 <__udivsi3>
 8000750:	0003      	movs	r3, r0
 8000752:	0018      	movs	r0, r3
 8000754:	f000 f92f 	bl	80009b6 <HAL_SYSTICK_Config>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800075c:	2301      	movs	r3, #1
 800075e:	e00f      	b.n	8000780 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b03      	cmp	r3, #3
 8000764:	d80b      	bhi.n	800077e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	2301      	movs	r3, #1
 800076a:	425b      	negs	r3, r3
 800076c:	2200      	movs	r2, #0
 800076e:	0018      	movs	r0, r3
 8000770:	f000 f8fc 	bl	800096c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_InitTick+0x64>)
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800077a:	2300      	movs	r3, #0
 800077c:	e000      	b.n	8000780 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
}
 8000780:	0018      	movs	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	b003      	add	sp, #12
 8000786:	bd90      	pop	{r4, r7, pc}
 8000788:	20000004 	.word	0x20000004
 800078c:	2000000c 	.word	0x2000000c
 8000790:	20000008 	.word	0x20000008

08000794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_IncTick+0x1c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	001a      	movs	r2, r3
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_IncTick+0x20>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	18d2      	adds	r2, r2, r3
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <HAL_IncTick+0x20>)
 80007a6:	601a      	str	r2, [r3, #0]
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	2000000c 	.word	0x2000000c
 80007b4:	200001bc 	.word	0x200001bc

080007b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  return uwTick;
 80007bc:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <HAL_GetTick+0x10>)
 80007be:	681b      	ldr	r3, [r3, #0]
}
 80007c0:	0018      	movs	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	200001bc 	.word	0x200001bc

080007cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007d4:	f7ff fff0 	bl	80007b8 <HAL_GetTick>
 80007d8:	0003      	movs	r3, r0
 80007da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3301      	adds	r3, #1
 80007e4:	d005      	beq.n	80007f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <HAL_Delay+0x44>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	001a      	movs	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	189b      	adds	r3, r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	f7ff ffe0 	bl	80007b8 <HAL_GetTick>
 80007f8:	0002      	movs	r2, r0
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d8f7      	bhi.n	80007f4 <HAL_Delay+0x28>
  {
  }
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b004      	add	sp, #16
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	2000000c 	.word	0x2000000c

08000814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	0002      	movs	r2, r0
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b7f      	cmp	r3, #127	; 0x7f
 8000826:	d809      	bhi.n	800083c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	001a      	movs	r2, r3
 800082e:	231f      	movs	r3, #31
 8000830:	401a      	ands	r2, r3
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <__NVIC_EnableIRQ+0x30>)
 8000834:	2101      	movs	r1, #1
 8000836:	4091      	lsls	r1, r2
 8000838:	000a      	movs	r2, r1
 800083a:	601a      	str	r2, [r3, #0]
  }
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b002      	add	sp, #8
 8000842:	bd80      	pop	{r7, pc}
 8000844:	e000e100 	.word	0xe000e100

08000848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	0002      	movs	r2, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b7f      	cmp	r3, #127	; 0x7f
 800085c:	d828      	bhi.n	80008b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800085e:	4a2f      	ldr	r2, [pc, #188]	; (800091c <__NVIC_SetPriority+0xd4>)
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b25b      	sxtb	r3, r3
 8000866:	089b      	lsrs	r3, r3, #2
 8000868:	33c0      	adds	r3, #192	; 0xc0
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	589b      	ldr	r3, [r3, r2]
 800086e:	1dfa      	adds	r2, r7, #7
 8000870:	7812      	ldrb	r2, [r2, #0]
 8000872:	0011      	movs	r1, r2
 8000874:	2203      	movs	r2, #3
 8000876:	400a      	ands	r2, r1
 8000878:	00d2      	lsls	r2, r2, #3
 800087a:	21ff      	movs	r1, #255	; 0xff
 800087c:	4091      	lsls	r1, r2
 800087e:	000a      	movs	r2, r1
 8000880:	43d2      	mvns	r2, r2
 8000882:	401a      	ands	r2, r3
 8000884:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	019b      	lsls	r3, r3, #6
 800088a:	22ff      	movs	r2, #255	; 0xff
 800088c:	401a      	ands	r2, r3
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	0018      	movs	r0, r3
 8000894:	2303      	movs	r3, #3
 8000896:	4003      	ands	r3, r0
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800089c:	481f      	ldr	r0, [pc, #124]	; (800091c <__NVIC_SetPriority+0xd4>)
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	089b      	lsrs	r3, r3, #2
 80008a6:	430a      	orrs	r2, r1
 80008a8:	33c0      	adds	r3, #192	; 0xc0
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008ae:	e031      	b.n	8000914 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b0:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <__NVIC_SetPriority+0xd8>)
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	0019      	movs	r1, r3
 80008b8:	230f      	movs	r3, #15
 80008ba:	400b      	ands	r3, r1
 80008bc:	3b08      	subs	r3, #8
 80008be:	089b      	lsrs	r3, r3, #2
 80008c0:	3306      	adds	r3, #6
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	18d3      	adds	r3, r2, r3
 80008c6:	3304      	adds	r3, #4
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	1dfa      	adds	r2, r7, #7
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	0011      	movs	r1, r2
 80008d0:	2203      	movs	r2, #3
 80008d2:	400a      	ands	r2, r1
 80008d4:	00d2      	lsls	r2, r2, #3
 80008d6:	21ff      	movs	r1, #255	; 0xff
 80008d8:	4091      	lsls	r1, r2
 80008da:	000a      	movs	r2, r1
 80008dc:	43d2      	mvns	r2, r2
 80008de:	401a      	ands	r2, r3
 80008e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	019b      	lsls	r3, r3, #6
 80008e6:	22ff      	movs	r2, #255	; 0xff
 80008e8:	401a      	ands	r2, r3
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	0018      	movs	r0, r3
 80008f0:	2303      	movs	r3, #3
 80008f2:	4003      	ands	r3, r0
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <__NVIC_SetPriority+0xd8>)
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	001c      	movs	r4, r3
 8000900:	230f      	movs	r3, #15
 8000902:	4023      	ands	r3, r4
 8000904:	3b08      	subs	r3, #8
 8000906:	089b      	lsrs	r3, r3, #2
 8000908:	430a      	orrs	r2, r1
 800090a:	3306      	adds	r3, #6
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	18c3      	adds	r3, r0, r3
 8000910:	3304      	adds	r3, #4
 8000912:	601a      	str	r2, [r3, #0]
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b003      	add	sp, #12
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	1e5a      	subs	r2, r3, #1
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	045b      	lsls	r3, r3, #17
 8000934:	429a      	cmp	r2, r3
 8000936:	d301      	bcc.n	800093c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000938:	2301      	movs	r3, #1
 800093a:	e010      	b.n	800095e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <SysTick_Config+0x44>)
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	3a01      	subs	r2, #1
 8000942:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000944:	2301      	movs	r3, #1
 8000946:	425b      	negs	r3, r3
 8000948:	2103      	movs	r1, #3
 800094a:	0018      	movs	r0, r3
 800094c:	f7ff ff7c 	bl	8000848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <SysTick_Config+0x44>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000956:	4b04      	ldr	r3, [pc, #16]	; (8000968 <SysTick_Config+0x44>)
 8000958:	2207      	movs	r2, #7
 800095a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800095c:	2300      	movs	r3, #0
}
 800095e:	0018      	movs	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	e000e010 	.word	0xe000e010

0800096c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
 8000976:	210f      	movs	r1, #15
 8000978:	187b      	adds	r3, r7, r1
 800097a:	1c02      	adds	r2, r0, #0
 800097c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	187b      	adds	r3, r7, r1
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b25b      	sxtb	r3, r3
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f7ff ff5d 	bl	8000848 <__NVIC_SetPriority>
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b004      	add	sp, #16
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	0002      	movs	r2, r0
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	0018      	movs	r0, r3
 80009aa:	f7ff ff33 	bl	8000814 <__NVIC_EnableIRQ>
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b002      	add	sp, #8
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff ffaf 	bl	8000924 <SysTick_Config>
 80009c6:	0003      	movs	r3, r0
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b002      	add	sp, #8
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80009d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d2:	b08b      	sub	sp, #44	; 0x2c
 80009d4:	af06      	add	r7, sp, #24
 80009d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e0f0      	b.n	8000bc4 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a79      	ldr	r2, [pc, #484]	; (8000bcc <HAL_PCD_Init+0x1fc>)
 80009e6:	5c9b      	ldrb	r3, [r3, r2]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d108      	bne.n	8000a00 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	23aa      	movs	r3, #170	; 0xaa
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	2100      	movs	r1, #0
 80009f6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	0018      	movs	r0, r3
 80009fc:	f006 fd8a 	bl	8007514 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a72      	ldr	r2, [pc, #456]	; (8000bcc <HAL_PCD_Init+0x1fc>)
 8000a04:	2103      	movs	r1, #3
 8000a06:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f002 fd87 	bl	8003520 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a12:	230f      	movs	r3, #15
 8000a14:	18fb      	adds	r3, r7, r3
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
 8000a1a:	e049      	b.n	8000ab0 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000a1c:	200f      	movs	r0, #15
 8000a1e:	183b      	adds	r3, r7, r0
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	1c5a      	adds	r2, r3, #1
 8000a26:	0013      	movs	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	189b      	adds	r3, r3, r2
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	18cb      	adds	r3, r1, r3
 8000a30:	3301      	adds	r3, #1
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000a36:	183b      	adds	r3, r7, r0
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	1c5a      	adds	r2, r3, #1
 8000a3e:	0013      	movs	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	189b      	adds	r3, r3, r2
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	183a      	adds	r2, r7, r0
 8000a48:	7812      	ldrb	r2, [r2, #0]
 8000a4a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000a4c:	183b      	adds	r3, r7, r0
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	0013      	movs	r3, r2
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	189b      	adds	r3, r3, r2
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	18cb      	adds	r3, r1, r3
 8000a5e:	3303      	adds	r3, #3
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000a64:	183b      	adds	r3, r7, r0
 8000a66:	781a      	ldrb	r2, [r3, #0]
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	0013      	movs	r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	189b      	adds	r3, r3, r2
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	18cb      	adds	r3, r1, r3
 8000a74:	3338      	adds	r3, #56	; 0x38
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000a7a:	183b      	adds	r3, r7, r0
 8000a7c:	781a      	ldrb	r2, [r3, #0]
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	0013      	movs	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	189b      	adds	r3, r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	18cb      	adds	r3, r1, r3
 8000a8a:	333c      	adds	r3, #60	; 0x3c
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000a90:	183b      	adds	r3, r7, r0
 8000a92:	781a      	ldrb	r2, [r3, #0]
 8000a94:	6879      	ldr	r1, [r7, #4]
 8000a96:	0013      	movs	r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	189b      	adds	r3, r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	18cb      	adds	r3, r1, r3
 8000aa0:	3340      	adds	r3, #64	; 0x40
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000aa6:	183b      	adds	r3, r7, r0
 8000aa8:	781a      	ldrb	r2, [r3, #0]
 8000aaa:	183b      	adds	r3, r7, r0
 8000aac:	3201      	adds	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	210f      	movs	r1, #15
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	781a      	ldrb	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d3ae      	bcc.n	8000a1c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
 8000ac4:	e056      	b.n	8000b74 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ac6:	240f      	movs	r4, #15
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	236a      	movs	r3, #106	; 0x6a
 8000ad0:	33ff      	adds	r3, #255	; 0xff
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	189b      	adds	r3, r3, r2
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	18c3      	adds	r3, r0, r3
 8000ade:	185b      	adds	r3, r3, r1
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	23b4      	movs	r3, #180	; 0xb4
 8000aec:	0059      	lsls	r1, r3, #1
 8000aee:	0013      	movs	r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	189b      	adds	r3, r3, r2
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	18c3      	adds	r3, r0, r3
 8000af8:	185b      	adds	r3, r3, r1
 8000afa:	193a      	adds	r2, r7, r4
 8000afc:	7812      	ldrb	r2, [r2, #0]
 8000afe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	236c      	movs	r3, #108	; 0x6c
 8000b08:	33ff      	adds	r3, #255	; 0xff
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	0013      	movs	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	189b      	adds	r3, r3, r2
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	18c3      	adds	r3, r0, r3
 8000b16:	185b      	adds	r3, r3, r1
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	781a      	ldrb	r2, [r3, #0]
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	23bc      	movs	r3, #188	; 0xbc
 8000b24:	0059      	lsls	r1, r3, #1
 8000b26:	0013      	movs	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	189b      	adds	r3, r3, r2
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	18c3      	adds	r3, r0, r3
 8000b30:	185b      	adds	r3, r3, r1
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	781a      	ldrb	r2, [r3, #0]
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	23be      	movs	r3, #190	; 0xbe
 8000b3e:	0059      	lsls	r1, r3, #1
 8000b40:	0013      	movs	r3, r2
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	189b      	adds	r3, r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	18c3      	adds	r3, r0, r3
 8000b4a:	185b      	adds	r3, r3, r1
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	781a      	ldrb	r2, [r3, #0]
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	23c0      	movs	r3, #192	; 0xc0
 8000b58:	0059      	lsls	r1, r3, #1
 8000b5a:	0013      	movs	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	189b      	adds	r3, r3, r2
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	18c3      	adds	r3, r0, r3
 8000b64:	185b      	adds	r3, r3, r1
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	3201      	adds	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
 8000b74:	230f      	movs	r3, #15
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	781a      	ldrb	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d3a1      	bcc.n	8000ac6 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6818      	ldr	r0, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	466a      	mov	r2, sp
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	3210      	adds	r2, #16
 8000b90:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000b92:	c170      	stmia	r1!, {r4, r5, r6}
 8000b94:	ca30      	ldmia	r2!, {r4, r5}
 8000b96:	c130      	stmia	r1!, {r4, r5}
 8000b98:	6859      	ldr	r1, [r3, #4]
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	f002 fcd9 	bl	8003554 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2224      	movs	r2, #36	; 0x24
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <HAL_PCD_Init+0x1fc>)
 8000bae:	2101      	movs	r1, #1
 8000bb0:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d103      	bne.n	8000bc2 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f001 fd23 	bl	8002608 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b005      	add	sp, #20
 8000bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bcc:	000002a9 	.word	0x000002a9

08000bd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	23aa      	movs	r3, #170	; 0xaa
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	5cd3      	ldrb	r3, [r2, r3]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d101      	bne.n	8000be8 <HAL_PCD_Start+0x18>
 8000be4:	2302      	movs	r3, #2
 8000be6:	e014      	b.n	8000c12 <HAL_PCD_Start+0x42>
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	23aa      	movs	r3, #170	; 0xaa
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	2101      	movs	r1, #1
 8000bf0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f002 fc7c 	bl	80034f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	0018      	movs	r0, r3
 8000c02:	f004 fc7f 	bl	8005504 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	23aa      	movs	r3, #170	; 0xaa
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	0018      	movs	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f004 fc81 	bl	8005530 <USB_ReadInterrupts>
 8000c2e:	0003      	movs	r3, r0
 8000c30:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	021b      	lsls	r3, r3, #8
 8000c38:	4013      	ands	r3, r2
 8000c3a:	d004      	beq.n	8000c46 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 fb62 	bl	8001308 <PCD_EP_ISR_Handler>

    return;
 8000c44:	e11d      	b.n	8000e82 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	d015      	beq.n	8000c7c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2244      	movs	r2, #68	; 0x44
 8000c56:	5a9b      	ldrh	r3, [r3, r2]
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	498a      	ldr	r1, [pc, #552]	; (8000e88 <HAL_PCD_IRQHandler+0x26c>)
 8000c60:	400a      	ands	r2, r1
 8000c62:	b291      	uxth	r1, r2
 8000c64:	2244      	movs	r2, #68	; 0x44
 8000c66:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f006 fcd5 	bl	800761a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2100      	movs	r1, #0
 8000c74:	0018      	movs	r0, r3
 8000c76:	f000 f915 	bl	8000ea4 <HAL_PCD_SetAddress>

    return;
 8000c7a:	e102      	b.n	8000e82 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	01db      	lsls	r3, r3, #7
 8000c82:	4013      	ands	r3, r2
 8000c84:	d00c      	beq.n	8000ca0 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2244      	movs	r2, #68	; 0x44
 8000c8c:	5a9b      	ldrh	r3, [r3, r2]
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	497d      	ldr	r1, [pc, #500]	; (8000e8c <HAL_PCD_IRQHandler+0x270>)
 8000c96:	400a      	ands	r2, r1
 8000c98:	b291      	uxth	r1, r2
 8000c9a:	2244      	movs	r2, #68	; 0x44
 8000c9c:	5299      	strh	r1, [r3, r2]

    return;
 8000c9e:	e0f0      	b.n	8000e82 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	019b      	lsls	r3, r3, #6
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	d00c      	beq.n	8000cc4 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2244      	movs	r2, #68	; 0x44
 8000cb0:	5a9b      	ldrh	r3, [r3, r2]
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4975      	ldr	r1, [pc, #468]	; (8000e90 <HAL_PCD_IRQHandler+0x274>)
 8000cba:	400a      	ands	r2, r1
 8000cbc:	b291      	uxth	r1, r2
 8000cbe:	2244      	movs	r2, #68	; 0x44
 8000cc0:	5299      	strh	r1, [r3, r2]

    return;
 8000cc2:	e0de      	b.n	8000e82 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	015b      	lsls	r3, r3, #5
 8000cca:	4013      	ands	r3, r2
 8000ccc:	d038      	beq.n	8000d40 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2240      	movs	r2, #64	; 0x40
 8000cd4:	5a9b      	ldrh	r3, [r3, r2]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2104      	movs	r1, #4
 8000cde:	438a      	bics	r2, r1
 8000ce0:	b291      	uxth	r1, r2
 8000ce2:	2240      	movs	r2, #64	; 0x40
 8000ce4:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2240      	movs	r2, #64	; 0x40
 8000cec:	5a9b      	ldrh	r3, [r3, r2]
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2108      	movs	r1, #8
 8000cf6:	438a      	bics	r2, r1
 8000cf8:	b291      	uxth	r1, r2
 8000cfa:	2240      	movs	r2, #64	; 0x40
 8000cfc:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	23b8      	movs	r3, #184	; 0xb8
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	5cd3      	ldrb	r3, [r2, r3]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d109      	bne.n	8000d1e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	23b8      	movs	r3, #184	; 0xb8
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	2100      	movs	r1, #0
 8000d12:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2100      	movs	r1, #0
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f001 fc9f 	bl	800265c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	0018      	movs	r0, r3
 8000d22:	f006 fcbb 	bl	800769c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2244      	movs	r2, #68	; 0x44
 8000d2c:	5a9b      	ldrh	r3, [r3, r2]
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4957      	ldr	r1, [pc, #348]	; (8000e94 <HAL_PCD_IRQHandler+0x278>)
 8000d36:	400a      	ands	r2, r1
 8000d38:	b291      	uxth	r1, r2
 8000d3a:	2244      	movs	r2, #68	; 0x44
 8000d3c:	5299      	strh	r1, [r3, r2]

    return;
 8000d3e:	e0a0      	b.n	8000e82 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	011b      	lsls	r3, r3, #4
 8000d46:	4013      	ands	r3, r2
 8000d48:	d028      	beq.n	8000d9c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2240      	movs	r2, #64	; 0x40
 8000d50:	5a9b      	ldrh	r3, [r3, r2]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2108      	movs	r1, #8
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	b291      	uxth	r1, r2
 8000d5e:	2240      	movs	r2, #64	; 0x40
 8000d60:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2244      	movs	r2, #68	; 0x44
 8000d68:	5a9b      	ldrh	r3, [r3, r2]
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4949      	ldr	r1, [pc, #292]	; (8000e98 <HAL_PCD_IRQHandler+0x27c>)
 8000d72:	400a      	ands	r2, r1
 8000d74:	b291      	uxth	r1, r2
 8000d76:	2244      	movs	r2, #68	; 0x44
 8000d78:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2240      	movs	r2, #64	; 0x40
 8000d80:	5a9b      	ldrh	r3, [r3, r2]
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2104      	movs	r1, #4
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	b291      	uxth	r1, r2
 8000d8e:	2240      	movs	r2, #64	; 0x40
 8000d90:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	0018      	movs	r0, r3
 8000d96:	f006 fc65 	bl	8007664 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000d9a:	e072      	b.n	8000e82 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2280      	movs	r2, #128	; 0x80
 8000da0:	4013      	ands	r3, r2
 8000da2:	d046      	beq.n	8000e32 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2244      	movs	r2, #68	; 0x44
 8000daa:	5a9b      	ldrh	r3, [r3, r2]
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2180      	movs	r1, #128	; 0x80
 8000db4:	438a      	bics	r2, r1
 8000db6:	b291      	uxth	r1, r2
 8000db8:	2244      	movs	r2, #68	; 0x44
 8000dba:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	23b8      	movs	r3, #184	; 0xb8
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	5cd3      	ldrb	r3, [r2, r3]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d12f      	bne.n	8000e28 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2240      	movs	r2, #64	; 0x40
 8000dce:	5a9b      	ldrh	r3, [r3, r2]
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2104      	movs	r1, #4
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	b291      	uxth	r1, r2
 8000ddc:	2240      	movs	r2, #64	; 0x40
 8000dde:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2240      	movs	r2, #64	; 0x40
 8000de6:	5a9b      	ldrh	r3, [r3, r2]
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2108      	movs	r1, #8
 8000df0:	430a      	orrs	r2, r1
 8000df2:	b291      	uxth	r1, r2
 8000df4:	2240      	movs	r2, #64	; 0x40
 8000df6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	23b8      	movs	r3, #184	; 0xb8
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	2101      	movs	r1, #1
 8000e00:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2254      	movs	r2, #84	; 0x54
 8000e08:	5a9b      	ldrh	r3, [r3, r2]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	089b      	lsrs	r3, r3, #2
 8000e0e:	223c      	movs	r2, #60	; 0x3c
 8000e10:	4013      	ands	r3, r2
 8000e12:	0019      	movs	r1, r3
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	23b9      	movs	r3, #185	; 0xb9
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2101      	movs	r1, #1
 8000e20:	0018      	movs	r0, r3
 8000e22:	f001 fc1b 	bl	800265c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000e26:	e02c      	b.n	8000e82 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f006 fc1a 	bl	8007664 <HAL_PCD_SuspendCallback>
    return;
 8000e30:	e027      	b.n	8000e82 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d010      	beq.n	8000e5e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2244      	movs	r2, #68	; 0x44
 8000e42:	5a9b      	ldrh	r3, [r3, r2]
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4914      	ldr	r1, [pc, #80]	; (8000e9c <HAL_PCD_IRQHandler+0x280>)
 8000e4c:	400a      	ands	r2, r1
 8000e4e:	b291      	uxth	r1, r2
 8000e50:	2244      	movs	r2, #68	; 0x44
 8000e52:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	0018      	movs	r0, r3
 8000e58:	f006 fbd0 	bl	80075fc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000e5c:	e011      	b.n	8000e82 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4013      	ands	r3, r2
 8000e66:	d00c      	beq.n	8000e82 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2244      	movs	r2, #68	; 0x44
 8000e6e:	5a9b      	ldrh	r3, [r3, r2]
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	490a      	ldr	r1, [pc, #40]	; (8000ea0 <HAL_PCD_IRQHandler+0x284>)
 8000e78:	400a      	ands	r2, r1
 8000e7a:	b291      	uxth	r1, r2
 8000e7c:	2244      	movs	r2, #68	; 0x44
 8000e7e:	5299      	strh	r1, [r3, r2]

    return;
 8000e80:	46c0      	nop			; (mov r8, r8)
  }
}
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b004      	add	sp, #16
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	fffffbff 	.word	0xfffffbff
 8000e8c:	ffffbfff 	.word	0xffffbfff
 8000e90:	ffffdfff 	.word	0xffffdfff
 8000e94:	ffffefff 	.word	0xffffefff
 8000e98:	fffff7ff 	.word	0xfffff7ff
 8000e9c:	fffffdff 	.word	0xfffffdff
 8000ea0:	fffffeff 	.word	0xfffffeff

08000ea4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	000a      	movs	r2, r1
 8000eae:	1cfb      	adds	r3, r7, #3
 8000eb0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	23aa      	movs	r3, #170	; 0xaa
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	5cd3      	ldrb	r3, [r2, r3]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d101      	bne.n	8000ec2 <HAL_PCD_SetAddress+0x1e>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e017      	b.n	8000ef2 <HAL_PCD_SetAddress+0x4e>
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	23aa      	movs	r3, #170	; 0xaa
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	2101      	movs	r1, #1
 8000eca:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	1cfa      	adds	r2, r7, #3
 8000ed0:	2124      	movs	r1, #36	; 0x24
 8000ed2:	7812      	ldrb	r2, [r2, #0]
 8000ed4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	1cfb      	adds	r3, r7, #3
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	0019      	movs	r1, r3
 8000ee0:	0010      	movs	r0, r2
 8000ee2:	f004 fafb 	bl	80054dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	23aa      	movs	r3, #170	; 0xaa
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	2100      	movs	r1, #0
 8000eee:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000efa:	b590      	push	{r4, r7, lr}
 8000efc:	b085      	sub	sp, #20
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	000c      	movs	r4, r1
 8000f04:	0010      	movs	r0, r2
 8000f06:	0019      	movs	r1, r3
 8000f08:	1cfb      	adds	r3, r7, #3
 8000f0a:	1c22      	adds	r2, r4, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	003b      	movs	r3, r7
 8000f10:	1c02      	adds	r2, r0, #0
 8000f12:	801a      	strh	r2, [r3, #0]
 8000f14:	1cbb      	adds	r3, r7, #2
 8000f16:	1c0a      	adds	r2, r1, #0
 8000f18:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000f1a:	230b      	movs	r3, #11
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f22:	1cfb      	adds	r3, r7, #3
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	da0f      	bge.n	8000f4c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f2c:	1cfb      	adds	r3, r7, #3
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2207      	movs	r2, #7
 8000f32:	4013      	ands	r3, r2
 8000f34:	1c5a      	adds	r2, r3, #1
 8000f36:	0013      	movs	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	189b      	adds	r3, r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	18d3      	adds	r3, r2, r3
 8000f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2201      	movs	r2, #1
 8000f48:	705a      	strb	r2, [r3, #1]
 8000f4a:	e00f      	b.n	8000f6c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f4c:	1cfb      	adds	r3, r7, #3
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2207      	movs	r2, #7
 8000f52:	401a      	ands	r2, r3
 8000f54:	0013      	movs	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	189b      	adds	r3, r3, r2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	3369      	adds	r3, #105	; 0x69
 8000f5e:	33ff      	adds	r3, #255	; 0xff
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	18d3      	adds	r3, r2, r3
 8000f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000f6c:	1cfb      	adds	r3, r7, #3
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2207      	movs	r2, #7
 8000f72:	4013      	ands	r3, r2
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000f7a:	003b      	movs	r3, r7
 8000f7c:	881a      	ldrh	r2, [r3, #0]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	1cba      	adds	r2, r7, #2
 8000f86:	7812      	ldrb	r2, [r2, #0]
 8000f88:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000f8a:	1cbb      	adds	r3, r7, #2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d102      	bne.n	8000f98 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2200      	movs	r2, #0
 8000f96:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	23aa      	movs	r3, #170	; 0xaa
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	5cd3      	ldrb	r3, [r2, r3]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d101      	bne.n	8000fa8 <HAL_PCD_EP_Open+0xae>
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	e013      	b.n	8000fd0 <HAL_PCD_EP_Open+0xd6>
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	23aa      	movs	r3, #170	; 0xaa
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	2101      	movs	r1, #1
 8000fb0:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	0011      	movs	r1, r2
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f002 faf2 	bl	80035a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	23aa      	movs	r3, #170	; 0xaa
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	54d1      	strb	r1, [r2, r3]

  return ret;
 8000fca:	230b      	movs	r3, #11
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	781b      	ldrb	r3, [r3, #0]
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b005      	add	sp, #20
 8000fd6:	bd90      	pop	{r4, r7, pc}

08000fd8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	000a      	movs	r2, r1
 8000fe2:	1cfb      	adds	r3, r7, #3
 8000fe4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000fe6:	1cfb      	adds	r3, r7, #3
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da0f      	bge.n	8001010 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ff0:	1cfb      	adds	r3, r7, #3
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	0013      	movs	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	189b      	adds	r3, r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	18d3      	adds	r3, r2, r3
 8001006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2201      	movs	r2, #1
 800100c:	705a      	strb	r2, [r3, #1]
 800100e:	e00f      	b.n	8001030 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001010:	1cfb      	adds	r3, r7, #3
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2207      	movs	r2, #7
 8001016:	401a      	ands	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	189b      	adds	r3, r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	3369      	adds	r3, #105	; 0x69
 8001022:	33ff      	adds	r3, #255	; 0xff
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	18d3      	adds	r3, r2, r3
 8001028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2200      	movs	r2, #0
 800102e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001030:	1cfb      	adds	r3, r7, #3
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2207      	movs	r2, #7
 8001036:	4013      	ands	r3, r2
 8001038:	b2da      	uxtb	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	23aa      	movs	r3, #170	; 0xaa
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	5cd3      	ldrb	r3, [r2, r3]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d101      	bne.n	800104e <HAL_PCD_EP_Close+0x76>
 800104a:	2302      	movs	r3, #2
 800104c:	e011      	b.n	8001072 <HAL_PCD_EP_Close+0x9a>
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	23aa      	movs	r3, #170	; 0xaa
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	2101      	movs	r1, #1
 8001056:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	0011      	movs	r1, r2
 8001060:	0018      	movs	r0, r3
 8001062:	f002 fe41 	bl	8003ce8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	23aa      	movs	r3, #170	; 0xaa
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	2100      	movs	r1, #0
 800106e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b004      	add	sp, #16
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	200b      	movs	r0, #11
 8001088:	183b      	adds	r3, r7, r0
 800108a:	1c0a      	adds	r2, r1, #0
 800108c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800108e:	0001      	movs	r1, r0
 8001090:	187b      	adds	r3, r7, r1
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2207      	movs	r2, #7
 8001096:	401a      	ands	r2, r3
 8001098:	0013      	movs	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	189b      	adds	r3, r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	3369      	adds	r3, #105	; 0x69
 80010a2:	33ff      	adds	r3, #255	; 0xff
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	18d3      	adds	r3, r2, r3
 80010a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	2200      	movs	r2, #0
 80010ba:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	2200      	movs	r2, #0
 80010c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2207      	movs	r2, #7
 80010c8:	4013      	ands	r3, r2
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	0011      	movs	r1, r2
 80010d8:	0018      	movs	r0, r3
 80010da:	f002 ffc5 	bl	8004068 <USB_EPStartXfer>

  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	0018      	movs	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b006      	add	sp, #24
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	000a      	movs	r2, r1
 80010f2:	1cfb      	adds	r3, r7, #3
 80010f4:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80010f6:	1cfb      	adds	r3, r7, #3
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2207      	movs	r2, #7
 80010fc:	401a      	ands	r2, r3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	23c2      	movs	r3, #194	; 0xc2
 8001102:	0059      	lsls	r1, r3, #1
 8001104:	0013      	movs	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	189b      	adds	r3, r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	18c3      	adds	r3, r0, r3
 800110e:	185b      	adds	r3, r3, r1
 8001110:	681b      	ldr	r3, [r3, #0]
}
 8001112:	0018      	movs	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	b002      	add	sp, #8
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	200b      	movs	r0, #11
 8001128:	183b      	adds	r3, r7, r0
 800112a:	1c0a      	adds	r2, r1, #0
 800112c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800112e:	183b      	adds	r3, r7, r0
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2207      	movs	r2, #7
 8001134:	4013      	ands	r3, r2
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	0013      	movs	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	189b      	adds	r3, r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	18d3      	adds	r3, r2, r3
 8001144:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2224      	movs	r2, #36	; 0x24
 8001156:	2101      	movs	r1, #1
 8001158:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2201      	movs	r2, #1
 800116a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800116c:	183b      	adds	r3, r7, r0
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2207      	movs	r2, #7
 8001172:	4013      	ands	r3, r2
 8001174:	b2da      	uxtb	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	0011      	movs	r1, r2
 8001182:	0018      	movs	r0, r3
 8001184:	f002 ff70 	bl	8004068 <USB_EPStartXfer>

  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	0018      	movs	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	b006      	add	sp, #24
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	000a      	movs	r2, r1
 800119c:	1cfb      	adds	r3, r7, #3
 800119e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80011a0:	1cfb      	adds	r3, r7, #3
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2207      	movs	r2, #7
 80011a6:	401a      	ands	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d901      	bls.n	80011b4 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e046      	b.n	8001242 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80011b4:	1cfb      	adds	r3, r7, #3
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	da0f      	bge.n	80011de <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011be:	1cfb      	adds	r3, r7, #3
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2207      	movs	r2, #7
 80011c4:	4013      	ands	r3, r2
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	0013      	movs	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	189b      	adds	r3, r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	18d3      	adds	r3, r2, r3
 80011d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2201      	movs	r2, #1
 80011da:	705a      	strb	r2, [r3, #1]
 80011dc:	e00d      	b.n	80011fa <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80011de:	1cfb      	adds	r3, r7, #3
 80011e0:	781a      	ldrb	r2, [r3, #0]
 80011e2:	0013      	movs	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	189b      	adds	r3, r3, r2
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	3369      	adds	r3, #105	; 0x69
 80011ec:	33ff      	adds	r3, #255	; 0xff
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	18d3      	adds	r3, r2, r3
 80011f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2201      	movs	r2, #1
 80011fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001200:	1cfb      	adds	r3, r7, #3
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2207      	movs	r2, #7
 8001206:	4013      	ands	r3, r2
 8001208:	b2da      	uxtb	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	23aa      	movs	r3, #170	; 0xaa
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	5cd3      	ldrb	r3, [r2, r3]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d101      	bne.n	800121e <HAL_PCD_EP_SetStall+0x8c>
 800121a:	2302      	movs	r3, #2
 800121c:	e011      	b.n	8001242 <HAL_PCD_EP_SetStall+0xb0>
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	23aa      	movs	r3, #170	; 0xaa
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	2101      	movs	r1, #1
 8001226:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	0011      	movs	r1, r2
 8001230:	0018      	movs	r0, r3
 8001232:	f004 f851 	bl	80052d8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	23aa      	movs	r3, #170	; 0xaa
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	2100      	movs	r1, #0
 800123e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	0018      	movs	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	b004      	add	sp, #16
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	000a      	movs	r2, r1
 8001254:	1cfb      	adds	r3, r7, #3
 8001256:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001258:	1cfb      	adds	r3, r7, #3
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	220f      	movs	r2, #15
 800125e:	401a      	ands	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	429a      	cmp	r2, r3
 8001266:	d901      	bls.n	800126c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e048      	b.n	80012fe <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800126c:	1cfb      	adds	r3, r7, #3
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b25b      	sxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	da0f      	bge.n	8001296 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001276:	1cfb      	adds	r3, r7, #3
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2207      	movs	r2, #7
 800127c:	4013      	ands	r3, r2
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	0013      	movs	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	189b      	adds	r3, r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	18d3      	adds	r3, r2, r3
 800128c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2201      	movs	r2, #1
 8001292:	705a      	strb	r2, [r3, #1]
 8001294:	e00f      	b.n	80012b6 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001296:	1cfb      	adds	r3, r7, #3
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2207      	movs	r2, #7
 800129c:	401a      	ands	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	189b      	adds	r3, r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	3369      	adds	r3, #105	; 0x69
 80012a8:	33ff      	adds	r3, #255	; 0xff
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	18d3      	adds	r3, r2, r3
 80012ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2200      	movs	r2, #0
 80012b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012bc:	1cfb      	adds	r3, r7, #3
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2207      	movs	r2, #7
 80012c2:	4013      	ands	r3, r2
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	23aa      	movs	r3, #170	; 0xaa
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	5cd3      	ldrb	r3, [r2, r3]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_PCD_EP_ClrStall+0x90>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e011      	b.n	80012fe <HAL_PCD_EP_ClrStall+0xb4>
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	23aa      	movs	r3, #170	; 0xaa
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	2101      	movs	r1, #1
 80012e2:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	0011      	movs	r1, r2
 80012ec:	0018      	movs	r0, r3
 80012ee:	f004 f843 	bl	8005378 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	23aa      	movs	r3, #170	; 0xaa
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	2100      	movs	r1, #0
 80012fa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	0018      	movs	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	b004      	add	sp, #16
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b096      	sub	sp, #88	; 0x58
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001310:	f000 fbec 	bl	8001aec <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	204e      	movs	r0, #78	; 0x4e
 800131a:	183b      	adds	r3, r7, r0
 800131c:	2144      	movs	r1, #68	; 0x44
 800131e:	5a52      	ldrh	r2, [r2, r1]
 8001320:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001322:	183b      	adds	r3, r7, r0
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	244d      	movs	r4, #77	; 0x4d
 800132a:	193b      	adds	r3, r7, r4
 800132c:	210f      	movs	r1, #15
 800132e:	400a      	ands	r2, r1
 8001330:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001332:	193b      	adds	r3, r7, r4
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d000      	beq.n	800133c <PCD_EP_ISR_Handler+0x34>
 800133a:	e18f      	b.n	800165c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800133c:	183b      	adds	r3, r7, r0
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	2210      	movs	r2, #16
 8001342:	4013      	ands	r3, r2
 8001344:	d155      	bne.n	80013f2 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	b29a      	uxth	r2, r3
 800134e:	200e      	movs	r0, #14
 8001350:	183b      	adds	r3, r7, r0
 8001352:	49bb      	ldr	r1, [pc, #748]	; (8001640 <PCD_EP_ISR_Handler+0x338>)
 8001354:	400a      	ands	r2, r1
 8001356:	801a      	strh	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	183a      	adds	r2, r7, r0
 800135e:	8812      	ldrh	r2, [r2, #0]
 8001360:	49b8      	ldr	r1, [pc, #736]	; (8001644 <PCD_EP_ISR_Handler+0x33c>)
 8001362:	430a      	orrs	r2, r1
 8001364:	b292      	uxth	r2, r2
 8001366:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3328      	adds	r3, #40	; 0x28
 800136c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2250      	movs	r2, #80	; 0x50
 8001374:	5a9b      	ldrh	r3, [r3, r2]
 8001376:	b29b      	uxth	r3, r3
 8001378:	001a      	movs	r2, r3
 800137a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	18d2      	adds	r2, r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	18d3      	adds	r3, r2, r3
 8001388:	4aaf      	ldr	r2, [pc, #700]	; (8001648 <PCD_EP_ISR_Handler+0x340>)
 800138a:	4694      	mov	ip, r2
 800138c:	4463      	add	r3, ip
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	059b      	lsls	r3, r3, #22
 8001392:	0d9a      	lsrs	r2, r3, #22
 8001394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001396:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800139a:	695a      	ldr	r2, [r3, #20]
 800139c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	18d2      	adds	r2, r2, r3
 80013a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2100      	movs	r1, #0
 80013aa:	0018      	movs	r0, r3
 80013ac:	f006 f908 	bl	80075c0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2224      	movs	r2, #36	; 0x24
 80013b4:	5c9b      	ldrb	r3, [r3, r2]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <PCD_EP_ISR_Handler+0xb8>
 80013bc:	f000 fb96 	bl	8001aec <PCD_EP_ISR_Handler+0x7e4>
 80013c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <PCD_EP_ISR_Handler+0xc4>
 80013c8:	f000 fb90 	bl	8001aec <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2224      	movs	r2, #36	; 0x24
 80013d0:	5c9b      	ldrb	r3, [r3, r2]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2280      	movs	r2, #128	; 0x80
 80013d6:	4252      	negs	r2, r2
 80013d8:	4313      	orrs	r3, r2
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	b291      	uxth	r1, r2
 80013e2:	224c      	movs	r2, #76	; 0x4c
 80013e4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2224      	movs	r2, #36	; 0x24
 80013ea:	2100      	movs	r1, #0
 80013ec:	5499      	strb	r1, [r3, r2]
 80013ee:	f000 fb7d 	bl	8001aec <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3369      	adds	r3, #105	; 0x69
 80013f6:	33ff      	adds	r3, #255	; 0xff
 80013f8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	214a      	movs	r1, #74	; 0x4a
 8001400:	187b      	adds	r3, r7, r1
 8001402:	8812      	ldrh	r2, [r2, #0]
 8001404:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001406:	187b      	adds	r3, r7, r1
 8001408:	881a      	ldrh	r2, [r3, #0]
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	4013      	ands	r3, r2
 8001410:	d037      	beq.n	8001482 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2250      	movs	r2, #80	; 0x50
 8001418:	5a9b      	ldrh	r3, [r3, r2]
 800141a:	b29b      	uxth	r3, r3
 800141c:	001a      	movs	r2, r3
 800141e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	18d2      	adds	r2, r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	18d3      	adds	r3, r2, r3
 800142c:	4a87      	ldr	r2, [pc, #540]	; (800164c <PCD_EP_ISR_Handler+0x344>)
 800142e:	4694      	mov	ip, r2
 8001430:	4463      	add	r3, ip
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	059b      	lsls	r3, r3, #22
 8001436:	0d9a      	lsrs	r2, r3, #22
 8001438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800143a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	22ac      	movs	r2, #172	; 0xac
 8001444:	0092      	lsls	r2, r2, #2
 8001446:	1899      	adds	r1, r3, r2
 8001448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800144a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800144c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800144e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001450:	b29b      	uxth	r3, r3
 8001452:	f004 f8c4 	bl	80055de <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	b29a      	uxth	r2, r3
 800145e:	2010      	movs	r0, #16
 8001460:	183b      	adds	r3, r7, r0
 8001462:	497b      	ldr	r1, [pc, #492]	; (8001650 <PCD_EP_ISR_Handler+0x348>)
 8001464:	400a      	ands	r2, r1
 8001466:	801a      	strh	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	183a      	adds	r2, r7, r0
 800146e:	8812      	ldrh	r2, [r2, #0]
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	430a      	orrs	r2, r1
 8001474:	b292      	uxth	r2, r2
 8001476:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	0018      	movs	r0, r3
 800147c:	f006 f86a 	bl	8007554 <HAL_PCD_SetupStageCallback>
 8001480:	e334      	b.n	8001aec <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001482:	234a      	movs	r3, #74	; 0x4a
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	2200      	movs	r2, #0
 8001488:	5e9b      	ldrsh	r3, [r3, r2]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db00      	blt.n	8001490 <PCD_EP_ISR_Handler+0x188>
 800148e:	e32d      	b.n	8001aec <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	b29a      	uxth	r2, r3
 8001498:	201e      	movs	r0, #30
 800149a:	183b      	adds	r3, r7, r0
 800149c:	496c      	ldr	r1, [pc, #432]	; (8001650 <PCD_EP_ISR_Handler+0x348>)
 800149e:	400a      	ands	r2, r1
 80014a0:	801a      	strh	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	183a      	adds	r2, r7, r0
 80014a8:	8812      	ldrh	r2, [r2, #0]
 80014aa:	2180      	movs	r1, #128	; 0x80
 80014ac:	430a      	orrs	r2, r1
 80014ae:	b292      	uxth	r2, r2
 80014b0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2250      	movs	r2, #80	; 0x50
 80014b8:	5a9b      	ldrh	r3, [r3, r2]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	001a      	movs	r2, r3
 80014be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	18d2      	adds	r2, r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	18d3      	adds	r3, r2, r3
 80014cc:	4a5f      	ldr	r2, [pc, #380]	; (800164c <PCD_EP_ISR_Handler+0x344>)
 80014ce:	4694      	mov	ip, r2
 80014d0:	4463      	add	r3, ip
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	059b      	lsls	r3, r3, #22
 80014d6:	0d9a      	lsrs	r2, r3, #22
 80014d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014da:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80014dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d01a      	beq.n	800151a <PCD_EP_ISR_Handler+0x212>
 80014e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d016      	beq.n	800151a <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014f2:	6959      	ldr	r1, [r3, #20]
 80014f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014f6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80014f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014fa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	f004 f86e 	bl	80055de <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001504:	695a      	ldr	r2, [r3, #20]
 8001506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	18d2      	adds	r2, r2, r3
 800150c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800150e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2100      	movs	r1, #0
 8001514:	0018      	movs	r0, r3
 8001516:	f006 f832 	bl	800757e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	214a      	movs	r1, #74	; 0x4a
 8001520:	187b      	adds	r3, r7, r1
 8001522:	8812      	ldrh	r2, [r2, #0]
 8001524:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001526:	187b      	adds	r3, r7, r1
 8001528:	881a      	ldrh	r2, [r3, #0]
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	4013      	ands	r3, r2
 8001530:	d000      	beq.n	8001534 <PCD_EP_ISR_Handler+0x22c>
 8001532:	e2db      	b.n	8001aec <PCD_EP_ISR_Handler+0x7e4>
 8001534:	187b      	adds	r3, r7, r1
 8001536:	881a      	ldrh	r2, [r3, #0]
 8001538:	23c0      	movs	r3, #192	; 0xc0
 800153a:	019b      	lsls	r3, r3, #6
 800153c:	401a      	ands	r2, r3
 800153e:	23c0      	movs	r3, #192	; 0xc0
 8001540:	019b      	lsls	r3, r3, #6
 8001542:	429a      	cmp	r2, r3
 8001544:	d100      	bne.n	8001548 <PCD_EP_ISR_Handler+0x240>
 8001546:	e2d1      	b.n	8001aec <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	61bb      	str	r3, [r7, #24]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2250      	movs	r2, #80	; 0x50
 8001554:	5a9b      	ldrh	r3, [r3, r2]
 8001556:	b29b      	uxth	r3, r3
 8001558:	001a      	movs	r2, r3
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	189b      	adds	r3, r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	4a3a      	ldr	r2, [pc, #232]	; (800164c <PCD_EP_ISR_Handler+0x344>)
 8001564:	4694      	mov	ip, r2
 8001566:	4463      	add	r3, ip
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	b29b      	uxth	r3, r3
 8001570:	059b      	lsls	r3, r3, #22
 8001572:	0d9b      	lsrs	r3, r3, #22
 8001574:	b29a      	uxth	r2, r3
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	801a      	strh	r2, [r3, #0]
 800157a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	2b3e      	cmp	r3, #62	; 0x3e
 8001580:	d91a      	bls.n	80015b8 <PCD_EP_ISR_Handler+0x2b0>
 8001582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	647b      	str	r3, [r7, #68]	; 0x44
 800158a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	221f      	movs	r2, #31
 8001590:	4013      	ands	r3, r2
 8001592:	d102      	bne.n	800159a <PCD_EP_ISR_Handler+0x292>
 8001594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001596:	3b01      	subs	r3, #1
 8001598:	647b      	str	r3, [r7, #68]	; 0x44
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	b29a      	uxth	r2, r3
 80015a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	029b      	lsls	r3, r3, #10
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	4a25      	ldr	r2, [pc, #148]	; (8001644 <PCD_EP_ISR_Handler+0x33c>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	801a      	strh	r2, [r3, #0]
 80015b6:	e023      	b.n	8001600 <PCD_EP_ISR_Handler+0x2f8>
 80015b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d108      	bne.n	80015d2 <PCD_EP_ISR_Handler+0x2ca>
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	4a1f      	ldr	r2, [pc, #124]	; (8001644 <PCD_EP_ISR_Handler+0x33c>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	801a      	strh	r2, [r3, #0]
 80015d0:	e016      	b.n	8001600 <PCD_EP_ISR_Handler+0x2f8>
 80015d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	085b      	lsrs	r3, r3, #1
 80015d8:	647b      	str	r3, [r7, #68]	; 0x44
 80015da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	2201      	movs	r2, #1
 80015e0:	4013      	ands	r3, r2
 80015e2:	d002      	beq.n	80015ea <PCD_EP_ISR_Handler+0x2e2>
 80015e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015e6:	3301      	adds	r3, #1
 80015e8:	647b      	str	r3, [r7, #68]	; 0x44
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	029b      	lsls	r3, r3, #10
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	b29a      	uxth	r2, r3
 8001608:	2012      	movs	r0, #18
 800160a:	183b      	adds	r3, r7, r0
 800160c:	4911      	ldr	r1, [pc, #68]	; (8001654 <PCD_EP_ISR_Handler+0x34c>)
 800160e:	400a      	ands	r2, r1
 8001610:	801a      	strh	r2, [r3, #0]
 8001612:	183b      	adds	r3, r7, r0
 8001614:	183a      	adds	r2, r7, r0
 8001616:	8812      	ldrh	r2, [r2, #0]
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	0149      	lsls	r1, r1, #5
 800161c:	404a      	eors	r2, r1
 800161e:	801a      	strh	r2, [r3, #0]
 8001620:	183b      	adds	r3, r7, r0
 8001622:	183a      	adds	r2, r7, r0
 8001624:	8812      	ldrh	r2, [r2, #0]
 8001626:	2180      	movs	r1, #128	; 0x80
 8001628:	0189      	lsls	r1, r1, #6
 800162a:	404a      	eors	r2, r1
 800162c:	801a      	strh	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	183a      	adds	r2, r7, r0
 8001634:	8812      	ldrh	r2, [r2, #0]
 8001636:	4908      	ldr	r1, [pc, #32]	; (8001658 <PCD_EP_ISR_Handler+0x350>)
 8001638:	430a      	orrs	r2, r1
 800163a:	b292      	uxth	r2, r2
 800163c:	801a      	strh	r2, [r3, #0]
 800163e:	e255      	b.n	8001aec <PCD_EP_ISR_Handler+0x7e4>
 8001640:	ffff8f0f 	.word	0xffff8f0f
 8001644:	ffff8000 	.word	0xffff8000
 8001648:	00000402 	.word	0x00000402
 800164c:	00000406 	.word	0x00000406
 8001650:	00000f8f 	.word	0x00000f8f
 8001654:	ffffbf8f 	.word	0xffffbf8f
 8001658:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	001a      	movs	r2, r3
 8001662:	204d      	movs	r0, #77	; 0x4d
 8001664:	183b      	adds	r3, r7, r0
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	18d2      	adds	r2, r2, r3
 800166c:	214a      	movs	r1, #74	; 0x4a
 800166e:	187b      	adds	r3, r7, r1
 8001670:	8812      	ldrh	r2, [r2, #0]
 8001672:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001674:	187b      	adds	r3, r7, r1
 8001676:	2200      	movs	r2, #0
 8001678:	5e9b      	ldrsh	r3, [r3, r2]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db00      	blt.n	8001680 <PCD_EP_ISR_Handler+0x378>
 800167e:	e0fa      	b.n	8001876 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	001a      	movs	r2, r3
 8001686:	183b      	adds	r3, r7, r0
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	18d3      	adds	r3, r2, r3
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	b29a      	uxth	r2, r3
 8001692:	2448      	movs	r4, #72	; 0x48
 8001694:	193b      	adds	r3, r7, r4
 8001696:	49d1      	ldr	r1, [pc, #836]	; (80019dc <PCD_EP_ISR_Handler+0x6d4>)
 8001698:	400a      	ands	r2, r1
 800169a:	801a      	strh	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	001a      	movs	r2, r3
 80016a2:	183b      	adds	r3, r7, r0
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	18d3      	adds	r3, r2, r3
 80016aa:	193a      	adds	r2, r7, r4
 80016ac:	8812      	ldrh	r2, [r2, #0]
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	430a      	orrs	r2, r1
 80016b2:	b292      	uxth	r2, r2
 80016b4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016b6:	183b      	adds	r3, r7, r0
 80016b8:	781a      	ldrb	r2, [r3, #0]
 80016ba:	0013      	movs	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	189b      	adds	r3, r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	3369      	adds	r3, #105	; 0x69
 80016c4:	33ff      	adds	r3, #255	; 0xff
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	18d3      	adds	r3, r2, r3
 80016ca:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80016cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ce:	7b1b      	ldrb	r3, [r3, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d125      	bne.n	8001720 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2250      	movs	r2, #80	; 0x50
 80016da:	5a9b      	ldrh	r3, [r3, r2]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	001a      	movs	r2, r3
 80016e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	18d2      	adds	r2, r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	18d3      	adds	r3, r2, r3
 80016ee:	4abc      	ldr	r2, [pc, #752]	; (80019e0 <PCD_EP_ISR_Handler+0x6d8>)
 80016f0:	4694      	mov	ip, r2
 80016f2:	4463      	add	r3, ip
 80016f4:	881a      	ldrh	r2, [r3, #0]
 80016f6:	2450      	movs	r4, #80	; 0x50
 80016f8:	193b      	adds	r3, r7, r4
 80016fa:	0592      	lsls	r2, r2, #22
 80016fc:	0d92      	lsrs	r2, r2, #22
 80016fe:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001700:	193b      	adds	r3, r7, r4
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d100      	bne.n	800170a <PCD_EP_ISR_Handler+0x402>
 8001708:	e08d      	b.n	8001826 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001710:	6959      	ldr	r1, [r3, #20]
 8001712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001714:	88da      	ldrh	r2, [r3, #6]
 8001716:	193b      	adds	r3, r7, r4
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	f003 ff60 	bl	80055de <USB_ReadPMA>
 800171e:	e082      	b.n	8001826 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001722:	78db      	ldrb	r3, [r3, #3]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d10c      	bne.n	8001742 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001728:	2350      	movs	r3, #80	; 0x50
 800172a:	18fc      	adds	r4, r7, r3
 800172c:	234a      	movs	r3, #74	; 0x4a
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	881a      	ldrh	r2, [r3, #0]
 8001732:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	0018      	movs	r0, r3
 8001738:	f000 f9ec 	bl	8001b14 <HAL_PCD_EP_DB_Receive>
 800173c:	0003      	movs	r3, r0
 800173e:	8023      	strh	r3, [r4, #0]
 8001740:	e071      	b.n	8001826 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	001a      	movs	r2, r3
 8001748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	18d3      	adds	r3, r2, r3
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b29a      	uxth	r2, r3
 8001754:	2052      	movs	r0, #82	; 0x52
 8001756:	183b      	adds	r3, r7, r0
 8001758:	49a2      	ldr	r1, [pc, #648]	; (80019e4 <PCD_EP_ISR_Handler+0x6dc>)
 800175a:	400a      	ands	r2, r1
 800175c:	801a      	strh	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	001a      	movs	r2, r3
 8001764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	18d3      	adds	r3, r2, r3
 800176c:	183a      	adds	r2, r7, r0
 800176e:	8812      	ldrh	r2, [r2, #0]
 8001770:	499d      	ldr	r1, [pc, #628]	; (80019e8 <PCD_EP_ISR_Handler+0x6e0>)
 8001772:	430a      	orrs	r2, r1
 8001774:	b292      	uxth	r2, r2
 8001776:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	001a      	movs	r2, r3
 800177e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	18d3      	adds	r3, r2, r3
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	001a      	movs	r2, r3
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	01db      	lsls	r3, r3, #7
 8001790:	4013      	ands	r3, r2
 8001792:	d024      	beq.n	80017de <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2250      	movs	r2, #80	; 0x50
 800179a:	5a9b      	ldrh	r3, [r3, r2]
 800179c:	b29b      	uxth	r3, r3
 800179e:	001a      	movs	r2, r3
 80017a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	18d2      	adds	r2, r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	18d3      	adds	r3, r2, r3
 80017ae:	4a8f      	ldr	r2, [pc, #572]	; (80019ec <PCD_EP_ISR_Handler+0x6e4>)
 80017b0:	4694      	mov	ip, r2
 80017b2:	4463      	add	r3, ip
 80017b4:	881a      	ldrh	r2, [r3, #0]
 80017b6:	2450      	movs	r4, #80	; 0x50
 80017b8:	193b      	adds	r3, r7, r4
 80017ba:	0592      	lsls	r2, r2, #22
 80017bc:	0d92      	lsrs	r2, r2, #22
 80017be:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80017c0:	193b      	adds	r3, r7, r4
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d02e      	beq.n	8001826 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ce:	6959      	ldr	r1, [r3, #20]
 80017d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d2:	891a      	ldrh	r2, [r3, #8]
 80017d4:	193b      	adds	r3, r7, r4
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	f003 ff01 	bl	80055de <USB_ReadPMA>
 80017dc:	e023      	b.n	8001826 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2250      	movs	r2, #80	; 0x50
 80017e4:	5a9b      	ldrh	r3, [r3, r2]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	001a      	movs	r2, r3
 80017ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	18d2      	adds	r2, r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	18d3      	adds	r3, r2, r3
 80017f8:	4a79      	ldr	r2, [pc, #484]	; (80019e0 <PCD_EP_ISR_Handler+0x6d8>)
 80017fa:	4694      	mov	ip, r2
 80017fc:	4463      	add	r3, ip
 80017fe:	881a      	ldrh	r2, [r3, #0]
 8001800:	2450      	movs	r4, #80	; 0x50
 8001802:	193b      	adds	r3, r7, r4
 8001804:	0592      	lsls	r2, r2, #22
 8001806:	0d92      	lsrs	r2, r2, #22
 8001808:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800180a:	193b      	adds	r3, r7, r4
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001818:	6959      	ldr	r1, [r3, #20]
 800181a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800181c:	895a      	ldrh	r2, [r3, #10]
 800181e:	193b      	adds	r3, r7, r4
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	f003 fedc 	bl	80055de <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001828:	69da      	ldr	r2, [r3, #28]
 800182a:	2150      	movs	r1, #80	; 0x50
 800182c:	187b      	adds	r3, r7, r1
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	18d2      	adds	r2, r2, r3
 8001832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001834:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	187b      	adds	r3, r7, r1
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	18d2      	adds	r2, r2, r3
 8001840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001842:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <PCD_EP_ISR_Handler+0x550>
 800184c:	187b      	adds	r3, r7, r1
 800184e:	881a      	ldrh	r2, [r3, #0]
 8001850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	429a      	cmp	r2, r3
 8001856:	d207      	bcs.n	8001868 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185a:	781a      	ldrb	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	0011      	movs	r1, r2
 8001860:	0018      	movs	r0, r3
 8001862:	f005 fe8c 	bl	800757e <HAL_PCD_DataOutStageCallback>
 8001866:	e006      	b.n	8001876 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800186e:	0011      	movs	r1, r2
 8001870:	0018      	movs	r0, r3
 8001872:	f002 fbf9 	bl	8004068 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001876:	244a      	movs	r4, #74	; 0x4a
 8001878:	193b      	adds	r3, r7, r4
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	2280      	movs	r2, #128	; 0x80
 800187e:	4013      	ands	r3, r2
 8001880:	d100      	bne.n	8001884 <PCD_EP_ISR_Handler+0x57c>
 8001882:	e133      	b.n	8001aec <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001884:	204d      	movs	r0, #77	; 0x4d
 8001886:	183b      	adds	r3, r7, r0
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	0013      	movs	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	189b      	adds	r3, r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	18d3      	adds	r3, r2, r3
 8001898:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	001a      	movs	r2, r3
 80018a0:	183b      	adds	r3, r7, r0
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	18d3      	adds	r3, r2, r3
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	2542      	movs	r5, #66	; 0x42
 80018ae:	197b      	adds	r3, r7, r5
 80018b0:	494f      	ldr	r1, [pc, #316]	; (80019f0 <PCD_EP_ISR_Handler+0x6e8>)
 80018b2:	400a      	ands	r2, r1
 80018b4:	801a      	strh	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	001a      	movs	r2, r3
 80018bc:	183b      	adds	r3, r7, r0
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	18d3      	adds	r3, r2, r3
 80018c4:	197a      	adds	r2, r7, r5
 80018c6:	8812      	ldrh	r2, [r2, #0]
 80018c8:	494a      	ldr	r1, [pc, #296]	; (80019f4 <PCD_EP_ISR_Handler+0x6ec>)
 80018ca:	430a      	orrs	r2, r1
 80018cc:	b292      	uxth	r2, r2
 80018ce:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80018d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d2:	78db      	ldrb	r3, [r3, #3]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d000      	beq.n	80018da <PCD_EP_ISR_Handler+0x5d2>
 80018d8:	e0af      	b.n	8001a3a <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80018da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80018e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e2:	7b1b      	ldrb	r3, [r3, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d100      	bne.n	80018ea <PCD_EP_ISR_Handler+0x5e2>
 80018e8:	e09f      	b.n	8001a2a <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80018ea:	193b      	adds	r3, r7, r4
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	2240      	movs	r2, #64	; 0x40
 80018f0:	4013      	ands	r3, r2
 80018f2:	d046      	beq.n	8001982 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80018f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f6:	785b      	ldrb	r3, [r3, #1]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d125      	bne.n	8001948 <PCD_EP_ISR_Handler+0x640>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2250      	movs	r2, #80	; 0x50
 8001908:	5a9b      	ldrh	r3, [r3, r2]
 800190a:	b29b      	uxth	r3, r3
 800190c:	001a      	movs	r2, r3
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	189b      	adds	r3, r3, r2
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
 8001914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	00da      	lsls	r2, r3, #3
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	18d3      	adds	r3, r2, r3
 800191e:	4a33      	ldr	r2, [pc, #204]	; (80019ec <PCD_EP_ISR_Handler+0x6e4>)
 8001920:	4694      	mov	ip, r2
 8001922:	4463      	add	r3, ip
 8001924:	623b      	str	r3, [r7, #32]
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	059b      	lsls	r3, r3, #22
 800192e:	0d9b      	lsrs	r3, r3, #22
 8001930:	b29a      	uxth	r2, r3
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	801a      	strh	r2, [r3, #0]
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	4a2d      	ldr	r2, [pc, #180]	; (80019f4 <PCD_EP_ISR_Handler+0x6ec>)
 800193e:	4313      	orrs	r3, r2
 8001940:	b29a      	uxth	r2, r3
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	801a      	strh	r2, [r3, #0]
 8001946:	e070      	b.n	8001a2a <PCD_EP_ISR_Handler+0x722>
 8001948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194a:	785b      	ldrb	r3, [r3, #1]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d16c      	bne.n	8001a2a <PCD_EP_ISR_Handler+0x722>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2250      	movs	r2, #80	; 0x50
 800195c:	5a9b      	ldrh	r3, [r3, r2]
 800195e:	b29b      	uxth	r3, r3
 8001960:	001a      	movs	r2, r3
 8001962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001964:	189b      	adds	r3, r3, r2
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	00da      	lsls	r2, r3, #3
 800196e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001970:	18d3      	adds	r3, r2, r3
 8001972:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <PCD_EP_ISR_Handler+0x6e4>)
 8001974:	4694      	mov	ip, r2
 8001976:	4463      	add	r3, ip
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
 800197a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197c:	2200      	movs	r2, #0
 800197e:	801a      	strh	r2, [r3, #0]
 8001980:	e053      	b.n	8001a2a <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800198a:	785b      	ldrb	r3, [r3, #1]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d133      	bne.n	80019f8 <PCD_EP_ISR_Handler+0x6f0>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	637b      	str	r3, [r7, #52]	; 0x34
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2250      	movs	r2, #80	; 0x50
 800199c:	5a9b      	ldrh	r3, [r3, r2]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	001a      	movs	r2, r3
 80019a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a4:	189b      	adds	r3, r3, r2
 80019a6:	637b      	str	r3, [r7, #52]	; 0x34
 80019a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	00da      	lsls	r2, r3, #3
 80019ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b0:	18d3      	adds	r3, r2, r3
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <PCD_EP_ISR_Handler+0x6d8>)
 80019b4:	4694      	mov	ip, r2
 80019b6:	4463      	add	r3, ip
 80019b8:	633b      	str	r3, [r7, #48]	; 0x30
 80019ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	059b      	lsls	r3, r3, #22
 80019c2:	0d9b      	lsrs	r3, r3, #22
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c8:	801a      	strh	r2, [r3, #0]
 80019ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <PCD_EP_ISR_Handler+0x6ec>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d8:	801a      	strh	r2, [r3, #0]
 80019da:	e026      	b.n	8001a2a <PCD_EP_ISR_Handler+0x722>
 80019dc:	00000f8f 	.word	0x00000f8f
 80019e0:	00000406 	.word	0x00000406
 80019e4:	ffff8f8f 	.word	0xffff8f8f
 80019e8:	ffff80c0 	.word	0xffff80c0
 80019ec:	00000402 	.word	0x00000402
 80019f0:	ffff8f0f 	.word	0xffff8f0f
 80019f4:	ffff8000 	.word	0xffff8000
 80019f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019fa:	785b      	ldrb	r3, [r3, #1]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d114      	bne.n	8001a2a <PCD_EP_ISR_Handler+0x722>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2250      	movs	r2, #80	; 0x50
 8001a06:	5a9b      	ldrh	r3, [r3, r2]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	001a      	movs	r2, r3
 8001a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a0e:	189b      	adds	r3, r3, r2
 8001a10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	00da      	lsls	r2, r3, #3
 8001a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a1a:	18d3      	adds	r3, r2, r3
 8001a1c:	4a3b      	ldr	r2, [pc, #236]	; (8001b0c <PCD_EP_ISR_Handler+0x804>)
 8001a1e:	4694      	mov	ip, r2
 8001a20:	4463      	add	r3, ip
 8001a22:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a26:	2200      	movs	r2, #0
 8001a28:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2c:	781a      	ldrb	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	0011      	movs	r1, r2
 8001a32:	0018      	movs	r0, r3
 8001a34:	f005 fdc4 	bl	80075c0 <HAL_PCD_DataInStageCallback>
 8001a38:	e058      	b.n	8001aec <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001a3a:	234a      	movs	r3, #74	; 0x4a
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	881a      	ldrh	r2, [r3, #0]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4013      	ands	r3, r2
 8001a46:	d149      	bne.n	8001adc <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2250      	movs	r2, #80	; 0x50
 8001a4e:	5a9b      	ldrh	r3, [r3, r2]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	001a      	movs	r2, r3
 8001a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	18d2      	adds	r2, r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	18d3      	adds	r3, r2, r3
 8001a62:	4a2b      	ldr	r2, [pc, #172]	; (8001b10 <PCD_EP_ISR_Handler+0x808>)
 8001a64:	4694      	mov	ip, r2
 8001a66:	4463      	add	r3, ip
 8001a68:	881a      	ldrh	r2, [r3, #0]
 8001a6a:	2140      	movs	r1, #64	; 0x40
 8001a6c:	187b      	adds	r3, r7, r1
 8001a6e:	0592      	lsls	r2, r2, #22
 8001a70:	0d92      	lsrs	r2, r2, #22
 8001a72:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a76:	699a      	ldr	r2, [r3, #24]
 8001a78:	187b      	adds	r3, r7, r1
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d907      	bls.n	8001a90 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8001a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a82:	699a      	ldr	r2, [r3, #24]
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	1ad2      	subs	r2, r2, r3
 8001a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8c:	619a      	str	r2, [r3, #24]
 8001a8e:	e002      	b.n	8001a96 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8001a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d107      	bne.n	8001aae <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa0:	781a      	ldrb	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	0011      	movs	r1, r2
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f005 fd8a 	bl	80075c0 <HAL_PCD_DataInStageCallback>
 8001aac:	e01e      	b.n	8001aec <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	2140      	movs	r1, #64	; 0x40
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	18d2      	adds	r2, r2, r3
 8001aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001abc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac0:	69da      	ldr	r2, [r3, #28]
 8001ac2:	187b      	adds	r3, r7, r1
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	18d2      	adds	r2, r2, r3
 8001ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aca:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ad2:	0011      	movs	r1, r2
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f002 fac7 	bl	8004068 <USB_EPStartXfer>
 8001ada:	e007      	b.n	8001aec <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001adc:	234a      	movs	r3, #74	; 0x4a
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	881a      	ldrh	r2, [r3, #0]
 8001ae2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f000 f930 	bl	8001d4c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2244      	movs	r2, #68	; 0x44
 8001af2:	5a9b      	ldrh	r3, [r3, r2]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	da01      	bge.n	8001b00 <PCD_EP_ISR_Handler+0x7f8>
 8001afc:	f7ff fc0a 	bl	8001314 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	0018      	movs	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b016      	add	sp, #88	; 0x58
 8001b08:	bdb0      	pop	{r4, r5, r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	00000406 	.word	0x00000406
 8001b10:	00000402 	.word	0x00000402

08001b14 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	1dbb      	adds	r3, r7, #6
 8001b20:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b22:	1dbb      	adds	r3, r7, #6
 8001b24:	881a      	ldrh	r2, [r3, #0]
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	01db      	lsls	r3, r3, #7
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d100      	bne.n	8001b30 <HAL_PCD_EP_DB_Receive+0x1c>
 8001b2e:	e07d      	b.n	8001c2c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2250      	movs	r2, #80	; 0x50
 8001b36:	5a9b      	ldrh	r3, [r3, r2]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	18d2      	adds	r2, r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	18d3      	adds	r3, r2, r3
 8001b4a:	4a7a      	ldr	r2, [pc, #488]	; (8001d34 <HAL_PCD_EP_DB_Receive+0x220>)
 8001b4c:	4694      	mov	ip, r2
 8001b4e:	4463      	add	r3, ip
 8001b50:	881a      	ldrh	r2, [r3, #0]
 8001b52:	211a      	movs	r1, #26
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	0592      	lsls	r2, r2, #22
 8001b58:	0d92      	lsrs	r2, r2, #22
 8001b5a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	699a      	ldr	r2, [r3, #24]
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d307      	bcc.n	8001b78 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	699a      	ldr	r2, [r3, #24]
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	1ad2      	subs	r2, r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	619a      	str	r2, [r3, #24]
 8001b76:	e002      	b.n	8001b7e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d121      	bne.n	8001bca <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	001a      	movs	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	18d3      	adds	r3, r2, r3
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	2018      	movs	r0, #24
 8001b9a:	183b      	adds	r3, r7, r0
 8001b9c:	4966      	ldr	r1, [pc, #408]	; (8001d38 <HAL_PCD_EP_DB_Receive+0x224>)
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	801a      	strh	r2, [r3, #0]
 8001ba2:	183b      	adds	r3, r7, r0
 8001ba4:	183a      	adds	r2, r7, r0
 8001ba6:	8812      	ldrh	r2, [r2, #0]
 8001ba8:	2180      	movs	r1, #128	; 0x80
 8001baa:	0189      	lsls	r1, r1, #6
 8001bac:	404a      	eors	r2, r1
 8001bae:	801a      	strh	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	18d3      	adds	r3, r2, r3
 8001bbe:	183a      	adds	r2, r7, r0
 8001bc0:	8812      	ldrh	r2, [r2, #0]
 8001bc2:	495e      	ldr	r1, [pc, #376]	; (8001d3c <HAL_PCD_EP_DB_Receive+0x228>)
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	b292      	uxth	r2, r2
 8001bc8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bca:	1dbb      	adds	r3, r7, #6
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	2240      	movs	r2, #64	; 0x40
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d01a      	beq.n	8001c0a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	001a      	movs	r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	18d3      	adds	r3, r2, r3
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	2016      	movs	r0, #22
 8001be8:	183b      	adds	r3, r7, r0
 8001bea:	4955      	ldr	r1, [pc, #340]	; (8001d40 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001bec:	400a      	ands	r2, r1
 8001bee:	801a      	strh	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	001a      	movs	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	18d3      	adds	r3, r2, r3
 8001bfe:	183a      	adds	r2, r7, r0
 8001c00:	8812      	ldrh	r2, [r2, #0]
 8001c02:	4950      	ldr	r1, [pc, #320]	; (8001d44 <HAL_PCD_EP_DB_Receive+0x230>)
 8001c04:	430a      	orrs	r2, r1
 8001c06:	b292      	uxth	r2, r2
 8001c08:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001c0a:	241a      	movs	r4, #26
 8001c0c:	193b      	adds	r3, r7, r4
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d100      	bne.n	8001c16 <HAL_PCD_EP_DB_Receive+0x102>
 8001c14:	e086      	b.n	8001d24 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	6959      	ldr	r1, [r3, #20]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	891a      	ldrh	r2, [r3, #8]
 8001c22:	193b      	adds	r3, r7, r4
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	f003 fcda 	bl	80055de <USB_ReadPMA>
 8001c2a:	e07b      	b.n	8001d24 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2250      	movs	r2, #80	; 0x50
 8001c32:	5a9b      	ldrh	r3, [r3, r2]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	001a      	movs	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	18d2      	adds	r2, r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	18d3      	adds	r3, r2, r3
 8001c46:	4a40      	ldr	r2, [pc, #256]	; (8001d48 <HAL_PCD_EP_DB_Receive+0x234>)
 8001c48:	4694      	mov	ip, r2
 8001c4a:	4463      	add	r3, ip
 8001c4c:	881a      	ldrh	r2, [r3, #0]
 8001c4e:	211a      	movs	r1, #26
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	0592      	lsls	r2, r2, #22
 8001c54:	0d92      	lsrs	r2, r2, #22
 8001c56:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d307      	bcc.n	8001c74 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	699a      	ldr	r2, [r3, #24]
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	1ad2      	subs	r2, r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	619a      	str	r2, [r3, #24]
 8001c72:	e002      	b.n	8001c7a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d121      	bne.n	8001cc6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	001a      	movs	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	18d3      	adds	r3, r2, r3
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	201e      	movs	r0, #30
 8001c96:	183b      	adds	r3, r7, r0
 8001c98:	4927      	ldr	r1, [pc, #156]	; (8001d38 <HAL_PCD_EP_DB_Receive+0x224>)
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	801a      	strh	r2, [r3, #0]
 8001c9e:	183b      	adds	r3, r7, r0
 8001ca0:	183a      	adds	r2, r7, r0
 8001ca2:	8812      	ldrh	r2, [r2, #0]
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	0189      	lsls	r1, r1, #6
 8001ca8:	404a      	eors	r2, r1
 8001caa:	801a      	strh	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	001a      	movs	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	18d3      	adds	r3, r2, r3
 8001cba:	183a      	adds	r2, r7, r0
 8001cbc:	8812      	ldrh	r2, [r2, #0]
 8001cbe:	491f      	ldr	r1, [pc, #124]	; (8001d3c <HAL_PCD_EP_DB_Receive+0x228>)
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	b292      	uxth	r2, r2
 8001cc4:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001cc6:	1dbb      	adds	r3, r7, #6
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	2240      	movs	r2, #64	; 0x40
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d11a      	bne.n	8001d06 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	001a      	movs	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	18d3      	adds	r3, r2, r3
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	201c      	movs	r0, #28
 8001ce4:	183b      	adds	r3, r7, r0
 8001ce6:	4916      	ldr	r1, [pc, #88]	; (8001d40 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001ce8:	400a      	ands	r2, r1
 8001cea:	801a      	strh	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	001a      	movs	r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	18d3      	adds	r3, r2, r3
 8001cfa:	183a      	adds	r2, r7, r0
 8001cfc:	8812      	ldrh	r2, [r2, #0]
 8001cfe:	4911      	ldr	r1, [pc, #68]	; (8001d44 <HAL_PCD_EP_DB_Receive+0x230>)
 8001d00:	430a      	orrs	r2, r1
 8001d02:	b292      	uxth	r2, r2
 8001d04:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001d06:	241a      	movs	r4, #26
 8001d08:	193b      	adds	r3, r7, r4
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d009      	beq.n	8001d24 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	6959      	ldr	r1, [r3, #20]
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	895a      	ldrh	r2, [r3, #10]
 8001d1c:	193b      	adds	r3, r7, r4
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	f003 fc5d 	bl	80055de <USB_ReadPMA>
    }
  }

  return count;
 8001d24:	231a      	movs	r3, #26
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	881b      	ldrh	r3, [r3, #0]
}
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b009      	add	sp, #36	; 0x24
 8001d30:	bd90      	pop	{r4, r7, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	00000402 	.word	0x00000402
 8001d38:	ffffbf8f 	.word	0xffffbf8f
 8001d3c:	ffff8080 	.word	0xffff8080
 8001d40:	ffff8f8f 	.word	0xffff8f8f
 8001d44:	ffff80c0 	.word	0xffff80c0
 8001d48:	00000406 	.word	0x00000406

08001d4c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b0a4      	sub	sp, #144	; 0x90
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	1dbb      	adds	r3, r7, #6
 8001d58:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d5a:	1dbb      	adds	r3, r7, #6
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	2240      	movs	r2, #64	; 0x40
 8001d60:	4013      	ands	r3, r2
 8001d62:	d100      	bne.n	8001d66 <HAL_PCD_EP_DB_Transmit+0x1a>
 8001d64:	e1e4      	b.n	8002130 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2250      	movs	r2, #80	; 0x50
 8001d6c:	5a9b      	ldrh	r3, [r3, r2]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	001a      	movs	r2, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	18d2      	adds	r2, r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	18d3      	adds	r3, r2, r3
 8001d80:	4ad0      	ldr	r2, [pc, #832]	; (80020c4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001d82:	4694      	mov	ip, r2
 8001d84:	4463      	add	r3, ip
 8001d86:	881a      	ldrh	r2, [r3, #0]
 8001d88:	2186      	movs	r1, #134	; 0x86
 8001d8a:	187b      	adds	r3, r7, r1
 8001d8c:	0592      	lsls	r2, r2, #22
 8001d8e:	0d92      	lsrs	r2, r2, #22
 8001d90:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	699a      	ldr	r2, [r3, #24]
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d907      	bls.n	8001dae <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	699a      	ldr	r2, [r3, #24]
 8001da2:	187b      	adds	r3, r7, r1
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	1ad2      	subs	r2, r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	619a      	str	r2, [r3, #24]
 8001dac:	e002      	b.n	8001db4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d000      	beq.n	8001dbe <HAL_PCD_EP_DB_Transmit+0x72>
 8001dbc:	e0b5      	b.n	8001f2a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	785b      	ldrb	r3, [r3, #1]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d125      	bne.n	8001e12 <HAL_PCD_EP_DB_Transmit+0xc6>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2250      	movs	r2, #80	; 0x50
 8001dd2:	5a9b      	ldrh	r3, [r3, r2]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	001a      	movs	r2, r3
 8001dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dda:	189b      	adds	r3, r3, r2
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	00da      	lsls	r2, r3, #3
 8001de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de6:	18d3      	adds	r3, r2, r3
 8001de8:	4ab6      	ldr	r2, [pc, #728]	; (80020c4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001dea:	4694      	mov	ip, r2
 8001dec:	4463      	add	r3, ip
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	059b      	lsls	r3, r3, #22
 8001df8:	0d9b      	lsrs	r3, r3, #22
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfe:	801a      	strh	r2, [r3, #0]
 8001e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	4ab0      	ldr	r2, [pc, #704]	; (80020c8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0e:	801a      	strh	r2, [r3, #0]
 8001e10:	e01b      	b.n	8001e4a <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	785b      	ldrb	r3, [r3, #1]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d117      	bne.n	8001e4a <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2250      	movs	r2, #80	; 0x50
 8001e26:	5a9b      	ldrh	r3, [r3, r2]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	001a      	movs	r2, r3
 8001e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2e:	189b      	adds	r3, r3, r2
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	00da      	lsls	r2, r3, #3
 8001e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3a:	18d3      	adds	r3, r2, r3
 8001e3c:	4aa1      	ldr	r2, [pc, #644]	; (80020c4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001e3e:	4694      	mov	ip, r2
 8001e40:	4463      	add	r3, ip
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30
 8001e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e46:	2200      	movs	r2, #0
 8001e48:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	785b      	ldrb	r3, [r3, #1]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d125      	bne.n	8001ea4 <HAL_PCD_EP_DB_Transmit+0x158>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2250      	movs	r2, #80	; 0x50
 8001e64:	5a9b      	ldrh	r3, [r3, r2]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	001a      	movs	r2, r3
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	189b      	adds	r3, r3, r2
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	00da      	lsls	r2, r3, #3
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	18d3      	adds	r3, r2, r3
 8001e7a:	4a94      	ldr	r2, [pc, #592]	; (80020cc <HAL_PCD_EP_DB_Transmit+0x380>)
 8001e7c:	4694      	mov	ip, r2
 8001e7e:	4463      	add	r3, ip
 8001e80:	61bb      	str	r3, [r7, #24]
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	059b      	lsls	r3, r3, #22
 8001e8a:	0d9b      	lsrs	r3, r3, #22
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	801a      	strh	r2, [r3, #0]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	4a8b      	ldr	r2, [pc, #556]	; (80020c8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	801a      	strh	r2, [r3, #0]
 8001ea2:	e018      	b.n	8001ed6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	785b      	ldrb	r3, [r3, #1]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d114      	bne.n	8001ed6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2250      	movs	r2, #80	; 0x50
 8001eb2:	5a9b      	ldrh	r3, [r3, r2]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	001a      	movs	r2, r3
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	189b      	adds	r3, r3, r2
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	00da      	lsls	r2, r3, #3
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	18d3      	adds	r3, r2, r3
 8001ec8:	4a80      	ldr	r2, [pc, #512]	; (80020cc <HAL_PCD_EP_DB_Transmit+0x380>)
 8001eca:	4694      	mov	ip, r2
 8001ecc:	4463      	add	r3, ip
 8001ece:	623b      	str	r3, [r7, #32]
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	0011      	movs	r1, r2
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f005 fb6e 	bl	80075c0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ee4:	1dbb      	adds	r3, r7, #6
 8001ee6:	881a      	ldrh	r2, [r3, #0]
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	01db      	lsls	r3, r3, #7
 8001eec:	4013      	ands	r3, r2
 8001eee:	d100      	bne.n	8001ef2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8001ef0:	e309      	b.n	8002506 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	001a      	movs	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	18d3      	adds	r3, r2, r3
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	2016      	movs	r0, #22
 8001f06:	183b      	adds	r3, r7, r0
 8001f08:	4971      	ldr	r1, [pc, #452]	; (80020d0 <HAL_PCD_EP_DB_Transmit+0x384>)
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	801a      	strh	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	001a      	movs	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	18d3      	adds	r3, r2, r3
 8001f1c:	183a      	adds	r2, r7, r0
 8001f1e:	8812      	ldrh	r2, [r2, #0]
 8001f20:	496c      	ldr	r1, [pc, #432]	; (80020d4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8001f22:	430a      	orrs	r2, r1
 8001f24:	b292      	uxth	r2, r2
 8001f26:	801a      	strh	r2, [r3, #0]
 8001f28:	e2ed      	b.n	8002506 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f2a:	1dbb      	adds	r3, r7, #6
 8001f2c:	881a      	ldrh	r2, [r3, #0]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	01db      	lsls	r3, r3, #7
 8001f32:	4013      	ands	r3, r2
 8001f34:	d01a      	beq.n	8001f6c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	001a      	movs	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	18d3      	adds	r3, r2, r3
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	208a      	movs	r0, #138	; 0x8a
 8001f4a:	183b      	adds	r3, r7, r0
 8001f4c:	4960      	ldr	r1, [pc, #384]	; (80020d0 <HAL_PCD_EP_DB_Transmit+0x384>)
 8001f4e:	400a      	ands	r2, r1
 8001f50:	801a      	strh	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	001a      	movs	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	18d3      	adds	r3, r2, r3
 8001f60:	183a      	adds	r2, r7, r0
 8001f62:	8812      	ldrh	r2, [r2, #0]
 8001f64:	495b      	ldr	r1, [pc, #364]	; (80020d4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8001f66:	430a      	orrs	r2, r1
 8001f68:	b292      	uxth	r2, r2
 8001f6a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2224      	movs	r2, #36	; 0x24
 8001f70:	5c9b      	ldrb	r3, [r3, r2]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d000      	beq.n	8001f78 <HAL_PCD_EP_DB_Transmit+0x22c>
 8001f76:	e2c6      	b.n	8002506 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	2186      	movs	r1, #134	; 0x86
 8001f7e:	187b      	adds	r3, r7, r1
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	18d2      	adds	r2, r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	69da      	ldr	r2, [r3, #28]
 8001f8c:	187b      	adds	r3, r7, r1
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	18d2      	adds	r2, r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	6a1a      	ldr	r2, [r3, #32]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d30c      	bcc.n	8001fbc <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	218c      	movs	r1, #140	; 0x8c
 8001fa8:	187a      	adds	r2, r7, r1
 8001faa:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	6a1a      	ldr	r2, [r3, #32]
 8001fb0:	187b      	adds	r3, r7, r1
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	1ad2      	subs	r2, r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	621a      	str	r2, [r3, #32]
 8001fba:	e01a      	b.n	8001ff2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10a      	bne.n	8001fda <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8001fc4:	2386      	movs	r3, #134	; 0x86
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	228c      	movs	r2, #140	; 0x8c
 8001fcc:	18ba      	adds	r2, r7, r2
 8001fce:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2224      	movs	r2, #36	; 0x24
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	5499      	strb	r1, [r3, r2]
 8001fd8:	e00b      	b.n	8001ff2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2224      	movs	r2, #36	; 0x24
 8001fde:	2100      	movs	r1, #0
 8001fe0:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	228c      	movs	r2, #140	; 0x8c
 8001fe8:	18ba      	adds	r2, r7, r2
 8001fea:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	785b      	ldrb	r3, [r3, #1]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d000      	beq.n	8001ffc <HAL_PCD_EP_DB_Transmit+0x2b0>
 8001ffa:	e06d      	b.n	80020d8 <HAL_PCD_EP_DB_Transmit+0x38c>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2250      	movs	r2, #80	; 0x50
 8002008:	5a9b      	ldrh	r3, [r3, r2]
 800200a:	b29b      	uxth	r3, r3
 800200c:	001a      	movs	r2, r3
 800200e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002010:	189b      	adds	r3, r3, r2
 8002012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	00da      	lsls	r2, r3, #3
 800201a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800201c:	18d3      	adds	r3, r2, r3
 800201e:	4a29      	ldr	r2, [pc, #164]	; (80020c4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002020:	4694      	mov	ip, r2
 8002022:	4463      	add	r3, ip
 8002024:	63bb      	str	r3, [r7, #56]	; 0x38
 8002026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	b29b      	uxth	r3, r3
 800202c:	059b      	lsls	r3, r3, #22
 800202e:	0d9b      	lsrs	r3, r3, #22
 8002030:	b29a      	uxth	r2, r3
 8002032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002034:	801a      	strh	r2, [r3, #0]
 8002036:	228c      	movs	r2, #140	; 0x8c
 8002038:	18bb      	adds	r3, r7, r2
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b3e      	cmp	r3, #62	; 0x3e
 800203e:	d91a      	bls.n	8002076 <HAL_PCD_EP_DB_Transmit+0x32a>
 8002040:	18bb      	adds	r3, r7, r2
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	095b      	lsrs	r3, r3, #5
 8002046:	64bb      	str	r3, [r7, #72]	; 0x48
 8002048:	18bb      	adds	r3, r7, r2
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	221f      	movs	r2, #31
 800204e:	4013      	ands	r3, r2
 8002050:	d102      	bne.n	8002058 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002054:	3b01      	subs	r3, #1
 8002056:	64bb      	str	r3, [r7, #72]	; 0x48
 8002058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	b29a      	uxth	r2, r3
 800205e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002060:	b29b      	uxth	r3, r3
 8002062:	029b      	lsls	r3, r3, #10
 8002064:	b29b      	uxth	r3, r3
 8002066:	4313      	orrs	r3, r2
 8002068:	b29b      	uxth	r3, r3
 800206a:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800206c:	4313      	orrs	r3, r2
 800206e:	b29a      	uxth	r2, r3
 8002070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002072:	801a      	strh	r2, [r3, #0]
 8002074:	e04f      	b.n	8002116 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002076:	238c      	movs	r3, #140	; 0x8c
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d108      	bne.n	8002092 <HAL_PCD_EP_DB_Transmit+0x346>
 8002080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	b29b      	uxth	r3, r3
 8002086:	4a10      	ldr	r2, [pc, #64]	; (80020c8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002088:	4313      	orrs	r3, r2
 800208a:	b29a      	uxth	r2, r3
 800208c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208e:	801a      	strh	r2, [r3, #0]
 8002090:	e041      	b.n	8002116 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002092:	228c      	movs	r2, #140	; 0x8c
 8002094:	18bb      	adds	r3, r7, r2
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	64bb      	str	r3, [r7, #72]	; 0x48
 800209c:	18bb      	adds	r3, r7, r2
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2201      	movs	r2, #1
 80020a2:	4013      	ands	r3, r2
 80020a4:	d002      	beq.n	80020ac <HAL_PCD_EP_DB_Transmit+0x360>
 80020a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a8:	3301      	adds	r3, #1
 80020aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80020ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	029b      	lsls	r3, r3, #10
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	4313      	orrs	r3, r2
 80020bc:	b29a      	uxth	r2, r3
 80020be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c0:	801a      	strh	r2, [r3, #0]
 80020c2:	e028      	b.n	8002116 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80020c4:	00000402 	.word	0x00000402
 80020c8:	ffff8000 	.word	0xffff8000
 80020cc:	00000406 	.word	0x00000406
 80020d0:	ffff8f8f 	.word	0xffff8f8f
 80020d4:	ffffc080 	.word	0xffffc080
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	785b      	ldrb	r3, [r3, #1]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d11a      	bne.n	8002116 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	647b      	str	r3, [r7, #68]	; 0x44
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2250      	movs	r2, #80	; 0x50
 80020ec:	5a9b      	ldrh	r3, [r3, r2]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	001a      	movs	r2, r3
 80020f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f4:	189b      	adds	r3, r3, r2
 80020f6:	647b      	str	r3, [r7, #68]	; 0x44
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	00da      	lsls	r2, r3, #3
 80020fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002100:	18d3      	adds	r3, r2, r3
 8002102:	4adb      	ldr	r2, [pc, #876]	; (8002470 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002104:	4694      	mov	ip, r2
 8002106:	4463      	add	r3, ip
 8002108:	643b      	str	r3, [r7, #64]	; 0x40
 800210a:	238c      	movs	r3, #140	; 0x8c
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	b29a      	uxth	r2, r3
 8002112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002114:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	6959      	ldr	r1, [r3, #20]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	891a      	ldrh	r2, [r3, #8]
 8002122:	238c      	movs	r3, #140	; 0x8c
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	b29b      	uxth	r3, r3
 800212a:	f003 fa0f 	bl	800554c <USB_WritePMA>
 800212e:	e1ea      	b.n	8002506 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2250      	movs	r2, #80	; 0x50
 8002136:	5a9b      	ldrh	r3, [r3, r2]
 8002138:	b29b      	uxth	r3, r3
 800213a:	001a      	movs	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	18d2      	adds	r2, r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	18d3      	adds	r3, r2, r3
 800214a:	4aca      	ldr	r2, [pc, #808]	; (8002474 <HAL_PCD_EP_DB_Transmit+0x728>)
 800214c:	4694      	mov	ip, r2
 800214e:	4463      	add	r3, ip
 8002150:	881a      	ldrh	r2, [r3, #0]
 8002152:	2186      	movs	r1, #134	; 0x86
 8002154:	187b      	adds	r3, r7, r1
 8002156:	0592      	lsls	r2, r2, #22
 8002158:	0d92      	lsrs	r2, r2, #22
 800215a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	699a      	ldr	r2, [r3, #24]
 8002160:	187b      	adds	r3, r7, r1
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d307      	bcc.n	8002178 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	187b      	adds	r3, r7, r1
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	1ad2      	subs	r2, r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	619a      	str	r2, [r3, #24]
 8002176:	e002      	b.n	800217e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2200      	movs	r2, #0
 800217c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d000      	beq.n	8002188 <HAL_PCD_EP_DB_Transmit+0x43c>
 8002186:	e0bb      	b.n	8002300 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	785b      	ldrb	r3, [r3, #1]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d125      	bne.n	80021dc <HAL_PCD_EP_DB_Transmit+0x490>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2250      	movs	r2, #80	; 0x50
 800219c:	5a9b      	ldrh	r3, [r3, r2]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	001a      	movs	r2, r3
 80021a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021a4:	189b      	adds	r3, r3, r2
 80021a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	00da      	lsls	r2, r3, #3
 80021ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021b0:	18d3      	adds	r3, r2, r3
 80021b2:	4aaf      	ldr	r2, [pc, #700]	; (8002470 <HAL_PCD_EP_DB_Transmit+0x724>)
 80021b4:	4694      	mov	ip, r2
 80021b6:	4463      	add	r3, ip
 80021b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80021ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	059b      	lsls	r3, r3, #22
 80021c2:	0d9b      	lsrs	r3, r3, #22
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021c8:	801a      	strh	r2, [r3, #0]
 80021ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	4aa9      	ldr	r2, [pc, #676]	; (8002478 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021d8:	801a      	strh	r2, [r3, #0]
 80021da:	e01b      	b.n	8002214 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	785b      	ldrb	r3, [r3, #1]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d117      	bne.n	8002214 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	667b      	str	r3, [r7, #100]	; 0x64
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2250      	movs	r2, #80	; 0x50
 80021f0:	5a9b      	ldrh	r3, [r3, r2]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	001a      	movs	r2, r3
 80021f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021f8:	189b      	adds	r3, r3, r2
 80021fa:	667b      	str	r3, [r7, #100]	; 0x64
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	00da      	lsls	r2, r3, #3
 8002202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002204:	18d3      	adds	r3, r2, r3
 8002206:	4a9a      	ldr	r2, [pc, #616]	; (8002470 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002208:	4694      	mov	ip, r2
 800220a:	4463      	add	r3, ip
 800220c:	663b      	str	r3, [r7, #96]	; 0x60
 800220e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002210:	2200      	movs	r2, #0
 8002212:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	677b      	str	r3, [r7, #116]	; 0x74
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	785b      	ldrb	r3, [r3, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d12b      	bne.n	800227a <HAL_PCD_EP_DB_Transmit+0x52e>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2250      	movs	r2, #80	; 0x50
 800222e:	5a9b      	ldrh	r3, [r3, r2]
 8002230:	b29b      	uxth	r3, r3
 8002232:	001a      	movs	r2, r3
 8002234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002236:	189b      	adds	r3, r3, r2
 8002238:	66fb      	str	r3, [r7, #108]	; 0x6c
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	00da      	lsls	r2, r3, #3
 8002240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002242:	18d3      	adds	r3, r2, r3
 8002244:	4a8b      	ldr	r2, [pc, #556]	; (8002474 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002246:	4694      	mov	ip, r2
 8002248:	4463      	add	r3, ip
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	187a      	adds	r2, r7, r1
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	187b      	adds	r3, r7, r1
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	059b      	lsls	r3, r3, #22
 800225a:	0d9b      	lsrs	r3, r3, #22
 800225c:	b29a      	uxth	r2, r3
 800225e:	187b      	adds	r3, r7, r1
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	801a      	strh	r2, [r3, #0]
 8002264:	187b      	adds	r3, r7, r1
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	4a82      	ldr	r2, [pc, #520]	; (8002478 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800226e:	4313      	orrs	r3, r2
 8002270:	b29a      	uxth	r2, r3
 8002272:	187b      	adds	r3, r7, r1
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	801a      	strh	r2, [r3, #0]
 8002278:	e018      	b.n	80022ac <HAL_PCD_EP_DB_Transmit+0x560>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	785b      	ldrb	r3, [r3, #1]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d114      	bne.n	80022ac <HAL_PCD_EP_DB_Transmit+0x560>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2250      	movs	r2, #80	; 0x50
 8002288:	5a9b      	ldrh	r3, [r3, r2]
 800228a:	b29b      	uxth	r3, r3
 800228c:	001a      	movs	r2, r3
 800228e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002290:	189b      	adds	r3, r3, r2
 8002292:	677b      	str	r3, [r7, #116]	; 0x74
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	00da      	lsls	r2, r3, #3
 800229a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800229c:	18d3      	adds	r3, r2, r3
 800229e:	4a75      	ldr	r2, [pc, #468]	; (8002474 <HAL_PCD_EP_DB_Transmit+0x728>)
 80022a0:	4694      	mov	ip, r2
 80022a2:	4463      	add	r3, ip
 80022a4:	673b      	str	r3, [r7, #112]	; 0x70
 80022a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022a8:	2200      	movs	r2, #0
 80022aa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	781a      	ldrb	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	0011      	movs	r1, r2
 80022b4:	0018      	movs	r0, r3
 80022b6:	f005 f983 	bl	80075c0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022ba:	1dbb      	adds	r3, r7, #6
 80022bc:	881a      	ldrh	r2, [r3, #0]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	01db      	lsls	r3, r3, #7
 80022c2:	4013      	ands	r3, r2
 80022c4:	d000      	beq.n	80022c8 <HAL_PCD_EP_DB_Transmit+0x57c>
 80022c6:	e11e      	b.n	8002506 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	001a      	movs	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	18d3      	adds	r3, r2, r3
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	b29a      	uxth	r2, r3
 80022da:	2088      	movs	r0, #136	; 0x88
 80022dc:	183b      	adds	r3, r7, r0
 80022de:	4967      	ldr	r1, [pc, #412]	; (800247c <HAL_PCD_EP_DB_Transmit+0x730>)
 80022e0:	400a      	ands	r2, r1
 80022e2:	801a      	strh	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	001a      	movs	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	18d3      	adds	r3, r2, r3
 80022f2:	183a      	adds	r2, r7, r0
 80022f4:	8812      	ldrh	r2, [r2, #0]
 80022f6:	4962      	ldr	r1, [pc, #392]	; (8002480 <HAL_PCD_EP_DB_Transmit+0x734>)
 80022f8:	430a      	orrs	r2, r1
 80022fa:	b292      	uxth	r2, r2
 80022fc:	801a      	strh	r2, [r3, #0]
 80022fe:	e102      	b.n	8002506 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002300:	1dbb      	adds	r3, r7, #6
 8002302:	881a      	ldrh	r2, [r3, #0]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	01db      	lsls	r3, r3, #7
 8002308:	4013      	ands	r3, r2
 800230a:	d11a      	bne.n	8002342 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	001a      	movs	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	18d3      	adds	r3, r2, r3
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	b29a      	uxth	r2, r3
 800231e:	204e      	movs	r0, #78	; 0x4e
 8002320:	183b      	adds	r3, r7, r0
 8002322:	4956      	ldr	r1, [pc, #344]	; (800247c <HAL_PCD_EP_DB_Transmit+0x730>)
 8002324:	400a      	ands	r2, r1
 8002326:	801a      	strh	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	001a      	movs	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	18d3      	adds	r3, r2, r3
 8002336:	183a      	adds	r2, r7, r0
 8002338:	8812      	ldrh	r2, [r2, #0]
 800233a:	4951      	ldr	r1, [pc, #324]	; (8002480 <HAL_PCD_EP_DB_Transmit+0x734>)
 800233c:	430a      	orrs	r2, r1
 800233e:	b292      	uxth	r2, r2
 8002340:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2224      	movs	r2, #36	; 0x24
 8002346:	5c9b      	ldrb	r3, [r3, r2]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d000      	beq.n	800234e <HAL_PCD_EP_DB_Transmit+0x602>
 800234c:	e0db      	b.n	8002506 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	2186      	movs	r1, #134	; 0x86
 8002354:	187b      	adds	r3, r7, r1
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	18d2      	adds	r2, r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	69da      	ldr	r2, [r3, #28]
 8002362:	187b      	adds	r3, r7, r1
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	18d2      	adds	r2, r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	6a1a      	ldr	r2, [r3, #32]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	429a      	cmp	r2, r3
 8002376:	d30c      	bcc.n	8002392 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	218c      	movs	r1, #140	; 0x8c
 800237e:	187a      	adds	r2, r7, r1
 8002380:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	6a1a      	ldr	r2, [r3, #32]
 8002386:	187b      	adds	r3, r7, r1
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	1ad2      	subs	r2, r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	621a      	str	r2, [r3, #32]
 8002390:	e01a      	b.n	80023c8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10a      	bne.n	80023b0 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800239a:	2386      	movs	r3, #134	; 0x86
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	228c      	movs	r2, #140	; 0x8c
 80023a2:	18ba      	adds	r2, r7, r2
 80023a4:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2224      	movs	r2, #36	; 0x24
 80023aa:	2100      	movs	r1, #0
 80023ac:	5499      	strb	r1, [r3, r2]
 80023ae:	e00b      	b.n	80023c8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	228c      	movs	r2, #140	; 0x8c
 80023b6:	18ba      	adds	r2, r7, r2
 80023b8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2200      	movs	r2, #0
 80023be:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2224      	movs	r2, #36	; 0x24
 80023c4:	2100      	movs	r1, #0
 80023c6:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	657b      	str	r3, [r7, #84]	; 0x54
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	785b      	ldrb	r3, [r3, #1]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d000      	beq.n	80023d8 <HAL_PCD_EP_DB_Transmit+0x68c>
 80023d6:	e06e      	b.n	80024b6 <HAL_PCD_EP_DB_Transmit+0x76a>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2250      	movs	r2, #80	; 0x50
 80023e4:	5a9b      	ldrh	r3, [r3, r2]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	001a      	movs	r2, r3
 80023ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ec:	189b      	adds	r3, r3, r2
 80023ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	00da      	lsls	r2, r3, #3
 80023f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f8:	18d3      	adds	r3, r2, r3
 80023fa:	4a1e      	ldr	r2, [pc, #120]	; (8002474 <HAL_PCD_EP_DB_Transmit+0x728>)
 80023fc:	4694      	mov	ip, r2
 80023fe:	4463      	add	r3, ip
 8002400:	65bb      	str	r3, [r7, #88]	; 0x58
 8002402:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	059b      	lsls	r3, r3, #22
 800240a:	0d9b      	lsrs	r3, r3, #22
 800240c:	b29a      	uxth	r2, r3
 800240e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002410:	801a      	strh	r2, [r3, #0]
 8002412:	228c      	movs	r2, #140	; 0x8c
 8002414:	18bb      	adds	r3, r7, r2
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b3e      	cmp	r3, #62	; 0x3e
 800241a:	d91a      	bls.n	8002452 <HAL_PCD_EP_DB_Transmit+0x706>
 800241c:	18bb      	adds	r3, r7, r2
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	66bb      	str	r3, [r7, #104]	; 0x68
 8002424:	18bb      	adds	r3, r7, r2
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	221f      	movs	r2, #31
 800242a:	4013      	ands	r3, r2
 800242c:	d102      	bne.n	8002434 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800242e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002430:	3b01      	subs	r3, #1
 8002432:	66bb      	str	r3, [r7, #104]	; 0x68
 8002434:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	b29a      	uxth	r2, r3
 800243a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800243c:	b29b      	uxth	r3, r3
 800243e:	029b      	lsls	r3, r3, #10
 8002440:	b29b      	uxth	r3, r3
 8002442:	4313      	orrs	r3, r2
 8002444:	b29b      	uxth	r3, r3
 8002446:	4a0c      	ldr	r2, [pc, #48]	; (8002478 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002448:	4313      	orrs	r3, r2
 800244a:	b29a      	uxth	r2, r3
 800244c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800244e:	801a      	strh	r2, [r3, #0]
 8002450:	e04d      	b.n	80024ee <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002452:	238c      	movs	r3, #140	; 0x8c
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d113      	bne.n	8002484 <HAL_PCD_EP_DB_Transmit+0x738>
 800245c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	b29b      	uxth	r3, r3
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002464:	4313      	orrs	r3, r2
 8002466:	b29a      	uxth	r2, r3
 8002468:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800246a:	801a      	strh	r2, [r3, #0]
 800246c:	e03f      	b.n	80024ee <HAL_PCD_EP_DB_Transmit+0x7a2>
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	00000402 	.word	0x00000402
 8002474:	00000406 	.word	0x00000406
 8002478:	ffff8000 	.word	0xffff8000
 800247c:	ffff8f8f 	.word	0xffff8f8f
 8002480:	ffffc080 	.word	0xffffc080
 8002484:	228c      	movs	r2, #140	; 0x8c
 8002486:	18bb      	adds	r3, r7, r2
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	085b      	lsrs	r3, r3, #1
 800248c:	66bb      	str	r3, [r7, #104]	; 0x68
 800248e:	18bb      	adds	r3, r7, r2
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2201      	movs	r2, #1
 8002494:	4013      	ands	r3, r2
 8002496:	d002      	beq.n	800249e <HAL_PCD_EP_DB_Transmit+0x752>
 8002498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800249a:	3301      	adds	r3, #1
 800249c:	66bb      	str	r3, [r7, #104]	; 0x68
 800249e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	029b      	lsls	r3, r3, #10
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024b2:	801a      	strh	r2, [r3, #0]
 80024b4:	e01b      	b.n	80024ee <HAL_PCD_EP_DB_Transmit+0x7a2>
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	785b      	ldrb	r3, [r3, #1]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d117      	bne.n	80024ee <HAL_PCD_EP_DB_Transmit+0x7a2>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2250      	movs	r2, #80	; 0x50
 80024c4:	5a9b      	ldrh	r3, [r3, r2]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	001a      	movs	r2, r3
 80024ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024cc:	189b      	adds	r3, r3, r2
 80024ce:	657b      	str	r3, [r7, #84]	; 0x54
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	00da      	lsls	r2, r3, #3
 80024d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d8:	18d3      	adds	r3, r2, r3
 80024da:	4a21      	ldr	r2, [pc, #132]	; (8002560 <HAL_PCD_EP_DB_Transmit+0x814>)
 80024dc:	4694      	mov	ip, r2
 80024de:	4463      	add	r3, ip
 80024e0:	653b      	str	r3, [r7, #80]	; 0x50
 80024e2:	238c      	movs	r3, #140	; 0x8c
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ec:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	6959      	ldr	r1, [r3, #20]
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	895a      	ldrh	r2, [r3, #10]
 80024fa:	238c      	movs	r3, #140	; 0x8c
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	b29b      	uxth	r3, r3
 8002502:	f003 f823 	bl	800554c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	001a      	movs	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	18d3      	adds	r3, r2, r3
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	b29a      	uxth	r2, r3
 8002518:	2014      	movs	r0, #20
 800251a:	183b      	adds	r3, r7, r0
 800251c:	4911      	ldr	r1, [pc, #68]	; (8002564 <HAL_PCD_EP_DB_Transmit+0x818>)
 800251e:	400a      	ands	r2, r1
 8002520:	801a      	strh	r2, [r3, #0]
 8002522:	183b      	adds	r3, r7, r0
 8002524:	183a      	adds	r2, r7, r0
 8002526:	8812      	ldrh	r2, [r2, #0]
 8002528:	2110      	movs	r1, #16
 800252a:	404a      	eors	r2, r1
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	183b      	adds	r3, r7, r0
 8002530:	183a      	adds	r2, r7, r0
 8002532:	8812      	ldrh	r2, [r2, #0]
 8002534:	2120      	movs	r1, #32
 8002536:	404a      	eors	r2, r1
 8002538:	801a      	strh	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	001a      	movs	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	18d3      	adds	r3, r2, r3
 8002548:	183a      	adds	r2, r7, r0
 800254a:	8812      	ldrh	r2, [r2, #0]
 800254c:	4906      	ldr	r1, [pc, #24]	; (8002568 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800254e:	430a      	orrs	r2, r1
 8002550:	b292      	uxth	r2, r2
 8002552:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	0018      	movs	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	b024      	add	sp, #144	; 0x90
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	00000406 	.word	0x00000406
 8002564:	ffff8fbf 	.word	0xffff8fbf
 8002568:	ffff8080 	.word	0xffff8080

0800256c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	0008      	movs	r0, r1
 8002576:	0011      	movs	r1, r2
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	240a      	movs	r4, #10
 800257c:	193b      	adds	r3, r7, r4
 800257e:	1c02      	adds	r2, r0, #0
 8002580:	801a      	strh	r2, [r3, #0]
 8002582:	2308      	movs	r3, #8
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	1c0a      	adds	r2, r1, #0
 8002588:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800258a:	0021      	movs	r1, r4
 800258c:	187b      	adds	r3, r7, r1
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	2280      	movs	r2, #128	; 0x80
 8002592:	4013      	ands	r3, r2
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00c      	beq.n	80025b4 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800259a:	187b      	adds	r3, r7, r1
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	2207      	movs	r2, #7
 80025a0:	4013      	ands	r3, r2
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	0013      	movs	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	189b      	adds	r3, r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	18d3      	adds	r3, r2, r3
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	e00b      	b.n	80025cc <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025b4:	230a      	movs	r3, #10
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	881a      	ldrh	r2, [r3, #0]
 80025ba:	0013      	movs	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	189b      	adds	r3, r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	3369      	adds	r3, #105	; 0x69
 80025c4:	33ff      	adds	r3, #255	; 0xff
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	18d3      	adds	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80025cc:	2308      	movs	r3, #8
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d107      	bne.n	80025e6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2200      	movs	r2, #0
 80025da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	b29a      	uxth	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	80da      	strh	r2, [r3, #6]
 80025e4:	e00b      	b.n	80025fe <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2201      	movs	r2, #1
 80025ea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	0c1b      	lsrs	r3, r3, #16
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	0018      	movs	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	b007      	add	sp, #28
 8002606:	bd90      	pop	{r4, r7, pc}

08002608 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	23ba      	movs	r3, #186	; 0xba
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	2101      	movs	r1, #1
 800261e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	23b8      	movs	r3, #184	; 0xb8
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	2100      	movs	r1, #0
 8002628:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2254      	movs	r2, #84	; 0x54
 800262e:	5a9b      	ldrh	r3, [r3, r2]
 8002630:	b29b      	uxth	r3, r3
 8002632:	2201      	movs	r2, #1
 8002634:	4313      	orrs	r3, r2
 8002636:	b299      	uxth	r1, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2254      	movs	r2, #84	; 0x54
 800263c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2254      	movs	r2, #84	; 0x54
 8002642:	5a9b      	ldrh	r3, [r3, r2]
 8002644:	b29b      	uxth	r3, r3
 8002646:	2202      	movs	r2, #2
 8002648:	4313      	orrs	r3, r2
 800264a:	b299      	uxth	r1, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2254      	movs	r2, #84	; 0x54
 8002650:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	0018      	movs	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	b004      	add	sp, #16
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	000a      	movs	r2, r1
 8002666:	1cfb      	adds	r3, r7, #3
 8002668:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b002      	add	sp, #8
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002674:	b5b0      	push	{r4, r5, r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d102      	bne.n	8002688 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	f000 fbaf 	bl	8002de6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002688:	4bcf      	ldr	r3, [pc, #828]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	220c      	movs	r2, #12
 800268e:	4013      	ands	r3, r2
 8002690:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002692:	4bcd      	ldr	r3, [pc, #820]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	025b      	lsls	r3, r3, #9
 800269a:	4013      	ands	r3, r2
 800269c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2201      	movs	r2, #1
 80026a4:	4013      	ands	r3, r2
 80026a6:	d100      	bne.n	80026aa <HAL_RCC_OscConfig+0x36>
 80026a8:	e07e      	b.n	80027a8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d007      	beq.n	80026c0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	2b0c      	cmp	r3, #12
 80026b4:	d112      	bne.n	80026dc <HAL_RCC_OscConfig+0x68>
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	025b      	lsls	r3, r3, #9
 80026bc:	429a      	cmp	r2, r3
 80026be:	d10d      	bne.n	80026dc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c0:	4bc1      	ldr	r3, [pc, #772]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	4013      	ands	r3, r2
 80026ca:	d100      	bne.n	80026ce <HAL_RCC_OscConfig+0x5a>
 80026cc:	e06b      	b.n	80027a6 <HAL_RCC_OscConfig+0x132>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d167      	bne.n	80027a6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f000 fb85 	bl	8002de6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	025b      	lsls	r3, r3, #9
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_OscConfig+0x84>
 80026e8:	4bb7      	ldr	r3, [pc, #732]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4bb6      	ldr	r3, [pc, #728]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 80026ee:	2180      	movs	r1, #128	; 0x80
 80026f0:	0249      	lsls	r1, r1, #9
 80026f2:	430a      	orrs	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e027      	b.n	8002748 <HAL_RCC_OscConfig+0xd4>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	23a0      	movs	r3, #160	; 0xa0
 80026fe:	02db      	lsls	r3, r3, #11
 8002700:	429a      	cmp	r2, r3
 8002702:	d10e      	bne.n	8002722 <HAL_RCC_OscConfig+0xae>
 8002704:	4bb0      	ldr	r3, [pc, #704]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4baf      	ldr	r3, [pc, #700]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 800270a:	2180      	movs	r1, #128	; 0x80
 800270c:	02c9      	lsls	r1, r1, #11
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	4bad      	ldr	r3, [pc, #692]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	4bac      	ldr	r3, [pc, #688]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 8002718:	2180      	movs	r1, #128	; 0x80
 800271a:	0249      	lsls	r1, r1, #9
 800271c:	430a      	orrs	r2, r1
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e012      	b.n	8002748 <HAL_RCC_OscConfig+0xd4>
 8002722:	4ba9      	ldr	r3, [pc, #676]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4ba8      	ldr	r3, [pc, #672]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 8002728:	49a8      	ldr	r1, [pc, #672]	; (80029cc <HAL_RCC_OscConfig+0x358>)
 800272a:	400a      	ands	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	4ba6      	ldr	r3, [pc, #664]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	025b      	lsls	r3, r3, #9
 8002736:	4013      	ands	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4ba2      	ldr	r3, [pc, #648]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4ba1      	ldr	r3, [pc, #644]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 8002742:	49a3      	ldr	r1, [pc, #652]	; (80029d0 <HAL_RCC_OscConfig+0x35c>)
 8002744:	400a      	ands	r2, r1
 8002746:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d015      	beq.n	800277c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7fe f832 	bl	80007b8 <HAL_GetTick>
 8002754:	0003      	movs	r3, r0
 8002756:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002758:	e009      	b.n	800276e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800275a:	f7fe f82d 	bl	80007b8 <HAL_GetTick>
 800275e:	0002      	movs	r2, r0
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b64      	cmp	r3, #100	; 0x64
 8002766:	d902      	bls.n	800276e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	f000 fb3c 	bl	8002de6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800276e:	4b96      	ldr	r3, [pc, #600]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	029b      	lsls	r3, r3, #10
 8002776:	4013      	ands	r3, r2
 8002778:	d0ef      	beq.n	800275a <HAL_RCC_OscConfig+0xe6>
 800277a:	e015      	b.n	80027a8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe f81c 	bl	80007b8 <HAL_GetTick>
 8002780:	0003      	movs	r3, r0
 8002782:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002786:	f7fe f817 	bl	80007b8 <HAL_GetTick>
 800278a:	0002      	movs	r2, r0
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b64      	cmp	r3, #100	; 0x64
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e326      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002798:	4b8b      	ldr	r3, [pc, #556]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	029b      	lsls	r3, r3, #10
 80027a0:	4013      	ands	r3, r2
 80027a2:	d1f0      	bne.n	8002786 <HAL_RCC_OscConfig+0x112>
 80027a4:	e000      	b.n	80027a8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2202      	movs	r2, #2
 80027ae:	4013      	ands	r3, r2
 80027b0:	d100      	bne.n	80027b4 <HAL_RCC_OscConfig+0x140>
 80027b2:	e08b      	b.n	80028cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d005      	beq.n	80027cc <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d13e      	bne.n	8002844 <HAL_RCC_OscConfig+0x1d0>
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d13b      	bne.n	8002844 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80027cc:	4b7e      	ldr	r3, [pc, #504]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2204      	movs	r2, #4
 80027d2:	4013      	ands	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_RCC_OscConfig+0x16c>
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e302      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e0:	4b79      	ldr	r3, [pc, #484]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a7b      	ldr	r2, [pc, #492]	; (80029d4 <HAL_RCC_OscConfig+0x360>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	0019      	movs	r1, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	021a      	lsls	r2, r3, #8
 80027f0:	4b75      	ldr	r3, [pc, #468]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 80027f2:	430a      	orrs	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80027f6:	4b74      	ldr	r3, [pc, #464]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2209      	movs	r2, #9
 80027fc:	4393      	bics	r3, r2
 80027fe:	0019      	movs	r1, r3
 8002800:	4b71      	ldr	r3, [pc, #452]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	430a      	orrs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002808:	f000 fc40 	bl	800308c <HAL_RCC_GetSysClockFreq>
 800280c:	0001      	movs	r1, r0
 800280e:	4b6e      	ldr	r3, [pc, #440]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	220f      	movs	r2, #15
 8002816:	4013      	ands	r3, r2
 8002818:	4a6f      	ldr	r2, [pc, #444]	; (80029d8 <HAL_RCC_OscConfig+0x364>)
 800281a:	5cd3      	ldrb	r3, [r2, r3]
 800281c:	000a      	movs	r2, r1
 800281e:	40da      	lsrs	r2, r3
 8002820:	4b6e      	ldr	r3, [pc, #440]	; (80029dc <HAL_RCC_OscConfig+0x368>)
 8002822:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002824:	4b6e      	ldr	r3, [pc, #440]	; (80029e0 <HAL_RCC_OscConfig+0x36c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2513      	movs	r5, #19
 800282a:	197c      	adds	r4, r7, r5
 800282c:	0018      	movs	r0, r3
 800282e:	f7fd ff7d 	bl	800072c <HAL_InitTick>
 8002832:	0003      	movs	r3, r0
 8002834:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002836:	197b      	adds	r3, r7, r5
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d046      	beq.n	80028cc <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800283e:	197b      	adds	r3, r7, r5
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	e2d0      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d027      	beq.n	800289a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800284a:	4b5f      	ldr	r3, [pc, #380]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2209      	movs	r2, #9
 8002850:	4393      	bics	r3, r2
 8002852:	0019      	movs	r1, r3
 8002854:	4b5c      	ldr	r3, [pc, #368]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	430a      	orrs	r2, r1
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7fd ffac 	bl	80007b8 <HAL_GetTick>
 8002860:	0003      	movs	r3, r0
 8002862:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002866:	f7fd ffa7 	bl	80007b8 <HAL_GetTick>
 800286a:	0002      	movs	r2, r0
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e2b6      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002878:	4b53      	ldr	r3, [pc, #332]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2204      	movs	r2, #4
 800287e:	4013      	ands	r3, r2
 8002880:	d0f1      	beq.n	8002866 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002882:	4b51      	ldr	r3, [pc, #324]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4a53      	ldr	r2, [pc, #332]	; (80029d4 <HAL_RCC_OscConfig+0x360>)
 8002888:	4013      	ands	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	021a      	lsls	r2, r3, #8
 8002892:	4b4d      	ldr	r3, [pc, #308]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 8002894:	430a      	orrs	r2, r1
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	e018      	b.n	80028cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289a:	4b4b      	ldr	r3, [pc, #300]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b4a      	ldr	r3, [pc, #296]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 80028a0:	2101      	movs	r1, #1
 80028a2:	438a      	bics	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a6:	f7fd ff87 	bl	80007b8 <HAL_GetTick>
 80028aa:	0003      	movs	r3, r0
 80028ac:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b0:	f7fd ff82 	bl	80007b8 <HAL_GetTick>
 80028b4:	0002      	movs	r2, r0
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e291      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028c2:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2204      	movs	r2, #4
 80028c8:	4013      	ands	r3, r2
 80028ca:	d1f1      	bne.n	80028b0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2210      	movs	r2, #16
 80028d2:	4013      	ands	r3, r2
 80028d4:	d100      	bne.n	80028d8 <HAL_RCC_OscConfig+0x264>
 80028d6:	e0a1      	b.n	8002a1c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d140      	bne.n	8002960 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028de:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4013      	ands	r3, r2
 80028e8:	d005      	beq.n	80028f6 <HAL_RCC_OscConfig+0x282>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e277      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028f6:	4b34      	ldr	r3, [pc, #208]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4a3a      	ldr	r2, [pc, #232]	; (80029e4 <HAL_RCC_OscConfig+0x370>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	0019      	movs	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002904:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800290a:	4b2f      	ldr	r3, [pc, #188]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	0a19      	lsrs	r1, r3, #8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	061a      	lsls	r2, r3, #24
 8002918:	4b2b      	ldr	r3, [pc, #172]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 800291a:	430a      	orrs	r2, r1
 800291c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	0b5b      	lsrs	r3, r3, #13
 8002924:	3301      	adds	r3, #1
 8002926:	2280      	movs	r2, #128	; 0x80
 8002928:	0212      	lsls	r2, r2, #8
 800292a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800292c:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	210f      	movs	r1, #15
 8002934:	400b      	ands	r3, r1
 8002936:	4928      	ldr	r1, [pc, #160]	; (80029d8 <HAL_RCC_OscConfig+0x364>)
 8002938:	5ccb      	ldrb	r3, [r1, r3]
 800293a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800293c:	4b27      	ldr	r3, [pc, #156]	; (80029dc <HAL_RCC_OscConfig+0x368>)
 800293e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002940:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_RCC_OscConfig+0x36c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2513      	movs	r5, #19
 8002946:	197c      	adds	r4, r7, r5
 8002948:	0018      	movs	r0, r3
 800294a:	f7fd feef 	bl	800072c <HAL_InitTick>
 800294e:	0003      	movs	r3, r0
 8002950:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002952:	197b      	adds	r3, r7, r5
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d060      	beq.n	8002a1c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800295a:	197b      	adds	r3, r7, r5
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	e242      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d03f      	beq.n	80029e8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002968:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	0049      	lsls	r1, r1, #1
 8002972:	430a      	orrs	r2, r1
 8002974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002976:	f7fd ff1f 	bl	80007b8 <HAL_GetTick>
 800297a:	0003      	movs	r3, r0
 800297c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002980:	f7fd ff1a 	bl	80007b8 <HAL_GetTick>
 8002984:	0002      	movs	r2, r0
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e229      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002992:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4013      	ands	r3, r2
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <HAL_RCC_OscConfig+0x370>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	0019      	movs	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 80029ae:	430a      	orrs	r2, r1
 80029b0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	0a19      	lsrs	r1, r3, #8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	061a      	lsls	r2, r3, #24
 80029c0:	4b01      	ldr	r3, [pc, #4]	; (80029c8 <HAL_RCC_OscConfig+0x354>)
 80029c2:	430a      	orrs	r2, r1
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	e029      	b.n	8002a1c <HAL_RCC_OscConfig+0x3a8>
 80029c8:	40021000 	.word	0x40021000
 80029cc:	fffeffff 	.word	0xfffeffff
 80029d0:	fffbffff 	.word	0xfffbffff
 80029d4:	ffffe0ff 	.word	0xffffe0ff
 80029d8:	08007c9c 	.word	0x08007c9c
 80029dc:	20000004 	.word	0x20000004
 80029e0:	20000008 	.word	0x20000008
 80029e4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029e8:	4bbd      	ldr	r3, [pc, #756]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4bbc      	ldr	r3, [pc, #752]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 80029ee:	49bd      	ldr	r1, [pc, #756]	; (8002ce4 <HAL_RCC_OscConfig+0x670>)
 80029f0:	400a      	ands	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fd fee0 	bl	80007b8 <HAL_GetTick>
 80029f8:	0003      	movs	r3, r0
 80029fa:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029fe:	f7fd fedb 	bl	80007b8 <HAL_GetTick>
 8002a02:	0002      	movs	r2, r0
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e1ea      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a10:	4bb3      	ldr	r3, [pc, #716]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d1f0      	bne.n	80029fe <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2208      	movs	r2, #8
 8002a22:	4013      	ands	r3, r2
 8002a24:	d036      	beq.n	8002a94 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d019      	beq.n	8002a62 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2e:	4bac      	ldr	r3, [pc, #688]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002a30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a32:	4bab      	ldr	r3, [pc, #684]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002a34:	2101      	movs	r1, #1
 8002a36:	430a      	orrs	r2, r1
 8002a38:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7fd febd 	bl	80007b8 <HAL_GetTick>
 8002a3e:	0003      	movs	r3, r0
 8002a40:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a44:	f7fd feb8 	bl	80007b8 <HAL_GetTick>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e1c7      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a56:	4ba2      	ldr	r3, [pc, #648]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d0f1      	beq.n	8002a44 <HAL_RCC_OscConfig+0x3d0>
 8002a60:	e018      	b.n	8002a94 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a62:	4b9f      	ldr	r3, [pc, #636]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002a64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a66:	4b9e      	ldr	r3, [pc, #632]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002a68:	2101      	movs	r1, #1
 8002a6a:	438a      	bics	r2, r1
 8002a6c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6e:	f7fd fea3 	bl	80007b8 <HAL_GetTick>
 8002a72:	0003      	movs	r3, r0
 8002a74:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a78:	f7fd fe9e 	bl	80007b8 <HAL_GetTick>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e1ad      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a8a:	4b95      	ldr	r3, [pc, #596]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8e:	2202      	movs	r2, #2
 8002a90:	4013      	ands	r3, r2
 8002a92:	d1f1      	bne.n	8002a78 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2204      	movs	r2, #4
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d100      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x42c>
 8002a9e:	e0ae      	b.n	8002bfe <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa0:	2027      	movs	r0, #39	; 0x27
 8002aa2:	183b      	adds	r3, r7, r0
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa8:	4b8d      	ldr	r3, [pc, #564]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	055b      	lsls	r3, r3, #21
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d109      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab4:	4b8a      	ldr	r3, [pc, #552]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ab8:	4b89      	ldr	r3, [pc, #548]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002aba:	2180      	movs	r1, #128	; 0x80
 8002abc:	0549      	lsls	r1, r1, #21
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002ac2:	183b      	adds	r3, r7, r0
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	4b87      	ldr	r3, [pc, #540]	; (8002ce8 <HAL_RCC_OscConfig+0x674>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d11a      	bne.n	8002b0a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad4:	4b84      	ldr	r3, [pc, #528]	; (8002ce8 <HAL_RCC_OscConfig+0x674>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b83      	ldr	r3, [pc, #524]	; (8002ce8 <HAL_RCC_OscConfig+0x674>)
 8002ada:	2180      	movs	r1, #128	; 0x80
 8002adc:	0049      	lsls	r1, r1, #1
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae2:	f7fd fe69 	bl	80007b8 <HAL_GetTick>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aec:	f7fd fe64 	bl	80007b8 <HAL_GetTick>
 8002af0:	0002      	movs	r2, r0
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e173      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afe:	4b7a      	ldr	r3, [pc, #488]	; (8002ce8 <HAL_RCC_OscConfig+0x674>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4013      	ands	r3, r2
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d107      	bne.n	8002b26 <HAL_RCC_OscConfig+0x4b2>
 8002b16:	4b72      	ldr	r3, [pc, #456]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002b18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b1a:	4b71      	ldr	r3, [pc, #452]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002b1c:	2180      	movs	r1, #128	; 0x80
 8002b1e:	0049      	lsls	r1, r1, #1
 8002b20:	430a      	orrs	r2, r1
 8002b22:	651a      	str	r2, [r3, #80]	; 0x50
 8002b24:	e031      	b.n	8002b8a <HAL_RCC_OscConfig+0x516>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4d4>
 8002b2e:	4b6c      	ldr	r3, [pc, #432]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002b30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b32:	4b6b      	ldr	r3, [pc, #428]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002b34:	496b      	ldr	r1, [pc, #428]	; (8002ce4 <HAL_RCC_OscConfig+0x670>)
 8002b36:	400a      	ands	r2, r1
 8002b38:	651a      	str	r2, [r3, #80]	; 0x50
 8002b3a:	4b69      	ldr	r3, [pc, #420]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002b3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b3e:	4b68      	ldr	r3, [pc, #416]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002b40:	496a      	ldr	r1, [pc, #424]	; (8002cec <HAL_RCC_OscConfig+0x678>)
 8002b42:	400a      	ands	r2, r1
 8002b44:	651a      	str	r2, [r3, #80]	; 0x50
 8002b46:	e020      	b.n	8002b8a <HAL_RCC_OscConfig+0x516>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	23a0      	movs	r3, #160	; 0xa0
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d10e      	bne.n	8002b72 <HAL_RCC_OscConfig+0x4fe>
 8002b54:	4b62      	ldr	r3, [pc, #392]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002b56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b58:	4b61      	ldr	r3, [pc, #388]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002b5a:	2180      	movs	r1, #128	; 0x80
 8002b5c:	00c9      	lsls	r1, r1, #3
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	651a      	str	r2, [r3, #80]	; 0x50
 8002b62:	4b5f      	ldr	r3, [pc, #380]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002b64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b66:	4b5e      	ldr	r3, [pc, #376]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002b68:	2180      	movs	r1, #128	; 0x80
 8002b6a:	0049      	lsls	r1, r1, #1
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	651a      	str	r2, [r3, #80]	; 0x50
 8002b70:	e00b      	b.n	8002b8a <HAL_RCC_OscConfig+0x516>
 8002b72:	4b5b      	ldr	r3, [pc, #364]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b76:	4b5a      	ldr	r3, [pc, #360]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002b78:	495a      	ldr	r1, [pc, #360]	; (8002ce4 <HAL_RCC_OscConfig+0x670>)
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	651a      	str	r2, [r3, #80]	; 0x50
 8002b7e:	4b58      	ldr	r3, [pc, #352]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002b80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b82:	4b57      	ldr	r3, [pc, #348]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002b84:	4959      	ldr	r1, [pc, #356]	; (8002cec <HAL_RCC_OscConfig+0x678>)
 8002b86:	400a      	ands	r2, r1
 8002b88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d015      	beq.n	8002bbe <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b92:	f7fd fe11 	bl	80007b8 <HAL_GetTick>
 8002b96:	0003      	movs	r3, r0
 8002b98:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b9a:	e009      	b.n	8002bb0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7fd fe0c 	bl	80007b8 <HAL_GetTick>
 8002ba0:	0002      	movs	r2, r0
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	4a52      	ldr	r2, [pc, #328]	; (8002cf0 <HAL_RCC_OscConfig+0x67c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e11a      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bb0:	4b4b      	ldr	r3, [pc, #300]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002bb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d0ef      	beq.n	8002b9c <HAL_RCC_OscConfig+0x528>
 8002bbc:	e014      	b.n	8002be8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bbe:	f7fd fdfb 	bl	80007b8 <HAL_GetTick>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bc6:	e009      	b.n	8002bdc <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7fd fdf6 	bl	80007b8 <HAL_GetTick>
 8002bcc:	0002      	movs	r2, r0
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	4a47      	ldr	r2, [pc, #284]	; (8002cf0 <HAL_RCC_OscConfig+0x67c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e104      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bdc:	4b40      	ldr	r3, [pc, #256]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002bde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4013      	ands	r3, r2
 8002be6:	d1ef      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002be8:	2327      	movs	r3, #39	; 0x27
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d105      	bne.n	8002bfe <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf2:	4b3b      	ldr	r3, [pc, #236]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bf6:	4b3a      	ldr	r3, [pc, #232]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002bf8:	493e      	ldr	r1, [pc, #248]	; (8002cf4 <HAL_RCC_OscConfig+0x680>)
 8002bfa:	400a      	ands	r2, r1
 8002bfc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2220      	movs	r2, #32
 8002c04:	4013      	ands	r3, r2
 8002c06:	d049      	beq.n	8002c9c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d026      	beq.n	8002c5e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002c10:	4b33      	ldr	r3, [pc, #204]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	4b32      	ldr	r3, [pc, #200]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002c16:	2101      	movs	r1, #1
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	4b30      	ldr	r3, [pc, #192]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c20:	4b2f      	ldr	r3, [pc, #188]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002c22:	2101      	movs	r1, #1
 8002c24:	430a      	orrs	r2, r1
 8002c26:	635a      	str	r2, [r3, #52]	; 0x34
 8002c28:	4b33      	ldr	r3, [pc, #204]	; (8002cf8 <HAL_RCC_OscConfig+0x684>)
 8002c2a:	6a1a      	ldr	r2, [r3, #32]
 8002c2c:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <HAL_RCC_OscConfig+0x684>)
 8002c2e:	2180      	movs	r1, #128	; 0x80
 8002c30:	0189      	lsls	r1, r1, #6
 8002c32:	430a      	orrs	r2, r1
 8002c34:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c36:	f7fd fdbf 	bl	80007b8 <HAL_GetTick>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c40:	f7fd fdba 	bl	80007b8 <HAL_GetTick>
 8002c44:	0002      	movs	r2, r0
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0c9      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c52:	4b23      	ldr	r3, [pc, #140]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2202      	movs	r2, #2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d0f1      	beq.n	8002c40 <HAL_RCC_OscConfig+0x5cc>
 8002c5c:	e01e      	b.n	8002c9c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002c5e:	4b20      	ldr	r3, [pc, #128]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002c64:	2101      	movs	r1, #1
 8002c66:	438a      	bics	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <HAL_RCC_OscConfig+0x684>)
 8002c6c:	6a1a      	ldr	r2, [r3, #32]
 8002c6e:	4b22      	ldr	r3, [pc, #136]	; (8002cf8 <HAL_RCC_OscConfig+0x684>)
 8002c70:	4922      	ldr	r1, [pc, #136]	; (8002cfc <HAL_RCC_OscConfig+0x688>)
 8002c72:	400a      	ands	r2, r1
 8002c74:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fd fd9f 	bl	80007b8 <HAL_GetTick>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c80:	f7fd fd9a 	bl	80007b8 <HAL_GetTick>
 8002c84:	0002      	movs	r2, r0
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e0a9      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c92:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2202      	movs	r2, #2
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d1f1      	bne.n	8002c80 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d100      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x632>
 8002ca4:	e09e      	b.n	8002de4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	2b0c      	cmp	r3, #12
 8002caa:	d100      	bne.n	8002cae <HAL_RCC_OscConfig+0x63a>
 8002cac:	e077      	b.n	8002d9e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d158      	bne.n	8002d68 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <HAL_RCC_OscConfig+0x66c>)
 8002cbc:	4910      	ldr	r1, [pc, #64]	; (8002d00 <HAL_RCC_OscConfig+0x68c>)
 8002cbe:	400a      	ands	r2, r1
 8002cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc2:	f7fd fd79 	bl	80007b8 <HAL_GetTick>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cca:	e01b      	b.n	8002d04 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fd fd74 	bl	80007b8 <HAL_GetTick>
 8002cd0:	0002      	movs	r2, r0
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d914      	bls.n	8002d04 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e083      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	fffffeff 	.word	0xfffffeff
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	fffffbff 	.word	0xfffffbff
 8002cf0:	00001388 	.word	0x00001388
 8002cf4:	efffffff 	.word	0xefffffff
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	ffffdfff 	.word	0xffffdfff
 8002d00:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d04:	4b3a      	ldr	r3, [pc, #232]	; (8002df0 <HAL_RCC_OscConfig+0x77c>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	049b      	lsls	r3, r3, #18
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d1dd      	bne.n	8002ccc <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d10:	4b37      	ldr	r3, [pc, #220]	; (8002df0 <HAL_RCC_OscConfig+0x77c>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4a37      	ldr	r2, [pc, #220]	; (8002df4 <HAL_RCC_OscConfig+0x780>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	0019      	movs	r1, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	4b31      	ldr	r3, [pc, #196]	; (8002df0 <HAL_RCC_OscConfig+0x77c>)
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d30:	4b2f      	ldr	r3, [pc, #188]	; (8002df0 <HAL_RCC_OscConfig+0x77c>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4b2e      	ldr	r3, [pc, #184]	; (8002df0 <HAL_RCC_OscConfig+0x77c>)
 8002d36:	2180      	movs	r1, #128	; 0x80
 8002d38:	0449      	lsls	r1, r1, #17
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3e:	f7fd fd3b 	bl	80007b8 <HAL_GetTick>
 8002d42:	0003      	movs	r3, r0
 8002d44:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d48:	f7fd fd36 	bl	80007b8 <HAL_GetTick>
 8002d4c:	0002      	movs	r2, r0
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e045      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d5a:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <HAL_RCC_OscConfig+0x77c>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	049b      	lsls	r3, r3, #18
 8002d62:	4013      	ands	r3, r2
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x6d4>
 8002d66:	e03d      	b.n	8002de4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d68:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <HAL_RCC_OscConfig+0x77c>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <HAL_RCC_OscConfig+0x77c>)
 8002d6e:	4922      	ldr	r1, [pc, #136]	; (8002df8 <HAL_RCC_OscConfig+0x784>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fd fd20 	bl	80007b8 <HAL_GetTick>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7e:	f7fd fd1b 	bl	80007b8 <HAL_GetTick>
 8002d82:	0002      	movs	r2, r0
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e02a      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d90:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <HAL_RCC_OscConfig+0x77c>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	049b      	lsls	r3, r3, #18
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d1f0      	bne.n	8002d7e <HAL_RCC_OscConfig+0x70a>
 8002d9c:	e022      	b.n	8002de4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e01d      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002daa:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_RCC_OscConfig+0x77c>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	025b      	lsls	r3, r3, #9
 8002db6:	401a      	ands	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d10f      	bne.n	8002de0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	23f0      	movs	r3, #240	; 0xf0
 8002dc4:	039b      	lsls	r3, r3, #14
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d107      	bne.n	8002de0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	23c0      	movs	r3, #192	; 0xc0
 8002dd4:	041b      	lsls	r3, r3, #16
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	0018      	movs	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b00a      	add	sp, #40	; 0x28
 8002dec:	bdb0      	pop	{r4, r5, r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	40021000 	.word	0x40021000
 8002df4:	ff02ffff 	.word	0xff02ffff
 8002df8:	feffffff 	.word	0xfeffffff

08002dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dfc:	b5b0      	push	{r4, r5, r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e128      	b.n	8003062 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e10:	4b96      	ldr	r3, [pc, #600]	; (800306c <HAL_RCC_ClockConfig+0x270>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2201      	movs	r2, #1
 8002e16:	4013      	ands	r3, r2
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d91e      	bls.n	8002e5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b93      	ldr	r3, [pc, #588]	; (800306c <HAL_RCC_ClockConfig+0x270>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2201      	movs	r2, #1
 8002e24:	4393      	bics	r3, r2
 8002e26:	0019      	movs	r1, r3
 8002e28:	4b90      	ldr	r3, [pc, #576]	; (800306c <HAL_RCC_ClockConfig+0x270>)
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e30:	f7fd fcc2 	bl	80007b8 <HAL_GetTick>
 8002e34:	0003      	movs	r3, r0
 8002e36:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e38:	e009      	b.n	8002e4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3a:	f7fd fcbd 	bl	80007b8 <HAL_GetTick>
 8002e3e:	0002      	movs	r2, r0
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	4a8a      	ldr	r2, [pc, #552]	; (8003070 <HAL_RCC_ClockConfig+0x274>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e109      	b.n	8003062 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b87      	ldr	r3, [pc, #540]	; (800306c <HAL_RCC_ClockConfig+0x270>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2201      	movs	r2, #1
 8002e54:	4013      	ands	r3, r2
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d1ee      	bne.n	8002e3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2202      	movs	r2, #2
 8002e62:	4013      	ands	r3, r2
 8002e64:	d009      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e66:	4b83      	ldr	r3, [pc, #524]	; (8003074 <HAL_RCC_ClockConfig+0x278>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	22f0      	movs	r2, #240	; 0xf0
 8002e6c:	4393      	bics	r3, r2
 8002e6e:	0019      	movs	r1, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	4b7f      	ldr	r3, [pc, #508]	; (8003074 <HAL_RCC_ClockConfig+0x278>)
 8002e76:	430a      	orrs	r2, r1
 8002e78:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	4013      	ands	r3, r2
 8002e82:	d100      	bne.n	8002e86 <HAL_RCC_ClockConfig+0x8a>
 8002e84:	e089      	b.n	8002f9a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e8e:	4b79      	ldr	r3, [pc, #484]	; (8003074 <HAL_RCC_ClockConfig+0x278>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	029b      	lsls	r3, r3, #10
 8002e96:	4013      	ands	r3, r2
 8002e98:	d120      	bne.n	8002edc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e0e1      	b.n	8003062 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ea6:	4b73      	ldr	r3, [pc, #460]	; (8003074 <HAL_RCC_ClockConfig+0x278>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	049b      	lsls	r3, r3, #18
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d114      	bne.n	8002edc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0d5      	b.n	8003062 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d106      	bne.n	8002ecc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ebe:	4b6d      	ldr	r3, [pc, #436]	; (8003074 <HAL_RCC_ClockConfig+0x278>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d109      	bne.n	8002edc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0ca      	b.n	8003062 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ecc:	4b69      	ldr	r3, [pc, #420]	; (8003074 <HAL_RCC_ClockConfig+0x278>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	2380      	movs	r3, #128	; 0x80
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0c2      	b.n	8003062 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002edc:	4b65      	ldr	r3, [pc, #404]	; (8003074 <HAL_RCC_ClockConfig+0x278>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	4393      	bics	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	4b62      	ldr	r3, [pc, #392]	; (8003074 <HAL_RCC_ClockConfig+0x278>)
 8002eec:	430a      	orrs	r2, r1
 8002eee:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef0:	f7fd fc62 	bl	80007b8 <HAL_GetTick>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d111      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f00:	e009      	b.n	8002f16 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f02:	f7fd fc59 	bl	80007b8 <HAL_GetTick>
 8002f06:	0002      	movs	r2, r0
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	4a58      	ldr	r2, [pc, #352]	; (8003070 <HAL_RCC_ClockConfig+0x274>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e0a5      	b.n	8003062 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f16:	4b57      	ldr	r3, [pc, #348]	; (8003074 <HAL_RCC_ClockConfig+0x278>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d1ef      	bne.n	8002f02 <HAL_RCC_ClockConfig+0x106>
 8002f22:	e03a      	b.n	8002f9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d111      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f2c:	e009      	b.n	8002f42 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2e:	f7fd fc43 	bl	80007b8 <HAL_GetTick>
 8002f32:	0002      	movs	r2, r0
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	4a4d      	ldr	r2, [pc, #308]	; (8003070 <HAL_RCC_ClockConfig+0x274>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e08f      	b.n	8003062 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f42:	4b4c      	ldr	r3, [pc, #304]	; (8003074 <HAL_RCC_ClockConfig+0x278>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	220c      	movs	r2, #12
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b0c      	cmp	r3, #12
 8002f4c:	d1ef      	bne.n	8002f2e <HAL_RCC_ClockConfig+0x132>
 8002f4e:	e024      	b.n	8002f9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d11b      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f58:	e009      	b.n	8002f6e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5a:	f7fd fc2d 	bl	80007b8 <HAL_GetTick>
 8002f5e:	0002      	movs	r2, r0
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	4a42      	ldr	r2, [pc, #264]	; (8003070 <HAL_RCC_ClockConfig+0x274>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e079      	b.n	8003062 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f6e:	4b41      	ldr	r3, [pc, #260]	; (8003074 <HAL_RCC_ClockConfig+0x278>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	220c      	movs	r2, #12
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d1ef      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x15e>
 8002f7a:	e00e      	b.n	8002f9a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f7c:	f7fd fc1c 	bl	80007b8 <HAL_GetTick>
 8002f80:	0002      	movs	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	4a3a      	ldr	r2, [pc, #232]	; (8003070 <HAL_RCC_ClockConfig+0x274>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e068      	b.n	8003062 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f90:	4b38      	ldr	r3, [pc, #224]	; (8003074 <HAL_RCC_ClockConfig+0x278>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	220c      	movs	r2, #12
 8002f96:	4013      	ands	r3, r2
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9a:	4b34      	ldr	r3, [pc, #208]	; (800306c <HAL_RCC_ClockConfig+0x270>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d21e      	bcs.n	8002fe6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa8:	4b30      	ldr	r3, [pc, #192]	; (800306c <HAL_RCC_ClockConfig+0x270>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2201      	movs	r2, #1
 8002fae:	4393      	bics	r3, r2
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	4b2e      	ldr	r3, [pc, #184]	; (800306c <HAL_RCC_ClockConfig+0x270>)
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fba:	f7fd fbfd 	bl	80007b8 <HAL_GetTick>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	e009      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc4:	f7fd fbf8 	bl	80007b8 <HAL_GetTick>
 8002fc8:	0002      	movs	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	4a28      	ldr	r2, [pc, #160]	; (8003070 <HAL_RCC_ClockConfig+0x274>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e044      	b.n	8003062 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd8:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_RCC_ClockConfig+0x270>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	4013      	ands	r3, r2
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d1ee      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2204      	movs	r2, #4
 8002fec:	4013      	ands	r3, r2
 8002fee:	d009      	beq.n	8003004 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff0:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_RCC_ClockConfig+0x278>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a20      	ldr	r2, [pc, #128]	; (8003078 <HAL_RCC_ClockConfig+0x27c>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <HAL_RCC_ClockConfig+0x278>)
 8003000:	430a      	orrs	r2, r1
 8003002:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2208      	movs	r2, #8
 800300a:	4013      	ands	r3, r2
 800300c:	d00a      	beq.n	8003024 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800300e:	4b19      	ldr	r3, [pc, #100]	; (8003074 <HAL_RCC_ClockConfig+0x278>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	4a1a      	ldr	r2, [pc, #104]	; (800307c <HAL_RCC_ClockConfig+0x280>)
 8003014:	4013      	ands	r3, r2
 8003016:	0019      	movs	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	00da      	lsls	r2, r3, #3
 800301e:	4b15      	ldr	r3, [pc, #84]	; (8003074 <HAL_RCC_ClockConfig+0x278>)
 8003020:	430a      	orrs	r2, r1
 8003022:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003024:	f000 f832 	bl	800308c <HAL_RCC_GetSysClockFreq>
 8003028:	0001      	movs	r1, r0
 800302a:	4b12      	ldr	r3, [pc, #72]	; (8003074 <HAL_RCC_ClockConfig+0x278>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	220f      	movs	r2, #15
 8003032:	4013      	ands	r3, r2
 8003034:	4a12      	ldr	r2, [pc, #72]	; (8003080 <HAL_RCC_ClockConfig+0x284>)
 8003036:	5cd3      	ldrb	r3, [r2, r3]
 8003038:	000a      	movs	r2, r1
 800303a:	40da      	lsrs	r2, r3
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <HAL_RCC_ClockConfig+0x288>)
 800303e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_RCC_ClockConfig+0x28c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	250b      	movs	r5, #11
 8003046:	197c      	adds	r4, r7, r5
 8003048:	0018      	movs	r0, r3
 800304a:	f7fd fb6f 	bl	800072c <HAL_InitTick>
 800304e:	0003      	movs	r3, r0
 8003050:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003052:	197b      	adds	r3, r7, r5
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800305a:	197b      	adds	r3, r7, r5
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	e000      	b.n	8003062 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	0018      	movs	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	b004      	add	sp, #16
 8003068:	bdb0      	pop	{r4, r5, r7, pc}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	40022000 	.word	0x40022000
 8003070:	00001388 	.word	0x00001388
 8003074:	40021000 	.word	0x40021000
 8003078:	fffff8ff 	.word	0xfffff8ff
 800307c:	ffffc7ff 	.word	0xffffc7ff
 8003080:	08007c9c 	.word	0x08007c9c
 8003084:	20000004 	.word	0x20000004
 8003088:	20000008 	.word	0x20000008

0800308c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800308c:	b5b0      	push	{r4, r5, r7, lr}
 800308e:	b08e      	sub	sp, #56	; 0x38
 8003090:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003092:	4b4c      	ldr	r3, [pc, #304]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800309a:	230c      	movs	r3, #12
 800309c:	4013      	ands	r3, r2
 800309e:	2b0c      	cmp	r3, #12
 80030a0:	d014      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x40>
 80030a2:	d900      	bls.n	80030a6 <HAL_RCC_GetSysClockFreq+0x1a>
 80030a4:	e07b      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x112>
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d002      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0x24>
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d00b      	beq.n	80030c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80030ae:	e076      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80030b0:	4b44      	ldr	r3, [pc, #272]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2210      	movs	r2, #16
 80030b6:	4013      	ands	r3, r2
 80030b8:	d002      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80030ba:	4b43      	ldr	r3, [pc, #268]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80030bc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80030be:	e07c      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80030c0:	4b42      	ldr	r3, [pc, #264]	; (80031cc <HAL_RCC_GetSysClockFreq+0x140>)
 80030c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030c4:	e079      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030c6:	4b42      	ldr	r3, [pc, #264]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80030c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030ca:	e076      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	0c9a      	lsrs	r2, r3, #18
 80030d0:	230f      	movs	r3, #15
 80030d2:	401a      	ands	r2, r3
 80030d4:	4b3f      	ldr	r3, [pc, #252]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x148>)
 80030d6:	5c9b      	ldrb	r3, [r3, r2]
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80030da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030dc:	0d9a      	lsrs	r2, r3, #22
 80030de:	2303      	movs	r3, #3
 80030e0:	4013      	ands	r3, r2
 80030e2:	3301      	adds	r3, #1
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030e6:	4b37      	ldr	r3, [pc, #220]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	025b      	lsls	r3, r3, #9
 80030ee:	4013      	ands	r3, r2
 80030f0:	d01a      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	4a35      	ldr	r2, [pc, #212]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80030fc:	2300      	movs	r3, #0
 80030fe:	69b8      	ldr	r0, [r7, #24]
 8003100:	69f9      	ldr	r1, [r7, #28]
 8003102:	f7fd f8b5 	bl	8000270 <__aeabi_lmul>
 8003106:	0002      	movs	r2, r0
 8003108:	000b      	movs	r3, r1
 800310a:	0010      	movs	r0, r2
 800310c:	0019      	movs	r1, r3
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f7fd f889 	bl	8000230 <__aeabi_uldivmod>
 800311e:	0002      	movs	r2, r0
 8003120:	000b      	movs	r3, r1
 8003122:	0013      	movs	r3, r2
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
 8003126:	e037      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003128:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2210      	movs	r2, #16
 800312e:	4013      	ands	r3, r2
 8003130:	d01a      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800313c:	2300      	movs	r3, #0
 800313e:	68b8      	ldr	r0, [r7, #8]
 8003140:	68f9      	ldr	r1, [r7, #12]
 8003142:	f7fd f895 	bl	8000270 <__aeabi_lmul>
 8003146:	0002      	movs	r2, r0
 8003148:	000b      	movs	r3, r1
 800314a:	0010      	movs	r0, r2
 800314c:	0019      	movs	r1, r3
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	603b      	str	r3, [r7, #0]
 8003152:	2300      	movs	r3, #0
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f7fd f869 	bl	8000230 <__aeabi_uldivmod>
 800315e:	0002      	movs	r2, r0
 8003160:	000b      	movs	r3, r1
 8003162:	0013      	movs	r3, r2
 8003164:	637b      	str	r3, [r7, #52]	; 0x34
 8003166:	e017      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	0018      	movs	r0, r3
 800316c:	2300      	movs	r3, #0
 800316e:	0019      	movs	r1, r3
 8003170:	4a16      	ldr	r2, [pc, #88]	; (80031cc <HAL_RCC_GetSysClockFreq+0x140>)
 8003172:	2300      	movs	r3, #0
 8003174:	f7fd f87c 	bl	8000270 <__aeabi_lmul>
 8003178:	0002      	movs	r2, r0
 800317a:	000b      	movs	r3, r1
 800317c:	0010      	movs	r0, r2
 800317e:	0019      	movs	r1, r3
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	001c      	movs	r4, r3
 8003184:	2300      	movs	r3, #0
 8003186:	001d      	movs	r5, r3
 8003188:	0022      	movs	r2, r4
 800318a:	002b      	movs	r3, r5
 800318c:	f7fd f850 	bl	8000230 <__aeabi_uldivmod>
 8003190:	0002      	movs	r2, r0
 8003192:	000b      	movs	r3, r1
 8003194:	0013      	movs	r3, r2
 8003196:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800319c:	e00d      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800319e:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	0b5b      	lsrs	r3, r3, #13
 80031a4:	2207      	movs	r2, #7
 80031a6:	4013      	ands	r3, r2
 80031a8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	3301      	adds	r3, #1
 80031ae:	2280      	movs	r2, #128	; 0x80
 80031b0:	0212      	lsls	r2, r2, #8
 80031b2:	409a      	lsls	r2, r3
 80031b4:	0013      	movs	r3, r2
 80031b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031b8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80031bc:	0018      	movs	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	b00e      	add	sp, #56	; 0x38
 80031c2:	bdb0      	pop	{r4, r5, r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	003d0900 	.word	0x003d0900
 80031cc:	00f42400 	.word	0x00f42400
 80031d0:	007a1200 	.word	0x007a1200
 80031d4:	08007cac 	.word	0x08007cac

080031d8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80031e0:	2317      	movs	r3, #23
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2220      	movs	r2, #32
 80031ee:	4013      	ands	r3, r2
 80031f0:	d106      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	4013      	ands	r3, r2
 80031fc:	d100      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80031fe:	e104      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003200:	4bb1      	ldr	r3, [pc, #708]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003204:	2380      	movs	r3, #128	; 0x80
 8003206:	055b      	lsls	r3, r3, #21
 8003208:	4013      	ands	r3, r2
 800320a:	d10a      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320c:	4bae      	ldr	r3, [pc, #696]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800320e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003210:	4bad      	ldr	r3, [pc, #692]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	0549      	lsls	r1, r1, #21
 8003216:	430a      	orrs	r2, r1
 8003218:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800321a:	2317      	movs	r3, #23
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003222:	4baa      	ldr	r3, [pc, #680]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4013      	ands	r3, r2
 800322c:	d11a      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800322e:	4ba7      	ldr	r3, [pc, #668]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4ba6      	ldr	r3, [pc, #664]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003234:	2180      	movs	r1, #128	; 0x80
 8003236:	0049      	lsls	r1, r1, #1
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323c:	f7fd fabc 	bl	80007b8 <HAL_GetTick>
 8003240:	0003      	movs	r3, r0
 8003242:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003244:	e008      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003246:	f7fd fab7 	bl	80007b8 <HAL_GetTick>
 800324a:	0002      	movs	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b64      	cmp	r3, #100	; 0x64
 8003252:	d901      	bls.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e133      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	4b9c      	ldr	r3, [pc, #624]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4013      	ands	r3, r2
 8003262:	d0f0      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003264:	4b98      	ldr	r3, [pc, #608]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	23c0      	movs	r3, #192	; 0xc0
 800326a:	039b      	lsls	r3, r3, #14
 800326c:	4013      	ands	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	23c0      	movs	r3, #192	; 0xc0
 8003276:	039b      	lsls	r3, r3, #14
 8003278:	4013      	ands	r3, r2
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	429a      	cmp	r2, r3
 800327e:	d107      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	23c0      	movs	r3, #192	; 0xc0
 8003286:	039b      	lsls	r3, r3, #14
 8003288:	4013      	ands	r3, r2
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	429a      	cmp	r2, r3
 800328e:	d013      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	23c0      	movs	r3, #192	; 0xc0
 8003296:	029b      	lsls	r3, r3, #10
 8003298:	401a      	ands	r2, r3
 800329a:	23c0      	movs	r3, #192	; 0xc0
 800329c:	029b      	lsls	r3, r3, #10
 800329e:	429a      	cmp	r2, r3
 80032a0:	d10a      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80032a2:	4b89      	ldr	r3, [pc, #548]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	029b      	lsls	r3, r3, #10
 80032aa:	401a      	ands	r2, r3
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	029b      	lsls	r3, r3, #10
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d101      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e103      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80032b8:	4b83      	ldr	r3, [pc, #524]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032bc:	23c0      	movs	r3, #192	; 0xc0
 80032be:	029b      	lsls	r3, r3, #10
 80032c0:	4013      	ands	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d049      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	23c0      	movs	r3, #192	; 0xc0
 80032d0:	029b      	lsls	r3, r3, #10
 80032d2:	4013      	ands	r3, r2
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d004      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2220      	movs	r2, #32
 80032e0:	4013      	ands	r3, r2
 80032e2:	d10d      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	23c0      	movs	r3, #192	; 0xc0
 80032ea:	029b      	lsls	r3, r3, #10
 80032ec:	4013      	ands	r3, r2
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d034      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	2380      	movs	r3, #128	; 0x80
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	4013      	ands	r3, r2
 80032fe:	d02e      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003300:	4b71      	ldr	r3, [pc, #452]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003304:	4a72      	ldr	r2, [pc, #456]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003306:	4013      	ands	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800330a:	4b6f      	ldr	r3, [pc, #444]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800330c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800330e:	4b6e      	ldr	r3, [pc, #440]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003310:	2180      	movs	r1, #128	; 0x80
 8003312:	0309      	lsls	r1, r1, #12
 8003314:	430a      	orrs	r2, r1
 8003316:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003318:	4b6b      	ldr	r3, [pc, #428]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800331a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800331c:	4b6a      	ldr	r3, [pc, #424]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800331e:	496d      	ldr	r1, [pc, #436]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003320:	400a      	ands	r2, r1
 8003322:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003324:	4b68      	ldr	r3, [pc, #416]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4013      	ands	r3, r2
 8003332:	d014      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003334:	f7fd fa40 	bl	80007b8 <HAL_GetTick>
 8003338:	0003      	movs	r3, r0
 800333a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800333c:	e009      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333e:	f7fd fa3b 	bl	80007b8 <HAL_GetTick>
 8003342:	0002      	movs	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	4a63      	ldr	r2, [pc, #396]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e0b6      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003352:	4b5d      	ldr	r3, [pc, #372]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003356:	2380      	movs	r3, #128	; 0x80
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4013      	ands	r3, r2
 800335c:	d0ef      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	4013      	ands	r3, r2
 8003368:	d01f      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	23c0      	movs	r3, #192	; 0xc0
 8003370:	029b      	lsls	r3, r3, #10
 8003372:	401a      	ands	r2, r3
 8003374:	23c0      	movs	r3, #192	; 0xc0
 8003376:	029b      	lsls	r3, r3, #10
 8003378:	429a      	cmp	r2, r3
 800337a:	d10c      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800337c:	4b52      	ldr	r3, [pc, #328]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a56      	ldr	r2, [pc, #344]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003382:	4013      	ands	r3, r2
 8003384:	0019      	movs	r1, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	23c0      	movs	r3, #192	; 0xc0
 800338c:	039b      	lsls	r3, r3, #14
 800338e:	401a      	ands	r2, r3
 8003390:	4b4d      	ldr	r3, [pc, #308]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	4b4c      	ldr	r3, [pc, #304]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003398:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	23c0      	movs	r3, #192	; 0xc0
 80033a0:	029b      	lsls	r3, r3, #10
 80033a2:	401a      	ands	r2, r3
 80033a4:	4b48      	ldr	r3, [pc, #288]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033a6:	430a      	orrs	r2, r1
 80033a8:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2220      	movs	r2, #32
 80033b0:	4013      	ands	r3, r2
 80033b2:	d01f      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	23c0      	movs	r3, #192	; 0xc0
 80033ba:	029b      	lsls	r3, r3, #10
 80033bc:	401a      	ands	r2, r3
 80033be:	23c0      	movs	r3, #192	; 0xc0
 80033c0:	029b      	lsls	r3, r3, #10
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80033c6:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a44      	ldr	r2, [pc, #272]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	0019      	movs	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	23c0      	movs	r3, #192	; 0xc0
 80033d6:	039b      	lsls	r3, r3, #14
 80033d8:	401a      	ands	r2, r3
 80033da:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033dc:	430a      	orrs	r2, r1
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	4b39      	ldr	r3, [pc, #228]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033e2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	23c0      	movs	r3, #192	; 0xc0
 80033ea:	029b      	lsls	r3, r3, #10
 80033ec:	401a      	ands	r2, r3
 80033ee:	4b36      	ldr	r3, [pc, #216]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033f0:	430a      	orrs	r2, r1
 80033f2:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033f4:	2317      	movs	r3, #23
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d105      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033fe:	4b32      	ldr	r3, [pc, #200]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003402:	4b31      	ldr	r3, [pc, #196]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003404:	4936      	ldr	r1, [pc, #216]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003406:	400a      	ands	r2, r1
 8003408:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2201      	movs	r2, #1
 8003410:	4013      	ands	r3, r2
 8003412:	d009      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003414:	4b2c      	ldr	r3, [pc, #176]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003418:	2203      	movs	r2, #3
 800341a:	4393      	bics	r3, r2
 800341c:	0019      	movs	r1, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003424:	430a      	orrs	r2, r1
 8003426:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2202      	movs	r2, #2
 800342e:	4013      	ands	r3, r2
 8003430:	d009      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003432:	4b25      	ldr	r3, [pc, #148]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003436:	220c      	movs	r2, #12
 8003438:	4393      	bics	r3, r2
 800343a:	0019      	movs	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003442:	430a      	orrs	r2, r1
 8003444:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2204      	movs	r2, #4
 800344c:	4013      	ands	r3, r2
 800344e:	d009      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003450:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003454:	4a23      	ldr	r2, [pc, #140]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003456:	4013      	ands	r3, r2
 8003458:	0019      	movs	r1, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003460:	430a      	orrs	r2, r1
 8003462:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2208      	movs	r2, #8
 800346a:	4013      	ands	r3, r2
 800346c:	d009      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800346e:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003472:	4a1d      	ldr	r2, [pc, #116]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003474:	4013      	ands	r3, r2
 8003476:	0019      	movs	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800347e:	430a      	orrs	r2, r1
 8003480:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2240      	movs	r2, #64	; 0x40
 8003488:	4013      	ands	r3, r2
 800348a:	d009      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800348c:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800348e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003490:	4a16      	ldr	r2, [pc, #88]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003492:	4013      	ands	r3, r2
 8003494:	0019      	movs	r1, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1a      	ldr	r2, [r3, #32]
 800349a:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800349c:	430a      	orrs	r2, r1
 800349e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2280      	movs	r2, #128	; 0x80
 80034a6:	4013      	ands	r3, r2
 80034a8:	d009      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80034aa:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ae:	4a10      	ldr	r2, [pc, #64]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034ba:	430a      	orrs	r2, r1
 80034bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	0018      	movs	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b006      	add	sp, #24
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40007000 	.word	0x40007000
 80034d0:	fffcffff 	.word	0xfffcffff
 80034d4:	fff7ffff 	.word	0xfff7ffff
 80034d8:	00001388 	.word	0x00001388
 80034dc:	ffcfffff 	.word	0xffcfffff
 80034e0:	efffffff 	.word	0xefffffff
 80034e4:	fffff3ff 	.word	0xfffff3ff
 80034e8:	ffffcfff 	.word	0xffffcfff
 80034ec:	fbffffff 	.word	0xfbffffff
 80034f0:	fff3ffff 	.word	0xfff3ffff

080034f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2244      	movs	r2, #68	; 0x44
 8003500:	2100      	movs	r1, #0
 8003502:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <USB_EnableGlobalInt+0x28>)
 8003506:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	b299      	uxth	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2240      	movs	r2, #64	; 0x40
 8003510:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	0018      	movs	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	b004      	add	sp, #16
 800351a:	bd80      	pop	{r7, pc}
 800351c:	0000bf80 	.word	0x0000bf80

08003520 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <USB_DisableGlobalInt+0x30>)
 800352a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2240      	movs	r2, #64	; 0x40
 8003530:	5a9b      	ldrh	r3, [r3, r2]
 8003532:	b29b      	uxth	r3, r3
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	b292      	uxth	r2, r2
 8003538:	43d2      	mvns	r2, r2
 800353a:	b292      	uxth	r2, r2
 800353c:	4013      	ands	r3, r2
 800353e:	b299      	uxth	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2240      	movs	r2, #64	; 0x40
 8003544:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	0018      	movs	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	b004      	add	sp, #16
 800354e:	bd80      	pop	{r7, pc}
 8003550:	0000bf80 	.word	0x0000bf80

08003554 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003554:	b084      	sub	sp, #16
 8003556:	b590      	push	{r4, r7, lr}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	2004      	movs	r0, #4
 8003560:	2410      	movs	r4, #16
 8003562:	1900      	adds	r0, r0, r4
 8003564:	2408      	movs	r4, #8
 8003566:	46a4      	mov	ip, r4
 8003568:	44bc      	add	ip, r7
 800356a:	4460      	add	r0, ip
 800356c:	6001      	str	r1, [r0, #0]
 800356e:	6042      	str	r2, [r0, #4]
 8003570:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2240      	movs	r2, #64	; 0x40
 8003576:	2101      	movs	r1, #1
 8003578:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2240      	movs	r2, #64	; 0x40
 800357e:	2100      	movs	r1, #0
 8003580:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2244      	movs	r2, #68	; 0x44
 8003586:	2100      	movs	r1, #0
 8003588:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2250      	movs	r2, #80	; 0x50
 800358e:	2100      	movs	r1, #0
 8003590:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b003      	add	sp, #12
 800359a:	bc90      	pop	{r4, r7}
 800359c:	bc08      	pop	{r3}
 800359e:	b004      	add	sp, #16
 80035a0:	4718      	bx	r3
	...

080035a4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b09c      	sub	sp, #112	; 0x70
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80035ae:	236f      	movs	r3, #111	; 0x6f
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	18d3      	adds	r3, r2, r3
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	236c      	movs	r3, #108	; 0x6c
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	49a3      	ldr	r1, [pc, #652]	; (8003858 <USB_ActivateEndpoint+0x2b4>)
 80035ca:	400a      	ands	r2, r1
 80035cc:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	78db      	ldrb	r3, [r3, #3]
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d017      	beq.n	8003606 <USB_ActivateEndpoint+0x62>
 80035d6:	dc28      	bgt.n	800362a <USB_ActivateEndpoint+0x86>
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d00e      	beq.n	80035fa <USB_ActivateEndpoint+0x56>
 80035dc:	dc25      	bgt.n	800362a <USB_ActivateEndpoint+0x86>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <USB_ActivateEndpoint+0x44>
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d018      	beq.n	8003618 <USB_ActivateEndpoint+0x74>
 80035e6:	e020      	b.n	800362a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80035e8:	226c      	movs	r2, #108	; 0x6c
 80035ea:	18bb      	adds	r3, r7, r2
 80035ec:	18ba      	adds	r2, r7, r2
 80035ee:	8812      	ldrh	r2, [r2, #0]
 80035f0:	2180      	movs	r1, #128	; 0x80
 80035f2:	0089      	lsls	r1, r1, #2
 80035f4:	430a      	orrs	r2, r1
 80035f6:	801a      	strh	r2, [r3, #0]
      break;
 80035f8:	e01c      	b.n	8003634 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80035fa:	226c      	movs	r2, #108	; 0x6c
 80035fc:	18bb      	adds	r3, r7, r2
 80035fe:	18ba      	adds	r2, r7, r2
 8003600:	8812      	ldrh	r2, [r2, #0]
 8003602:	801a      	strh	r2, [r3, #0]
      break;
 8003604:	e016      	b.n	8003634 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003606:	226c      	movs	r2, #108	; 0x6c
 8003608:	18bb      	adds	r3, r7, r2
 800360a:	18ba      	adds	r2, r7, r2
 800360c:	8812      	ldrh	r2, [r2, #0]
 800360e:	21c0      	movs	r1, #192	; 0xc0
 8003610:	00c9      	lsls	r1, r1, #3
 8003612:	430a      	orrs	r2, r1
 8003614:	801a      	strh	r2, [r3, #0]
      break;
 8003616:	e00d      	b.n	8003634 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003618:	226c      	movs	r2, #108	; 0x6c
 800361a:	18bb      	adds	r3, r7, r2
 800361c:	18ba      	adds	r2, r7, r2
 800361e:	8812      	ldrh	r2, [r2, #0]
 8003620:	2180      	movs	r1, #128	; 0x80
 8003622:	00c9      	lsls	r1, r1, #3
 8003624:	430a      	orrs	r2, r1
 8003626:	801a      	strh	r2, [r3, #0]
      break;
 8003628:	e004      	b.n	8003634 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800362a:	236f      	movs	r3, #111	; 0x6f
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
      break;
 8003632:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	18d3      	adds	r3, r2, r3
 800363e:	226c      	movs	r2, #108	; 0x6c
 8003640:	18ba      	adds	r2, r7, r2
 8003642:	8812      	ldrh	r2, [r2, #0]
 8003644:	4985      	ldr	r1, [pc, #532]	; (800385c <USB_ActivateEndpoint+0x2b8>)
 8003646:	430a      	orrs	r2, r1
 8003648:	b292      	uxth	r2, r2
 800364a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	18d3      	adds	r3, r2, r3
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	b29b      	uxth	r3, r3
 800365a:	b21b      	sxth	r3, r3
 800365c:	4a80      	ldr	r2, [pc, #512]	; (8003860 <USB_ActivateEndpoint+0x2bc>)
 800365e:	4013      	ands	r3, r2
 8003660:	b21a      	sxth	r2, r3
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b21b      	sxth	r3, r3
 8003668:	4313      	orrs	r3, r2
 800366a:	b21a      	sxth	r2, r3
 800366c:	2166      	movs	r1, #102	; 0x66
 800366e:	187b      	adds	r3, r7, r1
 8003670:	801a      	strh	r2, [r3, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	18d3      	adds	r3, r2, r3
 800367c:	187a      	adds	r2, r7, r1
 800367e:	8812      	ldrh	r2, [r2, #0]
 8003680:	4976      	ldr	r1, [pc, #472]	; (800385c <USB_ActivateEndpoint+0x2b8>)
 8003682:	430a      	orrs	r2, r1
 8003684:	b292      	uxth	r2, r2
 8003686:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	7b1b      	ldrb	r3, [r3, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d000      	beq.n	8003692 <USB_ActivateEndpoint+0xee>
 8003690:	e178      	b.n	8003984 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	785b      	ldrb	r3, [r3, #1]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d100      	bne.n	800369c <USB_ActivateEndpoint+0xf8>
 800369a:	e07a      	b.n	8003792 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2250      	movs	r2, #80	; 0x50
 80036a4:	5a9b      	ldrh	r3, [r3, r2]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	001a      	movs	r2, r3
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	189b      	adds	r3, r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	00da      	lsls	r2, r3, #3
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	18d3      	adds	r3, r2, r3
 80036ba:	2280      	movs	r2, #128	; 0x80
 80036bc:	00d2      	lsls	r2, r2, #3
 80036be:	4694      	mov	ip, r2
 80036c0:	4463      	add	r3, ip
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	88db      	ldrh	r3, [r3, #6]
 80036c8:	085b      	lsrs	r3, r3, #1
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	18db      	adds	r3, r3, r3
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	18d2      	adds	r2, r2, r3
 80036de:	2112      	movs	r1, #18
 80036e0:	187b      	adds	r3, r7, r1
 80036e2:	8812      	ldrh	r2, [r2, #0]
 80036e4:	801a      	strh	r2, [r3, #0]
 80036e6:	187b      	adds	r3, r7, r1
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	2240      	movs	r2, #64	; 0x40
 80036ec:	4013      	ands	r3, r2
 80036ee:	d016      	beq.n	800371e <USB_ActivateEndpoint+0x17a>
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	18d3      	adds	r3, r2, r3
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	2010      	movs	r0, #16
 8003700:	183b      	adds	r3, r7, r0
 8003702:	4957      	ldr	r1, [pc, #348]	; (8003860 <USB_ActivateEndpoint+0x2bc>)
 8003704:	400a      	ands	r2, r1
 8003706:	801a      	strh	r2, [r3, #0]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	18d3      	adds	r3, r2, r3
 8003712:	183a      	adds	r2, r7, r0
 8003714:	8812      	ldrh	r2, [r2, #0]
 8003716:	4953      	ldr	r1, [pc, #332]	; (8003864 <USB_ActivateEndpoint+0x2c0>)
 8003718:	430a      	orrs	r2, r1
 800371a:	b292      	uxth	r2, r2
 800371c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	78db      	ldrb	r3, [r3, #3]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d01d      	beq.n	8003762 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	18d3      	adds	r3, r2, r3
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b29a      	uxth	r2, r3
 8003734:	200c      	movs	r0, #12
 8003736:	183b      	adds	r3, r7, r0
 8003738:	494b      	ldr	r1, [pc, #300]	; (8003868 <USB_ActivateEndpoint+0x2c4>)
 800373a:	400a      	ands	r2, r1
 800373c:	801a      	strh	r2, [r3, #0]
 800373e:	183b      	adds	r3, r7, r0
 8003740:	183a      	adds	r2, r7, r0
 8003742:	8812      	ldrh	r2, [r2, #0]
 8003744:	2120      	movs	r1, #32
 8003746:	404a      	eors	r2, r1
 8003748:	801a      	strh	r2, [r3, #0]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	18d3      	adds	r3, r2, r3
 8003754:	183a      	adds	r2, r7, r0
 8003756:	8812      	ldrh	r2, [r2, #0]
 8003758:	4940      	ldr	r1, [pc, #256]	; (800385c <USB_ActivateEndpoint+0x2b8>)
 800375a:	430a      	orrs	r2, r1
 800375c:	b292      	uxth	r2, r2
 800375e:	801a      	strh	r2, [r3, #0]
 8003760:	e2b4      	b.n	8003ccc <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	18d3      	adds	r3, r2, r3
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	b29a      	uxth	r2, r3
 8003770:	200e      	movs	r0, #14
 8003772:	183b      	adds	r3, r7, r0
 8003774:	493c      	ldr	r1, [pc, #240]	; (8003868 <USB_ActivateEndpoint+0x2c4>)
 8003776:	400a      	ands	r2, r1
 8003778:	801a      	strh	r2, [r3, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	18d3      	adds	r3, r2, r3
 8003784:	183a      	adds	r2, r7, r0
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	4934      	ldr	r1, [pc, #208]	; (800385c <USB_ActivateEndpoint+0x2b8>)
 800378a:	430a      	orrs	r2, r1
 800378c:	b292      	uxth	r2, r2
 800378e:	801a      	strh	r2, [r3, #0]
 8003790:	e29c      	b.n	8003ccc <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	633b      	str	r3, [r7, #48]	; 0x30
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2250      	movs	r2, #80	; 0x50
 800379a:	5a9b      	ldrh	r3, [r3, r2]
 800379c:	b29b      	uxth	r3, r3
 800379e:	001a      	movs	r2, r3
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	189b      	adds	r3, r3, r2
 80037a4:	633b      	str	r3, [r7, #48]	; 0x30
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	00da      	lsls	r2, r3, #3
 80037ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ae:	18d3      	adds	r3, r2, r3
 80037b0:	4a2e      	ldr	r2, [pc, #184]	; (800386c <USB_ActivateEndpoint+0x2c8>)
 80037b2:	4694      	mov	ip, r2
 80037b4:	4463      	add	r3, ip
 80037b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	88db      	ldrh	r3, [r3, #6]
 80037bc:	085b      	lsrs	r3, r3, #1
 80037be:	b29b      	uxth	r3, r3
 80037c0:	18db      	adds	r3, r3, r3
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2250      	movs	r2, #80	; 0x50
 80037d0:	5a9b      	ldrh	r3, [r3, r2]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	001a      	movs	r2, r3
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	189b      	adds	r3, r3, r2
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	00da      	lsls	r2, r3, #3
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	18d3      	adds	r3, r2, r3
 80037e6:	4a22      	ldr	r2, [pc, #136]	; (8003870 <USB_ActivateEndpoint+0x2cc>)
 80037e8:	4694      	mov	ip, r2
 80037ea:	4463      	add	r3, ip
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	059b      	lsls	r3, r3, #22
 80037f6:	0d9b      	lsrs	r3, r3, #22
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	801a      	strh	r2, [r3, #0]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b3e      	cmp	r3, #62	; 0x3e
 8003804:	d91a      	bls.n	800383c <USB_ActivateEndpoint+0x298>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	66bb      	str	r3, [r7, #104]	; 0x68
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	221f      	movs	r2, #31
 8003814:	4013      	ands	r3, r2
 8003816:	d102      	bne.n	800381e <USB_ActivateEndpoint+0x27a>
 8003818:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800381a:	3b01      	subs	r3, #1
 800381c:	66bb      	str	r3, [r7, #104]	; 0x68
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	b29a      	uxth	r2, r3
 8003824:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003826:	b29b      	uxth	r3, r3
 8003828:	029b      	lsls	r3, r3, #10
 800382a:	b29b      	uxth	r3, r3
 800382c:	4313      	orrs	r3, r2
 800382e:	b29b      	uxth	r3, r3
 8003830:	4a10      	ldr	r2, [pc, #64]	; (8003874 <USB_ActivateEndpoint+0x2d0>)
 8003832:	4313      	orrs	r3, r2
 8003834:	b29a      	uxth	r2, r3
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	801a      	strh	r2, [r3, #0]
 800383a:	e034      	b.n	80038a6 <USB_ActivateEndpoint+0x302>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d119      	bne.n	8003878 <USB_ActivateEndpoint+0x2d4>
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	b29b      	uxth	r3, r3
 800384a:	4a0a      	ldr	r2, [pc, #40]	; (8003874 <USB_ActivateEndpoint+0x2d0>)
 800384c:	4313      	orrs	r3, r2
 800384e:	b29a      	uxth	r2, r3
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	801a      	strh	r2, [r3, #0]
 8003854:	e027      	b.n	80038a6 <USB_ActivateEndpoint+0x302>
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	ffff898f 	.word	0xffff898f
 800385c:	ffff8080 	.word	0xffff8080
 8003860:	ffff8f8f 	.word	0xffff8f8f
 8003864:	ffff80c0 	.word	0xffff80c0
 8003868:	ffff8fbf 	.word	0xffff8fbf
 800386c:	00000404 	.word	0x00000404
 8003870:	00000406 	.word	0x00000406
 8003874:	ffff8000 	.word	0xffff8000
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2201      	movs	r2, #1
 8003886:	4013      	ands	r3, r2
 8003888:	d002      	beq.n	8003890 <USB_ActivateEndpoint+0x2ec>
 800388a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800388c:	3301      	adds	r3, #1
 800388e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	b29a      	uxth	r2, r3
 8003896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003898:	b29b      	uxth	r3, r3
 800389a:	029b      	lsls	r3, r3, #10
 800389c:	b29b      	uxth	r3, r3
 800389e:	4313      	orrs	r3, r2
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	18d2      	adds	r2, r2, r3
 80038b0:	2122      	movs	r1, #34	; 0x22
 80038b2:	187b      	adds	r3, r7, r1
 80038b4:	8812      	ldrh	r2, [r2, #0]
 80038b6:	801a      	strh	r2, [r3, #0]
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	881a      	ldrh	r2, [r3, #0]
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	01db      	lsls	r3, r3, #7
 80038c0:	4013      	ands	r3, r2
 80038c2:	d016      	beq.n	80038f2 <USB_ActivateEndpoint+0x34e>
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	18d3      	adds	r3, r2, r3
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	2020      	movs	r0, #32
 80038d4:	183b      	adds	r3, r7, r0
 80038d6:	49dd      	ldr	r1, [pc, #884]	; (8003c4c <USB_ActivateEndpoint+0x6a8>)
 80038d8:	400a      	ands	r2, r1
 80038da:	801a      	strh	r2, [r3, #0]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	18d3      	adds	r3, r2, r3
 80038e6:	183a      	adds	r2, r7, r0
 80038e8:	8812      	ldrh	r2, [r2, #0]
 80038ea:	49d9      	ldr	r1, [pc, #868]	; (8003c50 <USB_ActivateEndpoint+0x6ac>)
 80038ec:	430a      	orrs	r2, r1
 80038ee:	b292      	uxth	r2, r2
 80038f0:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d125      	bne.n	8003946 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	18d3      	adds	r3, r2, r3
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	b29a      	uxth	r2, r3
 8003908:	201c      	movs	r0, #28
 800390a:	183b      	adds	r3, r7, r0
 800390c:	49d1      	ldr	r1, [pc, #836]	; (8003c54 <USB_ActivateEndpoint+0x6b0>)
 800390e:	400a      	ands	r2, r1
 8003910:	801a      	strh	r2, [r3, #0]
 8003912:	183b      	adds	r3, r7, r0
 8003914:	183a      	adds	r2, r7, r0
 8003916:	8812      	ldrh	r2, [r2, #0]
 8003918:	2180      	movs	r1, #128	; 0x80
 800391a:	0149      	lsls	r1, r1, #5
 800391c:	404a      	eors	r2, r1
 800391e:	801a      	strh	r2, [r3, #0]
 8003920:	183b      	adds	r3, r7, r0
 8003922:	183a      	adds	r2, r7, r0
 8003924:	8812      	ldrh	r2, [r2, #0]
 8003926:	2180      	movs	r1, #128	; 0x80
 8003928:	0189      	lsls	r1, r1, #6
 800392a:	404a      	eors	r2, r1
 800392c:	801a      	strh	r2, [r3, #0]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	18d3      	adds	r3, r2, r3
 8003938:	183a      	adds	r2, r7, r0
 800393a:	8812      	ldrh	r2, [r2, #0]
 800393c:	49c6      	ldr	r1, [pc, #792]	; (8003c58 <USB_ActivateEndpoint+0x6b4>)
 800393e:	430a      	orrs	r2, r1
 8003940:	b292      	uxth	r2, r2
 8003942:	801a      	strh	r2, [r3, #0]
 8003944:	e1c2      	b.n	8003ccc <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	18d3      	adds	r3, r2, r3
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	b29a      	uxth	r2, r3
 8003954:	201e      	movs	r0, #30
 8003956:	183b      	adds	r3, r7, r0
 8003958:	49be      	ldr	r1, [pc, #760]	; (8003c54 <USB_ActivateEndpoint+0x6b0>)
 800395a:	400a      	ands	r2, r1
 800395c:	801a      	strh	r2, [r3, #0]
 800395e:	183b      	adds	r3, r7, r0
 8003960:	183a      	adds	r2, r7, r0
 8003962:	8812      	ldrh	r2, [r2, #0]
 8003964:	2180      	movs	r1, #128	; 0x80
 8003966:	0189      	lsls	r1, r1, #6
 8003968:	404a      	eors	r2, r1
 800396a:	801a      	strh	r2, [r3, #0]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	18d3      	adds	r3, r2, r3
 8003976:	183a      	adds	r2, r7, r0
 8003978:	8812      	ldrh	r2, [r2, #0]
 800397a:	49b7      	ldr	r1, [pc, #732]	; (8003c58 <USB_ActivateEndpoint+0x6b4>)
 800397c:	430a      	orrs	r2, r1
 800397e:	b292      	uxth	r2, r2
 8003980:	801a      	strh	r2, [r3, #0]
 8003982:	e1a3      	b.n	8003ccc <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	78db      	ldrb	r3, [r3, #3]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d117      	bne.n	80039bc <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	18d3      	adds	r3, r2, r3
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	b29a      	uxth	r2, r3
 800399a:	2062      	movs	r0, #98	; 0x62
 800399c:	183b      	adds	r3, r7, r0
 800399e:	49ab      	ldr	r1, [pc, #684]	; (8003c4c <USB_ActivateEndpoint+0x6a8>)
 80039a0:	400a      	ands	r2, r1
 80039a2:	801a      	strh	r2, [r3, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	18d3      	adds	r3, r2, r3
 80039ae:	183a      	adds	r2, r7, r0
 80039b0:	8812      	ldrh	r2, [r2, #0]
 80039b2:	49aa      	ldr	r1, [pc, #680]	; (8003c5c <USB_ActivateEndpoint+0x6b8>)
 80039b4:	430a      	orrs	r2, r1
 80039b6:	b292      	uxth	r2, r2
 80039b8:	801a      	strh	r2, [r3, #0]
 80039ba:	e016      	b.n	80039ea <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	18d3      	adds	r3, r2, r3
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	2064      	movs	r0, #100	; 0x64
 80039cc:	183b      	adds	r3, r7, r0
 80039ce:	49a4      	ldr	r1, [pc, #656]	; (8003c60 <USB_ActivateEndpoint+0x6bc>)
 80039d0:	400a      	ands	r2, r1
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	18d3      	adds	r3, r2, r3
 80039de:	183a      	adds	r2, r7, r0
 80039e0:	8812      	ldrh	r2, [r2, #0]
 80039e2:	499d      	ldr	r1, [pc, #628]	; (8003c58 <USB_ActivateEndpoint+0x6b4>)
 80039e4:	430a      	orrs	r2, r1
 80039e6:	b292      	uxth	r2, r2
 80039e8:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2250      	movs	r2, #80	; 0x50
 80039f2:	5a9b      	ldrh	r3, [r3, r2]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	001a      	movs	r2, r3
 80039f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039fa:	189b      	adds	r3, r3, r2
 80039fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	00da      	lsls	r2, r3, #3
 8003a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a06:	18d3      	adds	r3, r2, r3
 8003a08:	2280      	movs	r2, #128	; 0x80
 8003a0a:	00d2      	lsls	r2, r2, #3
 8003a0c:	4694      	mov	ip, r2
 8003a0e:	4463      	add	r3, ip
 8003a10:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	891b      	ldrh	r3, [r3, #8]
 8003a16:	085b      	lsrs	r3, r3, #1
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	18db      	adds	r3, r3, r3
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a20:	801a      	strh	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	657b      	str	r3, [r7, #84]	; 0x54
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2250      	movs	r2, #80	; 0x50
 8003a2a:	5a9b      	ldrh	r3, [r3, r2]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	001a      	movs	r2, r3
 8003a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a32:	189b      	adds	r3, r3, r2
 8003a34:	657b      	str	r3, [r7, #84]	; 0x54
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	00da      	lsls	r2, r3, #3
 8003a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a3e:	18d3      	adds	r3, r2, r3
 8003a40:	4a88      	ldr	r2, [pc, #544]	; (8003c64 <USB_ActivateEndpoint+0x6c0>)
 8003a42:	4694      	mov	ip, r2
 8003a44:	4463      	add	r3, ip
 8003a46:	653b      	str	r3, [r7, #80]	; 0x50
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	895b      	ldrh	r3, [r3, #10]
 8003a4c:	085b      	lsrs	r3, r3, #1
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	18db      	adds	r3, r3, r3
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a56:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	785b      	ldrb	r3, [r3, #1]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d000      	beq.n	8003a62 <USB_ActivateEndpoint+0x4be>
 8003a60:	e087      	b.n	8003b72 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	18d2      	adds	r2, r2, r3
 8003a6c:	2140      	movs	r1, #64	; 0x40
 8003a6e:	187b      	adds	r3, r7, r1
 8003a70:	8812      	ldrh	r2, [r2, #0]
 8003a72:	801a      	strh	r2, [r3, #0]
 8003a74:	187b      	adds	r3, r7, r1
 8003a76:	881a      	ldrh	r2, [r3, #0]
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	01db      	lsls	r3, r3, #7
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d016      	beq.n	8003aae <USB_ActivateEndpoint+0x50a>
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	18d3      	adds	r3, r2, r3
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	203e      	movs	r0, #62	; 0x3e
 8003a90:	183b      	adds	r3, r7, r0
 8003a92:	496e      	ldr	r1, [pc, #440]	; (8003c4c <USB_ActivateEndpoint+0x6a8>)
 8003a94:	400a      	ands	r2, r1
 8003a96:	801a      	strh	r2, [r3, #0]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	18d3      	adds	r3, r2, r3
 8003aa2:	183a      	adds	r2, r7, r0
 8003aa4:	8812      	ldrh	r2, [r2, #0]
 8003aa6:	496a      	ldr	r1, [pc, #424]	; (8003c50 <USB_ActivateEndpoint+0x6ac>)
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	b292      	uxth	r2, r2
 8003aac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	18d2      	adds	r2, r2, r3
 8003ab8:	213c      	movs	r1, #60	; 0x3c
 8003aba:	187b      	adds	r3, r7, r1
 8003abc:	8812      	ldrh	r2, [r2, #0]
 8003abe:	801a      	strh	r2, [r3, #0]
 8003ac0:	187b      	adds	r3, r7, r1
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	2240      	movs	r2, #64	; 0x40
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d016      	beq.n	8003af8 <USB_ActivateEndpoint+0x554>
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	18d3      	adds	r3, r2, r3
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	203a      	movs	r0, #58	; 0x3a
 8003ada:	183b      	adds	r3, r7, r0
 8003adc:	495b      	ldr	r1, [pc, #364]	; (8003c4c <USB_ActivateEndpoint+0x6a8>)
 8003ade:	400a      	ands	r2, r1
 8003ae0:	801a      	strh	r2, [r3, #0]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	18d3      	adds	r3, r2, r3
 8003aec:	183a      	adds	r2, r7, r0
 8003aee:	8812      	ldrh	r2, [r2, #0]
 8003af0:	495d      	ldr	r1, [pc, #372]	; (8003c68 <USB_ActivateEndpoint+0x6c4>)
 8003af2:	430a      	orrs	r2, r1
 8003af4:	b292      	uxth	r2, r2
 8003af6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	18d3      	adds	r3, r2, r3
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	2038      	movs	r0, #56	; 0x38
 8003b08:	183b      	adds	r3, r7, r0
 8003b0a:	4952      	ldr	r1, [pc, #328]	; (8003c54 <USB_ActivateEndpoint+0x6b0>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	801a      	strh	r2, [r3, #0]
 8003b10:	183b      	adds	r3, r7, r0
 8003b12:	183a      	adds	r2, r7, r0
 8003b14:	8812      	ldrh	r2, [r2, #0]
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	0149      	lsls	r1, r1, #5
 8003b1a:	404a      	eors	r2, r1
 8003b1c:	801a      	strh	r2, [r3, #0]
 8003b1e:	183b      	adds	r3, r7, r0
 8003b20:	183a      	adds	r2, r7, r0
 8003b22:	8812      	ldrh	r2, [r2, #0]
 8003b24:	2180      	movs	r1, #128	; 0x80
 8003b26:	0189      	lsls	r1, r1, #6
 8003b28:	404a      	eors	r2, r1
 8003b2a:	801a      	strh	r2, [r3, #0]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	18d3      	adds	r3, r2, r3
 8003b36:	183a      	adds	r2, r7, r0
 8003b38:	8812      	ldrh	r2, [r2, #0]
 8003b3a:	4947      	ldr	r1, [pc, #284]	; (8003c58 <USB_ActivateEndpoint+0x6b4>)
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	b292      	uxth	r2, r2
 8003b40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	18d3      	adds	r3, r2, r3
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	2036      	movs	r0, #54	; 0x36
 8003b52:	183b      	adds	r3, r7, r0
 8003b54:	4945      	ldr	r1, [pc, #276]	; (8003c6c <USB_ActivateEndpoint+0x6c8>)
 8003b56:	400a      	ands	r2, r1
 8003b58:	801a      	strh	r2, [r3, #0]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	18d3      	adds	r3, r2, r3
 8003b64:	183a      	adds	r2, r7, r0
 8003b66:	8812      	ldrh	r2, [r2, #0]
 8003b68:	493b      	ldr	r1, [pc, #236]	; (8003c58 <USB_ActivateEndpoint+0x6b4>)
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	b292      	uxth	r2, r2
 8003b6e:	801a      	strh	r2, [r3, #0]
 8003b70:	e0ac      	b.n	8003ccc <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	18d2      	adds	r2, r2, r3
 8003b7c:	214e      	movs	r1, #78	; 0x4e
 8003b7e:	187b      	adds	r3, r7, r1
 8003b80:	8812      	ldrh	r2, [r2, #0]
 8003b82:	801a      	strh	r2, [r3, #0]
 8003b84:	187b      	adds	r3, r7, r1
 8003b86:	881a      	ldrh	r2, [r3, #0]
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	01db      	lsls	r3, r3, #7
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d016      	beq.n	8003bbe <USB_ActivateEndpoint+0x61a>
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	18d3      	adds	r3, r2, r3
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	204c      	movs	r0, #76	; 0x4c
 8003ba0:	183b      	adds	r3, r7, r0
 8003ba2:	492a      	ldr	r1, [pc, #168]	; (8003c4c <USB_ActivateEndpoint+0x6a8>)
 8003ba4:	400a      	ands	r2, r1
 8003ba6:	801a      	strh	r2, [r3, #0]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	18d3      	adds	r3, r2, r3
 8003bb2:	183a      	adds	r2, r7, r0
 8003bb4:	8812      	ldrh	r2, [r2, #0]
 8003bb6:	4926      	ldr	r1, [pc, #152]	; (8003c50 <USB_ActivateEndpoint+0x6ac>)
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	b292      	uxth	r2, r2
 8003bbc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	18d2      	adds	r2, r2, r3
 8003bc8:	214a      	movs	r1, #74	; 0x4a
 8003bca:	187b      	adds	r3, r7, r1
 8003bcc:	8812      	ldrh	r2, [r2, #0]
 8003bce:	801a      	strh	r2, [r3, #0]
 8003bd0:	187b      	adds	r3, r7, r1
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	2240      	movs	r2, #64	; 0x40
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d016      	beq.n	8003c08 <USB_ActivateEndpoint+0x664>
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	18d3      	adds	r3, r2, r3
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	2048      	movs	r0, #72	; 0x48
 8003bea:	183b      	adds	r3, r7, r0
 8003bec:	4917      	ldr	r1, [pc, #92]	; (8003c4c <USB_ActivateEndpoint+0x6a8>)
 8003bee:	400a      	ands	r2, r1
 8003bf0:	801a      	strh	r2, [r3, #0]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	18d3      	adds	r3, r2, r3
 8003bfc:	183a      	adds	r2, r7, r0
 8003bfe:	8812      	ldrh	r2, [r2, #0]
 8003c00:	4919      	ldr	r1, [pc, #100]	; (8003c68 <USB_ActivateEndpoint+0x6c4>)
 8003c02:	430a      	orrs	r2, r1
 8003c04:	b292      	uxth	r2, r2
 8003c06:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	78db      	ldrb	r3, [r3, #3]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d02f      	beq.n	8003c70 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	18d3      	adds	r3, r2, r3
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	2044      	movs	r0, #68	; 0x44
 8003c20:	183b      	adds	r3, r7, r0
 8003c22:	4912      	ldr	r1, [pc, #72]	; (8003c6c <USB_ActivateEndpoint+0x6c8>)
 8003c24:	400a      	ands	r2, r1
 8003c26:	801a      	strh	r2, [r3, #0]
 8003c28:	183b      	adds	r3, r7, r0
 8003c2a:	183a      	adds	r2, r7, r0
 8003c2c:	8812      	ldrh	r2, [r2, #0]
 8003c2e:	2120      	movs	r1, #32
 8003c30:	404a      	eors	r2, r1
 8003c32:	801a      	strh	r2, [r3, #0]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	18d3      	adds	r3, r2, r3
 8003c3e:	183a      	adds	r2, r7, r0
 8003c40:	8812      	ldrh	r2, [r2, #0]
 8003c42:	4905      	ldr	r1, [pc, #20]	; (8003c58 <USB_ActivateEndpoint+0x6b4>)
 8003c44:	430a      	orrs	r2, r1
 8003c46:	b292      	uxth	r2, r2
 8003c48:	801a      	strh	r2, [r3, #0]
 8003c4a:	e028      	b.n	8003c9e <USB_ActivateEndpoint+0x6fa>
 8003c4c:	ffff8f8f 	.word	0xffff8f8f
 8003c50:	ffffc080 	.word	0xffffc080
 8003c54:	ffffbf8f 	.word	0xffffbf8f
 8003c58:	ffff8080 	.word	0xffff8080
 8003c5c:	ffff8180 	.word	0xffff8180
 8003c60:	ffff8e8f 	.word	0xffff8e8f
 8003c64:	00000404 	.word	0x00000404
 8003c68:	ffff80c0 	.word	0xffff80c0
 8003c6c:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	18d3      	adds	r3, r2, r3
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	2046      	movs	r0, #70	; 0x46
 8003c80:	183b      	adds	r3, r7, r0
 8003c82:	4916      	ldr	r1, [pc, #88]	; (8003cdc <USB_ActivateEndpoint+0x738>)
 8003c84:	400a      	ands	r2, r1
 8003c86:	801a      	strh	r2, [r3, #0]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	18d3      	adds	r3, r2, r3
 8003c92:	183a      	adds	r2, r7, r0
 8003c94:	8812      	ldrh	r2, [r2, #0]
 8003c96:	4912      	ldr	r1, [pc, #72]	; (8003ce0 <USB_ActivateEndpoint+0x73c>)
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	b292      	uxth	r2, r2
 8003c9c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	18d3      	adds	r3, r2, r3
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	2042      	movs	r0, #66	; 0x42
 8003cae:	183b      	adds	r3, r7, r0
 8003cb0:	490c      	ldr	r1, [pc, #48]	; (8003ce4 <USB_ActivateEndpoint+0x740>)
 8003cb2:	400a      	ands	r2, r1
 8003cb4:	801a      	strh	r2, [r3, #0]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	18d3      	adds	r3, r2, r3
 8003cc0:	183a      	adds	r2, r7, r0
 8003cc2:	8812      	ldrh	r2, [r2, #0]
 8003cc4:	4906      	ldr	r1, [pc, #24]	; (8003ce0 <USB_ActivateEndpoint+0x73c>)
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	b292      	uxth	r2, r2
 8003cca:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003ccc:	236f      	movs	r3, #111	; 0x6f
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	781b      	ldrb	r3, [r3, #0]
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b01c      	add	sp, #112	; 0x70
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	ffff8fbf 	.word	0xffff8fbf
 8003ce0:	ffff8080 	.word	0xffff8080
 8003ce4:	ffffbf8f 	.word	0xffffbf8f

08003ce8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08c      	sub	sp, #48	; 0x30
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	7b1b      	ldrb	r3, [r3, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d000      	beq.n	8003cfc <USB_DeactivateEndpoint+0x14>
 8003cfa:	e07e      	b.n	8003dfa <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	785b      	ldrb	r3, [r3, #1]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d03c      	beq.n	8003d7e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	18d2      	adds	r2, r2, r3
 8003d0e:	210c      	movs	r1, #12
 8003d10:	187b      	adds	r3, r7, r1
 8003d12:	8812      	ldrh	r2, [r2, #0]
 8003d14:	801a      	strh	r2, [r3, #0]
 8003d16:	187b      	adds	r3, r7, r1
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	2240      	movs	r2, #64	; 0x40
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d016      	beq.n	8003d4e <USB_DeactivateEndpoint+0x66>
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	18d3      	adds	r3, r2, r3
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	200a      	movs	r0, #10
 8003d30:	183b      	adds	r3, r7, r0
 8003d32:	49c7      	ldr	r1, [pc, #796]	; (8004050 <USB_DeactivateEndpoint+0x368>)
 8003d34:	400a      	ands	r2, r1
 8003d36:	801a      	strh	r2, [r3, #0]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	18d3      	adds	r3, r2, r3
 8003d42:	183a      	adds	r2, r7, r0
 8003d44:	8812      	ldrh	r2, [r2, #0]
 8003d46:	49c3      	ldr	r1, [pc, #780]	; (8004054 <USB_DeactivateEndpoint+0x36c>)
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	b292      	uxth	r2, r2
 8003d4c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	18d3      	adds	r3, r2, r3
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	2008      	movs	r0, #8
 8003d5e:	183b      	adds	r3, r7, r0
 8003d60:	49bd      	ldr	r1, [pc, #756]	; (8004058 <USB_DeactivateEndpoint+0x370>)
 8003d62:	400a      	ands	r2, r1
 8003d64:	801a      	strh	r2, [r3, #0]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	18d3      	adds	r3, r2, r3
 8003d70:	183a      	adds	r2, r7, r0
 8003d72:	8812      	ldrh	r2, [r2, #0]
 8003d74:	49b9      	ldr	r1, [pc, #740]	; (800405c <USB_DeactivateEndpoint+0x374>)
 8003d76:	430a      	orrs	r2, r1
 8003d78:	b292      	uxth	r2, r2
 8003d7a:	801a      	strh	r2, [r3, #0]
 8003d7c:	e163      	b.n	8004046 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	18d2      	adds	r2, r2, r3
 8003d88:	2112      	movs	r1, #18
 8003d8a:	187b      	adds	r3, r7, r1
 8003d8c:	8812      	ldrh	r2, [r2, #0]
 8003d8e:	801a      	strh	r2, [r3, #0]
 8003d90:	187b      	adds	r3, r7, r1
 8003d92:	881a      	ldrh	r2, [r3, #0]
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	01db      	lsls	r3, r3, #7
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d016      	beq.n	8003dca <USB_DeactivateEndpoint+0xe2>
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	18d3      	adds	r3, r2, r3
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	2010      	movs	r0, #16
 8003dac:	183b      	adds	r3, r7, r0
 8003dae:	49a8      	ldr	r1, [pc, #672]	; (8004050 <USB_DeactivateEndpoint+0x368>)
 8003db0:	400a      	ands	r2, r1
 8003db2:	801a      	strh	r2, [r3, #0]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	18d3      	adds	r3, r2, r3
 8003dbe:	183a      	adds	r2, r7, r0
 8003dc0:	8812      	ldrh	r2, [r2, #0]
 8003dc2:	49a7      	ldr	r1, [pc, #668]	; (8004060 <USB_DeactivateEndpoint+0x378>)
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	b292      	uxth	r2, r2
 8003dc8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	18d3      	adds	r3, r2, r3
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	200e      	movs	r0, #14
 8003dda:	183b      	adds	r3, r7, r0
 8003ddc:	49a1      	ldr	r1, [pc, #644]	; (8004064 <USB_DeactivateEndpoint+0x37c>)
 8003dde:	400a      	ands	r2, r1
 8003de0:	801a      	strh	r2, [r3, #0]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	18d3      	adds	r3, r2, r3
 8003dec:	183a      	adds	r2, r7, r0
 8003dee:	8812      	ldrh	r2, [r2, #0]
 8003df0:	499a      	ldr	r1, [pc, #616]	; (800405c <USB_DeactivateEndpoint+0x374>)
 8003df2:	430a      	orrs	r2, r1
 8003df4:	b292      	uxth	r2, r2
 8003df6:	801a      	strh	r2, [r3, #0]
 8003df8:	e125      	b.n	8004046 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	785b      	ldrb	r3, [r3, #1]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d000      	beq.n	8003e04 <USB_DeactivateEndpoint+0x11c>
 8003e02:	e090      	b.n	8003f26 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	18d2      	adds	r2, r2, r3
 8003e0e:	2120      	movs	r1, #32
 8003e10:	187b      	adds	r3, r7, r1
 8003e12:	8812      	ldrh	r2, [r2, #0]
 8003e14:	801a      	strh	r2, [r3, #0]
 8003e16:	187b      	adds	r3, r7, r1
 8003e18:	881a      	ldrh	r2, [r3, #0]
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	01db      	lsls	r3, r3, #7
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d016      	beq.n	8003e50 <USB_DeactivateEndpoint+0x168>
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	18d3      	adds	r3, r2, r3
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	201e      	movs	r0, #30
 8003e32:	183b      	adds	r3, r7, r0
 8003e34:	4986      	ldr	r1, [pc, #536]	; (8004050 <USB_DeactivateEndpoint+0x368>)
 8003e36:	400a      	ands	r2, r1
 8003e38:	801a      	strh	r2, [r3, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	18d3      	adds	r3, r2, r3
 8003e44:	183a      	adds	r2, r7, r0
 8003e46:	8812      	ldrh	r2, [r2, #0]
 8003e48:	4985      	ldr	r1, [pc, #532]	; (8004060 <USB_DeactivateEndpoint+0x378>)
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	b292      	uxth	r2, r2
 8003e4e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	18d2      	adds	r2, r2, r3
 8003e5a:	211c      	movs	r1, #28
 8003e5c:	187b      	adds	r3, r7, r1
 8003e5e:	8812      	ldrh	r2, [r2, #0]
 8003e60:	801a      	strh	r2, [r3, #0]
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	2240      	movs	r2, #64	; 0x40
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d016      	beq.n	8003e9a <USB_DeactivateEndpoint+0x1b2>
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	18d3      	adds	r3, r2, r3
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	201a      	movs	r0, #26
 8003e7c:	183b      	adds	r3, r7, r0
 8003e7e:	4974      	ldr	r1, [pc, #464]	; (8004050 <USB_DeactivateEndpoint+0x368>)
 8003e80:	400a      	ands	r2, r1
 8003e82:	801a      	strh	r2, [r3, #0]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	18d3      	adds	r3, r2, r3
 8003e8e:	183a      	adds	r2, r7, r0
 8003e90:	8812      	ldrh	r2, [r2, #0]
 8003e92:	4970      	ldr	r1, [pc, #448]	; (8004054 <USB_DeactivateEndpoint+0x36c>)
 8003e94:	430a      	orrs	r2, r1
 8003e96:	b292      	uxth	r2, r2
 8003e98:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	18d3      	adds	r3, r2, r3
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	2018      	movs	r0, #24
 8003eaa:	183b      	adds	r3, r7, r0
 8003eac:	4968      	ldr	r1, [pc, #416]	; (8004050 <USB_DeactivateEndpoint+0x368>)
 8003eae:	400a      	ands	r2, r1
 8003eb0:	801a      	strh	r2, [r3, #0]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	18d3      	adds	r3, r2, r3
 8003ebc:	183a      	adds	r2, r7, r0
 8003ebe:	8812      	ldrh	r2, [r2, #0]
 8003ec0:	4964      	ldr	r1, [pc, #400]	; (8004054 <USB_DeactivateEndpoint+0x36c>)
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	b292      	uxth	r2, r2
 8003ec6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	18d3      	adds	r3, r2, r3
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	2016      	movs	r0, #22
 8003ed8:	183b      	adds	r3, r7, r0
 8003eda:	4962      	ldr	r1, [pc, #392]	; (8004064 <USB_DeactivateEndpoint+0x37c>)
 8003edc:	400a      	ands	r2, r1
 8003ede:	801a      	strh	r2, [r3, #0]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	18d3      	adds	r3, r2, r3
 8003eea:	183a      	adds	r2, r7, r0
 8003eec:	8812      	ldrh	r2, [r2, #0]
 8003eee:	495b      	ldr	r1, [pc, #364]	; (800405c <USB_DeactivateEndpoint+0x374>)
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	b292      	uxth	r2, r2
 8003ef4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	18d3      	adds	r3, r2, r3
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	2014      	movs	r0, #20
 8003f06:	183b      	adds	r3, r7, r0
 8003f08:	4953      	ldr	r1, [pc, #332]	; (8004058 <USB_DeactivateEndpoint+0x370>)
 8003f0a:	400a      	ands	r2, r1
 8003f0c:	801a      	strh	r2, [r3, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	18d3      	adds	r3, r2, r3
 8003f18:	183a      	adds	r2, r7, r0
 8003f1a:	8812      	ldrh	r2, [r2, #0]
 8003f1c:	494f      	ldr	r1, [pc, #316]	; (800405c <USB_DeactivateEndpoint+0x374>)
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	b292      	uxth	r2, r2
 8003f22:	801a      	strh	r2, [r3, #0]
 8003f24:	e08f      	b.n	8004046 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	18d2      	adds	r2, r2, r3
 8003f30:	212e      	movs	r1, #46	; 0x2e
 8003f32:	187b      	adds	r3, r7, r1
 8003f34:	8812      	ldrh	r2, [r2, #0]
 8003f36:	801a      	strh	r2, [r3, #0]
 8003f38:	187b      	adds	r3, r7, r1
 8003f3a:	881a      	ldrh	r2, [r3, #0]
 8003f3c:	2380      	movs	r3, #128	; 0x80
 8003f3e:	01db      	lsls	r3, r3, #7
 8003f40:	4013      	ands	r3, r2
 8003f42:	d016      	beq.n	8003f72 <USB_DeactivateEndpoint+0x28a>
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	18d3      	adds	r3, r2, r3
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	202c      	movs	r0, #44	; 0x2c
 8003f54:	183b      	adds	r3, r7, r0
 8003f56:	493e      	ldr	r1, [pc, #248]	; (8004050 <USB_DeactivateEndpoint+0x368>)
 8003f58:	400a      	ands	r2, r1
 8003f5a:	801a      	strh	r2, [r3, #0]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	18d3      	adds	r3, r2, r3
 8003f66:	183a      	adds	r2, r7, r0
 8003f68:	8812      	ldrh	r2, [r2, #0]
 8003f6a:	493d      	ldr	r1, [pc, #244]	; (8004060 <USB_DeactivateEndpoint+0x378>)
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	b292      	uxth	r2, r2
 8003f70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	18d2      	adds	r2, r2, r3
 8003f7c:	212a      	movs	r1, #42	; 0x2a
 8003f7e:	187b      	adds	r3, r7, r1
 8003f80:	8812      	ldrh	r2, [r2, #0]
 8003f82:	801a      	strh	r2, [r3, #0]
 8003f84:	187b      	adds	r3, r7, r1
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	2240      	movs	r2, #64	; 0x40
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d016      	beq.n	8003fbc <USB_DeactivateEndpoint+0x2d4>
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	18d3      	adds	r3, r2, r3
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	2028      	movs	r0, #40	; 0x28
 8003f9e:	183b      	adds	r3, r7, r0
 8003fa0:	492b      	ldr	r1, [pc, #172]	; (8004050 <USB_DeactivateEndpoint+0x368>)
 8003fa2:	400a      	ands	r2, r1
 8003fa4:	801a      	strh	r2, [r3, #0]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	18d3      	adds	r3, r2, r3
 8003fb0:	183a      	adds	r2, r7, r0
 8003fb2:	8812      	ldrh	r2, [r2, #0]
 8003fb4:	4927      	ldr	r1, [pc, #156]	; (8004054 <USB_DeactivateEndpoint+0x36c>)
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	b292      	uxth	r2, r2
 8003fba:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	18d3      	adds	r3, r2, r3
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	2026      	movs	r0, #38	; 0x26
 8003fcc:	183b      	adds	r3, r7, r0
 8003fce:	4920      	ldr	r1, [pc, #128]	; (8004050 <USB_DeactivateEndpoint+0x368>)
 8003fd0:	400a      	ands	r2, r1
 8003fd2:	801a      	strh	r2, [r3, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	18d3      	adds	r3, r2, r3
 8003fde:	183a      	adds	r2, r7, r0
 8003fe0:	8812      	ldrh	r2, [r2, #0]
 8003fe2:	491f      	ldr	r1, [pc, #124]	; (8004060 <USB_DeactivateEndpoint+0x378>)
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	b292      	uxth	r2, r2
 8003fe8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	18d3      	adds	r3, r2, r3
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	2024      	movs	r0, #36	; 0x24
 8003ffa:	183b      	adds	r3, r7, r0
 8003ffc:	4916      	ldr	r1, [pc, #88]	; (8004058 <USB_DeactivateEndpoint+0x370>)
 8003ffe:	400a      	ands	r2, r1
 8004000:	801a      	strh	r2, [r3, #0]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	18d3      	adds	r3, r2, r3
 800400c:	183a      	adds	r2, r7, r0
 800400e:	8812      	ldrh	r2, [r2, #0]
 8004010:	4912      	ldr	r1, [pc, #72]	; (800405c <USB_DeactivateEndpoint+0x374>)
 8004012:	430a      	orrs	r2, r1
 8004014:	b292      	uxth	r2, r2
 8004016:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	18d3      	adds	r3, r2, r3
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	b29a      	uxth	r2, r3
 8004026:	2022      	movs	r0, #34	; 0x22
 8004028:	183b      	adds	r3, r7, r0
 800402a:	490e      	ldr	r1, [pc, #56]	; (8004064 <USB_DeactivateEndpoint+0x37c>)
 800402c:	400a      	ands	r2, r1
 800402e:	801a      	strh	r2, [r3, #0]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	18d3      	adds	r3, r2, r3
 800403a:	183a      	adds	r2, r7, r0
 800403c:	8812      	ldrh	r2, [r2, #0]
 800403e:	4907      	ldr	r1, [pc, #28]	; (800405c <USB_DeactivateEndpoint+0x374>)
 8004040:	430a      	orrs	r2, r1
 8004042:	b292      	uxth	r2, r2
 8004044:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	0018      	movs	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	b00c      	add	sp, #48	; 0x30
 800404e:	bd80      	pop	{r7, pc}
 8004050:	ffff8f8f 	.word	0xffff8f8f
 8004054:	ffff80c0 	.word	0xffff80c0
 8004058:	ffff8fbf 	.word	0xffff8fbf
 800405c:	ffff8080 	.word	0xffff8080
 8004060:	ffffc080 	.word	0xffffc080
 8004064:	ffffbf8f 	.word	0xffffbf8f

08004068 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004068:	b590      	push	{r4, r7, lr}
 800406a:	b0c3      	sub	sp, #268	; 0x10c
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	785b      	ldrb	r3, [r3, #1]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d001      	beq.n	800407e <USB_EPStartXfer+0x16>
 800407a:	f000 fd2d 	bl	8004ad8 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	429a      	cmp	r2, r3
 8004088:	d905      	bls.n	8004096 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	1d7a      	adds	r2, r7, #5
 8004090:	32ff      	adds	r2, #255	; 0xff
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	e004      	b.n	80040a0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	1d7a      	adds	r2, r7, #5
 800409c:	32ff      	adds	r2, #255	; 0xff
 800409e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	7b1b      	ldrb	r3, [r3, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d125      	bne.n	80040f4 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	6959      	ldr	r1, [r3, #20]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	88da      	ldrh	r2, [r3, #6]
 80040b0:	1d7b      	adds	r3, r7, #5
 80040b2:	33ff      	adds	r3, #255	; 0xff
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f001 fa47 	bl	800554c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2250      	movs	r2, #80	; 0x50
 80040c6:	5a9b      	ldrh	r3, [r3, r2]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	001a      	movs	r2, r3
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	189b      	adds	r3, r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	00da      	lsls	r2, r3, #3
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	18d3      	adds	r3, r2, r3
 80040dc:	4ad7      	ldr	r2, [pc, #860]	; (800443c <USB_EPStartXfer+0x3d4>)
 80040de:	4694      	mov	ip, r2
 80040e0:	4463      	add	r3, ip
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	1d7b      	adds	r3, r7, #5
 80040e6:	33ff      	adds	r3, #255	; 0xff
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	801a      	strh	r2, [r3, #0]
 80040f0:	f000 fccd 	bl	8004a8e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	78db      	ldrb	r3, [r3, #3]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d000      	beq.n	80040fe <USB_EPStartXfer+0x96>
 80040fc:	e362      	b.n	80047c4 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6a1a      	ldr	r2, [r3, #32]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	429a      	cmp	r2, r3
 8004108:	d800      	bhi.n	800410c <USB_EPStartXfer+0xa4>
 800410a:	e309      	b.n	8004720 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	18d3      	adds	r3, r2, r3
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	b29a      	uxth	r2, r3
 800411a:	2056      	movs	r0, #86	; 0x56
 800411c:	183b      	adds	r3, r7, r0
 800411e:	49c8      	ldr	r1, [pc, #800]	; (8004440 <USB_EPStartXfer+0x3d8>)
 8004120:	400a      	ands	r2, r1
 8004122:	801a      	strh	r2, [r3, #0]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	18d3      	adds	r3, r2, r3
 800412e:	183a      	adds	r2, r7, r0
 8004130:	8812      	ldrh	r2, [r2, #0]
 8004132:	49c4      	ldr	r1, [pc, #784]	; (8004444 <USB_EPStartXfer+0x3dc>)
 8004134:	430a      	orrs	r2, r1
 8004136:	b292      	uxth	r2, r2
 8004138:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6a1a      	ldr	r2, [r3, #32]
 800413e:	1d7b      	adds	r3, r7, #5
 8004140:	33ff      	adds	r3, #255	; 0xff
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	1ad2      	subs	r2, r2, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	18d3      	adds	r3, r2, r3
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	b29b      	uxth	r3, r3
 8004158:	001a      	movs	r2, r3
 800415a:	2340      	movs	r3, #64	; 0x40
 800415c:	4013      	ands	r3, r2
 800415e:	d100      	bne.n	8004162 <USB_EPStartXfer+0xfa>
 8004160:	e176      	b.n	8004450 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	633b      	str	r3, [r7, #48]	; 0x30
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	785b      	ldrb	r3, [r3, #1]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d000      	beq.n	8004170 <USB_EPStartXfer+0x108>
 800416e:	e074      	b.n	800425a <USB_EPStartXfer+0x1f2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2250      	movs	r2, #80	; 0x50
 8004178:	5a9b      	ldrh	r3, [r3, r2]
 800417a:	b29b      	uxth	r3, r3
 800417c:	001a      	movs	r2, r3
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	189b      	adds	r3, r3, r2
 8004182:	62bb      	str	r3, [r7, #40]	; 0x28
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	00da      	lsls	r2, r3, #3
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	18d3      	adds	r3, r2, r3
 800418e:	4aae      	ldr	r2, [pc, #696]	; (8004448 <USB_EPStartXfer+0x3e0>)
 8004190:	4694      	mov	ip, r2
 8004192:	4463      	add	r3, ip
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	059b      	lsls	r3, r3, #22
 800419e:	0d9b      	lsrs	r3, r3, #22
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	801a      	strh	r2, [r3, #0]
 80041a6:	1d7b      	adds	r3, r7, #5
 80041a8:	33ff      	adds	r3, #255	; 0xff
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b3e      	cmp	r3, #62	; 0x3e
 80041ae:	d924      	bls.n	80041fa <USB_EPStartXfer+0x192>
 80041b0:	1d7b      	adds	r3, r7, #5
 80041b2:	33ff      	adds	r3, #255	; 0xff
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	1c7a      	adds	r2, r7, #1
 80041ba:	32ff      	adds	r2, #255	; 0xff
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	1d7b      	adds	r3, r7, #5
 80041c0:	33ff      	adds	r3, #255	; 0xff
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	221f      	movs	r2, #31
 80041c6:	4013      	ands	r3, r2
 80041c8:	d106      	bne.n	80041d8 <USB_EPStartXfer+0x170>
 80041ca:	1c7b      	adds	r3, r7, #1
 80041cc:	33ff      	adds	r3, #255	; 0xff
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3b01      	subs	r3, #1
 80041d2:	1c7a      	adds	r2, r7, #1
 80041d4:	32ff      	adds	r2, #255	; 0xff
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	b29a      	uxth	r2, r3
 80041de:	1c7b      	adds	r3, r7, #1
 80041e0:	33ff      	adds	r3, #255	; 0xff
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	029b      	lsls	r3, r3, #10
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	4313      	orrs	r3, r2
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	4a97      	ldr	r2, [pc, #604]	; (800444c <USB_EPStartXfer+0x3e4>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	801a      	strh	r2, [r3, #0]
 80041f8:	e04a      	b.n	8004290 <USB_EPStartXfer+0x228>
 80041fa:	1d7b      	adds	r3, r7, #5
 80041fc:	33ff      	adds	r3, #255	; 0xff
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d108      	bne.n	8004216 <USB_EPStartXfer+0x1ae>
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	b29b      	uxth	r3, r3
 800420a:	4a90      	ldr	r2, [pc, #576]	; (800444c <USB_EPStartXfer+0x3e4>)
 800420c:	4313      	orrs	r3, r2
 800420e:	b29a      	uxth	r2, r3
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	801a      	strh	r2, [r3, #0]
 8004214:	e03c      	b.n	8004290 <USB_EPStartXfer+0x228>
 8004216:	1d7b      	adds	r3, r7, #5
 8004218:	33ff      	adds	r3, #255	; 0xff
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	085b      	lsrs	r3, r3, #1
 800421e:	1c7a      	adds	r2, r7, #1
 8004220:	32ff      	adds	r2, #255	; 0xff
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	1d7b      	adds	r3, r7, #5
 8004226:	33ff      	adds	r3, #255	; 0xff
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2201      	movs	r2, #1
 800422c:	4013      	ands	r3, r2
 800422e:	d006      	beq.n	800423e <USB_EPStartXfer+0x1d6>
 8004230:	1c7b      	adds	r3, r7, #1
 8004232:	33ff      	adds	r3, #255	; 0xff
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3301      	adds	r3, #1
 8004238:	1c7a      	adds	r2, r7, #1
 800423a:	32ff      	adds	r2, #255	; 0xff
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	b29a      	uxth	r2, r3
 8004244:	1c7b      	adds	r3, r7, #1
 8004246:	33ff      	adds	r3, #255	; 0xff
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	029b      	lsls	r3, r3, #10
 800424e:	b29b      	uxth	r3, r3
 8004250:	4313      	orrs	r3, r2
 8004252:	b29a      	uxth	r2, r3
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	801a      	strh	r2, [r3, #0]
 8004258:	e01a      	b.n	8004290 <USB_EPStartXfer+0x228>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	785b      	ldrb	r3, [r3, #1]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d116      	bne.n	8004290 <USB_EPStartXfer+0x228>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2250      	movs	r2, #80	; 0x50
 8004266:	5a9b      	ldrh	r3, [r3, r2]
 8004268:	b29b      	uxth	r3, r3
 800426a:	001a      	movs	r2, r3
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	189b      	adds	r3, r3, r2
 8004270:	633b      	str	r3, [r7, #48]	; 0x30
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	00da      	lsls	r2, r3, #3
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	18d3      	adds	r3, r2, r3
 800427c:	4a72      	ldr	r2, [pc, #456]	; (8004448 <USB_EPStartXfer+0x3e0>)
 800427e:	4694      	mov	ip, r2
 8004280:	4463      	add	r3, ip
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004284:	1d7b      	adds	r3, r7, #5
 8004286:	33ff      	adds	r3, #255	; 0xff
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	b29a      	uxth	r2, r3
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004290:	2076      	movs	r0, #118	; 0x76
 8004292:	183b      	adds	r3, r7, r0
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	8952      	ldrh	r2, [r2, #10]
 8004298:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	6959      	ldr	r1, [r3, #20]
 800429e:	1d7b      	adds	r3, r7, #5
 80042a0:	33ff      	adds	r3, #255	; 0xff
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	b29c      	uxth	r4, r3
 80042a6:	183b      	adds	r3, r7, r0
 80042a8:	881a      	ldrh	r2, [r3, #0]
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	0023      	movs	r3, r4
 80042ae:	f001 f94d 	bl	800554c <USB_WritePMA>
            ep->xfer_buff += len;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	695a      	ldr	r2, [r3, #20]
 80042b6:	1d7b      	adds	r3, r7, #5
 80042b8:	33ff      	adds	r3, #255	; 0xff
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	18d2      	adds	r2, r2, r3
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6a1a      	ldr	r2, [r3, #32]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d908      	bls.n	80042e0 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6a1a      	ldr	r2, [r3, #32]
 80042d2:	1d7b      	adds	r3, r7, #5
 80042d4:	33ff      	adds	r3, #255	; 0xff
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	1ad2      	subs	r2, r2, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	621a      	str	r2, [r3, #32]
 80042de:	e007      	b.n	80042f0 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	1d7a      	adds	r2, r7, #5
 80042e6:	32ff      	adds	r2, #255	; 0xff
 80042e8:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2200      	movs	r2, #0
 80042ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	785b      	ldrb	r3, [r3, #1]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d000      	beq.n	80042fa <USB_EPStartXfer+0x292>
 80042f8:	e070      	b.n	80043dc <USB_EPStartXfer+0x374>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2250      	movs	r2, #80	; 0x50
 8004302:	5a9b      	ldrh	r3, [r3, r2]
 8004304:	b29b      	uxth	r3, r3
 8004306:	001a      	movs	r2, r3
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	189b      	adds	r3, r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	00da      	lsls	r2, r3, #3
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	18d3      	adds	r3, r2, r3
 8004318:	4a48      	ldr	r2, [pc, #288]	; (800443c <USB_EPStartXfer+0x3d4>)
 800431a:	4694      	mov	ip, r2
 800431c:	4463      	add	r3, ip
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	b29b      	uxth	r3, r3
 8004326:	059b      	lsls	r3, r3, #22
 8004328:	0d9b      	lsrs	r3, r3, #22
 800432a:	b29a      	uxth	r2, r3
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	801a      	strh	r2, [r3, #0]
 8004330:	1d7b      	adds	r3, r7, #5
 8004332:	33ff      	adds	r3, #255	; 0xff
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b3e      	cmp	r3, #62	; 0x3e
 8004338:	d922      	bls.n	8004380 <USB_EPStartXfer+0x318>
 800433a:	1d7b      	adds	r3, r7, #5
 800433c:	33ff      	adds	r3, #255	; 0xff
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	21fc      	movs	r1, #252	; 0xfc
 8004344:	187a      	adds	r2, r7, r1
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	1d7b      	adds	r3, r7, #5
 800434a:	33ff      	adds	r3, #255	; 0xff
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	221f      	movs	r2, #31
 8004350:	4013      	ands	r3, r2
 8004352:	d104      	bne.n	800435e <USB_EPStartXfer+0x2f6>
 8004354:	187b      	adds	r3, r7, r1
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3b01      	subs	r3, #1
 800435a:	187a      	adds	r2, r7, r1
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	b29a      	uxth	r2, r3
 8004364:	23fc      	movs	r3, #252	; 0xfc
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	029b      	lsls	r3, r3, #10
 800436e:	b29b      	uxth	r3, r3
 8004370:	4313      	orrs	r3, r2
 8004372:	b29b      	uxth	r3, r3
 8004374:	4a35      	ldr	r2, [pc, #212]	; (800444c <USB_EPStartXfer+0x3e4>)
 8004376:	4313      	orrs	r3, r2
 8004378:	b29a      	uxth	r2, r3
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	801a      	strh	r2, [r3, #0]
 800437e:	e04a      	b.n	8004416 <USB_EPStartXfer+0x3ae>
 8004380:	1d7b      	adds	r3, r7, #5
 8004382:	33ff      	adds	r3, #255	; 0xff
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d108      	bne.n	800439c <USB_EPStartXfer+0x334>
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	4a2e      	ldr	r2, [pc, #184]	; (800444c <USB_EPStartXfer+0x3e4>)
 8004392:	4313      	orrs	r3, r2
 8004394:	b29a      	uxth	r2, r3
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	801a      	strh	r2, [r3, #0]
 800439a:	e03c      	b.n	8004416 <USB_EPStartXfer+0x3ae>
 800439c:	1d7b      	adds	r3, r7, #5
 800439e:	33ff      	adds	r3, #255	; 0xff
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	085b      	lsrs	r3, r3, #1
 80043a4:	21fc      	movs	r1, #252	; 0xfc
 80043a6:	187a      	adds	r2, r7, r1
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	1d7b      	adds	r3, r7, #5
 80043ac:	33ff      	adds	r3, #255	; 0xff
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2201      	movs	r2, #1
 80043b2:	4013      	ands	r3, r2
 80043b4:	d004      	beq.n	80043c0 <USB_EPStartXfer+0x358>
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3301      	adds	r3, #1
 80043bc:	187a      	adds	r2, r7, r1
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	23fc      	movs	r3, #252	; 0xfc
 80043c8:	18fb      	adds	r3, r7, r3
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	029b      	lsls	r3, r3, #10
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	4313      	orrs	r3, r2
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	801a      	strh	r2, [r3, #0]
 80043da:	e01c      	b.n	8004416 <USB_EPStartXfer+0x3ae>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	785b      	ldrb	r3, [r3, #1]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d118      	bne.n	8004416 <USB_EPStartXfer+0x3ae>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	623b      	str	r3, [r7, #32]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2250      	movs	r2, #80	; 0x50
 80043ec:	5a9b      	ldrh	r3, [r3, r2]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	001a      	movs	r2, r3
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	189b      	adds	r3, r3, r2
 80043f6:	623b      	str	r3, [r7, #32]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	00da      	lsls	r2, r3, #3
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	18d3      	adds	r3, r2, r3
 8004402:	4a0e      	ldr	r2, [pc, #56]	; (800443c <USB_EPStartXfer+0x3d4>)
 8004404:	4694      	mov	ip, r2
 8004406:	4463      	add	r3, ip
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	1d7b      	adds	r3, r7, #5
 800440c:	33ff      	adds	r3, #255	; 0xff
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	b29a      	uxth	r2, r3
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004416:	2076      	movs	r0, #118	; 0x76
 8004418:	183b      	adds	r3, r7, r0
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	8912      	ldrh	r2, [r2, #8]
 800441e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	6959      	ldr	r1, [r3, #20]
 8004424:	1d7b      	adds	r3, r7, #5
 8004426:	33ff      	adds	r3, #255	; 0xff
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	b29c      	uxth	r4, r3
 800442c:	183b      	adds	r3, r7, r0
 800442e:	881a      	ldrh	r2, [r3, #0]
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	0023      	movs	r3, r4
 8004434:	f001 f88a 	bl	800554c <USB_WritePMA>
 8004438:	e329      	b.n	8004a8e <USB_EPStartXfer+0xa26>
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	00000402 	.word	0x00000402
 8004440:	ffff8f8f 	.word	0xffff8f8f
 8004444:	ffff8180 	.word	0xffff8180
 8004448:	00000406 	.word	0x00000406
 800444c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	785b      	ldrb	r3, [r3, #1]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d000      	beq.n	800445a <USB_EPStartXfer+0x3f2>
 8004458:	e070      	b.n	800453c <USB_EPStartXfer+0x4d4>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	64bb      	str	r3, [r7, #72]	; 0x48
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2250      	movs	r2, #80	; 0x50
 8004462:	5a9b      	ldrh	r3, [r3, r2]
 8004464:	b29b      	uxth	r3, r3
 8004466:	001a      	movs	r2, r3
 8004468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800446a:	189b      	adds	r3, r3, r2
 800446c:	64bb      	str	r3, [r7, #72]	; 0x48
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	00da      	lsls	r2, r3, #3
 8004474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004476:	18d3      	adds	r3, r2, r3
 8004478:	4acd      	ldr	r2, [pc, #820]	; (80047b0 <USB_EPStartXfer+0x748>)
 800447a:	4694      	mov	ip, r2
 800447c:	4463      	add	r3, ip
 800447e:	647b      	str	r3, [r7, #68]	; 0x44
 8004480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b29b      	uxth	r3, r3
 8004486:	059b      	lsls	r3, r3, #22
 8004488:	0d9b      	lsrs	r3, r3, #22
 800448a:	b29a      	uxth	r2, r3
 800448c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	1d7b      	adds	r3, r7, #5
 8004492:	33ff      	adds	r3, #255	; 0xff
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b3e      	cmp	r3, #62	; 0x3e
 8004498:	d922      	bls.n	80044e0 <USB_EPStartXfer+0x478>
 800449a:	1d7b      	adds	r3, r7, #5
 800449c:	33ff      	adds	r3, #255	; 0xff
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	21f8      	movs	r1, #248	; 0xf8
 80044a4:	187a      	adds	r2, r7, r1
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	1d7b      	adds	r3, r7, #5
 80044aa:	33ff      	adds	r3, #255	; 0xff
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	221f      	movs	r2, #31
 80044b0:	4013      	ands	r3, r2
 80044b2:	d104      	bne.n	80044be <USB_EPStartXfer+0x456>
 80044b4:	187b      	adds	r3, r7, r1
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	187a      	adds	r2, r7, r1
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	23f8      	movs	r3, #248	; 0xf8
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	029b      	lsls	r3, r3, #10
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	4313      	orrs	r3, r2
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	4ab7      	ldr	r2, [pc, #732]	; (80047b4 <USB_EPStartXfer+0x74c>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	b29a      	uxth	r2, r3
 80044da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044dc:	801a      	strh	r2, [r3, #0]
 80044de:	e04a      	b.n	8004576 <USB_EPStartXfer+0x50e>
 80044e0:	1d7b      	adds	r3, r7, #5
 80044e2:	33ff      	adds	r3, #255	; 0xff
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d108      	bne.n	80044fc <USB_EPStartXfer+0x494>
 80044ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	4ab0      	ldr	r2, [pc, #704]	; (80047b4 <USB_EPStartXfer+0x74c>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f8:	801a      	strh	r2, [r3, #0]
 80044fa:	e03c      	b.n	8004576 <USB_EPStartXfer+0x50e>
 80044fc:	1d7b      	adds	r3, r7, #5
 80044fe:	33ff      	adds	r3, #255	; 0xff
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	21f8      	movs	r1, #248	; 0xf8
 8004506:	187a      	adds	r2, r7, r1
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	1d7b      	adds	r3, r7, #5
 800450c:	33ff      	adds	r3, #255	; 0xff
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2201      	movs	r2, #1
 8004512:	4013      	ands	r3, r2
 8004514:	d004      	beq.n	8004520 <USB_EPStartXfer+0x4b8>
 8004516:	187b      	adds	r3, r7, r1
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3301      	adds	r3, #1
 800451c:	187a      	adds	r2, r7, r1
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	b29a      	uxth	r2, r3
 8004526:	23f8      	movs	r3, #248	; 0xf8
 8004528:	18fb      	adds	r3, r7, r3
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	029b      	lsls	r3, r3, #10
 8004530:	b29b      	uxth	r3, r3
 8004532:	4313      	orrs	r3, r2
 8004534:	b29a      	uxth	r2, r3
 8004536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	e01c      	b.n	8004576 <USB_EPStartXfer+0x50e>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	785b      	ldrb	r3, [r3, #1]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d118      	bne.n	8004576 <USB_EPStartXfer+0x50e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	653b      	str	r3, [r7, #80]	; 0x50
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2250      	movs	r2, #80	; 0x50
 800454c:	5a9b      	ldrh	r3, [r3, r2]
 800454e:	b29b      	uxth	r3, r3
 8004550:	001a      	movs	r2, r3
 8004552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004554:	189b      	adds	r3, r3, r2
 8004556:	653b      	str	r3, [r7, #80]	; 0x50
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	00da      	lsls	r2, r3, #3
 800455e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004560:	18d3      	adds	r3, r2, r3
 8004562:	4a93      	ldr	r2, [pc, #588]	; (80047b0 <USB_EPStartXfer+0x748>)
 8004564:	4694      	mov	ip, r2
 8004566:	4463      	add	r3, ip
 8004568:	64fb      	str	r3, [r7, #76]	; 0x4c
 800456a:	1d7b      	adds	r3, r7, #5
 800456c:	33ff      	adds	r3, #255	; 0xff
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	b29a      	uxth	r2, r3
 8004572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004574:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004576:	2076      	movs	r0, #118	; 0x76
 8004578:	183b      	adds	r3, r7, r0
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	8912      	ldrh	r2, [r2, #8]
 800457e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	6959      	ldr	r1, [r3, #20]
 8004584:	1d7b      	adds	r3, r7, #5
 8004586:	33ff      	adds	r3, #255	; 0xff
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	b29c      	uxth	r4, r3
 800458c:	183b      	adds	r3, r7, r0
 800458e:	881a      	ldrh	r2, [r3, #0]
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	0023      	movs	r3, r4
 8004594:	f000 ffda 	bl	800554c <USB_WritePMA>
            ep->xfer_buff += len;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	1d7b      	adds	r3, r7, #5
 800459e:	33ff      	adds	r3, #255	; 0xff
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	18d2      	adds	r2, r2, r3
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	6a1a      	ldr	r2, [r3, #32]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d908      	bls.n	80045c6 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	6a1a      	ldr	r2, [r3, #32]
 80045b8:	1d7b      	adds	r3, r7, #5
 80045ba:	33ff      	adds	r3, #255	; 0xff
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	1ad2      	subs	r2, r2, r3
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	621a      	str	r2, [r3, #32]
 80045c4:	e007      	b.n	80045d6 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	1d7a      	adds	r2, r7, #5
 80045cc:	32ff      	adds	r2, #255	; 0xff
 80045ce:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2200      	movs	r2, #0
 80045d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	643b      	str	r3, [r7, #64]	; 0x40
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	785b      	ldrb	r3, [r3, #1]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d000      	beq.n	80045e4 <USB_EPStartXfer+0x57c>
 80045e2:	e070      	b.n	80046c6 <USB_EPStartXfer+0x65e>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2250      	movs	r2, #80	; 0x50
 80045ec:	5a9b      	ldrh	r3, [r3, r2]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	001a      	movs	r2, r3
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	189b      	adds	r3, r3, r2
 80045f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	00da      	lsls	r2, r3, #3
 80045fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004600:	18d3      	adds	r3, r2, r3
 8004602:	4a6d      	ldr	r2, [pc, #436]	; (80047b8 <USB_EPStartXfer+0x750>)
 8004604:	4694      	mov	ip, r2
 8004606:	4463      	add	r3, ip
 8004608:	637b      	str	r3, [r7, #52]	; 0x34
 800460a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	059b      	lsls	r3, r3, #22
 8004612:	0d9b      	lsrs	r3, r3, #22
 8004614:	b29a      	uxth	r2, r3
 8004616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004618:	801a      	strh	r2, [r3, #0]
 800461a:	1d7b      	adds	r3, r7, #5
 800461c:	33ff      	adds	r3, #255	; 0xff
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b3e      	cmp	r3, #62	; 0x3e
 8004622:	d922      	bls.n	800466a <USB_EPStartXfer+0x602>
 8004624:	1d7b      	adds	r3, r7, #5
 8004626:	33ff      	adds	r3, #255	; 0xff
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	21f4      	movs	r1, #244	; 0xf4
 800462e:	187a      	adds	r2, r7, r1
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	1d7b      	adds	r3, r7, #5
 8004634:	33ff      	adds	r3, #255	; 0xff
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	221f      	movs	r2, #31
 800463a:	4013      	ands	r3, r2
 800463c:	d104      	bne.n	8004648 <USB_EPStartXfer+0x5e0>
 800463e:	187b      	adds	r3, r7, r1
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3b01      	subs	r3, #1
 8004644:	187a      	adds	r2, r7, r1
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	b29a      	uxth	r2, r3
 800464e:	23f4      	movs	r3, #244	; 0xf4
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	029b      	lsls	r3, r3, #10
 8004658:	b29b      	uxth	r3, r3
 800465a:	4313      	orrs	r3, r2
 800465c:	b29b      	uxth	r3, r3
 800465e:	4a55      	ldr	r2, [pc, #340]	; (80047b4 <USB_EPStartXfer+0x74c>)
 8004660:	4313      	orrs	r3, r2
 8004662:	b29a      	uxth	r2, r3
 8004664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004666:	801a      	strh	r2, [r3, #0]
 8004668:	e048      	b.n	80046fc <USB_EPStartXfer+0x694>
 800466a:	1d7b      	adds	r3, r7, #5
 800466c:	33ff      	adds	r3, #255	; 0xff
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d108      	bne.n	8004686 <USB_EPStartXfer+0x61e>
 8004674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	b29b      	uxth	r3, r3
 800467a:	4a4e      	ldr	r2, [pc, #312]	; (80047b4 <USB_EPStartXfer+0x74c>)
 800467c:	4313      	orrs	r3, r2
 800467e:	b29a      	uxth	r2, r3
 8004680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004682:	801a      	strh	r2, [r3, #0]
 8004684:	e03a      	b.n	80046fc <USB_EPStartXfer+0x694>
 8004686:	1d7b      	adds	r3, r7, #5
 8004688:	33ff      	adds	r3, #255	; 0xff
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	21f4      	movs	r1, #244	; 0xf4
 8004690:	187a      	adds	r2, r7, r1
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	1d7b      	adds	r3, r7, #5
 8004696:	33ff      	adds	r3, #255	; 0xff
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2201      	movs	r2, #1
 800469c:	4013      	ands	r3, r2
 800469e:	d004      	beq.n	80046aa <USB_EPStartXfer+0x642>
 80046a0:	187b      	adds	r3, r7, r1
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3301      	adds	r3, #1
 80046a6:	187a      	adds	r2, r7, r1
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	23f4      	movs	r3, #244	; 0xf4
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	029b      	lsls	r3, r3, #10
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	4313      	orrs	r3, r2
 80046be:	b29a      	uxth	r2, r3
 80046c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c2:	801a      	strh	r2, [r3, #0]
 80046c4:	e01a      	b.n	80046fc <USB_EPStartXfer+0x694>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	785b      	ldrb	r3, [r3, #1]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d116      	bne.n	80046fc <USB_EPStartXfer+0x694>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2250      	movs	r2, #80	; 0x50
 80046d2:	5a9b      	ldrh	r3, [r3, r2]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	001a      	movs	r2, r3
 80046d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046da:	189b      	adds	r3, r3, r2
 80046dc:	643b      	str	r3, [r7, #64]	; 0x40
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	00da      	lsls	r2, r3, #3
 80046e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e6:	18d3      	adds	r3, r2, r3
 80046e8:	4a33      	ldr	r2, [pc, #204]	; (80047b8 <USB_EPStartXfer+0x750>)
 80046ea:	4694      	mov	ip, r2
 80046ec:	4463      	add	r3, ip
 80046ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046f0:	1d7b      	adds	r3, r7, #5
 80046f2:	33ff      	adds	r3, #255	; 0xff
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80046fc:	2076      	movs	r0, #118	; 0x76
 80046fe:	183b      	adds	r3, r7, r0
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	8952      	ldrh	r2, [r2, #10]
 8004704:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	6959      	ldr	r1, [r3, #20]
 800470a:	1d7b      	adds	r3, r7, #5
 800470c:	33ff      	adds	r3, #255	; 0xff
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	b29c      	uxth	r4, r3
 8004712:	183b      	adds	r3, r7, r0
 8004714:	881a      	ldrh	r2, [r3, #0]
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	0023      	movs	r3, r4
 800471a:	f000 ff17 	bl	800554c <USB_WritePMA>
 800471e:	e1b6      	b.n	8004a8e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	1d7a      	adds	r2, r7, #5
 8004726:	32ff      	adds	r2, #255	; 0xff
 8004728:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	18d3      	adds	r3, r2, r3
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	b29a      	uxth	r2, r3
 8004738:	2062      	movs	r0, #98	; 0x62
 800473a:	183b      	adds	r3, r7, r0
 800473c:	491f      	ldr	r1, [pc, #124]	; (80047bc <USB_EPStartXfer+0x754>)
 800473e:	400a      	ands	r2, r1
 8004740:	801a      	strh	r2, [r3, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	18d3      	adds	r3, r2, r3
 800474c:	183a      	adds	r2, r7, r0
 800474e:	8812      	ldrh	r2, [r2, #0]
 8004750:	491b      	ldr	r1, [pc, #108]	; (80047c0 <USB_EPStartXfer+0x758>)
 8004752:	430a      	orrs	r2, r1
 8004754:	b292      	uxth	r2, r2
 8004756:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2250      	movs	r2, #80	; 0x50
 8004760:	5a9b      	ldrh	r3, [r3, r2]
 8004762:	b29b      	uxth	r3, r3
 8004764:	001a      	movs	r2, r3
 8004766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004768:	189b      	adds	r3, r3, r2
 800476a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	00da      	lsls	r2, r3, #3
 8004772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004774:	18d3      	adds	r3, r2, r3
 8004776:	4a0e      	ldr	r2, [pc, #56]	; (80047b0 <USB_EPStartXfer+0x748>)
 8004778:	4694      	mov	ip, r2
 800477a:	4463      	add	r3, ip
 800477c:	65bb      	str	r3, [r7, #88]	; 0x58
 800477e:	1d7b      	adds	r3, r7, #5
 8004780:	33ff      	adds	r3, #255	; 0xff
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	b29a      	uxth	r2, r3
 8004786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004788:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800478a:	2076      	movs	r0, #118	; 0x76
 800478c:	183b      	adds	r3, r7, r0
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	8912      	ldrh	r2, [r2, #8]
 8004792:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	6959      	ldr	r1, [r3, #20]
 8004798:	1d7b      	adds	r3, r7, #5
 800479a:	33ff      	adds	r3, #255	; 0xff
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	b29c      	uxth	r4, r3
 80047a0:	183b      	adds	r3, r7, r0
 80047a2:	881a      	ldrh	r2, [r3, #0]
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	0023      	movs	r3, r4
 80047a8:	f000 fed0 	bl	800554c <USB_WritePMA>
 80047ac:	e16f      	b.n	8004a8e <USB_EPStartXfer+0xa26>
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	00000402 	.word	0x00000402
 80047b4:	ffff8000 	.word	0xffff8000
 80047b8:	00000406 	.word	0x00000406
 80047bc:	ffff8e8f 	.word	0xffff8e8f
 80047c0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	6a1a      	ldr	r2, [r3, #32]
 80047c8:	1d7b      	adds	r3, r7, #5
 80047ca:	33ff      	adds	r3, #255	; 0xff
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	1ad2      	subs	r2, r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	18d3      	adds	r3, r2, r3
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	001a      	movs	r2, r3
 80047e4:	2340      	movs	r3, #64	; 0x40
 80047e6:	4013      	ands	r3, r2
 80047e8:	d100      	bne.n	80047ec <USB_EPStartXfer+0x784>
 80047ea:	e0a4      	b.n	8004936 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	673b      	str	r3, [r7, #112]	; 0x70
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d000      	beq.n	80047fa <USB_EPStartXfer+0x792>
 80047f8:	e070      	b.n	80048dc <USB_EPStartXfer+0x874>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2250      	movs	r2, #80	; 0x50
 8004802:	5a9b      	ldrh	r3, [r3, r2]
 8004804:	b29b      	uxth	r3, r3
 8004806:	001a      	movs	r2, r3
 8004808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800480a:	189b      	adds	r3, r3, r2
 800480c:	66bb      	str	r3, [r7, #104]	; 0x68
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	00da      	lsls	r2, r3, #3
 8004814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004816:	18d3      	adds	r3, r2, r3
 8004818:	4abc      	ldr	r2, [pc, #752]	; (8004b0c <USB_EPStartXfer+0xaa4>)
 800481a:	4694      	mov	ip, r2
 800481c:	4463      	add	r3, ip
 800481e:	667b      	str	r3, [r7, #100]	; 0x64
 8004820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	059b      	lsls	r3, r3, #22
 8004828:	0d9b      	lsrs	r3, r3, #22
 800482a:	b29a      	uxth	r2, r3
 800482c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800482e:	801a      	strh	r2, [r3, #0]
 8004830:	1d7b      	adds	r3, r7, #5
 8004832:	33ff      	adds	r3, #255	; 0xff
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b3e      	cmp	r3, #62	; 0x3e
 8004838:	d922      	bls.n	8004880 <USB_EPStartXfer+0x818>
 800483a:	1d7b      	adds	r3, r7, #5
 800483c:	33ff      	adds	r3, #255	; 0xff
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	21f0      	movs	r1, #240	; 0xf0
 8004844:	187a      	adds	r2, r7, r1
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	1d7b      	adds	r3, r7, #5
 800484a:	33ff      	adds	r3, #255	; 0xff
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	221f      	movs	r2, #31
 8004850:	4013      	ands	r3, r2
 8004852:	d104      	bne.n	800485e <USB_EPStartXfer+0x7f6>
 8004854:	187b      	adds	r3, r7, r1
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3b01      	subs	r3, #1
 800485a:	187a      	adds	r2, r7, r1
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29a      	uxth	r2, r3
 8004864:	23f0      	movs	r3, #240	; 0xf0
 8004866:	18fb      	adds	r3, r7, r3
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	b29b      	uxth	r3, r3
 800486c:	029b      	lsls	r3, r3, #10
 800486e:	b29b      	uxth	r3, r3
 8004870:	4313      	orrs	r3, r2
 8004872:	b29b      	uxth	r3, r3
 8004874:	4aa6      	ldr	r2, [pc, #664]	; (8004b10 <USB_EPStartXfer+0xaa8>)
 8004876:	4313      	orrs	r3, r2
 8004878:	b29a      	uxth	r2, r3
 800487a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800487c:	801a      	strh	r2, [r3, #0]
 800487e:	e048      	b.n	8004912 <USB_EPStartXfer+0x8aa>
 8004880:	1d7b      	adds	r3, r7, #5
 8004882:	33ff      	adds	r3, #255	; 0xff
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d108      	bne.n	800489c <USB_EPStartXfer+0x834>
 800488a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	4a9f      	ldr	r2, [pc, #636]	; (8004b10 <USB_EPStartXfer+0xaa8>)
 8004892:	4313      	orrs	r3, r2
 8004894:	b29a      	uxth	r2, r3
 8004896:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004898:	801a      	strh	r2, [r3, #0]
 800489a:	e03a      	b.n	8004912 <USB_EPStartXfer+0x8aa>
 800489c:	1d7b      	adds	r3, r7, #5
 800489e:	33ff      	adds	r3, #255	; 0xff
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	085b      	lsrs	r3, r3, #1
 80048a4:	21f0      	movs	r1, #240	; 0xf0
 80048a6:	187a      	adds	r2, r7, r1
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	1d7b      	adds	r3, r7, #5
 80048ac:	33ff      	adds	r3, #255	; 0xff
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2201      	movs	r2, #1
 80048b2:	4013      	ands	r3, r2
 80048b4:	d004      	beq.n	80048c0 <USB_EPStartXfer+0x858>
 80048b6:	187b      	adds	r3, r7, r1
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3301      	adds	r3, #1
 80048bc:	187a      	adds	r2, r7, r1
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	23f0      	movs	r3, #240	; 0xf0
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	029b      	lsls	r3, r3, #10
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	4313      	orrs	r3, r2
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d8:	801a      	strh	r2, [r3, #0]
 80048da:	e01a      	b.n	8004912 <USB_EPStartXfer+0x8aa>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	785b      	ldrb	r3, [r3, #1]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d116      	bne.n	8004912 <USB_EPStartXfer+0x8aa>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2250      	movs	r2, #80	; 0x50
 80048e8:	5a9b      	ldrh	r3, [r3, r2]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	001a      	movs	r2, r3
 80048ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048f0:	189b      	adds	r3, r3, r2
 80048f2:	673b      	str	r3, [r7, #112]	; 0x70
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	00da      	lsls	r2, r3, #3
 80048fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048fc:	18d3      	adds	r3, r2, r3
 80048fe:	4a83      	ldr	r2, [pc, #524]	; (8004b0c <USB_EPStartXfer+0xaa4>)
 8004900:	4694      	mov	ip, r2
 8004902:	4463      	add	r3, ip
 8004904:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004906:	1d7b      	adds	r3, r7, #5
 8004908:	33ff      	adds	r3, #255	; 0xff
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	b29a      	uxth	r2, r3
 800490e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004910:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004912:	2076      	movs	r0, #118	; 0x76
 8004914:	183b      	adds	r3, r7, r0
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	8952      	ldrh	r2, [r2, #10]
 800491a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6959      	ldr	r1, [r3, #20]
 8004920:	1d7b      	adds	r3, r7, #5
 8004922:	33ff      	adds	r3, #255	; 0xff
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	b29c      	uxth	r4, r3
 8004928:	183b      	adds	r3, r7, r0
 800492a:	881a      	ldrh	r2, [r3, #0]
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	0023      	movs	r3, r4
 8004930:	f000 fe0c 	bl	800554c <USB_WritePMA>
 8004934:	e0ab      	b.n	8004a8e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d000      	beq.n	8004940 <USB_EPStartXfer+0x8d8>
 800493e:	e070      	b.n	8004a22 <USB_EPStartXfer+0x9ba>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2250      	movs	r2, #80	; 0x50
 8004948:	5a9b      	ldrh	r3, [r3, r2]
 800494a:	b29b      	uxth	r3, r3
 800494c:	001a      	movs	r2, r3
 800494e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004950:	189b      	adds	r3, r3, r2
 8004952:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	00da      	lsls	r2, r3, #3
 800495a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800495c:	18d3      	adds	r3, r2, r3
 800495e:	4a6d      	ldr	r2, [pc, #436]	; (8004b14 <USB_EPStartXfer+0xaac>)
 8004960:	4694      	mov	ip, r2
 8004962:	4463      	add	r3, ip
 8004964:	67bb      	str	r3, [r7, #120]	; 0x78
 8004966:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	059b      	lsls	r3, r3, #22
 800496e:	0d9b      	lsrs	r3, r3, #22
 8004970:	b29a      	uxth	r2, r3
 8004972:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004974:	801a      	strh	r2, [r3, #0]
 8004976:	1d7b      	adds	r3, r7, #5
 8004978:	33ff      	adds	r3, #255	; 0xff
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b3e      	cmp	r3, #62	; 0x3e
 800497e:	d922      	bls.n	80049c6 <USB_EPStartXfer+0x95e>
 8004980:	1d7b      	adds	r3, r7, #5
 8004982:	33ff      	adds	r3, #255	; 0xff
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	21ec      	movs	r1, #236	; 0xec
 800498a:	187a      	adds	r2, r7, r1
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	1d7b      	adds	r3, r7, #5
 8004990:	33ff      	adds	r3, #255	; 0xff
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	221f      	movs	r2, #31
 8004996:	4013      	ands	r3, r2
 8004998:	d104      	bne.n	80049a4 <USB_EPStartXfer+0x93c>
 800499a:	187b      	adds	r3, r7, r1
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3b01      	subs	r3, #1
 80049a0:	187a      	adds	r2, r7, r1
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	23ec      	movs	r3, #236	; 0xec
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	029b      	lsls	r3, r3, #10
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	4313      	orrs	r3, r2
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	4a55      	ldr	r2, [pc, #340]	; (8004b10 <USB_EPStartXfer+0xaa8>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	b29a      	uxth	r2, r3
 80049c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049c2:	801a      	strh	r2, [r3, #0]
 80049c4:	e052      	b.n	8004a6c <USB_EPStartXfer+0xa04>
 80049c6:	1d7b      	adds	r3, r7, #5
 80049c8:	33ff      	adds	r3, #255	; 0xff
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d108      	bne.n	80049e2 <USB_EPStartXfer+0x97a>
 80049d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	4a4e      	ldr	r2, [pc, #312]	; (8004b10 <USB_EPStartXfer+0xaa8>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	b29a      	uxth	r2, r3
 80049dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049de:	801a      	strh	r2, [r3, #0]
 80049e0:	e044      	b.n	8004a6c <USB_EPStartXfer+0xa04>
 80049e2:	1d7b      	adds	r3, r7, #5
 80049e4:	33ff      	adds	r3, #255	; 0xff
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	085b      	lsrs	r3, r3, #1
 80049ea:	21ec      	movs	r1, #236	; 0xec
 80049ec:	187a      	adds	r2, r7, r1
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	1d7b      	adds	r3, r7, #5
 80049f2:	33ff      	adds	r3, #255	; 0xff
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2201      	movs	r2, #1
 80049f8:	4013      	ands	r3, r2
 80049fa:	d004      	beq.n	8004a06 <USB_EPStartXfer+0x99e>
 80049fc:	187b      	adds	r3, r7, r1
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3301      	adds	r3, #1
 8004a02:	187a      	adds	r2, r7, r1
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	23ec      	movs	r3, #236	; 0xec
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	029b      	lsls	r3, r3, #10
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a1e:	801a      	strh	r2, [r3, #0]
 8004a20:	e024      	b.n	8004a6c <USB_EPStartXfer+0xa04>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	785b      	ldrb	r3, [r3, #1]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d120      	bne.n	8004a6c <USB_EPStartXfer+0xa04>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2184      	movs	r1, #132	; 0x84
 8004a2e:	187a      	adds	r2, r7, r1
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2250      	movs	r2, #80	; 0x50
 8004a36:	5a9b      	ldrh	r3, [r3, r2]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	001a      	movs	r2, r3
 8004a3c:	187b      	adds	r3, r7, r1
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	189b      	adds	r3, r3, r2
 8004a42:	187a      	adds	r2, r7, r1
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	00da      	lsls	r2, r3, #3
 8004a4c:	187b      	adds	r3, r7, r1
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	18d3      	adds	r3, r2, r3
 8004a52:	4a30      	ldr	r2, [pc, #192]	; (8004b14 <USB_EPStartXfer+0xaac>)
 8004a54:	4694      	mov	ip, r2
 8004a56:	4463      	add	r3, ip
 8004a58:	2180      	movs	r1, #128	; 0x80
 8004a5a:	187a      	adds	r2, r7, r1
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	1d7b      	adds	r3, r7, #5
 8004a60:	33ff      	adds	r3, #255	; 0xff
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	187b      	adds	r3, r7, r1
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004a6c:	2076      	movs	r0, #118	; 0x76
 8004a6e:	183b      	adds	r3, r7, r0
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	8912      	ldrh	r2, [r2, #8]
 8004a74:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6959      	ldr	r1, [r3, #20]
 8004a7a:	1d7b      	adds	r3, r7, #5
 8004a7c:	33ff      	adds	r3, #255	; 0xff
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	b29c      	uxth	r4, r3
 8004a82:	183b      	adds	r3, r7, r0
 8004a84:	881a      	ldrh	r2, [r3, #0]
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	0023      	movs	r3, r4
 8004a8a:	f000 fd5f 	bl	800554c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	18d3      	adds	r3, r2, r3
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	200a      	movs	r0, #10
 8004a9e:	183b      	adds	r3, r7, r0
 8004aa0:	491d      	ldr	r1, [pc, #116]	; (8004b18 <USB_EPStartXfer+0xab0>)
 8004aa2:	400a      	ands	r2, r1
 8004aa4:	801a      	strh	r2, [r3, #0]
 8004aa6:	183b      	adds	r3, r7, r0
 8004aa8:	183a      	adds	r2, r7, r0
 8004aaa:	8812      	ldrh	r2, [r2, #0]
 8004aac:	2110      	movs	r1, #16
 8004aae:	404a      	eors	r2, r1
 8004ab0:	801a      	strh	r2, [r3, #0]
 8004ab2:	183b      	adds	r3, r7, r0
 8004ab4:	183a      	adds	r2, r7, r0
 8004ab6:	8812      	ldrh	r2, [r2, #0]
 8004ab8:	2120      	movs	r1, #32
 8004aba:	404a      	eors	r2, r1
 8004abc:	801a      	strh	r2, [r3, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	18d3      	adds	r3, r2, r3
 8004ac8:	183a      	adds	r2, r7, r0
 8004aca:	8812      	ldrh	r2, [r2, #0]
 8004acc:	4913      	ldr	r1, [pc, #76]	; (8004b1c <USB_EPStartXfer+0xab4>)
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	b292      	uxth	r2, r2
 8004ad2:	801a      	strh	r2, [r3, #0]
 8004ad4:	f000 fbf4 	bl	80052c0 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	7b1b      	ldrb	r3, [r3, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d000      	beq.n	8004ae2 <USB_EPStartXfer+0xa7a>
 8004ae0:	e0a9      	b.n	8004c36 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d918      	bls.n	8004b20 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	1d7a      	adds	r2, r7, #5
 8004af4:	32ff      	adds	r2, #255	; 0xff
 8004af6:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	699a      	ldr	r2, [r3, #24]
 8004afc:	1d7b      	adds	r3, r7, #5
 8004afe:	33ff      	adds	r3, #255	; 0xff
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	1ad2      	subs	r2, r2, r3
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	619a      	str	r2, [r3, #24]
 8004b08:	e012      	b.n	8004b30 <USB_EPStartXfer+0xac8>
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	00000406 	.word	0x00000406
 8004b10:	ffff8000 	.word	0xffff8000
 8004b14:	00000402 	.word	0x00000402
 8004b18:	ffff8fbf 	.word	0xffff8fbf
 8004b1c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	1d7a      	adds	r2, r7, #5
 8004b26:	32ff      	adds	r2, #255	; 0xff
 8004b28:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2190      	movs	r1, #144	; 0x90
 8004b34:	187a      	adds	r2, r7, r1
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2250      	movs	r2, #80	; 0x50
 8004b3c:	5a9b      	ldrh	r3, [r3, r2]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	001a      	movs	r2, r3
 8004b42:	187b      	adds	r3, r7, r1
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	189b      	adds	r3, r3, r2
 8004b48:	187a      	adds	r2, r7, r1
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	00da      	lsls	r2, r3, #3
 8004b52:	187b      	adds	r3, r7, r1
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	18d3      	adds	r3, r2, r3
 8004b58:	4acf      	ldr	r2, [pc, #828]	; (8004e98 <USB_EPStartXfer+0xe30>)
 8004b5a:	4694      	mov	ip, r2
 8004b5c:	4463      	add	r3, ip
 8004b5e:	218c      	movs	r1, #140	; 0x8c
 8004b60:	187a      	adds	r2, r7, r1
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	187b      	adds	r3, r7, r1
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	059b      	lsls	r3, r3, #22
 8004b6e:	0d9b      	lsrs	r3, r3, #22
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	187b      	adds	r3, r7, r1
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	801a      	strh	r2, [r3, #0]
 8004b78:	1d7b      	adds	r3, r7, #5
 8004b7a:	33ff      	adds	r3, #255	; 0xff
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b80:	d925      	bls.n	8004bce <USB_EPStartXfer+0xb66>
 8004b82:	1d7b      	adds	r3, r7, #5
 8004b84:	33ff      	adds	r3, #255	; 0xff
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	21e8      	movs	r1, #232	; 0xe8
 8004b8c:	187a      	adds	r2, r7, r1
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	1d7b      	adds	r3, r7, #5
 8004b92:	33ff      	adds	r3, #255	; 0xff
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	221f      	movs	r2, #31
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d104      	bne.n	8004ba6 <USB_EPStartXfer+0xb3e>
 8004b9c:	187b      	adds	r3, r7, r1
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	187a      	adds	r2, r7, r1
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	218c      	movs	r1, #140	; 0x8c
 8004ba8:	187b      	adds	r3, r7, r1
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	23e8      	movs	r3, #232	; 0xe8
 8004bb2:	18fb      	adds	r3, r7, r3
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	029b      	lsls	r3, r3, #10
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	4ab6      	ldr	r2, [pc, #728]	; (8004e9c <USB_EPStartXfer+0xe34>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	187b      	adds	r3, r7, r1
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	801a      	strh	r2, [r3, #0]
 8004bcc:	e353      	b.n	8005276 <USB_EPStartXfer+0x120e>
 8004bce:	1d7b      	adds	r3, r7, #5
 8004bd0:	33ff      	adds	r3, #255	; 0xff
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10b      	bne.n	8004bf0 <USB_EPStartXfer+0xb88>
 8004bd8:	218c      	movs	r1, #140	; 0x8c
 8004bda:	187b      	adds	r3, r7, r1
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	4aae      	ldr	r2, [pc, #696]	; (8004e9c <USB_EPStartXfer+0xe34>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	187b      	adds	r3, r7, r1
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	801a      	strh	r2, [r3, #0]
 8004bee:	e342      	b.n	8005276 <USB_EPStartXfer+0x120e>
 8004bf0:	1d7b      	adds	r3, r7, #5
 8004bf2:	33ff      	adds	r3, #255	; 0xff
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	21e8      	movs	r1, #232	; 0xe8
 8004bfa:	187a      	adds	r2, r7, r1
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	1d7b      	adds	r3, r7, #5
 8004c00:	33ff      	adds	r3, #255	; 0xff
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2201      	movs	r2, #1
 8004c06:	4013      	ands	r3, r2
 8004c08:	d004      	beq.n	8004c14 <USB_EPStartXfer+0xbac>
 8004c0a:	187b      	adds	r3, r7, r1
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	187a      	adds	r2, r7, r1
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	218c      	movs	r1, #140	; 0x8c
 8004c16:	187b      	adds	r3, r7, r1
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	23e8      	movs	r3, #232	; 0xe8
 8004c20:	18fb      	adds	r3, r7, r3
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	029b      	lsls	r3, r3, #10
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	187b      	adds	r3, r7, r1
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	801a      	strh	r2, [r3, #0]
 8004c34:	e31f      	b.n	8005276 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	78db      	ldrb	r3, [r3, #3]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d000      	beq.n	8004c40 <USB_EPStartXfer+0xbd8>
 8004c3e:	e191      	b.n	8004f64 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	785b      	ldrb	r3, [r3, #1]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d000      	beq.n	8004c4a <USB_EPStartXfer+0xbe2>
 8004c48:	e07c      	b.n	8004d44 <USB_EPStartXfer+0xcdc>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	21ac      	movs	r1, #172	; 0xac
 8004c4e:	187a      	adds	r2, r7, r1
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2250      	movs	r2, #80	; 0x50
 8004c56:	5a9b      	ldrh	r3, [r3, r2]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	001a      	movs	r2, r3
 8004c5c:	187b      	adds	r3, r7, r1
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	189b      	adds	r3, r3, r2
 8004c62:	187a      	adds	r2, r7, r1
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	00da      	lsls	r2, r3, #3
 8004c6c:	187b      	adds	r3, r7, r1
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	18d3      	adds	r3, r2, r3
 8004c72:	4a8b      	ldr	r2, [pc, #556]	; (8004ea0 <USB_EPStartXfer+0xe38>)
 8004c74:	4694      	mov	ip, r2
 8004c76:	4463      	add	r3, ip
 8004c78:	21a8      	movs	r1, #168	; 0xa8
 8004c7a:	187a      	adds	r2, r7, r1
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	187b      	adds	r3, r7, r1
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	059b      	lsls	r3, r3, #22
 8004c88:	0d9b      	lsrs	r3, r3, #22
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	187b      	adds	r3, r7, r1
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	801a      	strh	r2, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b3e      	cmp	r3, #62	; 0x3e
 8004c98:	d923      	bls.n	8004ce2 <USB_EPStartXfer+0xc7a>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	21e4      	movs	r1, #228	; 0xe4
 8004ca2:	187a      	adds	r2, r7, r1
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	221f      	movs	r2, #31
 8004cac:	4013      	ands	r3, r2
 8004cae:	d104      	bne.n	8004cba <USB_EPStartXfer+0xc52>
 8004cb0:	187b      	adds	r3, r7, r1
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	187a      	adds	r2, r7, r1
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	21a8      	movs	r1, #168	; 0xa8
 8004cbc:	187b      	adds	r3, r7, r1
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	23e4      	movs	r3, #228	; 0xe4
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	029b      	lsls	r3, r3, #10
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	4a71      	ldr	r2, [pc, #452]	; (8004e9c <USB_EPStartXfer+0xe34>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	187b      	adds	r3, r7, r1
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	801a      	strh	r2, [r3, #0]
 8004ce0:	e054      	b.n	8004d8c <USB_EPStartXfer+0xd24>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10b      	bne.n	8004d02 <USB_EPStartXfer+0xc9a>
 8004cea:	21a8      	movs	r1, #168	; 0xa8
 8004cec:	187b      	adds	r3, r7, r1
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	4a69      	ldr	r2, [pc, #420]	; (8004e9c <USB_EPStartXfer+0xe34>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	187b      	adds	r3, r7, r1
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	801a      	strh	r2, [r3, #0]
 8004d00:	e044      	b.n	8004d8c <USB_EPStartXfer+0xd24>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	085b      	lsrs	r3, r3, #1
 8004d08:	21e4      	movs	r1, #228	; 0xe4
 8004d0a:	187a      	adds	r2, r7, r1
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	2201      	movs	r2, #1
 8004d14:	4013      	ands	r3, r2
 8004d16:	d004      	beq.n	8004d22 <USB_EPStartXfer+0xcba>
 8004d18:	187b      	adds	r3, r7, r1
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	187a      	adds	r2, r7, r1
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	21a8      	movs	r1, #168	; 0xa8
 8004d24:	187b      	adds	r3, r7, r1
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	23e4      	movs	r3, #228	; 0xe4
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	029b      	lsls	r3, r3, #10
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	187b      	adds	r3, r7, r1
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	801a      	strh	r2, [r3, #0]
 8004d42:	e023      	b.n	8004d8c <USB_EPStartXfer+0xd24>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d11f      	bne.n	8004d8c <USB_EPStartXfer+0xd24>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	21b4      	movs	r1, #180	; 0xb4
 8004d50:	187a      	adds	r2, r7, r1
 8004d52:	6013      	str	r3, [r2, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2250      	movs	r2, #80	; 0x50
 8004d58:	5a9b      	ldrh	r3, [r3, r2]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	001a      	movs	r2, r3
 8004d5e:	187b      	adds	r3, r7, r1
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	189b      	adds	r3, r3, r2
 8004d64:	187a      	adds	r2, r7, r1
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	00da      	lsls	r2, r3, #3
 8004d6e:	187b      	adds	r3, r7, r1
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	18d3      	adds	r3, r2, r3
 8004d74:	4a4a      	ldr	r2, [pc, #296]	; (8004ea0 <USB_EPStartXfer+0xe38>)
 8004d76:	4694      	mov	ip, r2
 8004d78:	4463      	add	r3, ip
 8004d7a:	21b0      	movs	r1, #176	; 0xb0
 8004d7c:	187a      	adds	r2, r7, r1
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	187b      	adds	r3, r7, r1
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	801a      	strh	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	22a4      	movs	r2, #164	; 0xa4
 8004d90:	18ba      	adds	r2, r7, r2
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d000      	beq.n	8004d9e <USB_EPStartXfer+0xd36>
 8004d9c:	e082      	b.n	8004ea4 <USB_EPStartXfer+0xe3c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	219c      	movs	r1, #156	; 0x9c
 8004da2:	187a      	adds	r2, r7, r1
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2250      	movs	r2, #80	; 0x50
 8004daa:	5a9b      	ldrh	r3, [r3, r2]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	001a      	movs	r2, r3
 8004db0:	187b      	adds	r3, r7, r1
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	189b      	adds	r3, r3, r2
 8004db6:	187a      	adds	r2, r7, r1
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	00da      	lsls	r2, r3, #3
 8004dc0:	187b      	adds	r3, r7, r1
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	18d3      	adds	r3, r2, r3
 8004dc6:	4a34      	ldr	r2, [pc, #208]	; (8004e98 <USB_EPStartXfer+0xe30>)
 8004dc8:	4694      	mov	ip, r2
 8004dca:	4463      	add	r3, ip
 8004dcc:	2198      	movs	r1, #152	; 0x98
 8004dce:	187a      	adds	r2, r7, r1
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	187b      	adds	r3, r7, r1
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	059b      	lsls	r3, r3, #22
 8004ddc:	0d9b      	lsrs	r3, r3, #22
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	187b      	adds	r3, r7, r1
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	801a      	strh	r2, [r3, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b3e      	cmp	r3, #62	; 0x3e
 8004dec:	d923      	bls.n	8004e36 <USB_EPStartXfer+0xdce>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	21e0      	movs	r1, #224	; 0xe0
 8004df6:	187a      	adds	r2, r7, r1
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	221f      	movs	r2, #31
 8004e00:	4013      	ands	r3, r2
 8004e02:	d104      	bne.n	8004e0e <USB_EPStartXfer+0xda6>
 8004e04:	187b      	adds	r3, r7, r1
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	187a      	adds	r2, r7, r1
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	2198      	movs	r1, #152	; 0x98
 8004e10:	187b      	adds	r3, r7, r1
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	23e0      	movs	r3, #224	; 0xe0
 8004e1a:	18fb      	adds	r3, r7, r3
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	029b      	lsls	r3, r3, #10
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	4313      	orrs	r3, r2
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	4a1c      	ldr	r2, [pc, #112]	; (8004e9c <USB_EPStartXfer+0xe34>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	187b      	adds	r3, r7, r1
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	801a      	strh	r2, [r3, #0]
 8004e34:	e057      	b.n	8004ee6 <USB_EPStartXfer+0xe7e>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10b      	bne.n	8004e56 <USB_EPStartXfer+0xdee>
 8004e3e:	2198      	movs	r1, #152	; 0x98
 8004e40:	187b      	adds	r3, r7, r1
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	4a14      	ldr	r2, [pc, #80]	; (8004e9c <USB_EPStartXfer+0xe34>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	187b      	adds	r3, r7, r1
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	801a      	strh	r2, [r3, #0]
 8004e54:	e047      	b.n	8004ee6 <USB_EPStartXfer+0xe7e>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	21e0      	movs	r1, #224	; 0xe0
 8004e5e:	187a      	adds	r2, r7, r1
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2201      	movs	r2, #1
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d004      	beq.n	8004e76 <USB_EPStartXfer+0xe0e>
 8004e6c:	187b      	adds	r3, r7, r1
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3301      	adds	r3, #1
 8004e72:	187a      	adds	r2, r7, r1
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	2198      	movs	r1, #152	; 0x98
 8004e78:	187b      	adds	r3, r7, r1
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	23e0      	movs	r3, #224	; 0xe0
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	029b      	lsls	r3, r3, #10
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	187b      	adds	r3, r7, r1
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	801a      	strh	r2, [r3, #0]
 8004e96:	e026      	b.n	8004ee6 <USB_EPStartXfer+0xe7e>
 8004e98:	00000406 	.word	0x00000406
 8004e9c:	ffff8000 	.word	0xffff8000
 8004ea0:	00000402 	.word	0x00000402
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	785b      	ldrb	r3, [r3, #1]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d11c      	bne.n	8004ee6 <USB_EPStartXfer+0xe7e>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2250      	movs	r2, #80	; 0x50
 8004eb0:	5a9b      	ldrh	r3, [r3, r2]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	001a      	movs	r2, r3
 8004eb6:	21a4      	movs	r1, #164	; 0xa4
 8004eb8:	187b      	adds	r3, r7, r1
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	189b      	adds	r3, r3, r2
 8004ebe:	187a      	adds	r2, r7, r1
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	00da      	lsls	r2, r3, #3
 8004ec8:	187b      	adds	r3, r7, r1
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	18d3      	adds	r3, r2, r3
 8004ece:	4ad2      	ldr	r2, [pc, #840]	; (8005218 <USB_EPStartXfer+0x11b0>)
 8004ed0:	4694      	mov	ip, r2
 8004ed2:	4463      	add	r3, ip
 8004ed4:	21a0      	movs	r1, #160	; 0xa0
 8004ed6:	187a      	adds	r2, r7, r1
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	187b      	adds	r3, r7, r1
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d100      	bne.n	8004ef0 <USB_EPStartXfer+0xe88>
 8004eee:	e1c2      	b.n	8005276 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	18d2      	adds	r2, r2, r3
 8004efa:	2196      	movs	r1, #150	; 0x96
 8004efc:	187b      	adds	r3, r7, r1
 8004efe:	8812      	ldrh	r2, [r2, #0]
 8004f00:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f02:	187b      	adds	r3, r7, r1
 8004f04:	881a      	ldrh	r2, [r3, #0]
 8004f06:	2380      	movs	r3, #128	; 0x80
 8004f08:	01db      	lsls	r3, r3, #7
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d004      	beq.n	8004f18 <USB_EPStartXfer+0xeb0>
 8004f0e:	187b      	adds	r3, r7, r1
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	2240      	movs	r2, #64	; 0x40
 8004f14:	4013      	ands	r3, r2
 8004f16:	d10d      	bne.n	8004f34 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f18:	2196      	movs	r1, #150	; 0x96
 8004f1a:	187b      	adds	r3, r7, r1
 8004f1c:	881a      	ldrh	r2, [r3, #0]
 8004f1e:	2380      	movs	r3, #128	; 0x80
 8004f20:	01db      	lsls	r3, r3, #7
 8004f22:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f24:	d000      	beq.n	8004f28 <USB_EPStartXfer+0xec0>
 8004f26:	e1a6      	b.n	8005276 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f28:	187b      	adds	r3, r7, r1
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	2240      	movs	r2, #64	; 0x40
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d000      	beq.n	8004f34 <USB_EPStartXfer+0xecc>
 8004f32:	e1a0      	b.n	8005276 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	18d3      	adds	r3, r2, r3
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	2094      	movs	r0, #148	; 0x94
 8004f44:	183b      	adds	r3, r7, r0
 8004f46:	49b5      	ldr	r1, [pc, #724]	; (800521c <USB_EPStartXfer+0x11b4>)
 8004f48:	400a      	ands	r2, r1
 8004f4a:	801a      	strh	r2, [r3, #0]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	18d3      	adds	r3, r2, r3
 8004f56:	183a      	adds	r2, r7, r0
 8004f58:	8812      	ldrh	r2, [r2, #0]
 8004f5a:	49b1      	ldr	r1, [pc, #708]	; (8005220 <USB_EPStartXfer+0x11b8>)
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	b292      	uxth	r2, r2
 8004f60:	801a      	strh	r2, [r3, #0]
 8004f62:	e188      	b.n	8005276 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	78db      	ldrb	r3, [r3, #3]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d000      	beq.n	8004f6e <USB_EPStartXfer+0xf06>
 8004f6c:	e181      	b.n	8005272 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d90d      	bls.n	8004f96 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	1d7a      	adds	r2, r7, #5
 8004f80:	32ff      	adds	r2, #255	; 0xff
 8004f82:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	699a      	ldr	r2, [r3, #24]
 8004f88:	1d7b      	adds	r3, r7, #5
 8004f8a:	33ff      	adds	r3, #255	; 0xff
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	1ad2      	subs	r2, r2, r3
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	619a      	str	r2, [r3, #24]
 8004f94:	e007      	b.n	8004fa6 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	1d7a      	adds	r2, r7, #5
 8004f9c:	32ff      	adds	r2, #255	; 0xff
 8004f9e:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	785b      	ldrb	r3, [r3, #1]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d000      	beq.n	8004fb0 <USB_EPStartXfer+0xf48>
 8004fae:	e082      	b.n	80050b6 <USB_EPStartXfer+0x104e>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	21cc      	movs	r1, #204	; 0xcc
 8004fb4:	187a      	adds	r2, r7, r1
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2250      	movs	r2, #80	; 0x50
 8004fbc:	5a9b      	ldrh	r3, [r3, r2]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	001a      	movs	r2, r3
 8004fc2:	187b      	adds	r3, r7, r1
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	189b      	adds	r3, r3, r2
 8004fc8:	187a      	adds	r2, r7, r1
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	00da      	lsls	r2, r3, #3
 8004fd2:	187b      	adds	r3, r7, r1
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	18d3      	adds	r3, r2, r3
 8004fd8:	4a92      	ldr	r2, [pc, #584]	; (8005224 <USB_EPStartXfer+0x11bc>)
 8004fda:	4694      	mov	ip, r2
 8004fdc:	4463      	add	r3, ip
 8004fde:	21c8      	movs	r1, #200	; 0xc8
 8004fe0:	187a      	adds	r2, r7, r1
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	187b      	adds	r3, r7, r1
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	059b      	lsls	r3, r3, #22
 8004fee:	0d9b      	lsrs	r3, r3, #22
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	187b      	adds	r3, r7, r1
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	801a      	strh	r2, [r3, #0]
 8004ff8:	1d7b      	adds	r3, r7, #5
 8004ffa:	33ff      	adds	r3, #255	; 0xff
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b3e      	cmp	r3, #62	; 0x3e
 8005000:	d925      	bls.n	800504e <USB_EPStartXfer+0xfe6>
 8005002:	1d7b      	adds	r3, r7, #5
 8005004:	33ff      	adds	r3, #255	; 0xff
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	21dc      	movs	r1, #220	; 0xdc
 800500c:	187a      	adds	r2, r7, r1
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	1d7b      	adds	r3, r7, #5
 8005012:	33ff      	adds	r3, #255	; 0xff
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	221f      	movs	r2, #31
 8005018:	4013      	ands	r3, r2
 800501a:	d104      	bne.n	8005026 <USB_EPStartXfer+0xfbe>
 800501c:	187b      	adds	r3, r7, r1
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3b01      	subs	r3, #1
 8005022:	187a      	adds	r2, r7, r1
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	21c8      	movs	r1, #200	; 0xc8
 8005028:	187b      	adds	r3, r7, r1
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29a      	uxth	r2, r3
 8005030:	23dc      	movs	r3, #220	; 0xdc
 8005032:	18fb      	adds	r3, r7, r3
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	b29b      	uxth	r3, r3
 8005038:	029b      	lsls	r3, r3, #10
 800503a:	b29b      	uxth	r3, r3
 800503c:	4313      	orrs	r3, r2
 800503e:	b29b      	uxth	r3, r3
 8005040:	4a79      	ldr	r2, [pc, #484]	; (8005228 <USB_EPStartXfer+0x11c0>)
 8005042:	4313      	orrs	r3, r2
 8005044:	b29a      	uxth	r2, r3
 8005046:	187b      	adds	r3, r7, r1
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	801a      	strh	r2, [r3, #0]
 800504c:	e058      	b.n	8005100 <USB_EPStartXfer+0x1098>
 800504e:	1d7b      	adds	r3, r7, #5
 8005050:	33ff      	adds	r3, #255	; 0xff
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10b      	bne.n	8005070 <USB_EPStartXfer+0x1008>
 8005058:	21c8      	movs	r1, #200	; 0xc8
 800505a:	187b      	adds	r3, r7, r1
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	4a71      	ldr	r2, [pc, #452]	; (8005228 <USB_EPStartXfer+0x11c0>)
 8005064:	4313      	orrs	r3, r2
 8005066:	b29a      	uxth	r2, r3
 8005068:	187b      	adds	r3, r7, r1
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	801a      	strh	r2, [r3, #0]
 800506e:	e047      	b.n	8005100 <USB_EPStartXfer+0x1098>
 8005070:	1d7b      	adds	r3, r7, #5
 8005072:	33ff      	adds	r3, #255	; 0xff
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	085b      	lsrs	r3, r3, #1
 8005078:	21dc      	movs	r1, #220	; 0xdc
 800507a:	187a      	adds	r2, r7, r1
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	1d7b      	adds	r3, r7, #5
 8005080:	33ff      	adds	r3, #255	; 0xff
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2201      	movs	r2, #1
 8005086:	4013      	ands	r3, r2
 8005088:	d004      	beq.n	8005094 <USB_EPStartXfer+0x102c>
 800508a:	187b      	adds	r3, r7, r1
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3301      	adds	r3, #1
 8005090:	187a      	adds	r2, r7, r1
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	21c8      	movs	r1, #200	; 0xc8
 8005096:	187b      	adds	r3, r7, r1
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	b29a      	uxth	r2, r3
 800509e:	23dc      	movs	r3, #220	; 0xdc
 80050a0:	18fb      	adds	r3, r7, r3
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	029b      	lsls	r3, r3, #10
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	4313      	orrs	r3, r2
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	187b      	adds	r3, r7, r1
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	801a      	strh	r2, [r3, #0]
 80050b4:	e024      	b.n	8005100 <USB_EPStartXfer+0x1098>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	785b      	ldrb	r3, [r3, #1]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d120      	bne.n	8005100 <USB_EPStartXfer+0x1098>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	21d4      	movs	r1, #212	; 0xd4
 80050c2:	187a      	adds	r2, r7, r1
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2250      	movs	r2, #80	; 0x50
 80050ca:	5a9b      	ldrh	r3, [r3, r2]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	001a      	movs	r2, r3
 80050d0:	187b      	adds	r3, r7, r1
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	189b      	adds	r3, r3, r2
 80050d6:	187a      	adds	r2, r7, r1
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	00da      	lsls	r2, r3, #3
 80050e0:	187b      	adds	r3, r7, r1
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	18d3      	adds	r3, r2, r3
 80050e6:	4a4f      	ldr	r2, [pc, #316]	; (8005224 <USB_EPStartXfer+0x11bc>)
 80050e8:	4694      	mov	ip, r2
 80050ea:	4463      	add	r3, ip
 80050ec:	21d0      	movs	r1, #208	; 0xd0
 80050ee:	187a      	adds	r2, r7, r1
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	1d7b      	adds	r3, r7, #5
 80050f4:	33ff      	adds	r3, #255	; 0xff
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	187b      	adds	r3, r7, r1
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	801a      	strh	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	22c4      	movs	r2, #196	; 0xc4
 8005104:	18ba      	adds	r2, r7, r2
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d000      	beq.n	8005112 <USB_EPStartXfer+0x10aa>
 8005110:	e08c      	b.n	800522c <USB_EPStartXfer+0x11c4>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	21bc      	movs	r1, #188	; 0xbc
 8005116:	187a      	adds	r2, r7, r1
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2250      	movs	r2, #80	; 0x50
 800511e:	5a9b      	ldrh	r3, [r3, r2]
 8005120:	b29b      	uxth	r3, r3
 8005122:	001a      	movs	r2, r3
 8005124:	187b      	adds	r3, r7, r1
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	189b      	adds	r3, r3, r2
 800512a:	187a      	adds	r2, r7, r1
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	00da      	lsls	r2, r3, #3
 8005134:	187b      	adds	r3, r7, r1
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	18d3      	adds	r3, r2, r3
 800513a:	4a37      	ldr	r2, [pc, #220]	; (8005218 <USB_EPStartXfer+0x11b0>)
 800513c:	4694      	mov	ip, r2
 800513e:	4463      	add	r3, ip
 8005140:	21b8      	movs	r1, #184	; 0xb8
 8005142:	187a      	adds	r2, r7, r1
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	187b      	adds	r3, r7, r1
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	059b      	lsls	r3, r3, #22
 8005150:	0d9b      	lsrs	r3, r3, #22
 8005152:	b29a      	uxth	r2, r3
 8005154:	187b      	adds	r3, r7, r1
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	801a      	strh	r2, [r3, #0]
 800515a:	1d7b      	adds	r3, r7, #5
 800515c:	33ff      	adds	r3, #255	; 0xff
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b3e      	cmp	r3, #62	; 0x3e
 8005162:	d925      	bls.n	80051b0 <USB_EPStartXfer+0x1148>
 8005164:	1d7b      	adds	r3, r7, #5
 8005166:	33ff      	adds	r3, #255	; 0xff
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	21d8      	movs	r1, #216	; 0xd8
 800516e:	187a      	adds	r2, r7, r1
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	1d7b      	adds	r3, r7, #5
 8005174:	33ff      	adds	r3, #255	; 0xff
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	221f      	movs	r2, #31
 800517a:	4013      	ands	r3, r2
 800517c:	d104      	bne.n	8005188 <USB_EPStartXfer+0x1120>
 800517e:	187b      	adds	r3, r7, r1
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3b01      	subs	r3, #1
 8005184:	187a      	adds	r2, r7, r1
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	21b8      	movs	r1, #184	; 0xb8
 800518a:	187b      	adds	r3, r7, r1
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	b29a      	uxth	r2, r3
 8005192:	23d8      	movs	r3, #216	; 0xd8
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	029b      	lsls	r3, r3, #10
 800519c:	b29b      	uxth	r3, r3
 800519e:	4313      	orrs	r3, r2
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	4a21      	ldr	r2, [pc, #132]	; (8005228 <USB_EPStartXfer+0x11c0>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	187b      	adds	r3, r7, r1
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	801a      	strh	r2, [r3, #0]
 80051ae:	e062      	b.n	8005276 <USB_EPStartXfer+0x120e>
 80051b0:	1d7b      	adds	r3, r7, #5
 80051b2:	33ff      	adds	r3, #255	; 0xff
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10b      	bne.n	80051d2 <USB_EPStartXfer+0x116a>
 80051ba:	21b8      	movs	r1, #184	; 0xb8
 80051bc:	187b      	adds	r3, r7, r1
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	4a18      	ldr	r2, [pc, #96]	; (8005228 <USB_EPStartXfer+0x11c0>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	187b      	adds	r3, r7, r1
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	801a      	strh	r2, [r3, #0]
 80051d0:	e051      	b.n	8005276 <USB_EPStartXfer+0x120e>
 80051d2:	1d7b      	adds	r3, r7, #5
 80051d4:	33ff      	adds	r3, #255	; 0xff
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	085b      	lsrs	r3, r3, #1
 80051da:	21d8      	movs	r1, #216	; 0xd8
 80051dc:	187a      	adds	r2, r7, r1
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	1d7b      	adds	r3, r7, #5
 80051e2:	33ff      	adds	r3, #255	; 0xff
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2201      	movs	r2, #1
 80051e8:	4013      	ands	r3, r2
 80051ea:	d004      	beq.n	80051f6 <USB_EPStartXfer+0x118e>
 80051ec:	187b      	adds	r3, r7, r1
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	187a      	adds	r2, r7, r1
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	21b8      	movs	r1, #184	; 0xb8
 80051f8:	187b      	adds	r3, r7, r1
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29a      	uxth	r2, r3
 8005200:	23d8      	movs	r3, #216	; 0xd8
 8005202:	18fb      	adds	r3, r7, r3
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	029b      	lsls	r3, r3, #10
 800520a:	b29b      	uxth	r3, r3
 800520c:	4313      	orrs	r3, r2
 800520e:	b29a      	uxth	r2, r3
 8005210:	187b      	adds	r3, r7, r1
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	801a      	strh	r2, [r3, #0]
 8005216:	e02e      	b.n	8005276 <USB_EPStartXfer+0x120e>
 8005218:	00000406 	.word	0x00000406
 800521c:	ffff8f8f 	.word	0xffff8f8f
 8005220:	ffff80c0 	.word	0xffff80c0
 8005224:	00000402 	.word	0x00000402
 8005228:	ffff8000 	.word	0xffff8000
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	785b      	ldrb	r3, [r3, #1]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d120      	bne.n	8005276 <USB_EPStartXfer+0x120e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2250      	movs	r2, #80	; 0x50
 8005238:	5a9b      	ldrh	r3, [r3, r2]
 800523a:	b29b      	uxth	r3, r3
 800523c:	001a      	movs	r2, r3
 800523e:	21c4      	movs	r1, #196	; 0xc4
 8005240:	187b      	adds	r3, r7, r1
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	189b      	adds	r3, r3, r2
 8005246:	187a      	adds	r2, r7, r1
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	00da      	lsls	r2, r3, #3
 8005250:	187b      	adds	r3, r7, r1
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	18d3      	adds	r3, r2, r3
 8005256:	4a1d      	ldr	r2, [pc, #116]	; (80052cc <USB_EPStartXfer+0x1264>)
 8005258:	4694      	mov	ip, r2
 800525a:	4463      	add	r3, ip
 800525c:	21c0      	movs	r1, #192	; 0xc0
 800525e:	187a      	adds	r2, r7, r1
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	1d7b      	adds	r3, r7, #5
 8005264:	33ff      	adds	r3, #255	; 0xff
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	b29a      	uxth	r2, r3
 800526a:	187b      	adds	r3, r7, r1
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	801a      	strh	r2, [r3, #0]
 8005270:	e001      	b.n	8005276 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e025      	b.n	80052c2 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	18d3      	adds	r3, r2, r3
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29a      	uxth	r2, r3
 8005284:	208a      	movs	r0, #138	; 0x8a
 8005286:	183b      	adds	r3, r7, r0
 8005288:	4911      	ldr	r1, [pc, #68]	; (80052d0 <USB_EPStartXfer+0x1268>)
 800528a:	400a      	ands	r2, r1
 800528c:	801a      	strh	r2, [r3, #0]
 800528e:	183b      	adds	r3, r7, r0
 8005290:	183a      	adds	r2, r7, r0
 8005292:	8812      	ldrh	r2, [r2, #0]
 8005294:	2180      	movs	r1, #128	; 0x80
 8005296:	0149      	lsls	r1, r1, #5
 8005298:	404a      	eors	r2, r1
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	183b      	adds	r3, r7, r0
 800529e:	183a      	adds	r2, r7, r0
 80052a0:	8812      	ldrh	r2, [r2, #0]
 80052a2:	2180      	movs	r1, #128	; 0x80
 80052a4:	0189      	lsls	r1, r1, #6
 80052a6:	404a      	eors	r2, r1
 80052a8:	801a      	strh	r2, [r3, #0]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	18d3      	adds	r3, r2, r3
 80052b4:	183a      	adds	r2, r7, r0
 80052b6:	8812      	ldrh	r2, [r2, #0]
 80052b8:	4906      	ldr	r1, [pc, #24]	; (80052d4 <USB_EPStartXfer+0x126c>)
 80052ba:	430a      	orrs	r2, r1
 80052bc:	b292      	uxth	r2, r2
 80052be:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	0018      	movs	r0, r3
 80052c4:	46bd      	mov	sp, r7
 80052c6:	b043      	add	sp, #268	; 0x10c
 80052c8:	bd90      	pop	{r4, r7, pc}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	00000406 	.word	0x00000406
 80052d0:	ffffbf8f 	.word	0xffffbf8f
 80052d4:	ffff8080 	.word	0xffff8080

080052d8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	785b      	ldrb	r3, [r3, #1]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d01d      	beq.n	8005326 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	18d3      	adds	r3, r2, r3
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	200c      	movs	r0, #12
 80052fa:	183b      	adds	r3, r7, r0
 80052fc:	491b      	ldr	r1, [pc, #108]	; (800536c <USB_EPSetStall+0x94>)
 80052fe:	400a      	ands	r2, r1
 8005300:	801a      	strh	r2, [r3, #0]
 8005302:	183b      	adds	r3, r7, r0
 8005304:	183a      	adds	r2, r7, r0
 8005306:	8812      	ldrh	r2, [r2, #0]
 8005308:	2110      	movs	r1, #16
 800530a:	404a      	eors	r2, r1
 800530c:	801a      	strh	r2, [r3, #0]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	18d3      	adds	r3, r2, r3
 8005318:	183a      	adds	r2, r7, r0
 800531a:	8812      	ldrh	r2, [r2, #0]
 800531c:	4914      	ldr	r1, [pc, #80]	; (8005370 <USB_EPSetStall+0x98>)
 800531e:	430a      	orrs	r2, r1
 8005320:	b292      	uxth	r2, r2
 8005322:	801a      	strh	r2, [r3, #0]
 8005324:	e01d      	b.n	8005362 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	18d3      	adds	r3, r2, r3
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29a      	uxth	r2, r3
 8005334:	200e      	movs	r0, #14
 8005336:	183b      	adds	r3, r7, r0
 8005338:	490e      	ldr	r1, [pc, #56]	; (8005374 <USB_EPSetStall+0x9c>)
 800533a:	400a      	ands	r2, r1
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	183b      	adds	r3, r7, r0
 8005340:	183a      	adds	r2, r7, r0
 8005342:	8812      	ldrh	r2, [r2, #0]
 8005344:	2180      	movs	r1, #128	; 0x80
 8005346:	0149      	lsls	r1, r1, #5
 8005348:	404a      	eors	r2, r1
 800534a:	801a      	strh	r2, [r3, #0]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	18d3      	adds	r3, r2, r3
 8005356:	183a      	adds	r2, r7, r0
 8005358:	8812      	ldrh	r2, [r2, #0]
 800535a:	4905      	ldr	r1, [pc, #20]	; (8005370 <USB_EPSetStall+0x98>)
 800535c:	430a      	orrs	r2, r1
 800535e:	b292      	uxth	r2, r2
 8005360:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	0018      	movs	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	b004      	add	sp, #16
 800536a:	bd80      	pop	{r7, pc}
 800536c:	ffff8fbf 	.word	0xffff8fbf
 8005370:	ffff8080 	.word	0xffff8080
 8005374:	ffffbf8f 	.word	0xffffbf8f

08005378 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	7b1b      	ldrb	r3, [r3, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d000      	beq.n	800538c <USB_EPClearStall+0x14>
 800538a:	e095      	b.n	80054b8 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	785b      	ldrb	r3, [r3, #1]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d046      	beq.n	8005422 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	18d2      	adds	r2, r2, r3
 800539e:	2110      	movs	r1, #16
 80053a0:	187b      	adds	r3, r7, r1
 80053a2:	8812      	ldrh	r2, [r2, #0]
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	187b      	adds	r3, r7, r1
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	2240      	movs	r2, #64	; 0x40
 80053ac:	4013      	ands	r3, r2
 80053ae:	d016      	beq.n	80053de <USB_EPClearStall+0x66>
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	18d3      	adds	r3, r2, r3
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	b29a      	uxth	r2, r3
 80053be:	200e      	movs	r0, #14
 80053c0:	183b      	adds	r3, r7, r0
 80053c2:	4940      	ldr	r1, [pc, #256]	; (80054c4 <USB_EPClearStall+0x14c>)
 80053c4:	400a      	ands	r2, r1
 80053c6:	801a      	strh	r2, [r3, #0]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	18d3      	adds	r3, r2, r3
 80053d2:	183a      	adds	r2, r7, r0
 80053d4:	8812      	ldrh	r2, [r2, #0]
 80053d6:	493c      	ldr	r1, [pc, #240]	; (80054c8 <USB_EPClearStall+0x150>)
 80053d8:	430a      	orrs	r2, r1
 80053da:	b292      	uxth	r2, r2
 80053dc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	78db      	ldrb	r3, [r3, #3]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d068      	beq.n	80054b8 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	18d3      	adds	r3, r2, r3
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	200c      	movs	r0, #12
 80053f6:	183b      	adds	r3, r7, r0
 80053f8:	4934      	ldr	r1, [pc, #208]	; (80054cc <USB_EPClearStall+0x154>)
 80053fa:	400a      	ands	r2, r1
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	183b      	adds	r3, r7, r0
 8005400:	183a      	adds	r2, r7, r0
 8005402:	8812      	ldrh	r2, [r2, #0]
 8005404:	2120      	movs	r1, #32
 8005406:	404a      	eors	r2, r1
 8005408:	801a      	strh	r2, [r3, #0]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	18d3      	adds	r3, r2, r3
 8005414:	183a      	adds	r2, r7, r0
 8005416:	8812      	ldrh	r2, [r2, #0]
 8005418:	492d      	ldr	r1, [pc, #180]	; (80054d0 <USB_EPClearStall+0x158>)
 800541a:	430a      	orrs	r2, r1
 800541c:	b292      	uxth	r2, r2
 800541e:	801a      	strh	r2, [r3, #0]
 8005420:	e04a      	b.n	80054b8 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	18d2      	adds	r2, r2, r3
 800542c:	2116      	movs	r1, #22
 800542e:	187b      	adds	r3, r7, r1
 8005430:	8812      	ldrh	r2, [r2, #0]
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	187b      	adds	r3, r7, r1
 8005436:	881a      	ldrh	r2, [r3, #0]
 8005438:	2380      	movs	r3, #128	; 0x80
 800543a:	01db      	lsls	r3, r3, #7
 800543c:	4013      	ands	r3, r2
 800543e:	d016      	beq.n	800546e <USB_EPClearStall+0xf6>
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	18d3      	adds	r3, r2, r3
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	b29a      	uxth	r2, r3
 800544e:	2014      	movs	r0, #20
 8005450:	183b      	adds	r3, r7, r0
 8005452:	491c      	ldr	r1, [pc, #112]	; (80054c4 <USB_EPClearStall+0x14c>)
 8005454:	400a      	ands	r2, r1
 8005456:	801a      	strh	r2, [r3, #0]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	18d3      	adds	r3, r2, r3
 8005462:	183a      	adds	r2, r7, r0
 8005464:	8812      	ldrh	r2, [r2, #0]
 8005466:	491b      	ldr	r1, [pc, #108]	; (80054d4 <USB_EPClearStall+0x15c>)
 8005468:	430a      	orrs	r2, r1
 800546a:	b292      	uxth	r2, r2
 800546c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	18d3      	adds	r3, r2, r3
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	b29a      	uxth	r2, r3
 800547c:	2012      	movs	r0, #18
 800547e:	183b      	adds	r3, r7, r0
 8005480:	4915      	ldr	r1, [pc, #84]	; (80054d8 <USB_EPClearStall+0x160>)
 8005482:	400a      	ands	r2, r1
 8005484:	801a      	strh	r2, [r3, #0]
 8005486:	183b      	adds	r3, r7, r0
 8005488:	183a      	adds	r2, r7, r0
 800548a:	8812      	ldrh	r2, [r2, #0]
 800548c:	2180      	movs	r1, #128	; 0x80
 800548e:	0149      	lsls	r1, r1, #5
 8005490:	404a      	eors	r2, r1
 8005492:	801a      	strh	r2, [r3, #0]
 8005494:	183b      	adds	r3, r7, r0
 8005496:	183a      	adds	r2, r7, r0
 8005498:	8812      	ldrh	r2, [r2, #0]
 800549a:	2180      	movs	r1, #128	; 0x80
 800549c:	0189      	lsls	r1, r1, #6
 800549e:	404a      	eors	r2, r1
 80054a0:	801a      	strh	r2, [r3, #0]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	18d3      	adds	r3, r2, r3
 80054ac:	183a      	adds	r2, r7, r0
 80054ae:	8812      	ldrh	r2, [r2, #0]
 80054b0:	4907      	ldr	r1, [pc, #28]	; (80054d0 <USB_EPClearStall+0x158>)
 80054b2:	430a      	orrs	r2, r1
 80054b4:	b292      	uxth	r2, r2
 80054b6:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	0018      	movs	r0, r3
 80054bc:	46bd      	mov	sp, r7
 80054be:	b006      	add	sp, #24
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	ffff8f8f 	.word	0xffff8f8f
 80054c8:	ffff80c0 	.word	0xffff80c0
 80054cc:	ffff8fbf 	.word	0xffff8fbf
 80054d0:	ffff8080 	.word	0xffff8080
 80054d4:	ffffc080 	.word	0xffffc080
 80054d8:	ffffbf8f 	.word	0xffffbf8f

080054dc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	000a      	movs	r2, r1
 80054e6:	1cfb      	adds	r3, r7, #3
 80054e8:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80054ea:	1cfb      	adds	r3, r7, #3
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d103      	bne.n	80054fa <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	224c      	movs	r2, #76	; 0x4c
 80054f6:	2180      	movs	r1, #128	; 0x80
 80054f8:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	0018      	movs	r0, r3
 80054fe:	46bd      	mov	sp, r7
 8005500:	b002      	add	sp, #8
 8005502:	bd80      	pop	{r7, pc}

08005504 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2258      	movs	r2, #88	; 0x58
 8005510:	5a9b      	ldrh	r3, [r3, r2]
 8005512:	b29b      	uxth	r3, r3
 8005514:	4a05      	ldr	r2, [pc, #20]	; (800552c <USB_DevConnect+0x28>)
 8005516:	4313      	orrs	r3, r2
 8005518:	b299      	uxth	r1, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2258      	movs	r2, #88	; 0x58
 800551e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	0018      	movs	r0, r3
 8005524:	46bd      	mov	sp, r7
 8005526:	b002      	add	sp, #8
 8005528:	bd80      	pop	{r7, pc}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	ffff8000 	.word	0xffff8000

08005530 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2244      	movs	r2, #68	; 0x44
 800553c:	5a9b      	ldrh	r3, [r3, r2]
 800553e:	b29b      	uxth	r3, r3
 8005540:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005542:	68fb      	ldr	r3, [r7, #12]
}
 8005544:	0018      	movs	r0, r3
 8005546:	46bd      	mov	sp, r7
 8005548:	b004      	add	sp, #16
 800554a:	bd80      	pop	{r7, pc}

0800554c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	0019      	movs	r1, r3
 8005558:	1dbb      	adds	r3, r7, #6
 800555a:	801a      	strh	r2, [r3, #0]
 800555c:	1d3b      	adds	r3, r7, #4
 800555e:	1c0a      	adds	r2, r1, #0
 8005560:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005562:	1d3b      	adds	r3, r7, #4
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	3301      	adds	r3, #1
 8005568:	085b      	lsrs	r3, r3, #1
 800556a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005574:	1dbb      	adds	r3, r7, #6
 8005576:	881a      	ldrh	r2, [r3, #0]
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	18d3      	adds	r3, r2, r3
 800557c:	2280      	movs	r2, #128	; 0x80
 800557e:	00d2      	lsls	r2, r2, #3
 8005580:	4694      	mov	ip, r2
 8005582:	4463      	add	r3, ip
 8005584:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
 800558a:	e020      	b.n	80055ce <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	781a      	ldrb	r2, [r3, #0]
 8005590:	2112      	movs	r1, #18
 8005592:	187b      	adds	r3, r7, r1
 8005594:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	3301      	adds	r3, #1
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	b21a      	sxth	r2, r3
 80055a0:	187b      	adds	r3, r7, r1
 80055a2:	2000      	movs	r0, #0
 80055a4:	5e1b      	ldrsh	r3, [r3, r0]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	b21a      	sxth	r2, r3
 80055aa:	187b      	adds	r3, r7, r1
 80055ac:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	187a      	adds	r2, r7, r1
 80055b2:	8812      	ldrh	r2, [r2, #0]
 80055b4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	3302      	adds	r3, #2
 80055ba:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	3301      	adds	r3, #1
 80055c0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	3301      	adds	r3, #1
 80055c6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	3b01      	subs	r3, #1
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1db      	bne.n	800558c <USB_WritePMA+0x40>
  }
}
 80055d4:	46c0      	nop			; (mov r8, r8)
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	46bd      	mov	sp, r7
 80055da:	b00a      	add	sp, #40	; 0x28
 80055dc:	bd80      	pop	{r7, pc}

080055de <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b08a      	sub	sp, #40	; 0x28
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	0019      	movs	r1, r3
 80055ea:	1dbb      	adds	r3, r7, #6
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	1d3b      	adds	r3, r7, #4
 80055f0:	1c0a      	adds	r2, r1, #0
 80055f2:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80055f4:	1d3b      	adds	r3, r7, #4
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	085b      	lsrs	r3, r3, #1
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005606:	1dbb      	adds	r3, r7, #6
 8005608:	881a      	ldrh	r2, [r3, #0]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	18d3      	adds	r3, r2, r3
 800560e:	2280      	movs	r2, #128	; 0x80
 8005610:	00d2      	lsls	r2, r2, #3
 8005612:	4694      	mov	ip, r2
 8005614:	4463      	add	r3, ip
 8005616:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
 800561c:	e018      	b.n	8005650 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	b29b      	uxth	r3, r3
 8005624:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	3302      	adds	r3, #2
 800562a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	b2da      	uxtb	r2, r3
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	3301      	adds	r3, #1
 8005638:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	0a1b      	lsrs	r3, r3, #8
 800563e:	b2da      	uxtb	r2, r3
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	3301      	adds	r3, #1
 8005648:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	3b01      	subs	r3, #1
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e3      	bne.n	800561e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005656:	1d3b      	adds	r3, r7, #4
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	2201      	movs	r2, #1
 800565c:	4013      	ands	r3, r2
 800565e:	b29b      	uxth	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	b29b      	uxth	r3, r3
 800566a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	b2da      	uxtb	r2, r3
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	701a      	strb	r2, [r3, #0]
  }
}
 8005674:	46c0      	nop			; (mov r8, r8)
 8005676:	46bd      	mov	sp, r7
 8005678:	b00a      	add	sp, #40	; 0x28
 800567a:	bd80      	pop	{r7, pc}

0800567c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	000a      	movs	r2, r1
 8005686:	1cfb      	adds	r3, r7, #3
 8005688:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800568a:	230f      	movs	r3, #15
 800568c:	18fb      	adds	r3, r7, r3
 800568e:	2200      	movs	r2, #0
 8005690:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	7c1b      	ldrb	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d116      	bne.n	80056c8 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800569a:	2380      	movs	r3, #128	; 0x80
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	2181      	movs	r1, #129	; 0x81
 80056a4:	f002 f8a1 	bl	80077ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80056ae:	2380      	movs	r3, #128	; 0x80
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	2202      	movs	r2, #2
 80056b6:	2101      	movs	r1, #1
 80056b8:	f002 f897 	bl	80077ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	23b6      	movs	r3, #182	; 0xb6
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	2101      	movs	r1, #1
 80056c4:	50d1      	str	r1, [r2, r3]
 80056c6:	e013      	b.n	80056f0 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	2340      	movs	r3, #64	; 0x40
 80056cc:	2202      	movs	r2, #2
 80056ce:	2181      	movs	r1, #129	; 0x81
 80056d0:	f002 f88b 	bl	80077ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	2340      	movs	r3, #64	; 0x40
 80056de:	2202      	movs	r2, #2
 80056e0:	2101      	movs	r1, #1
 80056e2:	f002 f882 	bl	80077ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	23b6      	movs	r3, #182	; 0xb6
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	2101      	movs	r1, #1
 80056ee:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	2308      	movs	r3, #8
 80056f4:	2203      	movs	r2, #3
 80056f6:	2182      	movs	r1, #130	; 0x82
 80056f8:	f002 f877 	bl	80077ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005702:	2387      	movs	r3, #135	; 0x87
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	0018      	movs	r0, r3
 8005708:	f002 fa08 	bl	8007b1c <USBD_static_malloc>
 800570c:	0001      	movs	r1, r0
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	23ae      	movs	r3, #174	; 0xae
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	23ae      	movs	r3, #174	; 0xae
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	58d3      	ldr	r3, [r2, r3]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d104      	bne.n	800572c <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8005722:	230f      	movs	r3, #15
 8005724:	18fb      	adds	r3, r7, r3
 8005726:	2201      	movs	r2, #1
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	e02c      	b.n	8005786 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	23ae      	movs	r3, #174	; 0xae
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	58d3      	ldr	r3, [r2, r3]
 8005734:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	23af      	movs	r3, #175	; 0xaf
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	58d3      	ldr	r3, [r2, r3]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	2385      	movs	r3, #133	; 0x85
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	2100      	movs	r1, #0
 800574a:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	2386      	movs	r3, #134	; 0x86
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	2100      	movs	r1, #0
 8005754:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	7c1b      	ldrb	r3, [r3, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	2381      	movs	r3, #129	; 0x81
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	58d2      	ldr	r2, [r2, r3]
 8005766:	2380      	movs	r3, #128	; 0x80
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	2101      	movs	r1, #1
 800576e:	f002 f987 	bl	8007a80 <USBD_LL_PrepareReceive>
 8005772:	e008      	b.n	8005786 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	2381      	movs	r3, #129	; 0x81
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	58d2      	ldr	r2, [r2, r3]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	2340      	movs	r3, #64	; 0x40
 8005780:	2101      	movs	r1, #1
 8005782:	f002 f97d 	bl	8007a80 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005786:	230f      	movs	r3, #15
 8005788:	18fb      	adds	r3, r7, r3
 800578a:	781b      	ldrb	r3, [r3, #0]
}
 800578c:	0018      	movs	r0, r3
 800578e:	46bd      	mov	sp, r7
 8005790:	b004      	add	sp, #16
 8005792:	bd80      	pop	{r7, pc}

08005794 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	000a      	movs	r2, r1
 800579e:	1cfb      	adds	r3, r7, #3
 80057a0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80057a2:	230f      	movs	r3, #15
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	2200      	movs	r2, #0
 80057a8:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2181      	movs	r1, #129	; 0x81
 80057ae:	0018      	movs	r0, r3
 80057b0:	f002 f852 	bl	8007858 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2101      	movs	r1, #1
 80057be:	0018      	movs	r0, r3
 80057c0:	f002 f84a 	bl	8007858 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	23b6      	movs	r3, #182	; 0xb6
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	2100      	movs	r1, #0
 80057cc:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2182      	movs	r1, #130	; 0x82
 80057d2:	0018      	movs	r0, r3
 80057d4:	f002 f840 	bl	8007858 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	23ae      	movs	r3, #174	; 0xae
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	58d3      	ldr	r3, [r2, r3]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d011      	beq.n	800580e <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	23af      	movs	r3, #175	; 0xaf
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	58d3      	ldr	r3, [r2, r3]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	23ae      	movs	r3, #174	; 0xae
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	58d3      	ldr	r3, [r2, r3]
 80057fe:	0018      	movs	r0, r3
 8005800:	f002 f998 	bl	8007b34 <USBD_static_free>
    pdev->pClassData = NULL;
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	23ae      	movs	r3, #174	; 0xae
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	2100      	movs	r1, #0
 800580c:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800580e:	230f      	movs	r3, #15
 8005810:	18fb      	adds	r3, r7, r3
 8005812:	781b      	ldrb	r3, [r3, #0]
}
 8005814:	0018      	movs	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	b004      	add	sp, #16
 800581a:	bd80      	pop	{r7, pc}

0800581c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	23ae      	movs	r3, #174	; 0xae
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	58d3      	ldr	r3, [r2, r3]
 800582e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005830:	230f      	movs	r3, #15
 8005832:	18fb      	adds	r3, r7, r3
 8005834:	2200      	movs	r2, #0
 8005836:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8005838:	230c      	movs	r3, #12
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	2200      	movs	r2, #0
 800583e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8005840:	2317      	movs	r3, #23
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	2200      	movs	r2, #0
 8005846:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	001a      	movs	r2, r3
 800584e:	2360      	movs	r3, #96	; 0x60
 8005850:	4013      	ands	r3, r2
 8005852:	d03d      	beq.n	80058d0 <USBD_CDC_Setup+0xb4>
 8005854:	2b20      	cmp	r3, #32
 8005856:	d000      	beq.n	800585a <USBD_CDC_Setup+0x3e>
 8005858:	e094      	b.n	8005984 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	88db      	ldrh	r3, [r3, #6]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d02b      	beq.n	80058ba <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	b25b      	sxtb	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	da12      	bge.n	8005892 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	23af      	movs	r3, #175	; 0xaf
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	58d3      	ldr	r3, [r2, r3]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800587a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	88d2      	ldrh	r2, [r2, #6]
 8005880:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005882:	6939      	ldr	r1, [r7, #16]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	88da      	ldrh	r2, [r3, #6]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	0018      	movs	r0, r3
 800588c:	f001 fbb2 	bl	8006ff4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005890:	e083      	b.n	800599a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	7859      	ldrb	r1, [r3, #1]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	2380      	movs	r3, #128	; 0x80
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	88db      	ldrh	r3, [r3, #6]
 80058a2:	b2d9      	uxtb	r1, r3
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	4a40      	ldr	r2, [pc, #256]	; (80059a8 <USBD_CDC_Setup+0x18c>)
 80058a8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80058aa:	6939      	ldr	r1, [r7, #16]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	88da      	ldrh	r2, [r3, #6]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	0018      	movs	r0, r3
 80058b4:	f001 fbd1 	bl	800705a <USBD_CtlPrepareRx>
      break;
 80058b8:	e06f      	b.n	800599a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	23af      	movs	r3, #175	; 0xaf
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	58d3      	ldr	r3, [r2, r3]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	7850      	ldrb	r0, [r2, #1]
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	2200      	movs	r2, #0
 80058cc:	4798      	blx	r3
      break;
 80058ce:	e064      	b.n	800599a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	785b      	ldrb	r3, [r3, #1]
 80058d4:	2b0b      	cmp	r3, #11
 80058d6:	d037      	beq.n	8005948 <USBD_CDC_Setup+0x12c>
 80058d8:	dc47      	bgt.n	800596a <USBD_CDC_Setup+0x14e>
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <USBD_CDC_Setup+0xc8>
 80058de:	2b0a      	cmp	r3, #10
 80058e0:	d019      	beq.n	8005916 <USBD_CDC_Setup+0xfa>
 80058e2:	e042      	b.n	800596a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	23a7      	movs	r3, #167	; 0xa7
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	5cd3      	ldrb	r3, [r2, r3]
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d107      	bne.n	8005900 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80058f0:	230c      	movs	r3, #12
 80058f2:	18f9      	adds	r1, r7, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	0018      	movs	r0, r3
 80058fa:	f001 fb7b 	bl	8006ff4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058fe:	e040      	b.n	8005982 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	0011      	movs	r1, r2
 8005906:	0018      	movs	r0, r3
 8005908:	f001 faf6 	bl	8006ef8 <USBD_CtlError>
            ret = USBD_FAIL;
 800590c:	2317      	movs	r3, #23
 800590e:	18fb      	adds	r3, r7, r3
 8005910:	2202      	movs	r2, #2
 8005912:	701a      	strb	r2, [r3, #0]
          break;
 8005914:	e035      	b.n	8005982 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	23a7      	movs	r3, #167	; 0xa7
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	5cd3      	ldrb	r3, [r2, r3]
 800591e:	2b03      	cmp	r3, #3
 8005920:	d107      	bne.n	8005932 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005922:	230f      	movs	r3, #15
 8005924:	18f9      	adds	r1, r7, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	0018      	movs	r0, r3
 800592c:	f001 fb62 	bl	8006ff4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005930:	e027      	b.n	8005982 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	0011      	movs	r1, r2
 8005938:	0018      	movs	r0, r3
 800593a:	f001 fadd 	bl	8006ef8 <USBD_CtlError>
            ret = USBD_FAIL;
 800593e:	2317      	movs	r3, #23
 8005940:	18fb      	adds	r3, r7, r3
 8005942:	2202      	movs	r2, #2
 8005944:	701a      	strb	r2, [r3, #0]
          break;
 8005946:	e01c      	b.n	8005982 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	23a7      	movs	r3, #167	; 0xa7
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	5cd3      	ldrb	r3, [r2, r3]
 8005950:	2b03      	cmp	r3, #3
 8005952:	d015      	beq.n	8005980 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	0011      	movs	r1, r2
 800595a:	0018      	movs	r0, r3
 800595c:	f001 facc 	bl	8006ef8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005960:	2317      	movs	r3, #23
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	2202      	movs	r2, #2
 8005966:	701a      	strb	r2, [r3, #0]
          }
          break;
 8005968:	e00a      	b.n	8005980 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	0011      	movs	r1, r2
 8005970:	0018      	movs	r0, r3
 8005972:	f001 fac1 	bl	8006ef8 <USBD_CtlError>
          ret = USBD_FAIL;
 8005976:	2317      	movs	r3, #23
 8005978:	18fb      	adds	r3, r7, r3
 800597a:	2202      	movs	r2, #2
 800597c:	701a      	strb	r2, [r3, #0]
          break;
 800597e:	e000      	b.n	8005982 <USBD_CDC_Setup+0x166>
          break;
 8005980:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005982:	e00a      	b.n	800599a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	0011      	movs	r1, r2
 800598a:	0018      	movs	r0, r3
 800598c:	f001 fab4 	bl	8006ef8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005990:	2317      	movs	r3, #23
 8005992:	18fb      	adds	r3, r7, r3
 8005994:	2202      	movs	r2, #2
 8005996:	701a      	strb	r2, [r3, #0]
      break;
 8005998:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800599a:	2317      	movs	r3, #23
 800599c:	18fb      	adds	r3, r7, r3
 800599e:	781b      	ldrb	r3, [r3, #0]
}
 80059a0:	0018      	movs	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b006      	add	sp, #24
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	00000201 	.word	0x00000201

080059ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	000a      	movs	r2, r1
 80059b6:	1cfb      	adds	r3, r7, #3
 80059b8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	23ae      	movs	r3, #174	; 0xae
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	58d3      	ldr	r3, [r2, r3]
 80059c2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	23b0      	movs	r3, #176	; 0xb0
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	58d3      	ldr	r3, [r2, r3]
 80059cc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	23ae      	movs	r3, #174	; 0xae
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	58d3      	ldr	r3, [r2, r3]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d03e      	beq.n	8005a58 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80059da:	1cfb      	adds	r3, r7, #3
 80059dc:	781a      	ldrb	r2, [r3, #0]
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	0013      	movs	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	189b      	adds	r3, r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	18cb      	adds	r3, r1, r3
 80059ea:	331c      	adds	r3, #28
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d02b      	beq.n	8005a4a <USBD_CDC_DataIn+0x9e>
 80059f2:	1cfb      	adds	r3, r7, #3
 80059f4:	781a      	ldrb	r2, [r3, #0]
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	0013      	movs	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	189b      	adds	r3, r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	18cb      	adds	r3, r1, r3
 8005a02:	331c      	adds	r3, #28
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	1cfb      	adds	r3, r7, #3
 8005a08:	781a      	ldrb	r2, [r3, #0]
 8005a0a:	68b9      	ldr	r1, [r7, #8]
 8005a0c:	0013      	movs	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	189b      	adds	r3, r3, r2
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	18cb      	adds	r3, r1, r3
 8005a16:	3338      	adds	r3, #56	; 0x38
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	0019      	movs	r1, r3
 8005a1c:	f7fa fc02 	bl	8000224 <__aeabi_uidivmod>
 8005a20:	1e0b      	subs	r3, r1, #0
 8005a22:	d112      	bne.n	8005a4a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005a24:	1cfb      	adds	r3, r7, #3
 8005a26:	781a      	ldrb	r2, [r3, #0]
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	0013      	movs	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	189b      	adds	r3, r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	18cb      	adds	r3, r1, r3
 8005a34:	331c      	adds	r3, #28
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a3a:	1cfb      	adds	r3, r7, #3
 8005a3c:	7819      	ldrb	r1, [r3, #0]
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	2300      	movs	r3, #0
 8005a42:	2200      	movs	r2, #0
 8005a44:	f001 ffe5 	bl	8007a12 <USBD_LL_Transmit>
 8005a48:	e004      	b.n	8005a54 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	2385      	movs	r3, #133	; 0x85
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	2100      	movs	r1, #0
 8005a52:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	e000      	b.n	8005a5a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8005a58:	2302      	movs	r3, #2
  }
}
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	b004      	add	sp, #16
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b084      	sub	sp, #16
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	000a      	movs	r2, r1
 8005a6c:	1cfb      	adds	r3, r7, #3
 8005a6e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	23ae      	movs	r3, #174	; 0xae
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	58d3      	ldr	r3, [r2, r3]
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a7a:	1cfb      	adds	r3, r7, #3
 8005a7c:	781a      	ldrb	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	0011      	movs	r1, r2
 8005a82:	0018      	movs	r0, r3
 8005a84:	f002 f833 	bl	8007aee <USBD_LL_GetRxDataSize>
 8005a88:	0001      	movs	r1, r0
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	2383      	movs	r3, #131	; 0x83
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	23ae      	movs	r3, #174	; 0xae
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	58d3      	ldr	r3, [r2, r3]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d011      	beq.n	8005ac2 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	23af      	movs	r3, #175	; 0xaf
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	58d3      	ldr	r3, [r2, r3]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	68f9      	ldr	r1, [r7, #12]
 8005aaa:	2381      	movs	r3, #129	; 0x81
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	58c8      	ldr	r0, [r1, r3]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2183      	movs	r1, #131	; 0x83
 8005ab4:	0089      	lsls	r1, r1, #2
 8005ab6:	468c      	mov	ip, r1
 8005ab8:	4463      	add	r3, ip
 8005aba:	0019      	movs	r1, r3
 8005abc:	4790      	blx	r2

    return USBD_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e000      	b.n	8005ac4 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8005ac2:	2302      	movs	r3, #2
  }
}
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	b004      	add	sp, #16
 8005aca:	bd80      	pop	{r7, pc}

08005acc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005acc:	b590      	push	{r4, r7, lr}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	23ae      	movs	r3, #174	; 0xae
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	58d3      	ldr	r3, [r2, r3]
 8005adc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	23af      	movs	r3, #175	; 0xaf
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	58d3      	ldr	r3, [r2, r3]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d019      	beq.n	8005b1e <USBD_CDC_EP0_RxReady+0x52>
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	2380      	movs	r3, #128	; 0x80
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	5cd3      	ldrb	r3, [r2, r3]
 8005af2:	2bff      	cmp	r3, #255	; 0xff
 8005af4:	d013      	beq.n	8005b1e <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	23af      	movs	r3, #175	; 0xaf
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	58d3      	ldr	r3, [r2, r3]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	68f9      	ldr	r1, [r7, #12]
 8005b02:	2280      	movs	r2, #128	; 0x80
 8005b04:	0092      	lsls	r2, r2, #2
 8005b06:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8005b08:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4c06      	ldr	r4, [pc, #24]	; (8005b28 <USBD_CDC_EP0_RxReady+0x5c>)
 8005b0e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b10:	b292      	uxth	r2, r2
 8005b12:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	2380      	movs	r3, #128	; 0x80
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	21ff      	movs	r1, #255	; 0xff
 8005b1c:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	0018      	movs	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	b005      	add	sp, #20
 8005b26:	bd90      	pop	{r4, r7, pc}
 8005b28:	00000201 	.word	0x00000201

08005b2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2243      	movs	r2, #67	; 0x43
 8005b38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005b3a:	4b02      	ldr	r3, [pc, #8]	; (8005b44 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	b002      	add	sp, #8
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20000098 	.word	0x20000098

08005b48 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2243      	movs	r2, #67	; 0x43
 8005b54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005b56:	4b02      	ldr	r3, [pc, #8]	; (8005b60 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8005b58:	0018      	movs	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	b002      	add	sp, #8
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	20000054 	.word	0x20000054

08005b64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2243      	movs	r2, #67	; 0x43
 8005b70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005b72:	4b02      	ldr	r3, [pc, #8]	; (8005b7c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8005b74:	0018      	movs	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	b002      	add	sp, #8
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	200000dc 	.word	0x200000dc

08005b80 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	220a      	movs	r2, #10
 8005b8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005b8e:	4b02      	ldr	r3, [pc, #8]	; (8005b98 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8005b90:	0018      	movs	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	b002      	add	sp, #8
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20000010 	.word	0x20000010

08005b9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005ba6:	200f      	movs	r0, #15
 8005ba8:	183b      	adds	r3, r7, r0
 8005baa:	2202      	movs	r2, #2
 8005bac:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d007      	beq.n	8005bc4 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	23af      	movs	r3, #175	; 0xaf
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	6839      	ldr	r1, [r7, #0]
 8005bbc:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8005bbe:	183b      	adds	r3, r7, r0
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005bc4:	230f      	movs	r3, #15
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	781b      	ldrb	r3, [r3, #0]
}
 8005bca:	0018      	movs	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	b004      	add	sp, #16
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	1dbb      	adds	r3, r7, #6
 8005bde:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	23ae      	movs	r3, #174	; 0xae
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	58d3      	ldr	r3, [r2, r3]
 8005be8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	2382      	movs	r3, #130	; 0x82
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8005bf4:	1dbb      	adds	r3, r7, #6
 8005bf6:	8819      	ldrh	r1, [r3, #0]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	2384      	movs	r3, #132	; 0x84
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	0018      	movs	r0, r3
 8005c04:	46bd      	mov	sp, r7
 8005c06:	b006      	add	sp, #24
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	23ae      	movs	r3, #174	; 0xae
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	58d3      	ldr	r3, [r2, r3]
 8005c1c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	2381      	movs	r3, #129	; 0x81
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	b004      	add	sp, #16
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	23ae      	movs	r3, #174	; 0xae
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	58d3      	ldr	r3, [r2, r3]
 8005c42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	23ae      	movs	r3, #174	; 0xae
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	58d3      	ldr	r3, [r2, r3]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d022      	beq.n	8005c96 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	2385      	movs	r3, #133	; 0x85
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	58d3      	ldr	r3, [r2, r3]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d11a      	bne.n	8005c92 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	2385      	movs	r3, #133	; 0x85
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	2101      	movs	r1, #1
 8005c64:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	2384      	movs	r3, #132	; 0x84
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	58d2      	ldr	r2, [r2, r3]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	2382      	movs	r3, #130	; 0x82
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	2384      	movs	r3, #132	; 0x84
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	000a      	movs	r2, r1
 8005c88:	2181      	movs	r1, #129	; 0x81
 8005c8a:	f001 fec2 	bl	8007a12 <USBD_LL_Transmit>

      return USBD_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e002      	b.n	8005c98 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8005c96:	2302      	movs	r3, #2
  }
}
 8005c98:	0018      	movs	r0, r3
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b004      	add	sp, #16
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	23ae      	movs	r3, #174	; 0xae
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	58d3      	ldr	r3, [r2, r3]
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	23ae      	movs	r3, #174	; 0xae
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	58d3      	ldr	r3, [r2, r3]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d019      	beq.n	8005cf2 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	7c1b      	ldrb	r3, [r3, #16]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10a      	bne.n	8005cdc <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	2381      	movs	r3, #129	; 0x81
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	58d2      	ldr	r2, [r2, r3]
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	f001 fed3 	bl	8007a80 <USBD_LL_PrepareReceive>
 8005cda:	e008      	b.n	8005cee <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	2381      	movs	r3, #129	; 0x81
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	58d2      	ldr	r2, [r2, r3]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	2340      	movs	r3, #64	; 0x40
 8005ce8:	2101      	movs	r1, #1
 8005cea:	f001 fec9 	bl	8007a80 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e000      	b.n	8005cf4 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8005cf2:	2302      	movs	r3, #2
  }
}
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b004      	add	sp, #16
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	1dfb      	adds	r3, r7, #7
 8005d08:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d10:	2302      	movs	r3, #2
 8005d12:	e020      	b.n	8005d56 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	23ad      	movs	r3, #173	; 0xad
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	58d3      	ldr	r3, [r2, r3]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d004      	beq.n	8005d2a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	23ad      	movs	r3, #173	; 0xad
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	2100      	movs	r1, #0
 8005d28:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d004      	beq.n	8005d3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	23ac      	movs	r3, #172	; 0xac
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	23a7      	movs	r3, #167	; 0xa7
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	2101      	movs	r1, #1
 8005d42:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	1dfa      	adds	r2, r7, #7
 8005d48:	7812      	ldrb	r2, [r2, #0]
 8005d4a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	0018      	movs	r0, r3
 8005d50:	f001 fcc2 	bl	80076d8 <USBD_LL_Init>

  return USBD_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	0018      	movs	r0, r3
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	b004      	add	sp, #16
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b084      	sub	sp, #16
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005d68:	200f      	movs	r0, #15
 8005d6a:	183b      	adds	r3, r7, r0
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d008      	beq.n	8005d88 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	23ad      	movs	r3, #173	; 0xad
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	6839      	ldr	r1, [r7, #0]
 8005d7e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005d80:	183b      	adds	r3, r7, r0
 8005d82:	2200      	movs	r2, #0
 8005d84:	701a      	strb	r2, [r3, #0]
 8005d86:	e003      	b.n	8005d90 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005d88:	230f      	movs	r3, #15
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005d90:	230f      	movs	r3, #15
 8005d92:	18fb      	adds	r3, r7, r3
 8005d94:	781b      	ldrb	r3, [r3, #0]
}
 8005d96:	0018      	movs	r0, r3
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	b004      	add	sp, #16
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b082      	sub	sp, #8
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	0018      	movs	r0, r3
 8005daa:	f001 fcf9 	bl	80077a0 <USBD_LL_Start>

  return USBD_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	0018      	movs	r0, r3
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b002      	add	sp, #8
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	b002      	add	sp, #8
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005dca:	b590      	push	{r4, r7, lr}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	000a      	movs	r2, r1
 8005dd4:	1cfb      	adds	r3, r7, #3
 8005dd6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005dd8:	240f      	movs	r4, #15
 8005dda:	193b      	adds	r3, r7, r4
 8005ddc:	2202      	movs	r2, #2
 8005dde:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	23ad      	movs	r3, #173	; 0xad
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	58d3      	ldr	r3, [r2, r3]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00e      	beq.n	8005e0a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	23ad      	movs	r3, #173	; 0xad
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	58d3      	ldr	r3, [r2, r3]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	1cfa      	adds	r2, r7, #3
 8005df8:	7811      	ldrb	r1, [r2, #0]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	0010      	movs	r0, r2
 8005dfe:	4798      	blx	r3
 8005e00:	1e03      	subs	r3, r0, #0
 8005e02:	d102      	bne.n	8005e0a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8005e04:	193b      	adds	r3, r7, r4
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8005e0a:	230f      	movs	r3, #15
 8005e0c:	18fb      	adds	r3, r7, r3
 8005e0e:	781b      	ldrb	r3, [r3, #0]
}
 8005e10:	0018      	movs	r0, r3
 8005e12:	46bd      	mov	sp, r7
 8005e14:	b005      	add	sp, #20
 8005e16:	bd90      	pop	{r4, r7, pc}

08005e18 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	000a      	movs	r2, r1
 8005e22:	1cfb      	adds	r3, r7, #3
 8005e24:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	23ad      	movs	r3, #173	; 0xad
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	58d3      	ldr	r3, [r2, r3]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	1cfa      	adds	r2, r7, #3
 8005e32:	7811      	ldrb	r1, [r2, #0]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	0010      	movs	r0, r2
 8005e38:	4798      	blx	r3

  return USBD_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b002      	add	sp, #8
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	22aa      	movs	r2, #170	; 0xaa
 8005e52:	0092      	lsls	r2, r2, #2
 8005e54:	4694      	mov	ip, r2
 8005e56:	4463      	add	r3, ip
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	0011      	movs	r1, r2
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f001 f810 	bl	8006e82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	23a5      	movs	r3, #165	; 0xa5
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	2101      	movs	r1, #1
 8005e6a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a23      	ldr	r2, [pc, #140]	; (8005efc <USBD_LL_SetupStage+0xb8>)
 8005e70:	5a9b      	ldrh	r3, [r3, r2]
 8005e72:	0019      	movs	r1, r3
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	23a6      	movs	r3, #166	; 0xa6
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	23aa      	movs	r3, #170	; 0xaa
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	5cd3      	ldrb	r3, [r2, r3]
 8005e84:	001a      	movs	r2, r3
 8005e86:	231f      	movs	r3, #31
 8005e88:	4013      	ands	r3, r2
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d019      	beq.n	8005ec2 <USBD_LL_SetupStage+0x7e>
 8005e8e:	d822      	bhi.n	8005ed6 <USBD_LL_SetupStage+0x92>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <USBD_LL_SetupStage+0x56>
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d00a      	beq.n	8005eae <USBD_LL_SetupStage+0x6a>
 8005e98:	e01d      	b.n	8005ed6 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	22aa      	movs	r2, #170	; 0xaa
 8005e9e:	0092      	lsls	r2, r2, #2
 8005ea0:	189a      	adds	r2, r3, r2
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	0011      	movs	r1, r2
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f000 fa10 	bl	80062cc <USBD_StdDevReq>
      break;
 8005eac:	e020      	b.n	8005ef0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	22aa      	movs	r2, #170	; 0xaa
 8005eb2:	0092      	lsls	r2, r2, #2
 8005eb4:	189a      	adds	r2, r3, r2
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	0011      	movs	r1, r2
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f000 fa78 	bl	80063b0 <USBD_StdItfReq>
      break;
 8005ec0:	e016      	b.n	8005ef0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	22aa      	movs	r2, #170	; 0xaa
 8005ec6:	0092      	lsls	r2, r2, #2
 8005ec8:	189a      	adds	r2, r3, r2
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	0011      	movs	r1, r2
 8005ece:	0018      	movs	r0, r3
 8005ed0:	f000 fac5 	bl	800645e <USBD_StdEPReq>
      break;
 8005ed4:	e00c      	b.n	8005ef0 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	23aa      	movs	r3, #170	; 0xaa
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	5cd3      	ldrb	r3, [r2, r3]
 8005ede:	227f      	movs	r2, #127	; 0x7f
 8005ee0:	4393      	bics	r3, r2
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	0011      	movs	r1, r2
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f001 fce0 	bl	80078ae <USBD_LL_StallEP>
      break;
 8005eee:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	b002      	add	sp, #8
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	46c0      	nop			; (mov r8, r8)
 8005efc:	000002ae 	.word	0x000002ae

08005f00 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	607a      	str	r2, [r7, #4]
 8005f0a:	200b      	movs	r0, #11
 8005f0c:	183b      	adds	r3, r7, r0
 8005f0e:	1c0a      	adds	r2, r1, #0
 8005f10:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f12:	183b      	adds	r3, r7, r0
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d154      	bne.n	8005fc4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3355      	adds	r3, #85	; 0x55
 8005f1e:	33ff      	adds	r3, #255	; 0xff
 8005f20:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	23a5      	movs	r3, #165	; 0xa5
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	58d3      	ldr	r3, [r2, r3]
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d139      	bne.n	8005fa2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d919      	bls.n	8005f6e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	1ad2      	subs	r2, r2, r3
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	68da      	ldr	r2, [r3, #12]
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d203      	bcs.n	8005f5c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	e002      	b.n	8005f62 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	001a      	movs	r2, r3
 8005f68:	f001 f89b 	bl	80070a2 <USBD_CtlContinueRx>
 8005f6c:	e045      	b.n	8005ffa <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	23ad      	movs	r3, #173	; 0xad
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	58d3      	ldr	r3, [r2, r3]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00d      	beq.n	8005f98 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	23a7      	movs	r3, #167	; 0xa7
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f84:	2b03      	cmp	r3, #3
 8005f86:	d107      	bne.n	8005f98 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	23ad      	movs	r3, #173	; 0xad
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	58d3      	ldr	r3, [r2, r3]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	0010      	movs	r0, r2
 8005f96:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f001 f894 	bl	80070c8 <USBD_CtlSendStatus>
 8005fa0:	e02b      	b.n	8005ffa <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	23a5      	movs	r3, #165	; 0xa5
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	58d3      	ldr	r3, [r2, r3]
 8005faa:	2b05      	cmp	r3, #5
 8005fac:	d125      	bne.n	8005ffa <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	23a5      	movs	r3, #165	; 0xa5
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2100      	movs	r1, #0
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f001 fc76 	bl	80078ae <USBD_LL_StallEP>
 8005fc2:	e01a      	b.n	8005ffa <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	23ad      	movs	r3, #173	; 0xad
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	58d3      	ldr	r3, [r2, r3]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d011      	beq.n	8005ff6 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	23a7      	movs	r3, #167	; 0xa7
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d10b      	bne.n	8005ff6 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	23ad      	movs	r3, #173	; 0xad
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	58d3      	ldr	r3, [r2, r3]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	220b      	movs	r2, #11
 8005fea:	18ba      	adds	r2, r7, r2
 8005fec:	7811      	ldrb	r1, [r2, #0]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	0010      	movs	r0, r2
 8005ff2:	4798      	blx	r3
 8005ff4:	e001      	b.n	8005ffa <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e000      	b.n	8005ffc <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	46bd      	mov	sp, r7
 8006000:	b006      	add	sp, #24
 8006002:	bd80      	pop	{r7, pc}

08006004 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	607a      	str	r2, [r7, #4]
 800600e:	200b      	movs	r0, #11
 8006010:	183b      	adds	r3, r7, r0
 8006012:	1c0a      	adds	r2, r1, #0
 8006014:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006016:	183b      	adds	r3, r7, r0
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d000      	beq.n	8006020 <USBD_LL_DataInStage+0x1c>
 800601e:	e08e      	b.n	800613e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3314      	adds	r3, #20
 8006024:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	23a5      	movs	r3, #165	; 0xa5
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	58d3      	ldr	r3, [r2, r3]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d164      	bne.n	80060fc <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	429a      	cmp	r2, r3
 800603c:	d915      	bls.n	800606a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	1ad2      	subs	r2, r2, r3
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	b29a      	uxth	r2, r3
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	0018      	movs	r0, r3
 8006058:	f000 ffec 	bl	8007034 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	2300      	movs	r3, #0
 8006060:	2200      	movs	r2, #0
 8006062:	2100      	movs	r1, #0
 8006064:	f001 fd0c 	bl	8007a80 <USBD_LL_PrepareReceive>
 8006068:	e059      	b.n	800611e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	0019      	movs	r1, r3
 8006074:	0010      	movs	r0, r2
 8006076:	f7fa f8d5 	bl	8000224 <__aeabi_uidivmod>
 800607a:	1e0b      	subs	r3, r1, #0
 800607c:	d11f      	bne.n	80060be <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006086:	429a      	cmp	r2, r3
 8006088:	d319      	bcc.n	80060be <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	68f9      	ldr	r1, [r7, #12]
 8006090:	23a6      	movs	r3, #166	; 0xa6
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8006096:	429a      	cmp	r2, r3
 8006098:	d211      	bcs.n	80060be <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	2100      	movs	r1, #0
 80060a0:	0018      	movs	r0, r3
 80060a2:	f000 ffc7 	bl	8007034 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	23a6      	movs	r3, #166	; 0xa6
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	2100      	movs	r1, #0
 80060ae:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	2300      	movs	r3, #0
 80060b4:	2200      	movs	r2, #0
 80060b6:	2100      	movs	r1, #0
 80060b8:	f001 fce2 	bl	8007a80 <USBD_LL_PrepareReceive>
 80060bc:	e02f      	b.n	800611e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	23ad      	movs	r3, #173	; 0xad
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	58d3      	ldr	r3, [r2, r3]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00d      	beq.n	80060e8 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	23a7      	movs	r3, #167	; 0xa7
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d107      	bne.n	80060e8 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	23ad      	movs	r3, #173	; 0xad
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	58d3      	ldr	r3, [r2, r3]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	0010      	movs	r0, r2
 80060e6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2180      	movs	r1, #128	; 0x80
 80060ec:	0018      	movs	r0, r3
 80060ee:	f001 fbde 	bl	80078ae <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	0018      	movs	r0, r3
 80060f6:	f000 fffb 	bl	80070f0 <USBD_CtlReceiveStatus>
 80060fa:	e010      	b.n	800611e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	23a5      	movs	r3, #165	; 0xa5
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	58d3      	ldr	r3, [r2, r3]
 8006104:	2b04      	cmp	r3, #4
 8006106:	d005      	beq.n	8006114 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	23a5      	movs	r3, #165	; 0xa5
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006110:	2b00      	cmp	r3, #0
 8006112:	d104      	bne.n	800611e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2180      	movs	r1, #128	; 0x80
 8006118:	0018      	movs	r0, r3
 800611a:	f001 fbc8 	bl	80078ae <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	23a8      	movs	r3, #168	; 0xa8
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	5cd3      	ldrb	r3, [r2, r3]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d124      	bne.n	8006174 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	0018      	movs	r0, r3
 800612e:	f7ff fe43 	bl	8005db8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	23a8      	movs	r3, #168	; 0xa8
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	2100      	movs	r1, #0
 800613a:	54d1      	strb	r1, [r2, r3]
 800613c:	e01a      	b.n	8006174 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	23ad      	movs	r3, #173	; 0xad
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	58d3      	ldr	r3, [r2, r3]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d011      	beq.n	8006170 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	23a7      	movs	r3, #167	; 0xa7
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8006154:	2b03      	cmp	r3, #3
 8006156:	d10b      	bne.n	8006170 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	23ad      	movs	r3, #173	; 0xad
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	58d3      	ldr	r3, [r2, r3]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	220b      	movs	r2, #11
 8006164:	18ba      	adds	r2, r7, r2
 8006166:	7811      	ldrb	r1, [r2, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	0010      	movs	r0, r2
 800616c:	4798      	blx	r3
 800616e:	e001      	b.n	8006174 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006170:	2302      	movs	r3, #2
 8006172:	e000      	b.n	8006176 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	0018      	movs	r0, r3
 8006178:	46bd      	mov	sp, r7
 800617a:	b006      	add	sp, #24
 800617c:	bd80      	pop	{r7, pc}

0800617e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	2340      	movs	r3, #64	; 0x40
 800618a:	2200      	movs	r2, #0
 800618c:	2100      	movs	r1, #0
 800618e:	f001 fb2c 	bl	80077ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	23ac      	movs	r3, #172	; 0xac
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	2101      	movs	r1, #1
 800619a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	23b2      	movs	r3, #178	; 0xb2
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	2140      	movs	r1, #64	; 0x40
 80061a4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	2340      	movs	r3, #64	; 0x40
 80061aa:	2200      	movs	r2, #0
 80061ac:	2180      	movs	r1, #128	; 0x80
 80061ae:	f001 fb1c 	bl	80077ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2240      	movs	r2, #64	; 0x40
 80061bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	23a7      	movs	r3, #167	; 0xa7
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	2101      	movs	r1, #1
 80061c6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	23a5      	movs	r3, #165	; 0xa5
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	2100      	movs	r1, #0
 80061d0:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	23a9      	movs	r3, #169	; 0xa9
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	2100      	movs	r1, #0
 80061e0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	23ae      	movs	r3, #174	; 0xae
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	58d3      	ldr	r3, [r2, r3]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00a      	beq.n	8006204 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	23ad      	movs	r3, #173	; 0xad
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	58d3      	ldr	r3, [r2, r3]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	b2d9      	uxtb	r1, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	0018      	movs	r0, r3
 8006202:	4790      	blx	r2
  }

  return USBD_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	0018      	movs	r0, r3
 8006208:	46bd      	mov	sp, r7
 800620a:	b002      	add	sp, #8
 800620c:	bd80      	pop	{r7, pc}

0800620e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b082      	sub	sp, #8
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	000a      	movs	r2, r1
 8006218:	1cfb      	adds	r3, r7, #3
 800621a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	1cfa      	adds	r2, r7, #3
 8006220:	7812      	ldrb	r2, [r2, #0]
 8006222:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	0018      	movs	r0, r3
 8006228:	46bd      	mov	sp, r7
 800622a:	b002      	add	sp, #8
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	23a7      	movs	r3, #167	; 0xa7
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	5cd1      	ldrb	r1, [r2, r3]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a06      	ldr	r2, [pc, #24]	; (800625c <USBD_LL_Suspend+0x2c>)
 8006244:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	23a7      	movs	r3, #167	; 0xa7
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	2104      	movs	r1, #4
 800624e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	0018      	movs	r0, r3
 8006254:	46bd      	mov	sp, r7
 8006256:	b002      	add	sp, #8
 8006258:	bd80      	pop	{r7, pc}
 800625a:	46c0      	nop			; (mov r8, r8)
 800625c:	0000029d 	.word	0x0000029d

08006260 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	23a7      	movs	r3, #167	; 0xa7
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	5cd3      	ldrb	r3, [r2, r3]
 8006270:	2b04      	cmp	r3, #4
 8006272:	d106      	bne.n	8006282 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a05      	ldr	r2, [pc, #20]	; (800628c <USBD_LL_Resume+0x2c>)
 8006278:	5c99      	ldrb	r1, [r3, r2]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	23a7      	movs	r3, #167	; 0xa7
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	0018      	movs	r0, r3
 8006286:	46bd      	mov	sp, r7
 8006288:	b002      	add	sp, #8
 800628a:	bd80      	pop	{r7, pc}
 800628c:	0000029d 	.word	0x0000029d

08006290 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	23a7      	movs	r3, #167	; 0xa7
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	5cd3      	ldrb	r3, [r2, r3]
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d10e      	bne.n	80062c2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	23ad      	movs	r3, #173	; 0xad
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	58d3      	ldr	r3, [r2, r3]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d007      	beq.n	80062c2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	23ad      	movs	r3, #173	; 0xad
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	58d3      	ldr	r3, [r2, r3]
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	0010      	movs	r0, r2
 80062c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	0018      	movs	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b002      	add	sp, #8
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062d6:	230f      	movs	r3, #15
 80062d8:	18fb      	adds	r3, r7, r3
 80062da:	2200      	movs	r2, #0
 80062dc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	001a      	movs	r2, r3
 80062e4:	2360      	movs	r3, #96	; 0x60
 80062e6:	4013      	ands	r3, r2
 80062e8:	2b40      	cmp	r3, #64	; 0x40
 80062ea:	d004      	beq.n	80062f6 <USBD_StdDevReq+0x2a>
 80062ec:	d84f      	bhi.n	800638e <USBD_StdDevReq+0xc2>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00b      	beq.n	800630a <USBD_StdDevReq+0x3e>
 80062f2:	2b20      	cmp	r3, #32
 80062f4:	d14b      	bne.n	800638e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	23ad      	movs	r3, #173	; 0xad
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	58d3      	ldr	r3, [r2, r3]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	0010      	movs	r0, r2
 8006306:	4798      	blx	r3
      break;
 8006308:	e048      	b.n	800639c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	785b      	ldrb	r3, [r3, #1]
 800630e:	2b09      	cmp	r3, #9
 8006310:	d835      	bhi.n	800637e <USBD_StdDevReq+0xb2>
 8006312:	009a      	lsls	r2, r3, #2
 8006314:	4b25      	ldr	r3, [pc, #148]	; (80063ac <USBD_StdDevReq+0xe0>)
 8006316:	18d3      	adds	r3, r2, r3
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	0011      	movs	r1, r2
 8006322:	0018      	movs	r0, r3
 8006324:	f000 fa52 	bl	80067cc <USBD_GetDescriptor>
          break;
 8006328:	e030      	b.n	800638c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	0011      	movs	r1, r2
 8006330:	0018      	movs	r0, r3
 8006332:	f000 fbfd 	bl	8006b30 <USBD_SetAddress>
          break;
 8006336:	e029      	b.n	800638c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	0011      	movs	r1, r2
 800633e:	0018      	movs	r0, r3
 8006340:	f000 fc4a 	bl	8006bd8 <USBD_SetConfig>
          break;
 8006344:	e022      	b.n	800638c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	0011      	movs	r1, r2
 800634c:	0018      	movs	r0, r3
 800634e:	f000 fce7 	bl	8006d20 <USBD_GetConfig>
          break;
 8006352:	e01b      	b.n	800638c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	0011      	movs	r1, r2
 800635a:	0018      	movs	r0, r3
 800635c:	f000 fd1b 	bl	8006d96 <USBD_GetStatus>
          break;
 8006360:	e014      	b.n	800638c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	0011      	movs	r1, r2
 8006368:	0018      	movs	r0, r3
 800636a:	f000 fd4e 	bl	8006e0a <USBD_SetFeature>
          break;
 800636e:	e00d      	b.n	800638c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	0011      	movs	r1, r2
 8006376:	0018      	movs	r0, r3
 8006378:	f000 fd5d 	bl	8006e36 <USBD_ClrFeature>
          break;
 800637c:	e006      	b.n	800638c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	0011      	movs	r1, r2
 8006384:	0018      	movs	r0, r3
 8006386:	f000 fdb7 	bl	8006ef8 <USBD_CtlError>
          break;
 800638a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800638c:	e006      	b.n	800639c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	0011      	movs	r1, r2
 8006394:	0018      	movs	r0, r3
 8006396:	f000 fdaf 	bl	8006ef8 <USBD_CtlError>
      break;
 800639a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800639c:	230f      	movs	r3, #15
 800639e:	18fb      	adds	r3, r7, r3
 80063a0:	781b      	ldrb	r3, [r3, #0]
}
 80063a2:	0018      	movs	r0, r3
 80063a4:	46bd      	mov	sp, r7
 80063a6:	b004      	add	sp, #16
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	46c0      	nop			; (mov r8, r8)
 80063ac:	08007cb8 	.word	0x08007cb8

080063b0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80063b0:	b5b0      	push	{r4, r5, r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ba:	230f      	movs	r3, #15
 80063bc:	18fb      	adds	r3, r7, r3
 80063be:	2200      	movs	r2, #0
 80063c0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	001a      	movs	r2, r3
 80063c8:	2360      	movs	r3, #96	; 0x60
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d004      	beq.n	80063da <USBD_StdItfReq+0x2a>
 80063d0:	d839      	bhi.n	8006446 <USBD_StdItfReq+0x96>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <USBD_StdItfReq+0x2a>
 80063d6:	2b20      	cmp	r3, #32
 80063d8:	d135      	bne.n	8006446 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	23a7      	movs	r3, #167	; 0xa7
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	5cd3      	ldrb	r3, [r2, r3]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d825      	bhi.n	8006434 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	889b      	ldrh	r3, [r3, #4]
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d819      	bhi.n	8006426 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	23ad      	movs	r3, #173	; 0xad
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	58d3      	ldr	r3, [r2, r3]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	250f      	movs	r5, #15
 80063fe:	197c      	adds	r4, r7, r5
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	0010      	movs	r0, r2
 8006406:	4798      	blx	r3
 8006408:	0003      	movs	r3, r0
 800640a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	88db      	ldrh	r3, [r3, #6]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d116      	bne.n	8006442 <USBD_StdItfReq+0x92>
 8006414:	197b      	adds	r3, r7, r5
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d112      	bne.n	8006442 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	0018      	movs	r0, r3
 8006420:	f000 fe52 	bl	80070c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006424:	e00d      	b.n	8006442 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	0011      	movs	r1, r2
 800642c:	0018      	movs	r0, r3
 800642e:	f000 fd63 	bl	8006ef8 <USBD_CtlError>
          break;
 8006432:	e006      	b.n	8006442 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	0011      	movs	r1, r2
 800643a:	0018      	movs	r0, r3
 800643c:	f000 fd5c 	bl	8006ef8 <USBD_CtlError>
          break;
 8006440:	e000      	b.n	8006444 <USBD_StdItfReq+0x94>
          break;
 8006442:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006444:	e006      	b.n	8006454 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	0011      	movs	r1, r2
 800644c:	0018      	movs	r0, r3
 800644e:	f000 fd53 	bl	8006ef8 <USBD_CtlError>
      break;
 8006452:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	0018      	movs	r0, r3
 8006458:	46bd      	mov	sp, r7
 800645a:	b004      	add	sp, #16
 800645c:	bdb0      	pop	{r4, r5, r7, pc}

0800645e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800645e:	b5b0      	push	{r4, r5, r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006468:	230f      	movs	r3, #15
 800646a:	18fb      	adds	r3, r7, r3
 800646c:	2200      	movs	r2, #0
 800646e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	889a      	ldrh	r2, [r3, #4]
 8006474:	230e      	movs	r3, #14
 8006476:	18fb      	adds	r3, r7, r3
 8006478:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	001a      	movs	r2, r3
 8006480:	2360      	movs	r3, #96	; 0x60
 8006482:	4013      	ands	r3, r2
 8006484:	2b40      	cmp	r3, #64	; 0x40
 8006486:	d006      	beq.n	8006496 <USBD_StdEPReq+0x38>
 8006488:	d900      	bls.n	800648c <USBD_StdEPReq+0x2e>
 800648a:	e190      	b.n	80067ae <USBD_StdEPReq+0x350>
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00c      	beq.n	80064aa <USBD_StdEPReq+0x4c>
 8006490:	2b20      	cmp	r3, #32
 8006492:	d000      	beq.n	8006496 <USBD_StdEPReq+0x38>
 8006494:	e18b      	b.n	80067ae <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	23ad      	movs	r3, #173	; 0xad
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	58d3      	ldr	r3, [r2, r3]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	0010      	movs	r0, r2
 80064a6:	4798      	blx	r3
      break;
 80064a8:	e188      	b.n	80067bc <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	001a      	movs	r2, r3
 80064b0:	2360      	movs	r3, #96	; 0x60
 80064b2:	4013      	ands	r3, r2
 80064b4:	2b20      	cmp	r3, #32
 80064b6:	d10f      	bne.n	80064d8 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	23ad      	movs	r3, #173	; 0xad
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	58d3      	ldr	r3, [r2, r3]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	250f      	movs	r5, #15
 80064c4:	197c      	adds	r4, r7, r5
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	0010      	movs	r0, r2
 80064cc:	4798      	blx	r3
 80064ce:	0003      	movs	r3, r0
 80064d0:	7023      	strb	r3, [r4, #0]

        return ret;
 80064d2:	197b      	adds	r3, r7, r5
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	e174      	b.n	80067c2 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	785b      	ldrb	r3, [r3, #1]
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d007      	beq.n	80064f0 <USBD_StdEPReq+0x92>
 80064e0:	dd00      	ble.n	80064e4 <USBD_StdEPReq+0x86>
 80064e2:	e15c      	b.n	800679e <USBD_StdEPReq+0x340>
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d100      	bne.n	80064ea <USBD_StdEPReq+0x8c>
 80064e8:	e092      	b.n	8006610 <USBD_StdEPReq+0x1b2>
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d04b      	beq.n	8006586 <USBD_StdEPReq+0x128>
 80064ee:	e156      	b.n	800679e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	23a7      	movs	r3, #167	; 0xa7
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	5cd3      	ldrb	r3, [r2, r3]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d002      	beq.n	8006502 <USBD_StdEPReq+0xa4>
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d01d      	beq.n	800653c <USBD_StdEPReq+0xde>
 8006500:	e039      	b.n	8006576 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006502:	220e      	movs	r2, #14
 8006504:	18bb      	adds	r3, r7, r2
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d010      	beq.n	800652e <USBD_StdEPReq+0xd0>
 800650c:	18bb      	adds	r3, r7, r2
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b80      	cmp	r3, #128	; 0x80
 8006512:	d00c      	beq.n	800652e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006514:	18bb      	adds	r3, r7, r2
 8006516:	781a      	ldrb	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	0011      	movs	r1, r2
 800651c:	0018      	movs	r0, r3
 800651e:	f001 f9c6 	bl	80078ae <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2180      	movs	r1, #128	; 0x80
 8006526:	0018      	movs	r0, r3
 8006528:	f001 f9c1 	bl	80078ae <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800652c:	e02a      	b.n	8006584 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	0011      	movs	r1, r2
 8006534:	0018      	movs	r0, r3
 8006536:	f000 fcdf 	bl	8006ef8 <USBD_CtlError>
              break;
 800653a:	e023      	b.n	8006584 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	885b      	ldrh	r3, [r3, #2]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d113      	bne.n	800656c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006544:	220e      	movs	r2, #14
 8006546:	18bb      	adds	r3, r7, r2
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00e      	beq.n	800656c <USBD_StdEPReq+0x10e>
 800654e:	18bb      	adds	r3, r7, r2
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	2b80      	cmp	r3, #128	; 0x80
 8006554:	d00a      	beq.n	800656c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	88db      	ldrh	r3, [r3, #6]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d106      	bne.n	800656c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800655e:	18bb      	adds	r3, r7, r2
 8006560:	781a      	ldrb	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	0011      	movs	r1, r2
 8006566:	0018      	movs	r0, r3
 8006568:	f001 f9a1 	bl	80078ae <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	0018      	movs	r0, r3
 8006570:	f000 fdaa 	bl	80070c8 <USBD_CtlSendStatus>

              break;
 8006574:	e006      	b.n	8006584 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	0011      	movs	r1, r2
 800657c:	0018      	movs	r0, r3
 800657e:	f000 fcbb 	bl	8006ef8 <USBD_CtlError>
              break;
 8006582:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006584:	e112      	b.n	80067ac <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	23a7      	movs	r3, #167	; 0xa7
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	5cd3      	ldrb	r3, [r2, r3]
 800658e:	2b02      	cmp	r3, #2
 8006590:	d002      	beq.n	8006598 <USBD_StdEPReq+0x13a>
 8006592:	2b03      	cmp	r3, #3
 8006594:	d01d      	beq.n	80065d2 <USBD_StdEPReq+0x174>
 8006596:	e032      	b.n	80065fe <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006598:	220e      	movs	r2, #14
 800659a:	18bb      	adds	r3, r7, r2
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d010      	beq.n	80065c4 <USBD_StdEPReq+0x166>
 80065a2:	18bb      	adds	r3, r7, r2
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	2b80      	cmp	r3, #128	; 0x80
 80065a8:	d00c      	beq.n	80065c4 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80065aa:	18bb      	adds	r3, r7, r2
 80065ac:	781a      	ldrb	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	0011      	movs	r1, r2
 80065b2:	0018      	movs	r0, r3
 80065b4:	f001 f97b 	bl	80078ae <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2180      	movs	r1, #128	; 0x80
 80065bc:	0018      	movs	r0, r3
 80065be:	f001 f976 	bl	80078ae <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065c2:	e024      	b.n	800660e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	0011      	movs	r1, r2
 80065ca:	0018      	movs	r0, r3
 80065cc:	f000 fc94 	bl	8006ef8 <USBD_CtlError>
              break;
 80065d0:	e01d      	b.n	800660e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	885b      	ldrh	r3, [r3, #2]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d118      	bne.n	800660c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80065da:	210e      	movs	r1, #14
 80065dc:	187b      	adds	r3, r7, r1
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	227f      	movs	r2, #127	; 0x7f
 80065e2:	4013      	ands	r3, r2
 80065e4:	d006      	beq.n	80065f4 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80065e6:	187b      	adds	r3, r7, r1
 80065e8:	781a      	ldrb	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	0011      	movs	r1, r2
 80065ee:	0018      	movs	r0, r3
 80065f0:	f001 f988 	bl	8007904 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	0018      	movs	r0, r3
 80065f8:	f000 fd66 	bl	80070c8 <USBD_CtlSendStatus>
              }
              break;
 80065fc:	e006      	b.n	800660c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	0011      	movs	r1, r2
 8006604:	0018      	movs	r0, r3
 8006606:	f000 fc77 	bl	8006ef8 <USBD_CtlError>
              break;
 800660a:	e000      	b.n	800660e <USBD_StdEPReq+0x1b0>
              break;
 800660c:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800660e:	e0cd      	b.n	80067ac <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	23a7      	movs	r3, #167	; 0xa7
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	5cd3      	ldrb	r3, [r2, r3]
 8006618:	2b02      	cmp	r3, #2
 800661a:	d002      	beq.n	8006622 <USBD_StdEPReq+0x1c4>
 800661c:	2b03      	cmp	r3, #3
 800661e:	d03c      	beq.n	800669a <USBD_StdEPReq+0x23c>
 8006620:	e0b5      	b.n	800678e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006622:	220e      	movs	r2, #14
 8006624:	18bb      	adds	r3, r7, r2
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00a      	beq.n	8006642 <USBD_StdEPReq+0x1e4>
 800662c:	18bb      	adds	r3, r7, r2
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2b80      	cmp	r3, #128	; 0x80
 8006632:	d006      	beq.n	8006642 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	0011      	movs	r1, r2
 800663a:	0018      	movs	r0, r3
 800663c:	f000 fc5c 	bl	8006ef8 <USBD_CtlError>
                break;
 8006640:	e0ac      	b.n	800679c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006642:	220e      	movs	r2, #14
 8006644:	18bb      	adds	r3, r7, r2
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	b25b      	sxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	da0c      	bge.n	8006668 <USBD_StdEPReq+0x20a>
 800664e:	18bb      	adds	r3, r7, r2
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	227f      	movs	r2, #127	; 0x7f
 8006654:	401a      	ands	r2, r3
 8006656:	0013      	movs	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	189b      	adds	r3, r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	3310      	adds	r3, #16
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	18d3      	adds	r3, r2, r3
 8006664:	3304      	adds	r3, #4
 8006666:	e00d      	b.n	8006684 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006668:	230e      	movs	r3, #14
 800666a:	18fb      	adds	r3, r7, r3
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	227f      	movs	r2, #127	; 0x7f
 8006670:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006672:	0013      	movs	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	189b      	adds	r3, r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	3351      	adds	r3, #81	; 0x51
 800667c:	33ff      	adds	r3, #255	; 0xff
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	18d3      	adds	r3, r2, r3
 8006682:	3304      	adds	r3, #4
 8006684:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2202      	movs	r2, #2
 8006692:	0018      	movs	r0, r3
 8006694:	f000 fcae 	bl	8006ff4 <USBD_CtlSendData>
              break;
 8006698:	e080      	b.n	800679c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800669a:	220e      	movs	r2, #14
 800669c:	18bb      	adds	r3, r7, r2
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	b25b      	sxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	da14      	bge.n	80066d0 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066a6:	18bb      	adds	r3, r7, r2
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	220f      	movs	r2, #15
 80066ac:	401a      	ands	r2, r3
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	0013      	movs	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	189b      	adds	r3, r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	18cb      	adds	r3, r1, r3
 80066ba:	3318      	adds	r3, #24
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d11e      	bne.n	8006700 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	0011      	movs	r1, r2
 80066c8:	0018      	movs	r0, r3
 80066ca:	f000 fc15 	bl	8006ef8 <USBD_CtlError>
                  break;
 80066ce:	e065      	b.n	800679c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80066d0:	230e      	movs	r3, #14
 80066d2:	18fb      	adds	r3, r7, r3
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	220f      	movs	r2, #15
 80066d8:	401a      	ands	r2, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	23ac      	movs	r3, #172	; 0xac
 80066de:	0059      	lsls	r1, r3, #1
 80066e0:	0013      	movs	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	189b      	adds	r3, r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	18c3      	adds	r3, r0, r3
 80066ea:	185b      	adds	r3, r3, r1
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	0011      	movs	r1, r2
 80066f8:	0018      	movs	r0, r3
 80066fa:	f000 fbfd 	bl	8006ef8 <USBD_CtlError>
                  break;
 80066fe:	e04d      	b.n	800679c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006700:	220e      	movs	r2, #14
 8006702:	18bb      	adds	r3, r7, r2
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	b25b      	sxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	da0c      	bge.n	8006726 <USBD_StdEPReq+0x2c8>
 800670c:	18bb      	adds	r3, r7, r2
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	227f      	movs	r2, #127	; 0x7f
 8006712:	401a      	ands	r2, r3
 8006714:	0013      	movs	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	189b      	adds	r3, r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	3310      	adds	r3, #16
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	18d3      	adds	r3, r2, r3
 8006722:	3304      	adds	r3, #4
 8006724:	e00d      	b.n	8006742 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006726:	230e      	movs	r3, #14
 8006728:	18fb      	adds	r3, r7, r3
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	227f      	movs	r2, #127	; 0x7f
 800672e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006730:	0013      	movs	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	189b      	adds	r3, r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	3351      	adds	r3, #81	; 0x51
 800673a:	33ff      	adds	r3, #255	; 0xff
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	18d3      	adds	r3, r2, r3
 8006740:	3304      	adds	r3, #4
 8006742:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006744:	220e      	movs	r2, #14
 8006746:	18bb      	adds	r3, r7, r2
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <USBD_StdEPReq+0x2f8>
 800674e:	18bb      	adds	r3, r7, r2
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	2b80      	cmp	r3, #128	; 0x80
 8006754:	d103      	bne.n	800675e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	e010      	b.n	8006780 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800675e:	230e      	movs	r3, #14
 8006760:	18fb      	adds	r3, r7, r3
 8006762:	781a      	ldrb	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	0011      	movs	r1, r2
 8006768:	0018      	movs	r0, r3
 800676a:	f001 f8f6 	bl	800795a <USBD_LL_IsStallEP>
 800676e:	1e03      	subs	r3, r0, #0
 8006770:	d003      	beq.n	800677a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2201      	movs	r2, #1
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	e002      	b.n	8006780 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2202      	movs	r2, #2
 8006786:	0018      	movs	r0, r3
 8006788:	f000 fc34 	bl	8006ff4 <USBD_CtlSendData>
              break;
 800678c:	e006      	b.n	800679c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	0011      	movs	r1, r2
 8006794:	0018      	movs	r0, r3
 8006796:	f000 fbaf 	bl	8006ef8 <USBD_CtlError>
              break;
 800679a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800679c:	e006      	b.n	80067ac <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	0011      	movs	r1, r2
 80067a4:	0018      	movs	r0, r3
 80067a6:	f000 fba7 	bl	8006ef8 <USBD_CtlError>
          break;
 80067aa:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80067ac:	e006      	b.n	80067bc <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	0011      	movs	r1, r2
 80067b4:	0018      	movs	r0, r3
 80067b6:	f000 fb9f 	bl	8006ef8 <USBD_CtlError>
      break;
 80067ba:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80067bc:	230f      	movs	r3, #15
 80067be:	18fb      	adds	r3, r7, r3
 80067c0:	781b      	ldrb	r3, [r3, #0]
}
 80067c2:	0018      	movs	r0, r3
 80067c4:	46bd      	mov	sp, r7
 80067c6:	b004      	add	sp, #16
 80067c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080067cc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067d6:	2308      	movs	r3, #8
 80067d8:	18fb      	adds	r3, r7, r3
 80067da:	2200      	movs	r2, #0
 80067dc:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80067e2:	230b      	movs	r3, #11
 80067e4:	18fb      	adds	r3, r7, r3
 80067e6:	2200      	movs	r2, #0
 80067e8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	885b      	ldrh	r3, [r3, #2]
 80067ee:	0a1b      	lsrs	r3, r3, #8
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b07      	cmp	r3, #7
 80067f4:	d900      	bls.n	80067f8 <USBD_GetDescriptor+0x2c>
 80067f6:	e159      	b.n	8006aac <USBD_GetDescriptor+0x2e0>
 80067f8:	009a      	lsls	r2, r3, #2
 80067fa:	4bcb      	ldr	r3, [pc, #812]	; (8006b28 <USBD_GetDescriptor+0x35c>)
 80067fc:	18d3      	adds	r3, r2, r3
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	23ac      	movs	r3, #172	; 0xac
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	58d3      	ldr	r3, [r2, r3]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	7c12      	ldrb	r2, [r2, #16]
 8006810:	2108      	movs	r1, #8
 8006812:	1879      	adds	r1, r7, r1
 8006814:	0010      	movs	r0, r2
 8006816:	4798      	blx	r3
 8006818:	0003      	movs	r3, r0
 800681a:	60fb      	str	r3, [r7, #12]
      break;
 800681c:	e153      	b.n	8006ac6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	7c1b      	ldrb	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10f      	bne.n	8006846 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	23ad      	movs	r3, #173	; 0xad
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	58d3      	ldr	r3, [r2, r3]
 800682e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006830:	2208      	movs	r2, #8
 8006832:	18ba      	adds	r2, r7, r2
 8006834:	0010      	movs	r0, r2
 8006836:	4798      	blx	r3
 8006838:	0003      	movs	r3, r0
 800683a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	3301      	adds	r3, #1
 8006840:	2202      	movs	r2, #2
 8006842:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006844:	e13f      	b.n	8006ac6 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	23ad      	movs	r3, #173	; 0xad
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	58d3      	ldr	r3, [r2, r3]
 800684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006850:	2208      	movs	r2, #8
 8006852:	18ba      	adds	r2, r7, r2
 8006854:	0010      	movs	r0, r2
 8006856:	4798      	blx	r3
 8006858:	0003      	movs	r3, r0
 800685a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	2202      	movs	r2, #2
 8006862:	701a      	strb	r2, [r3, #0]
      break;
 8006864:	e12f      	b.n	8006ac6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	885b      	ldrh	r3, [r3, #2]
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b05      	cmp	r3, #5
 800686e:	d900      	bls.n	8006872 <USBD_GetDescriptor+0xa6>
 8006870:	e0d0      	b.n	8006a14 <USBD_GetDescriptor+0x248>
 8006872:	009a      	lsls	r2, r3, #2
 8006874:	4bad      	ldr	r3, [pc, #692]	; (8006b2c <USBD_GetDescriptor+0x360>)
 8006876:	18d3      	adds	r3, r2, r3
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	23ac      	movs	r3, #172	; 0xac
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	58d3      	ldr	r3, [r2, r3]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00d      	beq.n	80068a6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	23ac      	movs	r3, #172	; 0xac
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	58d3      	ldr	r3, [r2, r3]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	7c12      	ldrb	r2, [r2, #16]
 8006898:	2108      	movs	r1, #8
 800689a:	1879      	adds	r1, r7, r1
 800689c:	0010      	movs	r0, r2
 800689e:	4798      	blx	r3
 80068a0:	0003      	movs	r3, r0
 80068a2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068a4:	e0c3      	b.n	8006a2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	0011      	movs	r1, r2
 80068ac:	0018      	movs	r0, r3
 80068ae:	f000 fb23 	bl	8006ef8 <USBD_CtlError>
            err++;
 80068b2:	210b      	movs	r1, #11
 80068b4:	187b      	adds	r3, r7, r1
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	187b      	adds	r3, r7, r1
 80068ba:	3201      	adds	r2, #1
 80068bc:	701a      	strb	r2, [r3, #0]
          break;
 80068be:	e0b6      	b.n	8006a2e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	23ac      	movs	r3, #172	; 0xac
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	58d3      	ldr	r3, [r2, r3]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00d      	beq.n	80068ea <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	23ac      	movs	r3, #172	; 0xac
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	58d3      	ldr	r3, [r2, r3]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	7c12      	ldrb	r2, [r2, #16]
 80068dc:	2108      	movs	r1, #8
 80068de:	1879      	adds	r1, r7, r1
 80068e0:	0010      	movs	r0, r2
 80068e2:	4798      	blx	r3
 80068e4:	0003      	movs	r3, r0
 80068e6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068e8:	e0a1      	b.n	8006a2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	0011      	movs	r1, r2
 80068f0:	0018      	movs	r0, r3
 80068f2:	f000 fb01 	bl	8006ef8 <USBD_CtlError>
            err++;
 80068f6:	210b      	movs	r1, #11
 80068f8:	187b      	adds	r3, r7, r1
 80068fa:	781a      	ldrb	r2, [r3, #0]
 80068fc:	187b      	adds	r3, r7, r1
 80068fe:	3201      	adds	r2, #1
 8006900:	701a      	strb	r2, [r3, #0]
          break;
 8006902:	e094      	b.n	8006a2e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	23ac      	movs	r3, #172	; 0xac
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	58d3      	ldr	r3, [r2, r3]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00d      	beq.n	800692e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	23ac      	movs	r3, #172	; 0xac
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	58d3      	ldr	r3, [r2, r3]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	7c12      	ldrb	r2, [r2, #16]
 8006920:	2108      	movs	r1, #8
 8006922:	1879      	adds	r1, r7, r1
 8006924:	0010      	movs	r0, r2
 8006926:	4798      	blx	r3
 8006928:	0003      	movs	r3, r0
 800692a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800692c:	e07f      	b.n	8006a2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	0011      	movs	r1, r2
 8006934:	0018      	movs	r0, r3
 8006936:	f000 fadf 	bl	8006ef8 <USBD_CtlError>
            err++;
 800693a:	210b      	movs	r1, #11
 800693c:	187b      	adds	r3, r7, r1
 800693e:	781a      	ldrb	r2, [r3, #0]
 8006940:	187b      	adds	r3, r7, r1
 8006942:	3201      	adds	r2, #1
 8006944:	701a      	strb	r2, [r3, #0]
          break;
 8006946:	e072      	b.n	8006a2e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	23ac      	movs	r3, #172	; 0xac
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	58d3      	ldr	r3, [r2, r3]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00d      	beq.n	8006972 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	23ac      	movs	r3, #172	; 0xac
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	58d3      	ldr	r3, [r2, r3]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	7c12      	ldrb	r2, [r2, #16]
 8006964:	2108      	movs	r1, #8
 8006966:	1879      	adds	r1, r7, r1
 8006968:	0010      	movs	r0, r2
 800696a:	4798      	blx	r3
 800696c:	0003      	movs	r3, r0
 800696e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006970:	e05d      	b.n	8006a2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	0011      	movs	r1, r2
 8006978:	0018      	movs	r0, r3
 800697a:	f000 fabd 	bl	8006ef8 <USBD_CtlError>
            err++;
 800697e:	210b      	movs	r1, #11
 8006980:	187b      	adds	r3, r7, r1
 8006982:	781a      	ldrb	r2, [r3, #0]
 8006984:	187b      	adds	r3, r7, r1
 8006986:	3201      	adds	r2, #1
 8006988:	701a      	strb	r2, [r3, #0]
          break;
 800698a:	e050      	b.n	8006a2e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	23ac      	movs	r3, #172	; 0xac
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	58d3      	ldr	r3, [r2, r3]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00d      	beq.n	80069b6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	23ac      	movs	r3, #172	; 0xac
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	58d3      	ldr	r3, [r2, r3]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	7c12      	ldrb	r2, [r2, #16]
 80069a8:	2108      	movs	r1, #8
 80069aa:	1879      	adds	r1, r7, r1
 80069ac:	0010      	movs	r0, r2
 80069ae:	4798      	blx	r3
 80069b0:	0003      	movs	r3, r0
 80069b2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069b4:	e03b      	b.n	8006a2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	0011      	movs	r1, r2
 80069bc:	0018      	movs	r0, r3
 80069be:	f000 fa9b 	bl	8006ef8 <USBD_CtlError>
            err++;
 80069c2:	210b      	movs	r1, #11
 80069c4:	187b      	adds	r3, r7, r1
 80069c6:	781a      	ldrb	r2, [r3, #0]
 80069c8:	187b      	adds	r3, r7, r1
 80069ca:	3201      	adds	r2, #1
 80069cc:	701a      	strb	r2, [r3, #0]
          break;
 80069ce:	e02e      	b.n	8006a2e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	23ac      	movs	r3, #172	; 0xac
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	58d3      	ldr	r3, [r2, r3]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00d      	beq.n	80069fa <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	23ac      	movs	r3, #172	; 0xac
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	58d3      	ldr	r3, [r2, r3]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	7c12      	ldrb	r2, [r2, #16]
 80069ec:	2108      	movs	r1, #8
 80069ee:	1879      	adds	r1, r7, r1
 80069f0:	0010      	movs	r0, r2
 80069f2:	4798      	blx	r3
 80069f4:	0003      	movs	r3, r0
 80069f6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069f8:	e019      	b.n	8006a2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	0011      	movs	r1, r2
 8006a00:	0018      	movs	r0, r3
 8006a02:	f000 fa79 	bl	8006ef8 <USBD_CtlError>
            err++;
 8006a06:	210b      	movs	r1, #11
 8006a08:	187b      	adds	r3, r7, r1
 8006a0a:	781a      	ldrb	r2, [r3, #0]
 8006a0c:	187b      	adds	r3, r7, r1
 8006a0e:	3201      	adds	r2, #1
 8006a10:	701a      	strb	r2, [r3, #0]
          break;
 8006a12:	e00c      	b.n	8006a2e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	0011      	movs	r1, r2
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	f000 fa6c 	bl	8006ef8 <USBD_CtlError>
          err++;
 8006a20:	210b      	movs	r1, #11
 8006a22:	187b      	adds	r3, r7, r1
 8006a24:	781a      	ldrb	r2, [r3, #0]
 8006a26:	187b      	adds	r3, r7, r1
 8006a28:	3201      	adds	r2, #1
 8006a2a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006a2c:	e04b      	b.n	8006ac6 <USBD_GetDescriptor+0x2fa>
 8006a2e:	e04a      	b.n	8006ac6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	7c1b      	ldrb	r3, [r3, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10b      	bne.n	8006a50 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	23ad      	movs	r3, #173	; 0xad
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	58d3      	ldr	r3, [r2, r3]
 8006a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a42:	2208      	movs	r2, #8
 8006a44:	18ba      	adds	r2, r7, r2
 8006a46:	0010      	movs	r0, r2
 8006a48:	4798      	blx	r3
 8006a4a:	0003      	movs	r3, r0
 8006a4c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a4e:	e03a      	b.n	8006ac6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	0011      	movs	r1, r2
 8006a56:	0018      	movs	r0, r3
 8006a58:	f000 fa4e 	bl	8006ef8 <USBD_CtlError>
        err++;
 8006a5c:	210b      	movs	r1, #11
 8006a5e:	187b      	adds	r3, r7, r1
 8006a60:	781a      	ldrb	r2, [r3, #0]
 8006a62:	187b      	adds	r3, r7, r1
 8006a64:	3201      	adds	r2, #1
 8006a66:	701a      	strb	r2, [r3, #0]
      break;
 8006a68:	e02d      	b.n	8006ac6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	7c1b      	ldrb	r3, [r3, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10f      	bne.n	8006a92 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	23ad      	movs	r3, #173	; 0xad
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	58d3      	ldr	r3, [r2, r3]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	2208      	movs	r2, #8
 8006a7e:	18ba      	adds	r2, r7, r2
 8006a80:	0010      	movs	r0, r2
 8006a82:	4798      	blx	r3
 8006a84:	0003      	movs	r3, r0
 8006a86:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	2207      	movs	r2, #7
 8006a8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a90:	e019      	b.n	8006ac6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	0011      	movs	r1, r2
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f000 fa2d 	bl	8006ef8 <USBD_CtlError>
        err++;
 8006a9e:	210b      	movs	r1, #11
 8006aa0:	187b      	adds	r3, r7, r1
 8006aa2:	781a      	ldrb	r2, [r3, #0]
 8006aa4:	187b      	adds	r3, r7, r1
 8006aa6:	3201      	adds	r2, #1
 8006aa8:	701a      	strb	r2, [r3, #0]
      break;
 8006aaa:	e00c      	b.n	8006ac6 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	0011      	movs	r1, r2
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	f000 fa20 	bl	8006ef8 <USBD_CtlError>
      err++;
 8006ab8:	210b      	movs	r1, #11
 8006aba:	187b      	adds	r3, r7, r1
 8006abc:	781a      	ldrb	r2, [r3, #0]
 8006abe:	187b      	adds	r3, r7, r1
 8006ac0:	3201      	adds	r2, #1
 8006ac2:	701a      	strb	r2, [r3, #0]
      break;
 8006ac4:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8006ac6:	230b      	movs	r3, #11
 8006ac8:	18fb      	adds	r3, r7, r3
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d127      	bne.n	8006b20 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006ad0:	2108      	movs	r1, #8
 8006ad2:	187b      	adds	r3, r7, r1
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d019      	beq.n	8006b0e <USBD_GetDescriptor+0x342>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	88db      	ldrh	r3, [r3, #6]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d015      	beq.n	8006b0e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	88da      	ldrh	r2, [r3, #6]
 8006ae6:	187b      	adds	r3, r7, r1
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	1c18      	adds	r0, r3, #0
 8006aec:	1c11      	adds	r1, r2, #0
 8006aee:	b28a      	uxth	r2, r1
 8006af0:	b283      	uxth	r3, r0
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d900      	bls.n	8006af8 <USBD_GetDescriptor+0x32c>
 8006af6:	1c01      	adds	r1, r0, #0
 8006af8:	b28a      	uxth	r2, r1
 8006afa:	2108      	movs	r1, #8
 8006afc:	187b      	adds	r3, r7, r1
 8006afe:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b00:	187b      	adds	r3, r7, r1
 8006b02:	881a      	ldrh	r2, [r3, #0]
 8006b04:	68f9      	ldr	r1, [r7, #12]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f000 fa73 	bl	8006ff4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	88db      	ldrh	r3, [r3, #6]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d105      	bne.n	8006b22 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	0018      	movs	r0, r3
 8006b1a:	f000 fad5 	bl	80070c8 <USBD_CtlSendStatus>
 8006b1e:	e000      	b.n	8006b22 <USBD_GetDescriptor+0x356>
    return;
 8006b20:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006b22:	46bd      	mov	sp, r7
 8006b24:	b004      	add	sp, #16
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	08007ce0 	.word	0x08007ce0
 8006b2c:	08007d00 	.word	0x08007d00

08006b30 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b30:	b590      	push	{r4, r7, lr}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	889b      	ldrh	r3, [r3, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d13d      	bne.n	8006bbe <USBD_SetAddress+0x8e>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	88db      	ldrh	r3, [r3, #6]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d139      	bne.n	8006bbe <USBD_SetAddress+0x8e>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	885b      	ldrh	r3, [r3, #2]
 8006b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b50:	d835      	bhi.n	8006bbe <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	885b      	ldrh	r3, [r3, #2]
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	230f      	movs	r3, #15
 8006b5a:	18fb      	adds	r3, r7, r3
 8006b5c:	217f      	movs	r1, #127	; 0x7f
 8006b5e:	400a      	ands	r2, r1
 8006b60:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	23a7      	movs	r3, #167	; 0xa7
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	5cd3      	ldrb	r3, [r2, r3]
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	d106      	bne.n	8006b7c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	0011      	movs	r1, r2
 8006b74:	0018      	movs	r0, r3
 8006b76:	f000 f9bf 	bl	8006ef8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b7a:	e027      	b.n	8006bcc <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	240f      	movs	r4, #15
 8006b80:	193a      	adds	r2, r7, r4
 8006b82:	4914      	ldr	r1, [pc, #80]	; (8006bd4 <USBD_SetAddress+0xa4>)
 8006b84:	7812      	ldrb	r2, [r2, #0]
 8006b86:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b88:	193b      	adds	r3, r7, r4
 8006b8a:	781a      	ldrb	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	0011      	movs	r1, r2
 8006b90:	0018      	movs	r0, r3
 8006b92:	f000 ff13 	bl	80079bc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f000 fa95 	bl	80070c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b9e:	193b      	adds	r3, r7, r4
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d005      	beq.n	8006bb2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	23a7      	movs	r3, #167	; 0xa7
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	2102      	movs	r1, #2
 8006bae:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb0:	e00c      	b.n	8006bcc <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	23a7      	movs	r3, #167	; 0xa7
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	2101      	movs	r1, #1
 8006bba:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bbc:	e006      	b.n	8006bcc <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	0011      	movs	r1, r2
 8006bc4:	0018      	movs	r0, r3
 8006bc6:	f000 f997 	bl	8006ef8 <USBD_CtlError>
  }
}
 8006bca:	46c0      	nop			; (mov r8, r8)
 8006bcc:	46c0      	nop			; (mov r8, r8)
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	b005      	add	sp, #20
 8006bd2:	bd90      	pop	{r4, r7, pc}
 8006bd4:	0000029e 	.word	0x0000029e

08006bd8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	885b      	ldrh	r3, [r3, #2]
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	4b4c      	ldr	r3, [pc, #304]	; (8006d1c <USBD_SetConfig+0x144>)
 8006bea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bec:	4b4b      	ldr	r3, [pc, #300]	; (8006d1c <USBD_SetConfig+0x144>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d906      	bls.n	8006c02 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	0011      	movs	r1, r2
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f000 f97c 	bl	8006ef8 <USBD_CtlError>
 8006c00:	e088      	b.n	8006d14 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	23a7      	movs	r3, #167	; 0xa7
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	5cd3      	ldrb	r3, [r2, r3]
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d002      	beq.n	8006c14 <USBD_SetConfig+0x3c>
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d029      	beq.n	8006c66 <USBD_SetConfig+0x8e>
 8006c12:	e071      	b.n	8006cf8 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006c14:	4b41      	ldr	r3, [pc, #260]	; (8006d1c <USBD_SetConfig+0x144>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01f      	beq.n	8006c5c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006c1c:	4b3f      	ldr	r3, [pc, #252]	; (8006d1c <USBD_SetConfig+0x144>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	001a      	movs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	23a7      	movs	r3, #167	; 0xa7
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	2103      	movs	r1, #3
 8006c2e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c30:	4b3a      	ldr	r3, [pc, #232]	; (8006d1c <USBD_SetConfig+0x144>)
 8006c32:	781a      	ldrb	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	0011      	movs	r1, r2
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f7ff f8c6 	bl	8005dca <USBD_SetClassConfig>
 8006c3e:	0003      	movs	r3, r0
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d106      	bne.n	8006c52 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	0011      	movs	r1, r2
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	f000 f954 	bl	8006ef8 <USBD_CtlError>
            return;
 8006c50:	e060      	b.n	8006d14 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	0018      	movs	r0, r3
 8006c56:	f000 fa37 	bl	80070c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c5a:	e05b      	b.n	8006d14 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	0018      	movs	r0, r3
 8006c60:	f000 fa32 	bl	80070c8 <USBD_CtlSendStatus>
        break;
 8006c64:	e056      	b.n	8006d14 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006c66:	4b2d      	ldr	r3, [pc, #180]	; (8006d1c <USBD_SetConfig+0x144>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d115      	bne.n	8006c9a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	23a7      	movs	r3, #167	; 0xa7
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	2102      	movs	r1, #2
 8006c76:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8006c78:	4b28      	ldr	r3, [pc, #160]	; (8006d1c <USBD_SetConfig+0x144>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	001a      	movs	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c82:	4b26      	ldr	r3, [pc, #152]	; (8006d1c <USBD_SetConfig+0x144>)
 8006c84:	781a      	ldrb	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	0011      	movs	r1, r2
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	f7ff f8c4 	bl	8005e18 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	0018      	movs	r0, r3
 8006c94:	f000 fa18 	bl	80070c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c98:	e03c      	b.n	8006d14 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8006c9a:	4b20      	ldr	r3, [pc, #128]	; (8006d1c <USBD_SetConfig+0x144>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	001a      	movs	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d022      	beq.n	8006cee <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	0011      	movs	r1, r2
 8006cb2:	0018      	movs	r0, r3
 8006cb4:	f7ff f8b0 	bl	8005e18 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006cb8:	4b18      	ldr	r3, [pc, #96]	; (8006d1c <USBD_SetConfig+0x144>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	001a      	movs	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006cc2:	4b16      	ldr	r3, [pc, #88]	; (8006d1c <USBD_SetConfig+0x144>)
 8006cc4:	781a      	ldrb	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	0011      	movs	r1, r2
 8006cca:	0018      	movs	r0, r3
 8006ccc:	f7ff f87d 	bl	8005dca <USBD_SetClassConfig>
 8006cd0:	0003      	movs	r3, r0
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d106      	bne.n	8006ce4 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	0011      	movs	r1, r2
 8006cdc:	0018      	movs	r0, r3
 8006cde:	f000 f90b 	bl	8006ef8 <USBD_CtlError>
            return;
 8006ce2:	e017      	b.n	8006d14 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	f000 f9ee 	bl	80070c8 <USBD_CtlSendStatus>
        break;
 8006cec:	e012      	b.n	8006d14 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f000 f9e9 	bl	80070c8 <USBD_CtlSendStatus>
        break;
 8006cf6:	e00d      	b.n	8006d14 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	0011      	movs	r1, r2
 8006cfe:	0018      	movs	r0, r3
 8006d00:	f000 f8fa 	bl	8006ef8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006d04:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <USBD_SetConfig+0x144>)
 8006d06:	781a      	ldrb	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	0011      	movs	r1, r2
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	f7ff f883 	bl	8005e18 <USBD_ClrClassConfig>
        break;
 8006d12:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006d14:	46bd      	mov	sp, r7
 8006d16:	b002      	add	sp, #8
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	200001c0 	.word	0x200001c0

08006d20 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	88db      	ldrh	r3, [r3, #6]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d006      	beq.n	8006d40 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	0011      	movs	r1, r2
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f000 f8dd 	bl	8006ef8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d3e:	e026      	b.n	8006d8e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	23a7      	movs	r3, #167	; 0xa7
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	5cd3      	ldrb	r3, [r2, r3]
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	dc02      	bgt.n	8006d52 <USBD_GetConfig+0x32>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	dc03      	bgt.n	8006d58 <USBD_GetConfig+0x38>
 8006d50:	e016      	b.n	8006d80 <USBD_GetConfig+0x60>
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d00c      	beq.n	8006d70 <USBD_GetConfig+0x50>
 8006d56:	e013      	b.n	8006d80 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3308      	adds	r3, #8
 8006d62:	0019      	movs	r1, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	0018      	movs	r0, r3
 8006d6a:	f000 f943 	bl	8006ff4 <USBD_CtlSendData>
        break;
 8006d6e:	e00e      	b.n	8006d8e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	1d19      	adds	r1, r3, #4
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	0018      	movs	r0, r3
 8006d7a:	f000 f93b 	bl	8006ff4 <USBD_CtlSendData>
        break;
 8006d7e:	e006      	b.n	8006d8e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	0011      	movs	r1, r2
 8006d86:	0018      	movs	r0, r3
 8006d88:	f000 f8b6 	bl	8006ef8 <USBD_CtlError>
        break;
 8006d8c:	46c0      	nop			; (mov r8, r8)
}
 8006d8e:	46c0      	nop			; (mov r8, r8)
 8006d90:	46bd      	mov	sp, r7
 8006d92:	b002      	add	sp, #8
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b082      	sub	sp, #8
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	23a7      	movs	r3, #167	; 0xa7
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	5cd3      	ldrb	r3, [r2, r3]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d822      	bhi.n	8006df4 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	88db      	ldrh	r3, [r3, #6]
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d006      	beq.n	8006dc4 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	0011      	movs	r1, r2
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	f000 f89b 	bl	8006ef8 <USBD_CtlError>
        break;
 8006dc2:	e01e      	b.n	8006e02 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	23a9      	movs	r3, #169	; 0xa9
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	58d3      	ldr	r3, [r2, r3]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d005      	beq.n	8006de2 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	330c      	adds	r3, #12
 8006de6:	0019      	movs	r1, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	0018      	movs	r0, r3
 8006dee:	f000 f901 	bl	8006ff4 <USBD_CtlSendData>
      break;
 8006df2:	e006      	b.n	8006e02 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	0011      	movs	r1, r2
 8006dfa:	0018      	movs	r0, r3
 8006dfc:	f000 f87c 	bl	8006ef8 <USBD_CtlError>
      break;
 8006e00:	46c0      	nop			; (mov r8, r8)
  }
}
 8006e02:	46c0      	nop			; (mov r8, r8)
 8006e04:	46bd      	mov	sp, r7
 8006e06:	b002      	add	sp, #8
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b082      	sub	sp, #8
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	885b      	ldrh	r3, [r3, #2]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d108      	bne.n	8006e2e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	23a9      	movs	r3, #169	; 0xa9
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	2101      	movs	r1, #1
 8006e24:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f000 f94d 	bl	80070c8 <USBD_CtlSendStatus>
  }
}
 8006e2e:	46c0      	nop			; (mov r8, r8)
 8006e30:	46bd      	mov	sp, r7
 8006e32:	b002      	add	sp, #8
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	23a7      	movs	r3, #167	; 0xa7
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	5cd3      	ldrb	r3, [r2, r3]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d80d      	bhi.n	8006e6a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	885b      	ldrh	r3, [r3, #2]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d110      	bne.n	8006e78 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	23a9      	movs	r3, #169	; 0xa9
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	0018      	movs	r0, r3
 8006e64:	f000 f930 	bl	80070c8 <USBD_CtlSendStatus>
      }
      break;
 8006e68:	e006      	b.n	8006e78 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	0011      	movs	r1, r2
 8006e70:	0018      	movs	r0, r3
 8006e72:	f000 f841 	bl	8006ef8 <USBD_CtlError>
      break;
 8006e76:	e000      	b.n	8006e7a <USBD_ClrFeature+0x44>
      break;
 8006e78:	46c0      	nop			; (mov r8, r8)
  }
}
 8006e7a:	46c0      	nop			; (mov r8, r8)
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	b002      	add	sp, #8
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781a      	ldrb	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	785a      	ldrb	r2, [r3, #1]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	3302      	adds	r3, #2
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	3303      	adds	r3, #3
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	18d3      	adds	r3, r2, r3
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	3304      	adds	r3, #4
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	3305      	adds	r3, #5
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	021b      	lsls	r3, r3, #8
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	18d3      	adds	r3, r2, r3
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	3306      	adds	r3, #6
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	3307      	adds	r3, #7
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	18d3      	adds	r3, r2, r3
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	80da      	strh	r2, [r3, #6]

}
 8006ef0:	46c0      	nop			; (mov r8, r8)
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	b002      	add	sp, #8
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2180      	movs	r1, #128	; 0x80
 8006f06:	0018      	movs	r0, r3
 8006f08:	f000 fcd1 	bl	80078ae <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2100      	movs	r1, #0
 8006f10:	0018      	movs	r0, r3
 8006f12:	f000 fccc 	bl	80078ae <USBD_LL_StallEP>
}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	b002      	add	sp, #8
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f1e:	b590      	push	{r4, r7, lr}
 8006f20:	b087      	sub	sp, #28
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f2a:	2417      	movs	r4, #23
 8006f2c:	193b      	adds	r3, r7, r4
 8006f2e:	2200      	movs	r2, #0
 8006f30:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d03c      	beq.n	8006fb2 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f000 f83d 	bl	8006fba <USBD_GetLen>
 8006f40:	0003      	movs	r3, r0
 8006f42:	3301      	adds	r3, #1
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	18db      	adds	r3, r3, r3
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006f4e:	193b      	adds	r3, r7, r4
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	193a      	adds	r2, r7, r4
 8006f54:	1c59      	adds	r1, r3, #1
 8006f56:	7011      	strb	r1, [r2, #0]
 8006f58:	001a      	movs	r2, r3
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	189b      	adds	r3, r3, r2
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	7812      	ldrb	r2, [r2, #0]
 8006f62:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006f64:	193b      	adds	r3, r7, r4
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	193a      	adds	r2, r7, r4
 8006f6a:	1c59      	adds	r1, r3, #1
 8006f6c:	7011      	strb	r1, [r2, #0]
 8006f6e:	001a      	movs	r2, r3
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	189b      	adds	r3, r3, r2
 8006f74:	2203      	movs	r2, #3
 8006f76:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006f78:	e017      	b.n	8006faa <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	60fa      	str	r2, [r7, #12]
 8006f80:	2417      	movs	r4, #23
 8006f82:	193a      	adds	r2, r7, r4
 8006f84:	7812      	ldrb	r2, [r2, #0]
 8006f86:	1939      	adds	r1, r7, r4
 8006f88:	1c50      	adds	r0, r2, #1
 8006f8a:	7008      	strb	r0, [r1, #0]
 8006f8c:	0011      	movs	r1, r2
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	1852      	adds	r2, r2, r1
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006f96:	193b      	adds	r3, r7, r4
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	193a      	adds	r2, r7, r4
 8006f9c:	1c59      	adds	r1, r3, #1
 8006f9e:	7011      	strb	r1, [r2, #0]
 8006fa0:	001a      	movs	r2, r3
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	189b      	adds	r3, r3, r2
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1e3      	bne.n	8006f7a <USBD_GetString+0x5c>
    }
  }
}
 8006fb2:	46c0      	nop			; (mov r8, r8)
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	b007      	add	sp, #28
 8006fb8:	bd90      	pop	{r4, r7, pc}

08006fba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006fc2:	230f      	movs	r3, #15
 8006fc4:	18fb      	adds	r3, r7, r3
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8006fca:	e008      	b.n	8006fde <USBD_GetLen+0x24>
  {
    len++;
 8006fcc:	210f      	movs	r1, #15
 8006fce:	187b      	adds	r3, r7, r1
 8006fd0:	781a      	ldrb	r2, [r3, #0]
 8006fd2:	187b      	adds	r3, r7, r1
 8006fd4:	3201      	adds	r2, #1
 8006fd6:	701a      	strb	r2, [r3, #0]
    buf++;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1f2      	bne.n	8006fcc <USBD_GetLen+0x12>
  }

  return len;
 8006fe6:	230f      	movs	r3, #15
 8006fe8:	18fb      	adds	r3, r7, r3
 8006fea:	781b      	ldrb	r3, [r3, #0]
}
 8006fec:	0018      	movs	r0, r3
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	b004      	add	sp, #16
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	1dbb      	adds	r3, r7, #6
 8007000:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	23a5      	movs	r3, #165	; 0xa5
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	2102      	movs	r1, #2
 800700a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800700c:	1dbb      	adds	r3, r7, #6
 800700e:	881a      	ldrh	r2, [r3, #0]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007014:	1dbb      	adds	r3, r7, #6
 8007016:	881a      	ldrh	r2, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800701c:	1dbb      	adds	r3, r7, #6
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	2100      	movs	r1, #0
 8007026:	f000 fcf4 	bl	8007a12 <USBD_LL_Transmit>

  return USBD_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	0018      	movs	r0, r3
 800702e:	46bd      	mov	sp, r7
 8007030:	b004      	add	sp, #16
 8007032:	bd80      	pop	{r7, pc}

08007034 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	1dbb      	adds	r3, r7, #6
 8007040:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007042:	1dbb      	adds	r3, r7, #6
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	2100      	movs	r1, #0
 800704c:	f000 fce1 	bl	8007a12 <USBD_LL_Transmit>

  return USBD_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	0018      	movs	r0, r3
 8007054:	46bd      	mov	sp, r7
 8007056:	b004      	add	sp, #16
 8007058:	bd80      	pop	{r7, pc}

0800705a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	60f8      	str	r0, [r7, #12]
 8007062:	60b9      	str	r1, [r7, #8]
 8007064:	1dbb      	adds	r3, r7, #6
 8007066:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	23a5      	movs	r3, #165	; 0xa5
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	2103      	movs	r1, #3
 8007070:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8007072:	1dbb      	adds	r3, r7, #6
 8007074:	8819      	ldrh	r1, [r3, #0]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	23ae      	movs	r3, #174	; 0xae
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800707e:	1dbb      	adds	r3, r7, #6
 8007080:	8819      	ldrh	r1, [r3, #0]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	23b0      	movs	r3, #176	; 0xb0
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800708a:	1dbb      	adds	r3, r7, #6
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	2100      	movs	r1, #0
 8007094:	f000 fcf4 	bl	8007a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	0018      	movs	r0, r3
 800709c:	46bd      	mov	sp, r7
 800709e:	b004      	add	sp, #16
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	1dbb      	adds	r3, r7, #6
 80070ae:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070b0:	1dbb      	adds	r3, r7, #6
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	2100      	movs	r1, #0
 80070ba:	f000 fce1 	bl	8007a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	0018      	movs	r0, r3
 80070c2:	46bd      	mov	sp, r7
 80070c4:	b004      	add	sp, #16
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	23a5      	movs	r3, #165	; 0xa5
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	2104      	movs	r1, #4
 80070d8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	2300      	movs	r3, #0
 80070de:	2200      	movs	r2, #0
 80070e0:	2100      	movs	r1, #0
 80070e2:	f000 fc96 	bl	8007a12 <USBD_LL_Transmit>

  return USBD_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	0018      	movs	r0, r3
 80070ea:	46bd      	mov	sp, r7
 80070ec:	b002      	add	sp, #8
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	23a5      	movs	r3, #165	; 0xa5
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	2105      	movs	r1, #5
 8007100:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	2300      	movs	r3, #0
 8007106:	2200      	movs	r2, #0
 8007108:	2100      	movs	r1, #0
 800710a:	f000 fcb9 	bl	8007a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	0018      	movs	r0, r3
 8007112:	46bd      	mov	sp, r7
 8007114:	b002      	add	sp, #8
 8007116:	bd80      	pop	{r7, pc}

08007118 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800711c:	4914      	ldr	r1, [pc, #80]	; (8007170 <MX_USB_DEVICE_Init+0x58>)
 800711e:	4b15      	ldr	r3, [pc, #84]	; (8007174 <MX_USB_DEVICE_Init+0x5c>)
 8007120:	2200      	movs	r2, #0
 8007122:	0018      	movs	r0, r3
 8007124:	f7fe fdea 	bl	8005cfc <USBD_Init>
 8007128:	1e03      	subs	r3, r0, #0
 800712a:	d001      	beq.n	8007130 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800712c:	f7f9 fa70 	bl	8000610 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007130:	4a11      	ldr	r2, [pc, #68]	; (8007178 <MX_USB_DEVICE_Init+0x60>)
 8007132:	4b10      	ldr	r3, [pc, #64]	; (8007174 <MX_USB_DEVICE_Init+0x5c>)
 8007134:	0011      	movs	r1, r2
 8007136:	0018      	movs	r0, r3
 8007138:	f7fe fe11 	bl	8005d5e <USBD_RegisterClass>
 800713c:	1e03      	subs	r3, r0, #0
 800713e:	d001      	beq.n	8007144 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8007140:	f7f9 fa66 	bl	8000610 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007144:	4a0d      	ldr	r2, [pc, #52]	; (800717c <MX_USB_DEVICE_Init+0x64>)
 8007146:	4b0b      	ldr	r3, [pc, #44]	; (8007174 <MX_USB_DEVICE_Init+0x5c>)
 8007148:	0011      	movs	r1, r2
 800714a:	0018      	movs	r0, r3
 800714c:	f7fe fd26 	bl	8005b9c <USBD_CDC_RegisterInterface>
 8007150:	1e03      	subs	r3, r0, #0
 8007152:	d001      	beq.n	8007158 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8007154:	f7f9 fa5c 	bl	8000610 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007158:	4b06      	ldr	r3, [pc, #24]	; (8007174 <MX_USB_DEVICE_Init+0x5c>)
 800715a:	0018      	movs	r0, r3
 800715c:	f7fe fe1f 	bl	8005d9e <USBD_Start>
 8007160:	1e03      	subs	r3, r0, #0
 8007162:	d001      	beq.n	8007168 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8007164:	f7f9 fa54 	bl	8000610 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007168:	46c0      	nop			; (mov r8, r8)
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	46c0      	nop			; (mov r8, r8)
 8007170:	20000130 	.word	0x20000130
 8007174:	200001c4 	.word	0x200001c4
 8007178:	2000001c 	.word	0x2000001c
 800717c:	20000120 	.word	0x20000120

08007180 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007184:	4907      	ldr	r1, [pc, #28]	; (80071a4 <CDC_Init_FS+0x24>)
 8007186:	4b08      	ldr	r3, [pc, #32]	; (80071a8 <CDC_Init_FS+0x28>)
 8007188:	2200      	movs	r2, #0
 800718a:	0018      	movs	r0, r3
 800718c:	f7fe fd21 	bl	8005bd2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007190:	4a06      	ldr	r2, [pc, #24]	; (80071ac <CDC_Init_FS+0x2c>)
 8007192:	4b05      	ldr	r3, [pc, #20]	; (80071a8 <CDC_Init_FS+0x28>)
 8007194:	0011      	movs	r1, r2
 8007196:	0018      	movs	r0, r3
 8007198:	f7fe fd37 	bl	8005c0a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800719c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800719e:	0018      	movs	r0, r3
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	20000888 	.word	0x20000888
 80071a8:	200001c4 	.word	0x200001c4
 80071ac:	20000488 	.word	0x20000488

080071b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80071b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071b6:	0018      	movs	r0, r3
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6039      	str	r1, [r7, #0]
 80071c4:	0011      	movs	r1, r2
 80071c6:	1dfb      	adds	r3, r7, #7
 80071c8:	1c02      	adds	r2, r0, #0
 80071ca:	701a      	strb	r2, [r3, #0]
 80071cc:	1d3b      	adds	r3, r7, #4
 80071ce:	1c0a      	adds	r2, r1, #0
 80071d0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80071d2:	1dfb      	adds	r3, r7, #7
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	2b23      	cmp	r3, #35	; 0x23
 80071d8:	d804      	bhi.n	80071e4 <CDC_Control_FS+0x28>
 80071da:	009a      	lsls	r2, r3, #2
 80071dc:	4b04      	ldr	r3, [pc, #16]	; (80071f0 <CDC_Control_FS+0x34>)
 80071de:	18d3      	adds	r3, r2, r3
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80071e4:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 80071e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80071e8:	0018      	movs	r0, r3
 80071ea:	46bd      	mov	sp, r7
 80071ec:	b002      	add	sp, #8
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	08007d18 	.word	0x08007d18

080071f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80071f4:	b590      	push	{r4, r7, lr}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	4b13      	ldr	r3, [pc, #76]	; (8007250 <CDC_Receive_FS+0x5c>)
 8007202:	0011      	movs	r1, r2
 8007204:	0018      	movs	r0, r3
 8007206:	f7fe fd00 	bl	8005c0a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800720a:	4b11      	ldr	r3, [pc, #68]	; (8007250 <CDC_Receive_FS+0x5c>)
 800720c:	0018      	movs	r0, r3
 800720e:	f7fe fd47 	bl	8005ca0 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	240f      	movs	r4, #15
 8007218:	193b      	adds	r3, r7, r4
 800721a:	701a      	strb	r2, [r3, #0]
  memset(buffer, '\0', 32);
 800721c:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <CDC_Receive_FS+0x60>)
 800721e:	2220      	movs	r2, #32
 8007220:	2100      	movs	r1, #0
 8007222:	0018      	movs	r0, r3
 8007224:	f000 fccc 	bl	8007bc0 <memset>
  memcpy(buffer, Buf, len);
 8007228:	193b      	adds	r3, r7, r4
 800722a:	781a      	ldrb	r2, [r3, #0]
 800722c:	6879      	ldr	r1, [r7, #4]
 800722e:	4b09      	ldr	r3, [pc, #36]	; (8007254 <CDC_Receive_FS+0x60>)
 8007230:	0018      	movs	r0, r3
 8007232:	f000 fcf1 	bl	8007c18 <memcpy>
  CDC_Transmit_FS(buffer, len);
 8007236:	193b      	adds	r3, r7, r4
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	b29a      	uxth	r2, r3
 800723c:	4b05      	ldr	r3, [pc, #20]	; (8007254 <CDC_Receive_FS+0x60>)
 800723e:	0011      	movs	r1, r2
 8007240:	0018      	movs	r0, r3
 8007242:	f000 f809 	bl	8007258 <CDC_Transmit_FS>
//  memset(Buf, '\0', len);
//  CDC_ReceiveCallBack(Buf,Len[0]);
  return (USBD_OK);
 8007246:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007248:	0018      	movs	r0, r3
 800724a:	46bd      	mov	sp, r7
 800724c:	b005      	add	sp, #20
 800724e:	bd90      	pop	{r4, r7, pc}
 8007250:	200001c4 	.word	0x200001c4
 8007254:	2000019c 	.word	0x2000019c

08007258 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007258:	b5b0      	push	{r4, r5, r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	000a      	movs	r2, r1
 8007262:	1cbb      	adds	r3, r7, #2
 8007264:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8007266:	230f      	movs	r3, #15
 8007268:	18fb      	adds	r3, r7, r3
 800726a:	2200      	movs	r2, #0
 800726c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800726e:	4a11      	ldr	r2, [pc, #68]	; (80072b4 <CDC_Transmit_FS+0x5c>)
 8007270:	23ae      	movs	r3, #174	; 0xae
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	58d3      	ldr	r3, [r2, r3]
 8007276:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	2385      	movs	r3, #133	; 0x85
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	58d3      	ldr	r3, [r2, r3]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8007284:	2301      	movs	r3, #1
 8007286:	e010      	b.n	80072aa <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007288:	1cbb      	adds	r3, r7, #2
 800728a:	881a      	ldrh	r2, [r3, #0]
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	4b09      	ldr	r3, [pc, #36]	; (80072b4 <CDC_Transmit_FS+0x5c>)
 8007290:	0018      	movs	r0, r3
 8007292:	f7fe fc9e 	bl	8005bd2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007296:	250f      	movs	r5, #15
 8007298:	197c      	adds	r4, r7, r5
 800729a:	4b06      	ldr	r3, [pc, #24]	; (80072b4 <CDC_Transmit_FS+0x5c>)
 800729c:	0018      	movs	r0, r3
 800729e:	f7fe fcc8 	bl	8005c32 <USBD_CDC_TransmitPacket>
 80072a2:	0003      	movs	r3, r0
 80072a4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80072a6:	197b      	adds	r3, r7, r5
 80072a8:	781b      	ldrb	r3, [r3, #0]
}
 80072aa:	0018      	movs	r0, r3
 80072ac:	46bd      	mov	sp, r7
 80072ae:	b004      	add	sp, #16
 80072b0:	bdb0      	pop	{r4, r5, r7, pc}
 80072b2:	46c0      	nop			; (mov r8, r8)
 80072b4:	200001c4 	.word	0x200001c4

080072b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	0002      	movs	r2, r0
 80072c0:	6039      	str	r1, [r7, #0]
 80072c2:	1dfb      	adds	r3, r7, #7
 80072c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2212      	movs	r2, #18
 80072ca:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80072cc:	4b02      	ldr	r3, [pc, #8]	; (80072d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80072ce:	0018      	movs	r0, r3
 80072d0:	46bd      	mov	sp, r7
 80072d2:	b002      	add	sp, #8
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	46c0      	nop			; (mov r8, r8)
 80072d8:	2000014c 	.word	0x2000014c

080072dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	0002      	movs	r2, r0
 80072e4:	6039      	str	r1, [r7, #0]
 80072e6:	1dfb      	adds	r3, r7, #7
 80072e8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2204      	movs	r2, #4
 80072ee:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80072f0:	4b02      	ldr	r3, [pc, #8]	; (80072fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80072f2:	0018      	movs	r0, r3
 80072f4:	46bd      	mov	sp, r7
 80072f6:	b002      	add	sp, #8
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	20000160 	.word	0x20000160

08007300 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	0002      	movs	r2, r0
 8007308:	6039      	str	r1, [r7, #0]
 800730a:	1dfb      	adds	r3, r7, #7
 800730c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800730e:	1dfb      	adds	r3, r7, #7
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d106      	bne.n	8007324 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	4908      	ldr	r1, [pc, #32]	; (800733c <USBD_FS_ProductStrDescriptor+0x3c>)
 800731a:	4b09      	ldr	r3, [pc, #36]	; (8007340 <USBD_FS_ProductStrDescriptor+0x40>)
 800731c:	0018      	movs	r0, r3
 800731e:	f7ff fdfe 	bl	8006f1e <USBD_GetString>
 8007322:	e005      	b.n	8007330 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	4905      	ldr	r1, [pc, #20]	; (800733c <USBD_FS_ProductStrDescriptor+0x3c>)
 8007328:	4b05      	ldr	r3, [pc, #20]	; (8007340 <USBD_FS_ProductStrDescriptor+0x40>)
 800732a:	0018      	movs	r0, r3
 800732c:	f7ff fdf7 	bl	8006f1e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007330:	4b02      	ldr	r3, [pc, #8]	; (800733c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8007332:	0018      	movs	r0, r3
 8007334:	46bd      	mov	sp, r7
 8007336:	b002      	add	sp, #8
 8007338:	bd80      	pop	{r7, pc}
 800733a:	46c0      	nop			; (mov r8, r8)
 800733c:	20000c88 	.word	0x20000c88
 8007340:	08007c54 	.word	0x08007c54

08007344 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	0002      	movs	r2, r0
 800734c:	6039      	str	r1, [r7, #0]
 800734e:	1dfb      	adds	r3, r7, #7
 8007350:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	4904      	ldr	r1, [pc, #16]	; (8007368 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007356:	4b05      	ldr	r3, [pc, #20]	; (800736c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8007358:	0018      	movs	r0, r3
 800735a:	f7ff fde0 	bl	8006f1e <USBD_GetString>
  return USBD_StrDesc;
 800735e:	4b02      	ldr	r3, [pc, #8]	; (8007368 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8007360:	0018      	movs	r0, r3
 8007362:	46bd      	mov	sp, r7
 8007364:	b002      	add	sp, #8
 8007366:	bd80      	pop	{r7, pc}
 8007368:	20000c88 	.word	0x20000c88
 800736c:	08007c6c 	.word	0x08007c6c

08007370 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	0002      	movs	r2, r0
 8007378:	6039      	str	r1, [r7, #0]
 800737a:	1dfb      	adds	r3, r7, #7
 800737c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	221a      	movs	r2, #26
 8007382:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007384:	f000 f84c 	bl	8007420 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007388:	4b02      	ldr	r3, [pc, #8]	; (8007394 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800738a:	0018      	movs	r0, r3
 800738c:	46bd      	mov	sp, r7
 800738e:	b002      	add	sp, #8
 8007390:	bd80      	pop	{r7, pc}
 8007392:	46c0      	nop			; (mov r8, r8)
 8007394:	20000164 	.word	0x20000164

08007398 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	0002      	movs	r2, r0
 80073a0:	6039      	str	r1, [r7, #0]
 80073a2:	1dfb      	adds	r3, r7, #7
 80073a4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80073a6:	1dfb      	adds	r3, r7, #7
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d106      	bne.n	80073bc <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	4908      	ldr	r1, [pc, #32]	; (80073d4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80073b2:	4b09      	ldr	r3, [pc, #36]	; (80073d8 <USBD_FS_ConfigStrDescriptor+0x40>)
 80073b4:	0018      	movs	r0, r3
 80073b6:	f7ff fdb2 	bl	8006f1e <USBD_GetString>
 80073ba:	e005      	b.n	80073c8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	4905      	ldr	r1, [pc, #20]	; (80073d4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80073c0:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <USBD_FS_ConfigStrDescriptor+0x40>)
 80073c2:	0018      	movs	r0, r3
 80073c4:	f7ff fdab 	bl	8006f1e <USBD_GetString>
  }
  return USBD_StrDesc;
 80073c8:	4b02      	ldr	r3, [pc, #8]	; (80073d4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80073ca:	0018      	movs	r0, r3
 80073cc:	46bd      	mov	sp, r7
 80073ce:	b002      	add	sp, #8
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	46c0      	nop			; (mov r8, r8)
 80073d4:	20000c88 	.word	0x20000c88
 80073d8:	08007c80 	.word	0x08007c80

080073dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	0002      	movs	r2, r0
 80073e4:	6039      	str	r1, [r7, #0]
 80073e6:	1dfb      	adds	r3, r7, #7
 80073e8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80073ea:	1dfb      	adds	r3, r7, #7
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d106      	bne.n	8007400 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	4908      	ldr	r1, [pc, #32]	; (8007418 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80073f6:	4b09      	ldr	r3, [pc, #36]	; (800741c <USBD_FS_InterfaceStrDescriptor+0x40>)
 80073f8:	0018      	movs	r0, r3
 80073fa:	f7ff fd90 	bl	8006f1e <USBD_GetString>
 80073fe:	e005      	b.n	800740c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	4905      	ldr	r1, [pc, #20]	; (8007418 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007406:	0018      	movs	r0, r3
 8007408:	f7ff fd89 	bl	8006f1e <USBD_GetString>
  }
  return USBD_StrDesc;
 800740c:	4b02      	ldr	r3, [pc, #8]	; (8007418 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800740e:	0018      	movs	r0, r3
 8007410:	46bd      	mov	sp, r7
 8007412:	b002      	add	sp, #8
 8007414:	bd80      	pop	{r7, pc}
 8007416:	46c0      	nop			; (mov r8, r8)
 8007418:	20000c88 	.word	0x20000c88
 800741c:	08007c8c 	.word	0x08007c8c

08007420 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007426:	4b10      	ldr	r3, [pc, #64]	; (8007468 <Get_SerialNum+0x48>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800742c:	4b0f      	ldr	r3, [pc, #60]	; (800746c <Get_SerialNum+0x4c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007432:	4b0f      	ldr	r3, [pc, #60]	; (8007470 <Get_SerialNum+0x50>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	18d3      	adds	r3, r2, r3
 800743e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00b      	beq.n	800745e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007446:	490b      	ldr	r1, [pc, #44]	; (8007474 <Get_SerialNum+0x54>)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2208      	movs	r2, #8
 800744c:	0018      	movs	r0, r3
 800744e:	f000 f815 	bl	800747c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007452:	4909      	ldr	r1, [pc, #36]	; (8007478 <Get_SerialNum+0x58>)
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2204      	movs	r2, #4
 8007458:	0018      	movs	r0, r3
 800745a:	f000 f80f 	bl	800747c <IntToUnicode>
  }
}
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	46bd      	mov	sp, r7
 8007462:	b004      	add	sp, #16
 8007464:	bd80      	pop	{r7, pc}
 8007466:	46c0      	nop			; (mov r8, r8)
 8007468:	1ff80050 	.word	0x1ff80050
 800746c:	1ff80054 	.word	0x1ff80054
 8007470:	1ff80058 	.word	0x1ff80058
 8007474:	20000166 	.word	0x20000166
 8007478:	20000176 	.word	0x20000176

0800747c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	1dfb      	adds	r3, r7, #7
 8007488:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800748a:	2117      	movs	r1, #23
 800748c:	187b      	adds	r3, r7, r1
 800748e:	2200      	movs	r2, #0
 8007490:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8007492:	187b      	adds	r3, r7, r1
 8007494:	2200      	movs	r2, #0
 8007496:	701a      	strb	r2, [r3, #0]
 8007498:	e02f      	b.n	80074fa <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	0f1b      	lsrs	r3, r3, #28
 800749e:	2b09      	cmp	r3, #9
 80074a0:	d80d      	bhi.n	80074be <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	0f1b      	lsrs	r3, r3, #28
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	2317      	movs	r3, #23
 80074aa:	18fb      	adds	r3, r7, r3
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	0019      	movs	r1, r3
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	185b      	adds	r3, r3, r1
 80074b6:	3230      	adds	r2, #48	; 0x30
 80074b8:	b2d2      	uxtb	r2, r2
 80074ba:	701a      	strb	r2, [r3, #0]
 80074bc:	e00c      	b.n	80074d8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	0f1b      	lsrs	r3, r3, #28
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	2317      	movs	r3, #23
 80074c6:	18fb      	adds	r3, r7, r3
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	005b      	lsls	r3, r3, #1
 80074cc:	0019      	movs	r1, r3
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	185b      	adds	r3, r3, r1
 80074d2:	3237      	adds	r2, #55	; 0x37
 80074d4:	b2d2      	uxtb	r2, r2
 80074d6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	011b      	lsls	r3, r3, #4
 80074dc:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80074de:	2117      	movs	r1, #23
 80074e0:	187b      	adds	r3, r7, r1
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	3301      	adds	r3, #1
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	18d3      	adds	r3, r2, r3
 80074ec:	2200      	movs	r2, #0
 80074ee:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80074f0:	187b      	adds	r3, r7, r1
 80074f2:	781a      	ldrb	r2, [r3, #0]
 80074f4:	187b      	adds	r3, r7, r1
 80074f6:	3201      	adds	r2, #1
 80074f8:	701a      	strb	r2, [r3, #0]
 80074fa:	2317      	movs	r3, #23
 80074fc:	18fa      	adds	r2, r7, r3
 80074fe:	1dfb      	adds	r3, r7, #7
 8007500:	7812      	ldrb	r2, [r2, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	429a      	cmp	r2, r3
 8007506:	d3c8      	bcc.n	800749a <IntToUnicode+0x1e>
  }
}
 8007508:	46c0      	nop			; (mov r8, r8)
 800750a:	46c0      	nop			; (mov r8, r8)
 800750c:	46bd      	mov	sp, r7
 800750e:	b006      	add	sp, #24
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a0a      	ldr	r2, [pc, #40]	; (800754c <HAL_PCD_MspInit+0x38>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d10e      	bne.n	8007544 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007526:	4b0a      	ldr	r3, [pc, #40]	; (8007550 <HAL_PCD_MspInit+0x3c>)
 8007528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800752a:	4b09      	ldr	r3, [pc, #36]	; (8007550 <HAL_PCD_MspInit+0x3c>)
 800752c:	2180      	movs	r1, #128	; 0x80
 800752e:	0409      	lsls	r1, r1, #16
 8007530:	430a      	orrs	r2, r1
 8007532:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007534:	2200      	movs	r2, #0
 8007536:	2100      	movs	r1, #0
 8007538:	201f      	movs	r0, #31
 800753a:	f7f9 fa17 	bl	800096c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800753e:	201f      	movs	r0, #31
 8007540:	f7f9 fa29 	bl	8000996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007544:	46c0      	nop			; (mov r8, r8)
 8007546:	46bd      	mov	sp, r7
 8007548:	b002      	add	sp, #8
 800754a:	bd80      	pop	{r7, pc}
 800754c:	40005c00 	.word	0x40005c00
 8007550:	40021000 	.word	0x40021000

08007554 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	23bc      	movs	r3, #188	; 0xbc
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	58d2      	ldr	r2, [r2, r3]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	21ac      	movs	r1, #172	; 0xac
 8007568:	0089      	lsls	r1, r1, #2
 800756a:	468c      	mov	ip, r1
 800756c:	4463      	add	r3, ip
 800756e:	0019      	movs	r1, r3
 8007570:	0010      	movs	r0, r2
 8007572:	f7fe fc67 	bl	8005e44 <USBD_LL_SetupStage>
}
 8007576:	46c0      	nop			; (mov r8, r8)
 8007578:	46bd      	mov	sp, r7
 800757a:	b002      	add	sp, #8
 800757c:	bd80      	pop	{r7, pc}

0800757e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800757e:	b590      	push	{r4, r7, lr}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	000a      	movs	r2, r1
 8007588:	1cfb      	adds	r3, r7, #3
 800758a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	23bc      	movs	r3, #188	; 0xbc
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	58d4      	ldr	r4, [r2, r3]
 8007594:	1cfb      	adds	r3, r7, #3
 8007596:	781a      	ldrb	r2, [r3, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	23be      	movs	r3, #190	; 0xbe
 800759c:	0059      	lsls	r1, r3, #1
 800759e:	0013      	movs	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	189b      	adds	r3, r3, r2
 80075a4:	00db      	lsls	r3, r3, #3
 80075a6:	18c3      	adds	r3, r0, r3
 80075a8:	185b      	adds	r3, r3, r1
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	1cfb      	adds	r3, r7, #3
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	0019      	movs	r1, r3
 80075b2:	0020      	movs	r0, r4
 80075b4:	f7fe fca4 	bl	8005f00 <USBD_LL_DataOutStage>
}
 80075b8:	46c0      	nop			; (mov r8, r8)
 80075ba:	46bd      	mov	sp, r7
 80075bc:	b003      	add	sp, #12
 80075be:	bd90      	pop	{r4, r7, pc}

080075c0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	000a      	movs	r2, r1
 80075ca:	1cfb      	adds	r3, r7, #3
 80075cc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	23bc      	movs	r3, #188	; 0xbc
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	58d0      	ldr	r0, [r2, r3]
 80075d6:	1cfb      	adds	r3, r7, #3
 80075d8:	781a      	ldrb	r2, [r3, #0]
 80075da:	6879      	ldr	r1, [r7, #4]
 80075dc:	0013      	movs	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	189b      	adds	r3, r3, r2
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	18cb      	adds	r3, r1, r3
 80075e6:	333c      	adds	r3, #60	; 0x3c
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	1cfb      	adds	r3, r7, #3
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	0019      	movs	r1, r3
 80075f0:	f7fe fd08 	bl	8006004 <USBD_LL_DataInStage>
}
 80075f4:	46c0      	nop			; (mov r8, r8)
 80075f6:	46bd      	mov	sp, r7
 80075f8:	b002      	add	sp, #8
 80075fa:	bd80      	pop	{r7, pc}

080075fc <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	23bc      	movs	r3, #188	; 0xbc
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	58d3      	ldr	r3, [r2, r3]
 800760c:	0018      	movs	r0, r3
 800760e:	f7fe fe3f 	bl	8006290 <USBD_LL_SOF>
}
 8007612:	46c0      	nop			; (mov r8, r8)
 8007614:	46bd      	mov	sp, r7
 8007616:	b002      	add	sp, #8
 8007618:	bd80      	pop	{r7, pc}

0800761a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007622:	230f      	movs	r3, #15
 8007624:	18fb      	adds	r3, r7, r3
 8007626:	2201      	movs	r2, #1
 8007628:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	2b02      	cmp	r3, #2
 8007630:	d001      	beq.n	8007636 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007632:	f7f8 ffed 	bl	8000610 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	23bc      	movs	r3, #188	; 0xbc
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	58d2      	ldr	r2, [r2, r3]
 800763e:	230f      	movs	r3, #15
 8007640:	18fb      	adds	r3, r7, r3
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	0019      	movs	r1, r3
 8007646:	0010      	movs	r0, r2
 8007648:	f7fe fde1 	bl	800620e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	23bc      	movs	r3, #188	; 0xbc
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	58d3      	ldr	r3, [r2, r3]
 8007654:	0018      	movs	r0, r3
 8007656:	f7fe fd92 	bl	800617e <USBD_LL_Reset>
}
 800765a:	46c0      	nop			; (mov r8, r8)
 800765c:	46bd      	mov	sp, r7
 800765e:	b004      	add	sp, #16
 8007660:	bd80      	pop	{r7, pc}
	...

08007664 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	23bc      	movs	r3, #188	; 0xbc
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	58d3      	ldr	r3, [r2, r3]
 8007674:	0018      	movs	r0, r3
 8007676:	f7fe fddb 	bl	8006230 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d005      	beq.n	800768e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007682:	4b05      	ldr	r3, [pc, #20]	; (8007698 <HAL_PCD_SuspendCallback+0x34>)
 8007684:	691a      	ldr	r2, [r3, #16]
 8007686:	4b04      	ldr	r3, [pc, #16]	; (8007698 <HAL_PCD_SuspendCallback+0x34>)
 8007688:	2106      	movs	r1, #6
 800768a:	430a      	orrs	r2, r1
 800768c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	46bd      	mov	sp, r7
 8007692:	b002      	add	sp, #8
 8007694:	bd80      	pop	{r7, pc}
 8007696:	46c0      	nop			; (mov r8, r8)
 8007698:	e000ed00 	.word	0xe000ed00

0800769c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d007      	beq.n	80076bc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80076ac:	4b09      	ldr	r3, [pc, #36]	; (80076d4 <HAL_PCD_ResumeCallback+0x38>)
 80076ae:	691a      	ldr	r2, [r3, #16]
 80076b0:	4b08      	ldr	r3, [pc, #32]	; (80076d4 <HAL_PCD_ResumeCallback+0x38>)
 80076b2:	2106      	movs	r1, #6
 80076b4:	438a      	bics	r2, r1
 80076b6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80076b8:	f000 fa44 	bl	8007b44 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	23bc      	movs	r3, #188	; 0xbc
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	58d3      	ldr	r3, [r2, r3]
 80076c4:	0018      	movs	r0, r3
 80076c6:	f7fe fdcb 	bl	8006260 <USBD_LL_Resume>
}
 80076ca:	46c0      	nop			; (mov r8, r8)
 80076cc:	46bd      	mov	sp, r7
 80076ce:	b002      	add	sp, #8
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	46c0      	nop			; (mov r8, r8)
 80076d4:	e000ed00 	.word	0xe000ed00

080076d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80076e0:	4a2d      	ldr	r2, [pc, #180]	; (8007798 <USBD_LL_Init+0xc0>)
 80076e2:	23bc      	movs	r3, #188	; 0xbc
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	23b0      	movs	r3, #176	; 0xb0
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4929      	ldr	r1, [pc, #164]	; (8007798 <USBD_LL_Init+0xc0>)
 80076f2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80076f4:	4b28      	ldr	r3, [pc, #160]	; (8007798 <USBD_LL_Init+0xc0>)
 80076f6:	4a29      	ldr	r2, [pc, #164]	; (800779c <USBD_LL_Init+0xc4>)
 80076f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80076fa:	4b27      	ldr	r3, [pc, #156]	; (8007798 <USBD_LL_Init+0xc0>)
 80076fc:	2208      	movs	r2, #8
 80076fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007700:	4b25      	ldr	r3, [pc, #148]	; (8007798 <USBD_LL_Init+0xc0>)
 8007702:	2202      	movs	r2, #2
 8007704:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007706:	4b24      	ldr	r3, [pc, #144]	; (8007798 <USBD_LL_Init+0xc0>)
 8007708:	2202      	movs	r2, #2
 800770a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800770c:	4b22      	ldr	r3, [pc, #136]	; (8007798 <USBD_LL_Init+0xc0>)
 800770e:	2200      	movs	r2, #0
 8007710:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007712:	4b21      	ldr	r3, [pc, #132]	; (8007798 <USBD_LL_Init+0xc0>)
 8007714:	2200      	movs	r2, #0
 8007716:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007718:	4b1f      	ldr	r3, [pc, #124]	; (8007798 <USBD_LL_Init+0xc0>)
 800771a:	2200      	movs	r2, #0
 800771c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800771e:	4b1e      	ldr	r3, [pc, #120]	; (8007798 <USBD_LL_Init+0xc0>)
 8007720:	0018      	movs	r0, r3
 8007722:	f7f9 f955 	bl	80009d0 <HAL_PCD_Init>
 8007726:	1e03      	subs	r3, r0, #0
 8007728:	d001      	beq.n	800772e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800772a:	f7f8 ff71 	bl	8000610 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	23b0      	movs	r3, #176	; 0xb0
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	58d0      	ldr	r0, [r2, r3]
 8007736:	2318      	movs	r3, #24
 8007738:	2200      	movs	r2, #0
 800773a:	2100      	movs	r1, #0
 800773c:	f7fa ff16 	bl	800256c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	23b0      	movs	r3, #176	; 0xb0
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	58d0      	ldr	r0, [r2, r3]
 8007748:	2358      	movs	r3, #88	; 0x58
 800774a:	2200      	movs	r2, #0
 800774c:	2180      	movs	r1, #128	; 0x80
 800774e:	f7fa ff0d 	bl	800256c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	23b0      	movs	r3, #176	; 0xb0
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	58d0      	ldr	r0, [r2, r3]
 800775a:	23c0      	movs	r3, #192	; 0xc0
 800775c:	2200      	movs	r2, #0
 800775e:	2181      	movs	r1, #129	; 0x81
 8007760:	f7fa ff04 	bl	800256c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	23b0      	movs	r3, #176	; 0xb0
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	58d0      	ldr	r0, [r2, r3]
 800776c:	2388      	movs	r3, #136	; 0x88
 800776e:	005b      	lsls	r3, r3, #1
 8007770:	2200      	movs	r2, #0
 8007772:	2101      	movs	r1, #1
 8007774:	f7fa fefa 	bl	800256c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	23b0      	movs	r3, #176	; 0xb0
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	58d0      	ldr	r0, [r2, r3]
 8007780:	2380      	movs	r3, #128	; 0x80
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	2200      	movs	r2, #0
 8007786:	2182      	movs	r1, #130	; 0x82
 8007788:	f7fa fef0 	bl	800256c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	0018      	movs	r0, r3
 8007790:	46bd      	mov	sp, r7
 8007792:	b002      	add	sp, #8
 8007794:	bd80      	pop	{r7, pc}
 8007796:	46c0      	nop			; (mov r8, r8)
 8007798:	20000e88 	.word	0x20000e88
 800779c:	40005c00 	.word	0x40005c00

080077a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80077a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a8:	210f      	movs	r1, #15
 80077aa:	187b      	adds	r3, r7, r1
 80077ac:	2200      	movs	r2, #0
 80077ae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077b0:	260e      	movs	r6, #14
 80077b2:	19bb      	adds	r3, r7, r6
 80077b4:	2200      	movs	r2, #0
 80077b6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	23b0      	movs	r3, #176	; 0xb0
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	58d3      	ldr	r3, [r2, r3]
 80077c0:	000d      	movs	r5, r1
 80077c2:	187c      	adds	r4, r7, r1
 80077c4:	0018      	movs	r0, r3
 80077c6:	f7f9 fa03 	bl	8000bd0 <HAL_PCD_Start>
 80077ca:	0003      	movs	r3, r0
 80077cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ce:	19bc      	adds	r4, r7, r6
 80077d0:	197b      	adds	r3, r7, r5
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	0018      	movs	r0, r3
 80077d6:	f000 f9bc 	bl	8007b52 <USBD_Get_USB_Status>
 80077da:	0003      	movs	r3, r0
 80077dc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80077de:	19bb      	adds	r3, r7, r6
 80077e0:	781b      	ldrb	r3, [r3, #0]
}
 80077e2:	0018      	movs	r0, r3
 80077e4:	46bd      	mov	sp, r7
 80077e6:	b005      	add	sp, #20
 80077e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080077ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80077ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ec:	b085      	sub	sp, #20
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	000c      	movs	r4, r1
 80077f4:	0010      	movs	r0, r2
 80077f6:	0019      	movs	r1, r3
 80077f8:	1cfb      	adds	r3, r7, #3
 80077fa:	1c22      	adds	r2, r4, #0
 80077fc:	701a      	strb	r2, [r3, #0]
 80077fe:	1cbb      	adds	r3, r7, #2
 8007800:	1c02      	adds	r2, r0, #0
 8007802:	701a      	strb	r2, [r3, #0]
 8007804:	003b      	movs	r3, r7
 8007806:	1c0a      	adds	r2, r1, #0
 8007808:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800780a:	260f      	movs	r6, #15
 800780c:	19bb      	adds	r3, r7, r6
 800780e:	2200      	movs	r2, #0
 8007810:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007812:	250e      	movs	r5, #14
 8007814:	197b      	adds	r3, r7, r5
 8007816:	2200      	movs	r2, #0
 8007818:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	23b0      	movs	r3, #176	; 0xb0
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	58d0      	ldr	r0, [r2, r3]
 8007822:	19bc      	adds	r4, r7, r6
 8007824:	1cbb      	adds	r3, r7, #2
 8007826:	781d      	ldrb	r5, [r3, #0]
 8007828:	003b      	movs	r3, r7
 800782a:	881a      	ldrh	r2, [r3, #0]
 800782c:	1cfb      	adds	r3, r7, #3
 800782e:	7819      	ldrb	r1, [r3, #0]
 8007830:	002b      	movs	r3, r5
 8007832:	f7f9 fb62 	bl	8000efa <HAL_PCD_EP_Open>
 8007836:	0003      	movs	r3, r0
 8007838:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800783a:	250e      	movs	r5, #14
 800783c:	197c      	adds	r4, r7, r5
 800783e:	19bb      	adds	r3, r7, r6
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	0018      	movs	r0, r3
 8007844:	f000 f985 	bl	8007b52 <USBD_Get_USB_Status>
 8007848:	0003      	movs	r3, r0
 800784a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800784c:	197b      	adds	r3, r7, r5
 800784e:	781b      	ldrb	r3, [r3, #0]
}
 8007850:	0018      	movs	r0, r3
 8007852:	46bd      	mov	sp, r7
 8007854:	b005      	add	sp, #20
 8007856:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007858 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	000a      	movs	r2, r1
 8007862:	1cfb      	adds	r3, r7, #3
 8007864:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007866:	210f      	movs	r1, #15
 8007868:	187b      	adds	r3, r7, r1
 800786a:	2200      	movs	r2, #0
 800786c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800786e:	260e      	movs	r6, #14
 8007870:	19bb      	adds	r3, r7, r6
 8007872:	2200      	movs	r2, #0
 8007874:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	23b0      	movs	r3, #176	; 0xb0
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	58d2      	ldr	r2, [r2, r3]
 800787e:	000d      	movs	r5, r1
 8007880:	187c      	adds	r4, r7, r1
 8007882:	1cfb      	adds	r3, r7, #3
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	0019      	movs	r1, r3
 8007888:	0010      	movs	r0, r2
 800788a:	f7f9 fba5 	bl	8000fd8 <HAL_PCD_EP_Close>
 800788e:	0003      	movs	r3, r0
 8007890:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007892:	19bc      	adds	r4, r7, r6
 8007894:	197b      	adds	r3, r7, r5
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	0018      	movs	r0, r3
 800789a:	f000 f95a 	bl	8007b52 <USBD_Get_USB_Status>
 800789e:	0003      	movs	r3, r0
 80078a0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80078a2:	19bb      	adds	r3, r7, r6
 80078a4:	781b      	ldrb	r3, [r3, #0]
}
 80078a6:	0018      	movs	r0, r3
 80078a8:	46bd      	mov	sp, r7
 80078aa:	b005      	add	sp, #20
 80078ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078ae <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078b0:	b085      	sub	sp, #20
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	000a      	movs	r2, r1
 80078b8:	1cfb      	adds	r3, r7, #3
 80078ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078bc:	210f      	movs	r1, #15
 80078be:	187b      	adds	r3, r7, r1
 80078c0:	2200      	movs	r2, #0
 80078c2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078c4:	260e      	movs	r6, #14
 80078c6:	19bb      	adds	r3, r7, r6
 80078c8:	2200      	movs	r2, #0
 80078ca:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	23b0      	movs	r3, #176	; 0xb0
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	58d2      	ldr	r2, [r2, r3]
 80078d4:	000d      	movs	r5, r1
 80078d6:	187c      	adds	r4, r7, r1
 80078d8:	1cfb      	adds	r3, r7, #3
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	0019      	movs	r1, r3
 80078de:	0010      	movs	r0, r2
 80078e0:	f7f9 fc57 	bl	8001192 <HAL_PCD_EP_SetStall>
 80078e4:	0003      	movs	r3, r0
 80078e6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078e8:	19bc      	adds	r4, r7, r6
 80078ea:	197b      	adds	r3, r7, r5
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	0018      	movs	r0, r3
 80078f0:	f000 f92f 	bl	8007b52 <USBD_Get_USB_Status>
 80078f4:	0003      	movs	r3, r0
 80078f6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80078f8:	19bb      	adds	r3, r7, r6
 80078fa:	781b      	ldrb	r3, [r3, #0]
}
 80078fc:	0018      	movs	r0, r3
 80078fe:	46bd      	mov	sp, r7
 8007900:	b005      	add	sp, #20
 8007902:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007904 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	000a      	movs	r2, r1
 800790e:	1cfb      	adds	r3, r7, #3
 8007910:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007912:	210f      	movs	r1, #15
 8007914:	187b      	adds	r3, r7, r1
 8007916:	2200      	movs	r2, #0
 8007918:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800791a:	260e      	movs	r6, #14
 800791c:	19bb      	adds	r3, r7, r6
 800791e:	2200      	movs	r2, #0
 8007920:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	23b0      	movs	r3, #176	; 0xb0
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	58d2      	ldr	r2, [r2, r3]
 800792a:	000d      	movs	r5, r1
 800792c:	187c      	adds	r4, r7, r1
 800792e:	1cfb      	adds	r3, r7, #3
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	0019      	movs	r1, r3
 8007934:	0010      	movs	r0, r2
 8007936:	f7f9 fc88 	bl	800124a <HAL_PCD_EP_ClrStall>
 800793a:	0003      	movs	r3, r0
 800793c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800793e:	19bc      	adds	r4, r7, r6
 8007940:	197b      	adds	r3, r7, r5
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	0018      	movs	r0, r3
 8007946:	f000 f904 	bl	8007b52 <USBD_Get_USB_Status>
 800794a:	0003      	movs	r3, r0
 800794c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800794e:	19bb      	adds	r3, r7, r6
 8007950:	781b      	ldrb	r3, [r3, #0]
}
 8007952:	0018      	movs	r0, r3
 8007954:	46bd      	mov	sp, r7
 8007956:	b005      	add	sp, #20
 8007958:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800795a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b084      	sub	sp, #16
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	000a      	movs	r2, r1
 8007964:	1cfb      	adds	r3, r7, #3
 8007966:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	23b0      	movs	r3, #176	; 0xb0
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	58d3      	ldr	r3, [r2, r3]
 8007970:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007972:	1cfb      	adds	r3, r7, #3
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	b25b      	sxtb	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	da0d      	bge.n	8007998 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800797c:	1cfb      	adds	r3, r7, #3
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	227f      	movs	r2, #127	; 0x7f
 8007982:	4013      	ands	r3, r2
 8007984:	68f9      	ldr	r1, [r7, #12]
 8007986:	1c5a      	adds	r2, r3, #1
 8007988:	0013      	movs	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	189b      	adds	r3, r3, r2
 800798e:	00db      	lsls	r3, r3, #3
 8007990:	18cb      	adds	r3, r1, r3
 8007992:	3302      	adds	r3, #2
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	e00d      	b.n	80079b4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007998:	1cfb      	adds	r3, r7, #3
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	227f      	movs	r2, #127	; 0x7f
 800799e:	401a      	ands	r2, r3
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	23b5      	movs	r3, #181	; 0xb5
 80079a4:	0059      	lsls	r1, r3, #1
 80079a6:	0013      	movs	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	189b      	adds	r3, r3, r2
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	18c3      	adds	r3, r0, r3
 80079b0:	185b      	adds	r3, r3, r1
 80079b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80079b4:	0018      	movs	r0, r3
 80079b6:	46bd      	mov	sp, r7
 80079b8:	b004      	add	sp, #16
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80079bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	000a      	movs	r2, r1
 80079c6:	1cfb      	adds	r3, r7, #3
 80079c8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ca:	210f      	movs	r1, #15
 80079cc:	187b      	adds	r3, r7, r1
 80079ce:	2200      	movs	r2, #0
 80079d0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079d2:	260e      	movs	r6, #14
 80079d4:	19bb      	adds	r3, r7, r6
 80079d6:	2200      	movs	r2, #0
 80079d8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	23b0      	movs	r3, #176	; 0xb0
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	58d2      	ldr	r2, [r2, r3]
 80079e2:	000d      	movs	r5, r1
 80079e4:	187c      	adds	r4, r7, r1
 80079e6:	1cfb      	adds	r3, r7, #3
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	0019      	movs	r1, r3
 80079ec:	0010      	movs	r0, r2
 80079ee:	f7f9 fa59 	bl	8000ea4 <HAL_PCD_SetAddress>
 80079f2:	0003      	movs	r3, r0
 80079f4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079f6:	19bc      	adds	r4, r7, r6
 80079f8:	197b      	adds	r3, r7, r5
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	0018      	movs	r0, r3
 80079fe:	f000 f8a8 	bl	8007b52 <USBD_Get_USB_Status>
 8007a02:	0003      	movs	r3, r0
 8007a04:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007a06:	19bb      	adds	r3, r7, r6
 8007a08:	781b      	ldrb	r3, [r3, #0]
}
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	b005      	add	sp, #20
 8007a10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007a12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a14:	b087      	sub	sp, #28
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	0008      	movs	r0, r1
 8007a1c:	607a      	str	r2, [r7, #4]
 8007a1e:	0019      	movs	r1, r3
 8007a20:	230b      	movs	r3, #11
 8007a22:	18fb      	adds	r3, r7, r3
 8007a24:	1c02      	adds	r2, r0, #0
 8007a26:	701a      	strb	r2, [r3, #0]
 8007a28:	2408      	movs	r4, #8
 8007a2a:	193b      	adds	r3, r7, r4
 8007a2c:	1c0a      	adds	r2, r1, #0
 8007a2e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a30:	2117      	movs	r1, #23
 8007a32:	187b      	adds	r3, r7, r1
 8007a34:	2200      	movs	r2, #0
 8007a36:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a38:	2516      	movs	r5, #22
 8007a3a:	197b      	adds	r3, r7, r5
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	23b0      	movs	r3, #176	; 0xb0
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	58d0      	ldr	r0, [r2, r3]
 8007a48:	193b      	adds	r3, r7, r4
 8007a4a:	881d      	ldrh	r5, [r3, #0]
 8007a4c:	000e      	movs	r6, r1
 8007a4e:	187c      	adds	r4, r7, r1
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	230b      	movs	r3, #11
 8007a54:	18fb      	adds	r3, r7, r3
 8007a56:	7819      	ldrb	r1, [r3, #0]
 8007a58:	002b      	movs	r3, r5
 8007a5a:	f7f9 fb5e 	bl	800111a <HAL_PCD_EP_Transmit>
 8007a5e:	0003      	movs	r3, r0
 8007a60:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a62:	2516      	movs	r5, #22
 8007a64:	197c      	adds	r4, r7, r5
 8007a66:	19bb      	adds	r3, r7, r6
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	f000 f871 	bl	8007b52 <USBD_Get_USB_Status>
 8007a70:	0003      	movs	r3, r0
 8007a72:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007a74:	197b      	adds	r3, r7, r5
 8007a76:	781b      	ldrb	r3, [r3, #0]
}
 8007a78:	0018      	movs	r0, r3
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	b007      	add	sp, #28
 8007a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	0008      	movs	r0, r1
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	0019      	movs	r1, r3
 8007a8e:	230b      	movs	r3, #11
 8007a90:	18fb      	adds	r3, r7, r3
 8007a92:	1c02      	adds	r2, r0, #0
 8007a94:	701a      	strb	r2, [r3, #0]
 8007a96:	2408      	movs	r4, #8
 8007a98:	193b      	adds	r3, r7, r4
 8007a9a:	1c0a      	adds	r2, r1, #0
 8007a9c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a9e:	2117      	movs	r1, #23
 8007aa0:	187b      	adds	r3, r7, r1
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aa6:	2516      	movs	r5, #22
 8007aa8:	197b      	adds	r3, r7, r5
 8007aaa:	2200      	movs	r2, #0
 8007aac:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	23b0      	movs	r3, #176	; 0xb0
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	58d0      	ldr	r0, [r2, r3]
 8007ab6:	193b      	adds	r3, r7, r4
 8007ab8:	881d      	ldrh	r5, [r3, #0]
 8007aba:	000e      	movs	r6, r1
 8007abc:	187c      	adds	r4, r7, r1
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	230b      	movs	r3, #11
 8007ac2:	18fb      	adds	r3, r7, r3
 8007ac4:	7819      	ldrb	r1, [r3, #0]
 8007ac6:	002b      	movs	r3, r5
 8007ac8:	f7f9 fad7 	bl	800107a <HAL_PCD_EP_Receive>
 8007acc:	0003      	movs	r3, r0
 8007ace:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ad0:	2516      	movs	r5, #22
 8007ad2:	197c      	adds	r4, r7, r5
 8007ad4:	19bb      	adds	r3, r7, r6
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	0018      	movs	r0, r3
 8007ada:	f000 f83a 	bl	8007b52 <USBD_Get_USB_Status>
 8007ade:	0003      	movs	r3, r0
 8007ae0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007ae2:	197b      	adds	r3, r7, r5
 8007ae4:	781b      	ldrb	r3, [r3, #0]
}
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	b007      	add	sp, #28
 8007aec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007aee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b082      	sub	sp, #8
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	000a      	movs	r2, r1
 8007af8:	1cfb      	adds	r3, r7, #3
 8007afa:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	23b0      	movs	r3, #176	; 0xb0
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	58d2      	ldr	r2, [r2, r3]
 8007b04:	1cfb      	adds	r3, r7, #3
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	0019      	movs	r1, r3
 8007b0a:	0010      	movs	r0, r2
 8007b0c:	f7f9 faec 	bl	80010e8 <HAL_PCD_EP_GetRxCount>
 8007b10:	0003      	movs	r3, r0
}
 8007b12:	0018      	movs	r0, r3
 8007b14:	46bd      	mov	sp, r7
 8007b16:	b002      	add	sp, #8
 8007b18:	bd80      	pop	{r7, pc}
	...

08007b1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b24:	4b02      	ldr	r3, [pc, #8]	; (8007b30 <USBD_static_malloc+0x14>)
}
 8007b26:	0018      	movs	r0, r3
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	b002      	add	sp, #8
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	46c0      	nop			; (mov r8, r8)
 8007b30:	2000117c 	.word	0x2000117c

08007b34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]

}
 8007b3c:	46c0      	nop			; (mov r8, r8)
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	b002      	add	sp, #8
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007b48:	f7f8 fcd6 	bl	80004f8 <SystemClock_Config>
}
 8007b4c:	46c0      	nop			; (mov r8, r8)
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b084      	sub	sp, #16
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	0002      	movs	r2, r0
 8007b5a:	1dfb      	adds	r3, r7, #7
 8007b5c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b5e:	230f      	movs	r3, #15
 8007b60:	18fb      	adds	r3, r7, r3
 8007b62:	2200      	movs	r2, #0
 8007b64:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8007b66:	1dfb      	adds	r3, r7, #7
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d017      	beq.n	8007b9e <USBD_Get_USB_Status+0x4c>
 8007b6e:	dc1b      	bgt.n	8007ba8 <USBD_Get_USB_Status+0x56>
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d00f      	beq.n	8007b94 <USBD_Get_USB_Status+0x42>
 8007b74:	dc18      	bgt.n	8007ba8 <USBD_Get_USB_Status+0x56>
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <USBD_Get_USB_Status+0x2e>
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d005      	beq.n	8007b8a <USBD_Get_USB_Status+0x38>
 8007b7e:	e013      	b.n	8007ba8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007b80:	230f      	movs	r3, #15
 8007b82:	18fb      	adds	r3, r7, r3
 8007b84:	2200      	movs	r2, #0
 8007b86:	701a      	strb	r2, [r3, #0]
    break;
 8007b88:	e013      	b.n	8007bb2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b8a:	230f      	movs	r3, #15
 8007b8c:	18fb      	adds	r3, r7, r3
 8007b8e:	2202      	movs	r2, #2
 8007b90:	701a      	strb	r2, [r3, #0]
    break;
 8007b92:	e00e      	b.n	8007bb2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b94:	230f      	movs	r3, #15
 8007b96:	18fb      	adds	r3, r7, r3
 8007b98:	2201      	movs	r2, #1
 8007b9a:	701a      	strb	r2, [r3, #0]
    break;
 8007b9c:	e009      	b.n	8007bb2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b9e:	230f      	movs	r3, #15
 8007ba0:	18fb      	adds	r3, r7, r3
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	701a      	strb	r2, [r3, #0]
    break;
 8007ba6:	e004      	b.n	8007bb2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8007ba8:	230f      	movs	r3, #15
 8007baa:	18fb      	adds	r3, r7, r3
 8007bac:	2202      	movs	r2, #2
 8007bae:	701a      	strb	r2, [r3, #0]
    break;
 8007bb0:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8007bb2:	230f      	movs	r3, #15
 8007bb4:	18fb      	adds	r3, r7, r3
 8007bb6:	781b      	ldrb	r3, [r3, #0]
}
 8007bb8:	0018      	movs	r0, r3
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	b004      	add	sp, #16
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <memset>:
 8007bc0:	0003      	movs	r3, r0
 8007bc2:	1882      	adds	r2, r0, r2
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d100      	bne.n	8007bca <memset+0xa>
 8007bc8:	4770      	bx	lr
 8007bca:	7019      	strb	r1, [r3, #0]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	e7f9      	b.n	8007bc4 <memset+0x4>

08007bd0 <__libc_init_array>:
 8007bd0:	b570      	push	{r4, r5, r6, lr}
 8007bd2:	2600      	movs	r6, #0
 8007bd4:	4c0c      	ldr	r4, [pc, #48]	; (8007c08 <__libc_init_array+0x38>)
 8007bd6:	4d0d      	ldr	r5, [pc, #52]	; (8007c0c <__libc_init_array+0x3c>)
 8007bd8:	1b64      	subs	r4, r4, r5
 8007bda:	10a4      	asrs	r4, r4, #2
 8007bdc:	42a6      	cmp	r6, r4
 8007bde:	d109      	bne.n	8007bf4 <__libc_init_array+0x24>
 8007be0:	2600      	movs	r6, #0
 8007be2:	f000 f823 	bl	8007c2c <_init>
 8007be6:	4c0a      	ldr	r4, [pc, #40]	; (8007c10 <__libc_init_array+0x40>)
 8007be8:	4d0a      	ldr	r5, [pc, #40]	; (8007c14 <__libc_init_array+0x44>)
 8007bea:	1b64      	subs	r4, r4, r5
 8007bec:	10a4      	asrs	r4, r4, #2
 8007bee:	42a6      	cmp	r6, r4
 8007bf0:	d105      	bne.n	8007bfe <__libc_init_array+0x2e>
 8007bf2:	bd70      	pop	{r4, r5, r6, pc}
 8007bf4:	00b3      	lsls	r3, r6, #2
 8007bf6:	58eb      	ldr	r3, [r5, r3]
 8007bf8:	4798      	blx	r3
 8007bfa:	3601      	adds	r6, #1
 8007bfc:	e7ee      	b.n	8007bdc <__libc_init_array+0xc>
 8007bfe:	00b3      	lsls	r3, r6, #2
 8007c00:	58eb      	ldr	r3, [r5, r3]
 8007c02:	4798      	blx	r3
 8007c04:	3601      	adds	r6, #1
 8007c06:	e7f2      	b.n	8007bee <__libc_init_array+0x1e>
 8007c08:	08007db0 	.word	0x08007db0
 8007c0c:	08007db0 	.word	0x08007db0
 8007c10:	08007db4 	.word	0x08007db4
 8007c14:	08007db0 	.word	0x08007db0

08007c18 <memcpy>:
 8007c18:	2300      	movs	r3, #0
 8007c1a:	b510      	push	{r4, lr}
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d100      	bne.n	8007c22 <memcpy+0xa>
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	5ccc      	ldrb	r4, [r1, r3]
 8007c24:	54c4      	strb	r4, [r0, r3]
 8007c26:	3301      	adds	r3, #1
 8007c28:	e7f8      	b.n	8007c1c <memcpy+0x4>
	...

08007c2c <_init>:
 8007c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2e:	46c0      	nop			; (mov r8, r8)
 8007c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c32:	bc08      	pop	{r3}
 8007c34:	469e      	mov	lr, r3
 8007c36:	4770      	bx	lr

08007c38 <_fini>:
 8007c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3a:	46c0      	nop			; (mov r8, r8)
 8007c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3e:	bc08      	pop	{r3}
 8007c40:	469e      	mov	lr, r3
 8007c42:	4770      	bx	lr
