
18_STOP_MODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003444  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003504  08003504  00013504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035e8  080035e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035e8  080035e8  000135e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035f0  080035f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035f0  080035f0  000135f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035f4  080035f4  000135f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08003604  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003604  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a936  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b7c  00000000  00000000  0002a9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  0002c530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074c  00000000  00000000  0002cea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000141af  00000000  00000000  0002d5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c132  00000000  00000000  000417a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007d2ae  00000000  00000000  0004d8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002128  00000000  00000000  000cab84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000cccac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034ec 	.word	0x080034ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080034ec 	.word	0x080034ec

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004bc:	f000 fb04 	bl	8000ac8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004c0:	f000 f87e 	bl	80005c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004c4:	f000 f98a 	bl	80007dc <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80004c8:	f000 f958 	bl	800077c <MX_USART1_UART_Init>
	MX_RTC_Init();
 80004cc:	f000 f8f2 	bl	80006b4 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */

	for (i = 0; i < 10; i++) {
 80004d0:	4b34      	ldr	r3, [pc, #208]	; (80005a4 <main+0xec>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	e00d      	b.n	80004f4 <main+0x3c>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004d8:	23a0      	movs	r3, #160	; 0xa0
 80004da:	05db      	lsls	r3, r3, #23
 80004dc:	2120      	movs	r1, #32
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 fe13 	bl	800110a <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80004e4:	20c8      	movs	r0, #200	; 0xc8
 80004e6:	f000 fb5f 	bl	8000ba8 <HAL_Delay>
	for (i = 0; i < 10; i++) {
 80004ea:	4b2e      	ldr	r3, [pc, #184]	; (80005a4 <main+0xec>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	1c5a      	adds	r2, r3, #1
 80004f0:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <main+0xec>)
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <main+0xec>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b09      	cmp	r3, #9
 80004fa:	dded      	ble.n	80004d8 <main+0x20>
	}

	str = "About to go into stop mode\r\n";
 80004fc:	4b2a      	ldr	r3, [pc, #168]	; (80005a8 <main+0xf0>)
 80004fe:	4a2b      	ldr	r2, [pc, #172]	; (80005ac <main+0xf4>)
 8000500:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8000502:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <main+0xf0>)
 8000504:	681c      	ldr	r4, [r3, #0]
 8000506:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <main+0xf0>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	0018      	movs	r0, r3
 800050c:	f7ff fdfc 	bl	8000108 <strlen>
 8000510:	0003      	movs	r3, r0
 8000512:	b29a      	uxth	r2, r3
 8000514:	2301      	movs	r3, #1
 8000516:	425b      	negs	r3, r3
 8000518:	4825      	ldr	r0, [pc, #148]	; (80005b0 <main+0xf8>)
 800051a:	0021      	movs	r1, r4
 800051c:	f002 fa6c 	bl	80029f8 <HAL_UART_Transmit>
	 *   WAKE-UP COUNTER = 10sec /0.0004324 = 23126.73 = 0x5A56
	 */

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x5A56, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 8000520:	4924      	ldr	r1, [pc, #144]	; (80005b4 <main+0xfc>)
 8000522:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <main+0x100>)
 8000524:	2200      	movs	r2, #0
 8000526:	0018      	movs	r0, r3
 8000528:	f002 f8a6 	bl	8002678 <HAL_RTCEx_SetWakeUpTimer_IT>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d001      	beq.n	8000534 <main+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000530:	f000 f9f0 	bl	8000914 <Error_Handler>
	}

	/* Suspend the SisTick before going into stop mode */
	HAL_SuspendTick();
 8000534:	f000 fb5c 	bl	8000bf0 <HAL_SuspendTick>

	HAL_PWR_EnableSleepOnExit();
 8000538:	f000 fe7a 	bl	8001230 <HAL_PWR_EnableSleepOnExit>
	/* Enter the STOP mode */
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800053c:	2101      	movs	r1, #1
 800053e:	2001      	movs	r0, #1
 8000540:	f000 fe1a 	bl	8001178 <HAL_PWR_EnterSTOPMode>

	/*  Wake up from stop mode */

	// disable the RTC wake-up
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000544:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <main+0x100>)
 8000546:	0018      	movs	r0, r3
 8000548:	f002 f96e 	bl	8002828 <HAL_RTCEx_DeactivateWakeUpTimer>

	for (i = 0; i < 5; i++) {
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <main+0xec>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	e00f      	b.n	8000574 <main+0xbc>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000554:	23a0      	movs	r3, #160	; 0xa0
 8000556:	05db      	lsls	r3, r3, #23
 8000558:	2120      	movs	r1, #32
 800055a:	0018      	movs	r0, r3
 800055c:	f000 fdd5 	bl	800110a <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000560:	23fa      	movs	r3, #250	; 0xfa
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fb1f 	bl	8000ba8 <HAL_Delay>
	for (i = 0; i < 5; i++) {
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <main+0xec>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <main+0xec>)
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <main+0xec>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b04      	cmp	r3, #4
 800057a:	ddeb      	ble.n	8000554 <main+0x9c>
	}

	str = "Wake up from stop mode in the main loop\r\n";
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <main+0xf0>)
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <main+0x104>)
 8000580:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <main+0xf0>)
 8000584:	681c      	ldr	r4, [r3, #0]
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <main+0xf0>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	0018      	movs	r0, r3
 800058c:	f7ff fdbc 	bl	8000108 <strlen>
 8000590:	0003      	movs	r3, r0
 8000592:	b29a      	uxth	r2, r3
 8000594:	2301      	movs	r3, #1
 8000596:	425b      	negs	r3, r3
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <main+0xf8>)
 800059a:	0021      	movs	r1, r4
 800059c:	f002 fa2c 	bl	80029f8 <HAL_UART_Transmit>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005a0:	e7fe      	b.n	80005a0 <main+0xe8>
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	200000d4 	.word	0x200000d4
 80005a8:	200000d8 	.word	0x200000d8
 80005ac:	08003504 	.word	0x08003504
 80005b0:	2000004c 	.word	0x2000004c
 80005b4:	00005a56 	.word	0x00005a56
 80005b8:	20000028 	.word	0x20000028
 80005bc:	08003524 	.word	0x08003524

080005c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b09d      	sub	sp, #116	; 0x74
 80005c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005c6:	2438      	movs	r4, #56	; 0x38
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	0018      	movs	r0, r3
 80005cc:	2338      	movs	r3, #56	; 0x38
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f002 ff5f 	bl	8003494 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005d6:	2324      	movs	r3, #36	; 0x24
 80005d8:	18fb      	adds	r3, r7, r3
 80005da:	0018      	movs	r0, r3
 80005dc:	2314      	movs	r3, #20
 80005de:	001a      	movs	r2, r3
 80005e0:	2100      	movs	r1, #0
 80005e2:	f002 ff57 	bl	8003494 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80005e6:	003b      	movs	r3, r7
 80005e8:	0018      	movs	r0, r3
 80005ea:	2324      	movs	r3, #36	; 0x24
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f002 ff50 	bl	8003494 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <SystemClock_Config+0xec>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a2d      	ldr	r2, [pc, #180]	; (80006b0 <SystemClock_Config+0xf0>)
 80005fa:	401a      	ands	r2, r3
 80005fc:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <SystemClock_Config+0xec>)
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	0109      	lsls	r1, r1, #4
 8000602:	430a      	orrs	r2, r1
 8000604:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000606:	0021      	movs	r1, r4
 8000608:	187b      	adds	r3, r7, r1
 800060a:	220a      	movs	r2, #10
 800060c:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2201      	movs	r2, #1
 8000612:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2210      	movs	r2, #16
 8000618:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2201      	movs	r2, #1
 800061e:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2202      	movs	r2, #2
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2200      	movs	r2, #0
 8000630:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	0412      	lsls	r2, r2, #16
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800063a:	187b      	adds	r3, r7, r1
 800063c:	0018      	movs	r0, r3
 800063e:	f000 fe13 	bl	8001268 <HAL_RCC_OscConfig>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x8a>
		Error_Handler();
 8000646:	f000 f965 	bl	8000914 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800064a:	2124      	movs	r1, #36	; 0x24
 800064c:	187b      	adds	r3, r7, r1
 800064e:	220f      	movs	r2, #15
 8000650:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2203      	movs	r2, #3
 8000656:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2280      	movs	r2, #128	; 0x80
 8000662:	00d2      	lsls	r2, r2, #3
 8000664:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	00d2      	lsls	r2, r2, #3
 800066c:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2100      	movs	r1, #0
 8000672:	0018      	movs	r0, r3
 8000674:	f001 f9bc 	bl	80019f0 <HAL_RCC_ClockConfig>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xc0>
		Error_Handler();
 800067c:	f000 f94a 	bl	8000914 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8000680:	003b      	movs	r3, r7
 8000682:	2221      	movs	r2, #33	; 0x21
 8000684:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_RTC;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000686:	003b      	movs	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800068c:	003b      	movs	r3, r7
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	0292      	lsls	r2, r2, #10
 8000692:	605a      	str	r2, [r3, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000694:	003b      	movs	r3, r7
 8000696:	0018      	movs	r0, r3
 8000698:	f001 fbce 	bl	8001e38 <HAL_RCCEx_PeriphCLKConfig>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xe4>
		Error_Handler();
 80006a0:	f000 f938 	bl	8000914 <Error_Handler>
	}
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b01d      	add	sp, #116	; 0x74
 80006aa:	bd90      	pop	{r4, r7, pc}
 80006ac:	40007000 	.word	0x40007000
 80006b0:	ffffe7ff 	.word	0xffffe7ff

080006b4 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	0018      	movs	r0, r3
 80006be:	2314      	movs	r3, #20
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f002 fee6 	bl	8003494 <memset>
	RTC_DateTypeDef sDate = { 0 };
 80006c8:	003b      	movs	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80006ce:	4b29      	ldr	r3, [pc, #164]	; (8000774 <MX_RTC_Init+0xc0>)
 80006d0:	4a29      	ldr	r2, [pc, #164]	; (8000778 <MX_RTC_Init+0xc4>)
 80006d2:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006d4:	4b27      	ldr	r3, [pc, #156]	; (8000774 <MX_RTC_Init+0xc0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <MX_RTC_Init+0xc0>)
 80006dc:	227f      	movs	r2, #127	; 0x7f
 80006de:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80006e0:	4b24      	ldr	r3, [pc, #144]	; (8000774 <MX_RTC_Init+0xc0>)
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <MX_RTC_Init+0xc0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006ec:	4b21      	ldr	r3, [pc, #132]	; (8000774 <MX_RTC_Init+0xc0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <MX_RTC_Init+0xc0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_RTC_Init+0xc0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_RTC_Init+0xc0>)
 8000700:	0018      	movs	r0, r3
 8000702:	f001 fd27 	bl	8002154 <HAL_RTC_Init>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <MX_RTC_Init+0x5a>
		Error_Handler();
 800070a:	f000 f903 	bl	8000914 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0x0;
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0x0;
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	709a      	strb	r2, [r3, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800072c:	1d39      	adds	r1, r7, #4
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_RTC_Init+0xc0>)
 8000730:	2201      	movs	r2, #1
 8000732:	0018      	movs	r0, r3
 8000734:	f001 fdaa 	bl	800228c <HAL_RTC_SetTime>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <MX_RTC_Init+0x8c>
		Error_Handler();
 800073c:	f000 f8ea 	bl	8000914 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000740:	003b      	movs	r3, r7
 8000742:	2204      	movs	r2, #4
 8000744:	701a      	strb	r2, [r3, #0]
	sDate.Month = RTC_MONTH_MAY;
 8000746:	003b      	movs	r3, r7
 8000748:	2205      	movs	r2, #5
 800074a:	705a      	strb	r2, [r3, #1]
	sDate.Date = 0x2;
 800074c:	003b      	movs	r3, r7
 800074e:	2202      	movs	r2, #2
 8000750:	709a      	strb	r2, [r3, #2]
	sDate.Year = 0x24;
 8000752:	003b      	movs	r3, r7
 8000754:	2224      	movs	r2, #36	; 0x24
 8000756:	70da      	strb	r2, [r3, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8000758:	0039      	movs	r1, r7
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_RTC_Init+0xc0>)
 800075c:	2201      	movs	r2, #1
 800075e:	0018      	movs	r0, r3
 8000760:	f001 fe3e 	bl	80023e0 <HAL_RTC_SetDate>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <MX_RTC_Init+0xb8>
		Error_Handler();
 8000768:	f000 f8d4 	bl	8000914 <Error_Handler>
//  }
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b006      	add	sp, #24
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000028 	.word	0x20000028
 8000778:	40002800 	.word	0x40002800

0800077c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 8000782:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <MX_USART1_UART_Init+0x5c>)
 8000784:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 8000788:	22e1      	movs	r2, #225	; 0xe1
 800078a:	0252      	lsls	r2, r2, #9
 800078c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <MX_USART1_UART_Init+0x58>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f002 f8c5 	bl	8002950 <HAL_UART_Init>
 80007c6:	1e03      	subs	r3, r0, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80007ca:	f000 f8a3 	bl	8000914 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000004c 	.word	0x2000004c
 80007d8:	40013800 	.word	0x40013800

080007dc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	0018      	movs	r0, r3
 80007e6:	2314      	movs	r3, #20
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f002 fe52 	bl	8003494 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4b21      	ldr	r3, [pc, #132]	; (8000878 <MX_GPIO_Init+0x9c>)
 80007f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007f4:	4b20      	ldr	r3, [pc, #128]	; (8000878 <MX_GPIO_Init+0x9c>)
 80007f6:	2101      	movs	r1, #1
 80007f8:	430a      	orrs	r2, r1
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <MX_GPIO_Init+0x9c>)
 80007fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000800:	2201      	movs	r2, #1
 8000802:	4013      	ands	r3, r2
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 8000808:	23a0      	movs	r3, #160	; 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	2200      	movs	r2, #0
 800080e:	2120      	movs	r1, #32
 8000810:	0018      	movs	r0, r3
 8000812:	f000 fc5d 	bl	80010d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BSP_EXT_INTR_Pin */
	GPIO_InitStruct.Pin = BSP_EXT_INTR_Pin;
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2201      	movs	r2, #1
 800081a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2288      	movs	r2, #136	; 0x88
 8000820:	0352      	lsls	r2, r2, #13
 8000822:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(BSP_EXT_INTR_GPIO_Port, &GPIO_InitStruct);
 800082a:	1d3a      	adds	r2, r7, #4
 800082c:	23a0      	movs	r3, #160	; 0xa0
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	0011      	movs	r1, r2
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fad6 	bl	8000de4 <HAL_GPIO_Init>

	/*Configure GPIO pin : BSP_LED_Pin */
	GPIO_InitStruct.Pin = BSP_LED_Pin;
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2220      	movs	r2, #32
 800083c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2201      	movs	r2, #1
 8000842:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 8000850:	1d3a      	adds	r2, r7, #4
 8000852:	23a0      	movs	r3, #160	; 0xa0
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	0011      	movs	r1, r2
 8000858:	0018      	movs	r0, r3
 800085a:	f000 fac3 	bl	8000de4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	2005      	movs	r0, #5
 8000864:	f000 fa8c 	bl	8000d80 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000868:	2005      	movs	r0, #5
 800086a:	f000 fa9e 	bl	8000daa <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b006      	add	sp, #24
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	0002      	movs	r2, r0
 8000884:	1dbb      	adds	r3, r7, #6
 8000886:	801a      	strh	r2, [r3, #0]
	/* Wake up from the stop mode */
	SystemClock_Config(); // reconfigure the clocks after wake up from stop mode
 8000888:	f7ff fe9a 	bl	80005c0 <SystemClock_Config>
	HAL_ResumeTick();
 800088c:	f000 f9be 	bl	8000c0c <HAL_ResumeTick>
	str = "Wake up from EXTI \r\n";
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_GPIO_EXTI_Callback+0x44>)
 8000892:	4a0c      	ldr	r2, [pc, #48]	; (80008c4 <HAL_GPIO_EXTI_Callback+0x48>)
 8000894:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <HAL_GPIO_EXTI_Callback+0x44>)
 8000898:	681c      	ldr	r4, [r3, #0]
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_GPIO_EXTI_Callback+0x44>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	0018      	movs	r0, r3
 80008a0:	f7ff fc32 	bl	8000108 <strlen>
 80008a4:	0003      	movs	r3, r0
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	2301      	movs	r3, #1
 80008aa:	425b      	negs	r3, r3
 80008ac:	4806      	ldr	r0, [pc, #24]	; (80008c8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80008ae:	0021      	movs	r1, r4
 80008b0:	f002 f8a2 	bl	80029f8 <HAL_UART_Transmit>
	HAL_PWR_DisableSleepOnExit();
 80008b4:	f000 fcca 	bl	800124c <HAL_PWR_DisableSleepOnExit>

}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b003      	add	sp, #12
 80008be:	bd90      	pop	{r4, r7, pc}
 80008c0:	200000d8 	.word	0x200000d8
 80008c4:	08003550 	.word	0x08003550
 80008c8:	2000004c 	.word	0x2000004c

080008cc <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	SystemClock_Config(); // reconfigure the clocks after wake up from stop mode
 80008d4:	f7ff fe74 	bl	80005c0 <SystemClock_Config>
	HAL_ResumeTick();
 80008d8:	f000 f998 	bl	8000c0c <HAL_ResumeTick>
	str = "Wake up from RTC \r\n";
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <HAL_RTCEx_WakeUpTimerEventCallback+0x3c>)
 80008de:	4a0b      	ldr	r2, [pc, #44]	; (800090c <HAL_RTCEx_WakeUpTimerEventCallback+0x40>)
 80008e0:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_RTCEx_WakeUpTimerEventCallback+0x3c>)
 80008e4:	681c      	ldr	r4, [r3, #0]
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_RTCEx_WakeUpTimerEventCallback+0x3c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	0018      	movs	r0, r3
 80008ec:	f7ff fc0c 	bl	8000108 <strlen>
 80008f0:	0003      	movs	r3, r0
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	2301      	movs	r3, #1
 80008f6:	425b      	negs	r3, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <HAL_RTCEx_WakeUpTimerEventCallback+0x44>)
 80008fa:	0021      	movs	r1, r4
 80008fc:	f002 f87c 	bl	80029f8 <HAL_UART_Transmit>
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b003      	add	sp, #12
 8000906:	bd90      	pop	{r4, r7, pc}
 8000908:	200000d8 	.word	0x200000d8
 800090c:	08003568 	.word	0x08003568
 8000910:	2000004c 	.word	0x2000004c

08000914 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <HAL_MspInit+0x24>)
 8000926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_MspInit+0x24>)
 800092a:	2101      	movs	r1, #1
 800092c:	430a      	orrs	r2, r1
 800092e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <HAL_MspInit+0x24>)
 8000932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <HAL_MspInit+0x24>)
 8000936:	2180      	movs	r1, #128	; 0x80
 8000938:	0549      	lsls	r1, r1, #21
 800093a:	430a      	orrs	r2, r1
 800093c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_RTC_MspInit+0x38>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d10e      	bne.n	8000978 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_RTC_MspInit+0x3c>)
 800095c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_RTC_MspInit+0x3c>)
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	02c9      	lsls	r1, r1, #11
 8000964:	430a      	orrs	r2, r1
 8000966:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	2002      	movs	r0, #2
 800096e:	f000 fa07 	bl	8000d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000972:	2002      	movs	r0, #2
 8000974:	f000 fa19 	bl	8000daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b002      	add	sp, #8
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40002800 	.word	0x40002800
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	240c      	movs	r4, #12
 8000992:	193b      	adds	r3, r7, r4
 8000994:	0018      	movs	r0, r3
 8000996:	2314      	movs	r3, #20
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f002 fd7a 	bl	8003494 <memset>
  if(huart->Instance==USART1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <HAL_UART_MspInit+0x80>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d12a      	bne.n	8000a00 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_UART_MspInit+0x84>)
 80009ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <HAL_UART_MspInit+0x84>)
 80009b0:	2180      	movs	r1, #128	; 0x80
 80009b2:	01c9      	lsls	r1, r1, #7
 80009b4:	430a      	orrs	r2, r1
 80009b6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_UART_MspInit+0x84>)
 80009ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <HAL_UART_MspInit+0x84>)
 80009be:	2101      	movs	r1, #1
 80009c0:	430a      	orrs	r2, r1
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_UART_MspInit+0x84>)
 80009c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c8:	2201      	movs	r2, #1
 80009ca:	4013      	ands	r3, r2
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	22c0      	movs	r2, #192	; 0xc0
 80009d4:	00d2      	lsls	r2, r2, #3
 80009d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	0021      	movs	r1, r4
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2202      	movs	r2, #2
 80009de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2203      	movs	r2, #3
 80009ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2204      	movs	r2, #4
 80009f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	187a      	adds	r2, r7, r1
 80009f4:	23a0      	movs	r3, #160	; 0xa0
 80009f6:	05db      	lsls	r3, r3, #23
 80009f8:	0011      	movs	r1, r2
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 f9f2 	bl	8000de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b009      	add	sp, #36	; 0x24
 8000a06:	bd90      	pop	{r4, r7, pc}
 8000a08:	40013800 	.word	0x40013800
 8000a0c:	40021000 	.word	0x40021000

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	e7fe      	b.n	8000a14 <NMI_Handler+0x4>

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 f89c 	bl	8000b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <RTC_IRQHandler+0x14>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f001 ff52 	bl	80028f0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	20000028 	.word	0x20000028

08000a58 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BSP_EXT_INTR_Pin);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 fb6f 	bl	8001140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a76:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a78:	f7ff fff6 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	; (8000ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <LoopForever+0xe>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	; (8000ac0 <LoopForever+0x16>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f002 fcff 	bl	80034a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa6:	f7ff fd07 	bl	80004b8 <main>

08000aaa <LoopForever>:

LoopForever:
    b LoopForever
 8000aaa:	e7fe      	b.n	8000aaa <LoopForever>
  ldr   r0, =_estack
 8000aac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ab8:	080035f8 	.word	0x080035f8
  ldr r2, =_sbss
 8000abc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ac0:	200000e0 	.word	0x200000e0

08000ac4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC1_COMP_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_Init+0x3c>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_Init+0x3c>)
 8000ada:	2140      	movs	r1, #64	; 0x40
 8000adc:	430a      	orrs	r2, r1
 8000ade:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f000 f811 	bl	8000b08 <HAL_InitTick>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
 8000af0:	e001      	b.n	8000af6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af2:	f7ff ff15 	bl	8000920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781b      	ldrb	r3, [r3, #0]
}
 8000afa:	0018      	movs	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	40022000 	.word	0x40022000

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <HAL_InitTick+0x5c>)
 8000b12:	681c      	ldr	r4, [r3, #0]
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <HAL_InitTick+0x60>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	0019      	movs	r1, r3
 8000b1a:	23fa      	movs	r3, #250	; 0xfa
 8000b1c:	0098      	lsls	r0, r3, #2
 8000b1e:	f7ff fafb 	bl	8000118 <__udivsi3>
 8000b22:	0003      	movs	r3, r0
 8000b24:	0019      	movs	r1, r3
 8000b26:	0020      	movs	r0, r4
 8000b28:	f7ff faf6 	bl	8000118 <__udivsi3>
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 f94b 	bl	8000dca <HAL_SYSTICK_Config>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e00f      	b.n	8000b5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d80b      	bhi.n	8000b5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	2301      	movs	r3, #1
 8000b46:	425b      	negs	r3, r3
 8000b48:	2200      	movs	r2, #0
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 f918 	bl	8000d80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_InitTick+0x64>)
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b003      	add	sp, #12
 8000b62:	bd90      	pop	{r4, r7, pc}
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000004 	.word	0x20000004

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_IncTick+0x1c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	001a      	movs	r2, r3
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_IncTick+0x20>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	18d2      	adds	r2, r2, r3
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_IncTick+0x20>)
 8000b82:	601a      	str	r2, [r3, #0]
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	200000dc 	.word	0x200000dc

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b02      	ldr	r3, [pc, #8]	; (8000ba4 <HAL_GetTick+0x10>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	200000dc 	.word	0x200000dc

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff fff0 	bl	8000b94 <HAL_GetTick>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	d005      	beq.n	8000bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_Delay+0x44>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	189b      	adds	r3, r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	f7ff ffe0 	bl	8000b94 <HAL_GetTick>
 8000bd4:	0002      	movs	r2, r0
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8f7      	bhi.n	8000bd0 <HAL_Delay+0x28>
  {
  }
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b004      	add	sp, #16
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	20000008 	.word	0x20000008

08000bf0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <HAL_SuspendTick+0x18>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <HAL_SuspendTick+0x18>)
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	438a      	bics	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	e000e010 	.word	0xe000e010

08000c0c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <HAL_ResumeTick+0x18>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_ResumeTick+0x18>)
 8000c16:	2102      	movs	r1, #2
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	0002      	movs	r2, r0
 8000c30:	1dfb      	adds	r3, r7, #7
 8000c32:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	1dfb      	adds	r3, r7, #7
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b7f      	cmp	r3, #127	; 0x7f
 8000c3a:	d809      	bhi.n	8000c50 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	001a      	movs	r2, r3
 8000c42:	231f      	movs	r3, #31
 8000c44:	401a      	ands	r2, r3
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_EnableIRQ+0x30>)
 8000c48:	2101      	movs	r1, #1
 8000c4a:	4091      	lsls	r1, r2
 8000c4c:	000a      	movs	r2, r1
 8000c4e:	601a      	str	r2, [r3, #0]
  }
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b002      	add	sp, #8
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	0002      	movs	r2, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c70:	d828      	bhi.n	8000cc4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c72:	4a2f      	ldr	r2, [pc, #188]	; (8000d30 <__NVIC_SetPriority+0xd4>)
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	33c0      	adds	r3, #192	; 0xc0
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	589b      	ldr	r3, [r3, r2]
 8000c82:	1dfa      	adds	r2, r7, #7
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	0011      	movs	r1, r2
 8000c88:	2203      	movs	r2, #3
 8000c8a:	400a      	ands	r2, r1
 8000c8c:	00d2      	lsls	r2, r2, #3
 8000c8e:	21ff      	movs	r1, #255	; 0xff
 8000c90:	4091      	lsls	r1, r2
 8000c92:	000a      	movs	r2, r1
 8000c94:	43d2      	mvns	r2, r2
 8000c96:	401a      	ands	r2, r3
 8000c98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	019b      	lsls	r3, r3, #6
 8000c9e:	22ff      	movs	r2, #255	; 0xff
 8000ca0:	401a      	ands	r2, r3
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	2303      	movs	r3, #3
 8000caa:	4003      	ands	r3, r0
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb0:	481f      	ldr	r0, [pc, #124]	; (8000d30 <__NVIC_SetPriority+0xd4>)
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	089b      	lsrs	r3, r3, #2
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	33c0      	adds	r3, #192	; 0xc0
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cc2:	e031      	b.n	8000d28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <__NVIC_SetPriority+0xd8>)
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	0019      	movs	r1, r3
 8000ccc:	230f      	movs	r3, #15
 8000cce:	400b      	ands	r3, r1
 8000cd0:	3b08      	subs	r3, #8
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	3306      	adds	r3, #6
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	18d3      	adds	r3, r2, r3
 8000cda:	3304      	adds	r3, #4
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	1dfa      	adds	r2, r7, #7
 8000ce0:	7812      	ldrb	r2, [r2, #0]
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	400a      	ands	r2, r1
 8000ce8:	00d2      	lsls	r2, r2, #3
 8000cea:	21ff      	movs	r1, #255	; 0xff
 8000cec:	4091      	lsls	r1, r2
 8000cee:	000a      	movs	r2, r1
 8000cf0:	43d2      	mvns	r2, r2
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	019b      	lsls	r3, r3, #6
 8000cfa:	22ff      	movs	r2, #255	; 0xff
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	0018      	movs	r0, r3
 8000d04:	2303      	movs	r3, #3
 8000d06:	4003      	ands	r3, r0
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d0c:	4809      	ldr	r0, [pc, #36]	; (8000d34 <__NVIC_SetPriority+0xd8>)
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	001c      	movs	r4, r3
 8000d14:	230f      	movs	r3, #15
 8000d16:	4023      	ands	r3, r4
 8000d18:	3b08      	subs	r3, #8
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	3306      	adds	r3, #6
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	18c3      	adds	r3, r0, r3
 8000d24:	3304      	adds	r3, #4
 8000d26:	601a      	str	r2, [r3, #0]
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b003      	add	sp, #12
 8000d2e:	bd90      	pop	{r4, r7, pc}
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	1e5a      	subs	r2, r3, #1
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	045b      	lsls	r3, r3, #17
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d301      	bcc.n	8000d50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e010      	b.n	8000d72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <SysTick_Config+0x44>)
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	3a01      	subs	r2, #1
 8000d56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d58:	2301      	movs	r3, #1
 8000d5a:	425b      	negs	r3, r3
 8000d5c:	2103      	movs	r1, #3
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff ff7c 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <SysTick_Config+0x44>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6a:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <SysTick_Config+0x44>)
 8000d6c:	2207      	movs	r2, #7
 8000d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	0018      	movs	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	e000e010 	.word	0xe000e010

08000d80 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	1c02      	adds	r2, r0, #0
 8000d90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff ff5d 	bl	8000c5c <__NVIC_SetPriority>
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b004      	add	sp, #16
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	0002      	movs	r2, r0
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff ff33 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b002      	add	sp, #8
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f7ff ffaf 	bl	8000d38 <SysTick_Config>
 8000dda:	0003      	movs	r3, r0
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b002      	add	sp, #8
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dfa:	e14f      	b.n	800109c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2101      	movs	r1, #1
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4091      	lsls	r1, r2
 8000e06:	000a      	movs	r2, r1
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d100      	bne.n	8000e14 <HAL_GPIO_Init+0x30>
 8000e12:	e140      	b.n	8001096 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2203      	movs	r2, #3
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d005      	beq.n	8000e2c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2203      	movs	r2, #3
 8000e26:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d130      	bne.n	8000e8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	0013      	movs	r3, r2
 8000e3c:	43da      	mvns	r2, r3
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	409a      	lsls	r2, r3
 8000e4e:	0013      	movs	r3, r2
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e62:	2201      	movs	r2, #1
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	2201      	movs	r2, #1
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d017      	beq.n	8000eca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2203      	movs	r2, #3
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d123      	bne.n	8000f1e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	0092      	lsls	r2, r2, #2
 8000ee0:	58d3      	ldr	r3, [r2, r3]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	2207      	movs	r2, #7
 8000ee8:	4013      	ands	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	220f      	movs	r2, #15
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	691a      	ldr	r2, [r3, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	2107      	movs	r1, #7
 8000f02:	400b      	ands	r3, r1
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	409a      	lsls	r2, r3
 8000f08:	0013      	movs	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	6939      	ldr	r1, [r7, #16]
 8000f1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	23c0      	movs	r3, #192	; 0xc0
 8000f58:	029b      	lsls	r3, r3, #10
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d100      	bne.n	8000f60 <HAL_GPIO_Init+0x17c>
 8000f5e:	e09a      	b.n	8001096 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	4b54      	ldr	r3, [pc, #336]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8000f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f64:	4b53      	ldr	r3, [pc, #332]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8000f66:	2101      	movs	r1, #1
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f6c:	4a52      	ldr	r2, [pc, #328]	; (80010b8 <HAL_GPIO_Init+0x2d4>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	589b      	ldr	r3, [r3, r2]
 8000f78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	4013      	ands	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	409a      	lsls	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	43da      	mvns	r2, r3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	23a0      	movs	r3, #160	; 0xa0
 8000f94:	05db      	lsls	r3, r3, #23
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d019      	beq.n	8000fce <HAL_GPIO_Init+0x1ea>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a47      	ldr	r2, [pc, #284]	; (80010bc <HAL_GPIO_Init+0x2d8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0x1e6>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a46      	ldr	r2, [pc, #280]	; (80010c0 <HAL_GPIO_Init+0x2dc>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00d      	beq.n	8000fc6 <HAL_GPIO_Init+0x1e2>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a45      	ldr	r2, [pc, #276]	; (80010c4 <HAL_GPIO_Init+0x2e0>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d007      	beq.n	8000fc2 <HAL_GPIO_Init+0x1de>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a44      	ldr	r2, [pc, #272]	; (80010c8 <HAL_GPIO_Init+0x2e4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_GPIO_Init+0x1da>
 8000fba:	2305      	movs	r3, #5
 8000fbc:	e008      	b.n	8000fd0 <HAL_GPIO_Init+0x1ec>
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	e006      	b.n	8000fd0 <HAL_GPIO_Init+0x1ec>
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e004      	b.n	8000fd0 <HAL_GPIO_Init+0x1ec>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_Init+0x1ec>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <HAL_GPIO_Init+0x1ec>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	2103      	movs	r1, #3
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	0092      	lsls	r2, r2, #2
 8000fd8:	4093      	lsls	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe0:	4935      	ldr	r1, [pc, #212]	; (80010b8 <HAL_GPIO_Init+0x2d4>)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fee:	4b37      	ldr	r3, [pc, #220]	; (80010cc <HAL_GPIO_Init+0x2e8>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	035b      	lsls	r3, r3, #13
 8001006:	4013      	ands	r3, r2
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001012:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <HAL_GPIO_Init+0x2e8>)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001018:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <HAL_GPIO_Init+0x2e8>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43da      	mvns	r2, r3
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	039b      	lsls	r3, r3, #14
 8001030:	4013      	ands	r3, r2
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800103c:	4b23      	ldr	r3, [pc, #140]	; (80010cc <HAL_GPIO_Init+0x2e8>)
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <HAL_GPIO_Init+0x2e8>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43da      	mvns	r2, r3
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	029b      	lsls	r3, r3, #10
 800105a:	4013      	ands	r3, r2
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <HAL_GPIO_Init+0x2e8>)
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_GPIO_Init+0x2e8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43da      	mvns	r2, r3
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	025b      	lsls	r3, r3, #9
 8001084:	4013      	ands	r3, r2
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_GPIO_Init+0x2e8>)
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	40da      	lsrs	r2, r3
 80010a4:	1e13      	subs	r3, r2, #0
 80010a6:	d000      	beq.n	80010aa <HAL_GPIO_Init+0x2c6>
 80010a8:	e6a8      	b.n	8000dfc <HAL_GPIO_Init+0x18>
  }
}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b006      	add	sp, #24
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010000 	.word	0x40010000
 80010bc:	50000400 	.word	0x50000400
 80010c0:	50000800 	.word	0x50000800
 80010c4:	50000c00 	.word	0x50000c00
 80010c8:	50001c00 	.word	0x50001c00
 80010cc:	40010400 	.word	0x40010400

080010d0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	0008      	movs	r0, r1
 80010da:	0011      	movs	r1, r2
 80010dc:	1cbb      	adds	r3, r7, #2
 80010de:	1c02      	adds	r2, r0, #0
 80010e0:	801a      	strh	r2, [r3, #0]
 80010e2:	1c7b      	adds	r3, r7, #1
 80010e4:	1c0a      	adds	r2, r1, #0
 80010e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010e8:	1c7b      	adds	r3, r7, #1
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d004      	beq.n	80010fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f0:	1cbb      	adds	r3, r7, #2
 80010f2:	881a      	ldrh	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80010f8:	e003      	b.n	8001102 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80010fa:	1cbb      	adds	r3, r7, #2
 80010fc:	881a      	ldrh	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	b002      	add	sp, #8
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b084      	sub	sp, #16
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	000a      	movs	r2, r1
 8001114:	1cbb      	adds	r3, r7, #2
 8001116:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800111e:	1cbb      	adds	r3, r7, #2
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4013      	ands	r3, r2
 8001126:	041a      	lsls	r2, r3, #16
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43db      	mvns	r3, r3
 800112c:	1cb9      	adds	r1, r7, #2
 800112e:	8809      	ldrh	r1, [r1, #0]
 8001130:	400b      	ands	r3, r1
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b004      	add	sp, #16
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	0002      	movs	r2, r0
 8001148:	1dbb      	adds	r3, r7, #6
 800114a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	1dba      	adds	r2, r7, #6
 8001152:	8812      	ldrh	r2, [r2, #0]
 8001154:	4013      	ands	r3, r2
 8001156:	d008      	beq.n	800116a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800115a:	1dba      	adds	r2, r7, #6
 800115c:	8812      	ldrh	r2, [r2, #0]
 800115e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001160:	1dbb      	adds	r3, r7, #6
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	0018      	movs	r0, r3
 8001166:	f7ff fb89 	bl	800087c <HAL_GPIO_EXTI_Callback>
  }
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b002      	add	sp, #8
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	40010400 	.word	0x40010400

08001178 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	000a      	movs	r2, r1
 8001182:	1cfb      	adds	r3, r7, #3
 8001184:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800118a:	4b25      	ldr	r3, [pc, #148]	; (8001220 <HAL_PWR_EnterSTOPMode+0xa8>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <HAL_PWR_EnterSTOPMode+0xac>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	2201      	movs	r2, #1
 800119c:	4013      	ands	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d008      	beq.n	80011b8 <HAL_PWR_EnterSTOPMode+0x40>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80011ac:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011b2:	491d      	ldr	r1, [pc, #116]	; (8001228 <HAL_PWR_EnterSTOPMode+0xb0>)
 80011b4:	400a      	ands	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2203      	movs	r2, #3
 80011c2:	4393      	bics	r3, r2
 80011c4:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_PWR_EnterSTOPMode+0xb4>)
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_PWR_EnterSTOPMode+0xb4>)
 80011da:	2104      	movs	r1, #4
 80011dc:	430a      	orrs	r2, r1
 80011de:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80011e0:	1cfb      	adds	r3, r7, #3
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d101      	bne.n	80011ec <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80011e8:	bf30      	wfi
 80011ea:	e002      	b.n	80011f2 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80011ec:	bf40      	sev
    __WFE();
 80011ee:	bf20      	wfe
    __WFE();
 80011f0:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_PWR_EnterSTOPMode+0xb4>)
 80011f4:	691a      	ldr	r2, [r3, #16]
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <HAL_PWR_EnterSTOPMode+0xb4>)
 80011f8:	2104      	movs	r1, #4
 80011fa:	438a      	bics	r2, r1
 80011fc:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d009      	beq.n	8001218 <HAL_PWR_EnterSTOPMode+0xa0>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d006      	beq.n	8001218 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800120a:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_PWR_EnterSTOPMode+0xa8>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001210:	2180      	movs	r1, #128	; 0x80
 8001212:	0089      	lsls	r1, r1, #2
 8001214:	430a      	orrs	r2, r1
 8001216:	601a      	str	r2, [r3, #0]
  }
}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b006      	add	sp, #24
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40007000 	.word	0x40007000
 8001224:	40010000 	.word	0x40010000
 8001228:	fffffdff 	.word	0xfffffdff
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <HAL_PWR_EnableSleepOnExit+0x18>)
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <HAL_PWR_EnableSleepOnExit+0x18>)
 800123a:	2102      	movs	r1, #2
 800123c:	430a      	orrs	r2, r1
 800123e:	611a      	str	r2, [r3, #16]
}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <HAL_PWR_DisableSleepOnExit+0x18>)
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_PWR_DisableSleepOnExit+0x18>)
 8001256:	2102      	movs	r1, #2
 8001258:	438a      	bics	r2, r1
 800125a:	611a      	str	r2, [r3, #16]
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001268:	b5b0      	push	{r4, r5, r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d102      	bne.n	800127c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	f000 fbaf 	bl	80019da <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800127c:	4bcf      	ldr	r3, [pc, #828]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	220c      	movs	r2, #12
 8001282:	4013      	ands	r3, r2
 8001284:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001286:	4bcd      	ldr	r3, [pc, #820]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	025b      	lsls	r3, r3, #9
 800128e:	4013      	ands	r3, r2
 8001290:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2201      	movs	r2, #1
 8001298:	4013      	ands	r3, r2
 800129a:	d100      	bne.n	800129e <HAL_RCC_OscConfig+0x36>
 800129c:	e07e      	b.n	800139c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d007      	beq.n	80012b4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	2b0c      	cmp	r3, #12
 80012a8:	d112      	bne.n	80012d0 <HAL_RCC_OscConfig+0x68>
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	025b      	lsls	r3, r3, #9
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d10d      	bne.n	80012d0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b4:	4bc1      	ldr	r3, [pc, #772]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	029b      	lsls	r3, r3, #10
 80012bc:	4013      	ands	r3, r2
 80012be:	d100      	bne.n	80012c2 <HAL_RCC_OscConfig+0x5a>
 80012c0:	e06b      	b.n	800139a <HAL_RCC_OscConfig+0x132>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d167      	bne.n	800139a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	f000 fb85 	bl	80019da <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	025b      	lsls	r3, r3, #9
 80012d8:	429a      	cmp	r2, r3
 80012da:	d107      	bne.n	80012ec <HAL_RCC_OscConfig+0x84>
 80012dc:	4bb7      	ldr	r3, [pc, #732]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4bb6      	ldr	r3, [pc, #728]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	0249      	lsls	r1, r1, #9
 80012e6:	430a      	orrs	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	e027      	b.n	800133c <HAL_RCC_OscConfig+0xd4>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	23a0      	movs	r3, #160	; 0xa0
 80012f2:	02db      	lsls	r3, r3, #11
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d10e      	bne.n	8001316 <HAL_RCC_OscConfig+0xae>
 80012f8:	4bb0      	ldr	r3, [pc, #704]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4baf      	ldr	r3, [pc, #700]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	02c9      	lsls	r1, r1, #11
 8001302:	430a      	orrs	r2, r1
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	4bad      	ldr	r3, [pc, #692]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4bac      	ldr	r3, [pc, #688]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	0249      	lsls	r1, r1, #9
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	e012      	b.n	800133c <HAL_RCC_OscConfig+0xd4>
 8001316:	4ba9      	ldr	r3, [pc, #676]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4ba8      	ldr	r3, [pc, #672]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 800131c:	49a8      	ldr	r1, [pc, #672]	; (80015c0 <HAL_RCC_OscConfig+0x358>)
 800131e:	400a      	ands	r2, r1
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	4ba6      	ldr	r3, [pc, #664]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	025b      	lsls	r3, r3, #9
 800132a:	4013      	ands	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4ba2      	ldr	r3, [pc, #648]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4ba1      	ldr	r3, [pc, #644]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001336:	49a3      	ldr	r1, [pc, #652]	; (80015c4 <HAL_RCC_OscConfig+0x35c>)
 8001338:	400a      	ands	r2, r1
 800133a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d015      	beq.n	8001370 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fc26 	bl	8000b94 <HAL_GetTick>
 8001348:	0003      	movs	r3, r0
 800134a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800134c:	e009      	b.n	8001362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800134e:	f7ff fc21 	bl	8000b94 <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b64      	cmp	r3, #100	; 0x64
 800135a:	d902      	bls.n	8001362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	f000 fb3c 	bl	80019da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001362:	4b96      	ldr	r3, [pc, #600]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	2380      	movs	r3, #128	; 0x80
 8001368:	029b      	lsls	r3, r3, #10
 800136a:	4013      	ands	r3, r2
 800136c:	d0ef      	beq.n	800134e <HAL_RCC_OscConfig+0xe6>
 800136e:	e015      	b.n	800139c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fc10 	bl	8000b94 <HAL_GetTick>
 8001374:	0003      	movs	r3, r0
 8001376:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137a:	f7ff fc0b 	bl	8000b94 <HAL_GetTick>
 800137e:	0002      	movs	r2, r0
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b64      	cmp	r3, #100	; 0x64
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e326      	b.n	80019da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800138c:	4b8b      	ldr	r3, [pc, #556]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	029b      	lsls	r3, r3, #10
 8001394:	4013      	ands	r3, r2
 8001396:	d1f0      	bne.n	800137a <HAL_RCC_OscConfig+0x112>
 8001398:	e000      	b.n	800139c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2202      	movs	r2, #2
 80013a2:	4013      	ands	r3, r2
 80013a4:	d100      	bne.n	80013a8 <HAL_RCC_OscConfig+0x140>
 80013a6:	e08b      	b.n	80014c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	2b0c      	cmp	r3, #12
 80013b8:	d13e      	bne.n	8001438 <HAL_RCC_OscConfig+0x1d0>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d13b      	bne.n	8001438 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80013c0:	4b7e      	ldr	r3, [pc, #504]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2204      	movs	r2, #4
 80013c6:	4013      	ands	r3, r2
 80013c8:	d004      	beq.n	80013d4 <HAL_RCC_OscConfig+0x16c>
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e302      	b.n	80019da <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b79      	ldr	r3, [pc, #484]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	4a7b      	ldr	r2, [pc, #492]	; (80015c8 <HAL_RCC_OscConfig+0x360>)
 80013da:	4013      	ands	r3, r2
 80013dc:	0019      	movs	r1, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	021a      	lsls	r2, r3, #8
 80013e4:	4b75      	ldr	r3, [pc, #468]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 80013e6:	430a      	orrs	r2, r1
 80013e8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013ea:	4b74      	ldr	r3, [pc, #464]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2209      	movs	r2, #9
 80013f0:	4393      	bics	r3, r2
 80013f2:	0019      	movs	r1, r3
 80013f4:	4b71      	ldr	r3, [pc, #452]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013fc:	f000 fc40 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001400:	0001      	movs	r1, r0
 8001402:	4b6e      	ldr	r3, [pc, #440]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	091b      	lsrs	r3, r3, #4
 8001408:	220f      	movs	r2, #15
 800140a:	4013      	ands	r3, r2
 800140c:	4a6f      	ldr	r2, [pc, #444]	; (80015cc <HAL_RCC_OscConfig+0x364>)
 800140e:	5cd3      	ldrb	r3, [r2, r3]
 8001410:	000a      	movs	r2, r1
 8001412:	40da      	lsrs	r2, r3
 8001414:	4b6e      	ldr	r3, [pc, #440]	; (80015d0 <HAL_RCC_OscConfig+0x368>)
 8001416:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001418:	4b6e      	ldr	r3, [pc, #440]	; (80015d4 <HAL_RCC_OscConfig+0x36c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2513      	movs	r5, #19
 800141e:	197c      	adds	r4, r7, r5
 8001420:	0018      	movs	r0, r3
 8001422:	f7ff fb71 	bl	8000b08 <HAL_InitTick>
 8001426:	0003      	movs	r3, r0
 8001428:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800142a:	197b      	adds	r3, r7, r5
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d046      	beq.n	80014c0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001432:	197b      	adds	r3, r7, r5
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	e2d0      	b.n	80019da <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d027      	beq.n	800148e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800143e:	4b5f      	ldr	r3, [pc, #380]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2209      	movs	r2, #9
 8001444:	4393      	bics	r3, r2
 8001446:	0019      	movs	r1, r3
 8001448:	4b5c      	ldr	r3, [pc, #368]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fba0 	bl	8000b94 <HAL_GetTick>
 8001454:	0003      	movs	r3, r0
 8001456:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145a:	f7ff fb9b 	bl	8000b94 <HAL_GetTick>
 800145e:	0002      	movs	r2, r0
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e2b6      	b.n	80019da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800146c:	4b53      	ldr	r3, [pc, #332]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2204      	movs	r2, #4
 8001472:	4013      	ands	r3, r2
 8001474:	d0f1      	beq.n	800145a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001476:	4b51      	ldr	r3, [pc, #324]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4a53      	ldr	r2, [pc, #332]	; (80015c8 <HAL_RCC_OscConfig+0x360>)
 800147c:	4013      	ands	r3, r2
 800147e:	0019      	movs	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	021a      	lsls	r2, r3, #8
 8001486:	4b4d      	ldr	r3, [pc, #308]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001488:	430a      	orrs	r2, r1
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	e018      	b.n	80014c0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148e:	4b4b      	ldr	r3, [pc, #300]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4b4a      	ldr	r3, [pc, #296]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001494:	2101      	movs	r1, #1
 8001496:	438a      	bics	r2, r1
 8001498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7ff fb7b 	bl	8000b94 <HAL_GetTick>
 800149e:	0003      	movs	r3, r0
 80014a0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a4:	f7ff fb76 	bl	8000b94 <HAL_GetTick>
 80014a8:	0002      	movs	r2, r0
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e291      	b.n	80019da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014b6:	4b41      	ldr	r3, [pc, #260]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2204      	movs	r2, #4
 80014bc:	4013      	ands	r3, r2
 80014be:	d1f1      	bne.n	80014a4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2210      	movs	r2, #16
 80014c6:	4013      	ands	r3, r2
 80014c8:	d100      	bne.n	80014cc <HAL_RCC_OscConfig+0x264>
 80014ca:	e0a1      	b.n	8001610 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014cc:	6a3b      	ldr	r3, [r7, #32]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d140      	bne.n	8001554 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014d2:	4b3a      	ldr	r3, [pc, #232]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4013      	ands	r3, r2
 80014dc:	d005      	beq.n	80014ea <HAL_RCC_OscConfig+0x282>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e277      	b.n	80019da <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ea:	4b34      	ldr	r3, [pc, #208]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	4a3a      	ldr	r2, [pc, #232]	; (80015d8 <HAL_RCC_OscConfig+0x370>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	0019      	movs	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f8:	4b30      	ldr	r3, [pc, #192]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 80014fa:	430a      	orrs	r2, r1
 80014fc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014fe:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	0a19      	lsrs	r1, r3, #8
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	061a      	lsls	r2, r3, #24
 800150c:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 800150e:	430a      	orrs	r2, r1
 8001510:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	0b5b      	lsrs	r3, r3, #13
 8001518:	3301      	adds	r3, #1
 800151a:	2280      	movs	r2, #128	; 0x80
 800151c:	0212      	lsls	r2, r2, #8
 800151e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001520:	4b26      	ldr	r3, [pc, #152]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	210f      	movs	r1, #15
 8001528:	400b      	ands	r3, r1
 800152a:	4928      	ldr	r1, [pc, #160]	; (80015cc <HAL_RCC_OscConfig+0x364>)
 800152c:	5ccb      	ldrb	r3, [r1, r3]
 800152e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001530:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <HAL_RCC_OscConfig+0x368>)
 8001532:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001534:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <HAL_RCC_OscConfig+0x36c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2513      	movs	r5, #19
 800153a:	197c      	adds	r4, r7, r5
 800153c:	0018      	movs	r0, r3
 800153e:	f7ff fae3 	bl	8000b08 <HAL_InitTick>
 8001542:	0003      	movs	r3, r0
 8001544:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001546:	197b      	adds	r3, r7, r5
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d060      	beq.n	8001610 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800154e:	197b      	adds	r3, r7, r5
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	e242      	b.n	80019da <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d03f      	beq.n	80015dc <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	0049      	lsls	r1, r1, #1
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156a:	f7ff fb13 	bl	8000b94 <HAL_GetTick>
 800156e:	0003      	movs	r3, r0
 8001570:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001574:	f7ff fb0e 	bl	8000b94 <HAL_GetTick>
 8001578:	0002      	movs	r2, r0
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e229      	b.n	80019da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4013      	ands	r3, r2
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_RCC_OscConfig+0x370>)
 8001598:	4013      	ands	r3, r2
 800159a:	0019      	movs	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 80015a2:	430a      	orrs	r2, r1
 80015a4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a6:	4b05      	ldr	r3, [pc, #20]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	0a19      	lsrs	r1, r3, #8
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	061a      	lsls	r2, r3, #24
 80015b4:	4b01      	ldr	r3, [pc, #4]	; (80015bc <HAL_RCC_OscConfig+0x354>)
 80015b6:	430a      	orrs	r2, r1
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	e029      	b.n	8001610 <HAL_RCC_OscConfig+0x3a8>
 80015bc:	40021000 	.word	0x40021000
 80015c0:	fffeffff 	.word	0xfffeffff
 80015c4:	fffbffff 	.word	0xfffbffff
 80015c8:	ffffe0ff 	.word	0xffffe0ff
 80015cc:	0800357c 	.word	0x0800357c
 80015d0:	20000000 	.word	0x20000000
 80015d4:	20000004 	.word	0x20000004
 80015d8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015dc:	4bbd      	ldr	r3, [pc, #756]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4bbc      	ldr	r3, [pc, #752]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 80015e2:	49bd      	ldr	r1, [pc, #756]	; (80018d8 <HAL_RCC_OscConfig+0x670>)
 80015e4:	400a      	ands	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fad4 	bl	8000b94 <HAL_GetTick>
 80015ec:	0003      	movs	r3, r0
 80015ee:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015f2:	f7ff facf 	bl	8000b94 <HAL_GetTick>
 80015f6:	0002      	movs	r2, r0
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e1ea      	b.n	80019da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001604:	4bb3      	ldr	r3, [pc, #716]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4013      	ands	r3, r2
 800160e:	d1f0      	bne.n	80015f2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2208      	movs	r2, #8
 8001616:	4013      	ands	r3, r2
 8001618:	d036      	beq.n	8001688 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d019      	beq.n	8001656 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001622:	4bac      	ldr	r3, [pc, #688]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001626:	4bab      	ldr	r3, [pc, #684]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001628:	2101      	movs	r1, #1
 800162a:	430a      	orrs	r2, r1
 800162c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162e:	f7ff fab1 	bl	8000b94 <HAL_GetTick>
 8001632:	0003      	movs	r3, r0
 8001634:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001638:	f7ff faac 	bl	8000b94 <HAL_GetTick>
 800163c:	0002      	movs	r2, r0
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e1c7      	b.n	80019da <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800164a:	4ba2      	ldr	r3, [pc, #648]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 800164c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800164e:	2202      	movs	r2, #2
 8001650:	4013      	ands	r3, r2
 8001652:	d0f1      	beq.n	8001638 <HAL_RCC_OscConfig+0x3d0>
 8001654:	e018      	b.n	8001688 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001656:	4b9f      	ldr	r3, [pc, #636]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001658:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800165a:	4b9e      	ldr	r3, [pc, #632]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 800165c:	2101      	movs	r1, #1
 800165e:	438a      	bics	r2, r1
 8001660:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff fa97 	bl	8000b94 <HAL_GetTick>
 8001666:	0003      	movs	r3, r0
 8001668:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166c:	f7ff fa92 	bl	8000b94 <HAL_GetTick>
 8001670:	0002      	movs	r2, r0
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e1ad      	b.n	80019da <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800167e:	4b95      	ldr	r3, [pc, #596]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001682:	2202      	movs	r2, #2
 8001684:	4013      	ands	r3, r2
 8001686:	d1f1      	bne.n	800166c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2204      	movs	r2, #4
 800168e:	4013      	ands	r3, r2
 8001690:	d100      	bne.n	8001694 <HAL_RCC_OscConfig+0x42c>
 8001692:	e0ae      	b.n	80017f2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001694:	2027      	movs	r0, #39	; 0x27
 8001696:	183b      	adds	r3, r7, r0
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169c:	4b8d      	ldr	r3, [pc, #564]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 800169e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	055b      	lsls	r3, r3, #21
 80016a4:	4013      	ands	r3, r2
 80016a6:	d109      	bne.n	80016bc <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a8:	4b8a      	ldr	r3, [pc, #552]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 80016aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016ac:	4b89      	ldr	r3, [pc, #548]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	0549      	lsls	r1, r1, #21
 80016b2:	430a      	orrs	r2, r1
 80016b4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80016b6:	183b      	adds	r3, r7, r0
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	4b87      	ldr	r3, [pc, #540]	; (80018dc <HAL_RCC_OscConfig+0x674>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4013      	ands	r3, r2
 80016c6:	d11a      	bne.n	80016fe <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c8:	4b84      	ldr	r3, [pc, #528]	; (80018dc <HAL_RCC_OscConfig+0x674>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b83      	ldr	r3, [pc, #524]	; (80018dc <HAL_RCC_OscConfig+0x674>)
 80016ce:	2180      	movs	r1, #128	; 0x80
 80016d0:	0049      	lsls	r1, r1, #1
 80016d2:	430a      	orrs	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fa5d 	bl	8000b94 <HAL_GetTick>
 80016da:	0003      	movs	r3, r0
 80016dc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e0:	f7ff fa58 	bl	8000b94 <HAL_GetTick>
 80016e4:	0002      	movs	r2, r0
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e173      	b.n	80019da <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f2:	4b7a      	ldr	r3, [pc, #488]	; (80018dc <HAL_RCC_OscConfig+0x674>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4013      	ands	r3, r2
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	429a      	cmp	r2, r3
 8001708:	d107      	bne.n	800171a <HAL_RCC_OscConfig+0x4b2>
 800170a:	4b72      	ldr	r3, [pc, #456]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 800170c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800170e:	4b71      	ldr	r3, [pc, #452]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	0049      	lsls	r1, r1, #1
 8001714:	430a      	orrs	r2, r1
 8001716:	651a      	str	r2, [r3, #80]	; 0x50
 8001718:	e031      	b.n	800177e <HAL_RCC_OscConfig+0x516>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0x4d4>
 8001722:	4b6c      	ldr	r3, [pc, #432]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001724:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001726:	4b6b      	ldr	r3, [pc, #428]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001728:	496b      	ldr	r1, [pc, #428]	; (80018d8 <HAL_RCC_OscConfig+0x670>)
 800172a:	400a      	ands	r2, r1
 800172c:	651a      	str	r2, [r3, #80]	; 0x50
 800172e:	4b69      	ldr	r3, [pc, #420]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001730:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001732:	4b68      	ldr	r3, [pc, #416]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001734:	496a      	ldr	r1, [pc, #424]	; (80018e0 <HAL_RCC_OscConfig+0x678>)
 8001736:	400a      	ands	r2, r1
 8001738:	651a      	str	r2, [r3, #80]	; 0x50
 800173a:	e020      	b.n	800177e <HAL_RCC_OscConfig+0x516>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	23a0      	movs	r3, #160	; 0xa0
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	429a      	cmp	r2, r3
 8001746:	d10e      	bne.n	8001766 <HAL_RCC_OscConfig+0x4fe>
 8001748:	4b62      	ldr	r3, [pc, #392]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 800174a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800174c:	4b61      	ldr	r3, [pc, #388]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 800174e:	2180      	movs	r1, #128	; 0x80
 8001750:	00c9      	lsls	r1, r1, #3
 8001752:	430a      	orrs	r2, r1
 8001754:	651a      	str	r2, [r3, #80]	; 0x50
 8001756:	4b5f      	ldr	r3, [pc, #380]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001758:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800175a:	4b5e      	ldr	r3, [pc, #376]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	0049      	lsls	r1, r1, #1
 8001760:	430a      	orrs	r2, r1
 8001762:	651a      	str	r2, [r3, #80]	; 0x50
 8001764:	e00b      	b.n	800177e <HAL_RCC_OscConfig+0x516>
 8001766:	4b5b      	ldr	r3, [pc, #364]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001768:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800176a:	4b5a      	ldr	r3, [pc, #360]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 800176c:	495a      	ldr	r1, [pc, #360]	; (80018d8 <HAL_RCC_OscConfig+0x670>)
 800176e:	400a      	ands	r2, r1
 8001770:	651a      	str	r2, [r3, #80]	; 0x50
 8001772:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001774:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001776:	4b57      	ldr	r3, [pc, #348]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001778:	4959      	ldr	r1, [pc, #356]	; (80018e0 <HAL_RCC_OscConfig+0x678>)
 800177a:	400a      	ands	r2, r1
 800177c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d015      	beq.n	80017b2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001786:	f7ff fa05 	bl	8000b94 <HAL_GetTick>
 800178a:	0003      	movs	r3, r0
 800178c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800178e:	e009      	b.n	80017a4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7ff fa00 	bl	8000b94 <HAL_GetTick>
 8001794:	0002      	movs	r2, r0
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e11a      	b.n	80019da <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017a4:	4b4b      	ldr	r3, [pc, #300]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 80017a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4013      	ands	r3, r2
 80017ae:	d0ef      	beq.n	8001790 <HAL_RCC_OscConfig+0x528>
 80017b0:	e014      	b.n	80017dc <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff f9ef 	bl	8000b94 <HAL_GetTick>
 80017b6:	0003      	movs	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017ba:	e009      	b.n	80017d0 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017bc:	f7ff f9ea 	bl	8000b94 <HAL_GetTick>
 80017c0:	0002      	movs	r2, r0
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	4a47      	ldr	r2, [pc, #284]	; (80018e4 <HAL_RCC_OscConfig+0x67c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e104      	b.n	80019da <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017d0:	4b40      	ldr	r3, [pc, #256]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 80017d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4013      	ands	r3, r2
 80017da:	d1ef      	bne.n	80017bc <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017dc:	2327      	movs	r3, #39	; 0x27
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d105      	bne.n	80017f2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e6:	4b3b      	ldr	r3, [pc, #236]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 80017e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017ea:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 80017ec:	493e      	ldr	r1, [pc, #248]	; (80018e8 <HAL_RCC_OscConfig+0x680>)
 80017ee:	400a      	ands	r2, r1
 80017f0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2220      	movs	r2, #32
 80017f8:	4013      	ands	r3, r2
 80017fa:	d049      	beq.n	8001890 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d026      	beq.n	8001852 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001804:	4b33      	ldr	r3, [pc, #204]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 800180a:	2101      	movs	r1, #1
 800180c:	430a      	orrs	r2, r1
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	4b30      	ldr	r3, [pc, #192]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001814:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001816:	2101      	movs	r1, #1
 8001818:	430a      	orrs	r2, r1
 800181a:	635a      	str	r2, [r3, #52]	; 0x34
 800181c:	4b33      	ldr	r3, [pc, #204]	; (80018ec <HAL_RCC_OscConfig+0x684>)
 800181e:	6a1a      	ldr	r2, [r3, #32]
 8001820:	4b32      	ldr	r3, [pc, #200]	; (80018ec <HAL_RCC_OscConfig+0x684>)
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	0189      	lsls	r1, r1, #6
 8001826:	430a      	orrs	r2, r1
 8001828:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff f9b3 	bl	8000b94 <HAL_GetTick>
 800182e:	0003      	movs	r3, r0
 8001830:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001834:	f7ff f9ae 	bl	8000b94 <HAL_GetTick>
 8001838:	0002      	movs	r2, r0
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e0c9      	b.n	80019da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2202      	movs	r2, #2
 800184c:	4013      	ands	r3, r2
 800184e:	d0f1      	beq.n	8001834 <HAL_RCC_OscConfig+0x5cc>
 8001850:	e01e      	b.n	8001890 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001858:	2101      	movs	r1, #1
 800185a:	438a      	bics	r2, r1
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	4b23      	ldr	r3, [pc, #140]	; (80018ec <HAL_RCC_OscConfig+0x684>)
 8001860:	6a1a      	ldr	r2, [r3, #32]
 8001862:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_RCC_OscConfig+0x684>)
 8001864:	4922      	ldr	r1, [pc, #136]	; (80018f0 <HAL_RCC_OscConfig+0x688>)
 8001866:	400a      	ands	r2, r1
 8001868:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff f993 	bl	8000b94 <HAL_GetTick>
 800186e:	0003      	movs	r3, r0
 8001870:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001874:	f7ff f98e 	bl	8000b94 <HAL_GetTick>
 8001878:	0002      	movs	r2, r0
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e0a9      	b.n	80019da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2202      	movs	r2, #2
 800188c:	4013      	ands	r3, r2
 800188e:	d1f1      	bne.n	8001874 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	2b00      	cmp	r3, #0
 8001896:	d100      	bne.n	800189a <HAL_RCC_OscConfig+0x632>
 8001898:	e09e      	b.n	80019d8 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	2b0c      	cmp	r3, #12
 800189e:	d100      	bne.n	80018a2 <HAL_RCC_OscConfig+0x63a>
 80018a0:	e077      	b.n	8001992 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d158      	bne.n	800195c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_RCC_OscConfig+0x66c>)
 80018b0:	4910      	ldr	r1, [pc, #64]	; (80018f4 <HAL_RCC_OscConfig+0x68c>)
 80018b2:	400a      	ands	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff f96d 	bl	8000b94 <HAL_GetTick>
 80018ba:	0003      	movs	r3, r0
 80018bc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018be:	e01b      	b.n	80018f8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff f968 	bl	8000b94 <HAL_GetTick>
 80018c4:	0002      	movs	r2, r0
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d914      	bls.n	80018f8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e083      	b.n	80019da <HAL_RCC_OscConfig+0x772>
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	40021000 	.word	0x40021000
 80018d8:	fffffeff 	.word	0xfffffeff
 80018dc:	40007000 	.word	0x40007000
 80018e0:	fffffbff 	.word	0xfffffbff
 80018e4:	00001388 	.word	0x00001388
 80018e8:	efffffff 	.word	0xefffffff
 80018ec:	40010000 	.word	0x40010000
 80018f0:	ffffdfff 	.word	0xffffdfff
 80018f4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018f8:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <HAL_RCC_OscConfig+0x77c>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	049b      	lsls	r3, r3, #18
 8001900:	4013      	ands	r3, r2
 8001902:	d1dd      	bne.n	80018c0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001904:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <HAL_RCC_OscConfig+0x77c>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4a37      	ldr	r2, [pc, #220]	; (80019e8 <HAL_RCC_OscConfig+0x780>)
 800190a:	4013      	ands	r3, r2
 800190c:	0019      	movs	r1, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191c:	431a      	orrs	r2, r3
 800191e:	4b31      	ldr	r3, [pc, #196]	; (80019e4 <HAL_RCC_OscConfig+0x77c>)
 8001920:	430a      	orrs	r2, r1
 8001922:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001924:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <HAL_RCC_OscConfig+0x77c>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b2e      	ldr	r3, [pc, #184]	; (80019e4 <HAL_RCC_OscConfig+0x77c>)
 800192a:	2180      	movs	r1, #128	; 0x80
 800192c:	0449      	lsls	r1, r1, #17
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001932:	f7ff f92f 	bl	8000b94 <HAL_GetTick>
 8001936:	0003      	movs	r3, r0
 8001938:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff f92a 	bl	8000b94 <HAL_GetTick>
 8001940:	0002      	movs	r2, r0
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e045      	b.n	80019da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_RCC_OscConfig+0x77c>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	2380      	movs	r3, #128	; 0x80
 8001954:	049b      	lsls	r3, r3, #18
 8001956:	4013      	ands	r3, r2
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x6d4>
 800195a:	e03d      	b.n	80019d8 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195c:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <HAL_RCC_OscConfig+0x77c>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_RCC_OscConfig+0x77c>)
 8001962:	4922      	ldr	r1, [pc, #136]	; (80019ec <HAL_RCC_OscConfig+0x784>)
 8001964:	400a      	ands	r2, r1
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff f914 	bl	8000b94 <HAL_GetTick>
 800196c:	0003      	movs	r3, r0
 800196e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001972:	f7ff f90f 	bl	8000b94 <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e02a      	b.n	80019da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <HAL_RCC_OscConfig+0x77c>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	049b      	lsls	r3, r3, #18
 800198c:	4013      	ands	r3, r2
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x70a>
 8001990:	e022      	b.n	80019d8 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e01d      	b.n	80019da <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <HAL_RCC_OscConfig+0x77c>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	025b      	lsls	r3, r3, #9
 80019aa:	401a      	ands	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d10f      	bne.n	80019d4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	23f0      	movs	r3, #240	; 0xf0
 80019b8:	039b      	lsls	r3, r3, #14
 80019ba:	401a      	ands	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d107      	bne.n	80019d4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	23c0      	movs	r3, #192	; 0xc0
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	401a      	ands	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b00a      	add	sp, #40	; 0x28
 80019e0:	bdb0      	pop	{r4, r5, r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	40021000 	.word	0x40021000
 80019e8:	ff02ffff 	.word	0xff02ffff
 80019ec:	feffffff 	.word	0xfeffffff

080019f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f0:	b5b0      	push	{r4, r5, r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e128      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a04:	4b96      	ldr	r3, [pc, #600]	; (8001c60 <HAL_RCC_ClockConfig+0x270>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d91e      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b93      	ldr	r3, [pc, #588]	; (8001c60 <HAL_RCC_ClockConfig+0x270>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2201      	movs	r2, #1
 8001a18:	4393      	bics	r3, r2
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	4b90      	ldr	r3, [pc, #576]	; (8001c60 <HAL_RCC_ClockConfig+0x270>)
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a24:	f7ff f8b6 	bl	8000b94 <HAL_GetTick>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2c:	e009      	b.n	8001a42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2e:	f7ff f8b1 	bl	8000b94 <HAL_GetTick>
 8001a32:	0002      	movs	r2, r0
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	4a8a      	ldr	r2, [pc, #552]	; (8001c64 <HAL_RCC_ClockConfig+0x274>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e109      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b87      	ldr	r3, [pc, #540]	; (8001c60 <HAL_RCC_ClockConfig+0x270>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	4013      	ands	r3, r2
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d1ee      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2202      	movs	r2, #2
 8001a56:	4013      	ands	r3, r2
 8001a58:	d009      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a5a:	4b83      	ldr	r3, [pc, #524]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	22f0      	movs	r2, #240	; 0xf0
 8001a60:	4393      	bics	r3, r2
 8001a62:	0019      	movs	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	4b7f      	ldr	r3, [pc, #508]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2201      	movs	r2, #1
 8001a74:	4013      	ands	r3, r2
 8001a76:	d100      	bne.n	8001a7a <HAL_RCC_ClockConfig+0x8a>
 8001a78:	e089      	b.n	8001b8e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a82:	4b79      	ldr	r3, [pc, #484]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	029b      	lsls	r3, r3, #10
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d120      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0e1      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a9a:	4b73      	ldr	r3, [pc, #460]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	049b      	lsls	r3, r3, #18
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d114      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0d5      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d106      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ab2:	4b6d      	ldr	r3, [pc, #436]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d109      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0ca      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ac0:	4b69      	ldr	r3, [pc, #420]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0c2      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad0:	4b65      	ldr	r3, [pc, #404]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	4393      	bics	r3, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	4b62      	ldr	r3, [pc, #392]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae4:	f7ff f856 	bl	8000b94 <HAL_GetTick>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d111      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af4:	e009      	b.n	8001b0a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af6:	f7ff f84d 	bl	8000b94 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	4a58      	ldr	r2, [pc, #352]	; (8001c64 <HAL_RCC_ClockConfig+0x274>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e0a5      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b0a:	4b57      	ldr	r3, [pc, #348]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	220c      	movs	r2, #12
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d1ef      	bne.n	8001af6 <HAL_RCC_ClockConfig+0x106>
 8001b16:	e03a      	b.n	8001b8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d111      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b20:	e009      	b.n	8001b36 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b22:	f7ff f837 	bl	8000b94 <HAL_GetTick>
 8001b26:	0002      	movs	r2, r0
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	4a4d      	ldr	r2, [pc, #308]	; (8001c64 <HAL_RCC_ClockConfig+0x274>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e08f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b36:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	d1ef      	bne.n	8001b22 <HAL_RCC_ClockConfig+0x132>
 8001b42:	e024      	b.n	8001b8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d11b      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b4c:	e009      	b.n	8001b62 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4e:	f7ff f821 	bl	8000b94 <HAL_GetTick>
 8001b52:	0002      	movs	r2, r0
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	4a42      	ldr	r2, [pc, #264]	; (8001c64 <HAL_RCC_ClockConfig+0x274>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e079      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b62:	4b41      	ldr	r3, [pc, #260]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	220c      	movs	r2, #12
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d1ef      	bne.n	8001b4e <HAL_RCC_ClockConfig+0x15e>
 8001b6e:	e00e      	b.n	8001b8e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b70:	f7ff f810 	bl	8000b94 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	4a3a      	ldr	r2, [pc, #232]	; (8001c64 <HAL_RCC_ClockConfig+0x274>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e068      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b84:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	220c      	movs	r2, #12
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <HAL_RCC_ClockConfig+0x270>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2201      	movs	r2, #1
 8001b94:	4013      	ands	r3, r2
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d21e      	bcs.n	8001bda <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9c:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_RCC_ClockConfig+0x270>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4393      	bics	r3, r2
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_RCC_ClockConfig+0x270>)
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bae:	f7fe fff1 	bl	8000b94 <HAL_GetTick>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	e009      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb8:	f7fe ffec 	bl	8000b94 <HAL_GetTick>
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	4a28      	ldr	r2, [pc, #160]	; (8001c64 <HAL_RCC_ClockConfig+0x274>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e044      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bcc:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <HAL_RCC_ClockConfig+0x270>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d1ee      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2204      	movs	r2, #4
 8001be0:	4013      	ands	r3, r2
 8001be2:	d009      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be4:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	4a20      	ldr	r2, [pc, #128]	; (8001c6c <HAL_RCC_ClockConfig+0x27c>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	0019      	movs	r1, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d00a      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c02:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	4a1a      	ldr	r2, [pc, #104]	; (8001c70 <HAL_RCC_ClockConfig+0x280>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	00da      	lsls	r2, r3, #3
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001c14:	430a      	orrs	r2, r1
 8001c16:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c18:	f000 f832 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001c1c:	0001      	movs	r1, r0
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_RCC_ClockConfig+0x278>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	220f      	movs	r2, #15
 8001c26:	4013      	ands	r3, r2
 8001c28:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <HAL_RCC_ClockConfig+0x284>)
 8001c2a:	5cd3      	ldrb	r3, [r2, r3]
 8001c2c:	000a      	movs	r2, r1
 8001c2e:	40da      	lsrs	r2, r3
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_RCC_ClockConfig+0x288>)
 8001c32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_RCC_ClockConfig+0x28c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	250b      	movs	r5, #11
 8001c3a:	197c      	adds	r4, r7, r5
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7fe ff63 	bl	8000b08 <HAL_InitTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001c46:	197b      	adds	r3, r7, r5
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001c4e:	197b      	adds	r3, r7, r5
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	e000      	b.n	8001c56 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	0018      	movs	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b004      	add	sp, #16
 8001c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	40022000 	.word	0x40022000
 8001c64:	00001388 	.word	0x00001388
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	fffff8ff 	.word	0xfffff8ff
 8001c70:	ffffc7ff 	.word	0xffffc7ff
 8001c74:	0800357c 	.word	0x0800357c
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c80:	b5b0      	push	{r4, r5, r7, lr}
 8001c82:	b08e      	sub	sp, #56	; 0x38
 8001c84:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c86:	4b4c      	ldr	r3, [pc, #304]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c8e:	230c      	movs	r3, #12
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	d014      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001c96:	d900      	bls.n	8001c9a <HAL_RCC_GetSysClockFreq+0x1a>
 8001c98:	e07b      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x112>
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d002      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x24>
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d00b      	beq.n	8001cba <HAL_RCC_GetSysClockFreq+0x3a>
 8001ca2:	e076      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ca4:	4b44      	ldr	r3, [pc, #272]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2210      	movs	r2, #16
 8001caa:	4013      	ands	r3, r2
 8001cac:	d002      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001cae:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x13c>)
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001cb2:	e07c      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001cb4:	4b42      	ldr	r3, [pc, #264]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001cb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cb8:	e079      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cba:	4b42      	ldr	r3, [pc, #264]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001cbc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cbe:	e076      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc2:	0c9a      	lsrs	r2, r3, #18
 8001cc4:	230f      	movs	r3, #15
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x148>)
 8001cca:	5c9b      	ldrb	r3, [r3, r2]
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd0:	0d9a      	lsrs	r2, r3, #22
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cda:	4b37      	ldr	r3, [pc, #220]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	025b      	lsls	r3, r3, #9
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d01a      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	4a35      	ldr	r2, [pc, #212]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x144>)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	69b8      	ldr	r0, [r7, #24]
 8001cf4:	69f9      	ldr	r1, [r7, #28]
 8001cf6:	f7fe fabb 	bl	8000270 <__aeabi_lmul>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	000b      	movs	r3, r1
 8001cfe:	0010      	movs	r0, r2
 8001d00:	0019      	movs	r1, r3
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f7fe fa8f 	bl	8000230 <__aeabi_uldivmod>
 8001d12:	0002      	movs	r2, r0
 8001d14:	000b      	movs	r3, r1
 8001d16:	0013      	movs	r3, r2
 8001d18:	637b      	str	r3, [r7, #52]	; 0x34
 8001d1a:	e037      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d1c:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2210      	movs	r2, #16
 8001d22:	4013      	ands	r3, r2
 8001d24:	d01a      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d30:	2300      	movs	r3, #0
 8001d32:	68b8      	ldr	r0, [r7, #8]
 8001d34:	68f9      	ldr	r1, [r7, #12]
 8001d36:	f7fe fa9b 	bl	8000270 <__aeabi_lmul>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	000b      	movs	r3, r1
 8001d3e:	0010      	movs	r0, r2
 8001d40:	0019      	movs	r1, r3
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f7fe fa6f 	bl	8000230 <__aeabi_uldivmod>
 8001d52:	0002      	movs	r2, r0
 8001d54:	000b      	movs	r3, r1
 8001d56:	0013      	movs	r3, r2
 8001d58:	637b      	str	r3, [r7, #52]	; 0x34
 8001d5a:	e017      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5e:	0018      	movs	r0, r3
 8001d60:	2300      	movs	r3, #0
 8001d62:	0019      	movs	r1, r3
 8001d64:	4a16      	ldr	r2, [pc, #88]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d66:	2300      	movs	r3, #0
 8001d68:	f7fe fa82 	bl	8000270 <__aeabi_lmul>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	000b      	movs	r3, r1
 8001d70:	0010      	movs	r0, r2
 8001d72:	0019      	movs	r1, r3
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	001c      	movs	r4, r3
 8001d78:	2300      	movs	r3, #0
 8001d7a:	001d      	movs	r5, r3
 8001d7c:	0022      	movs	r2, r4
 8001d7e:	002b      	movs	r3, r5
 8001d80:	f7fe fa56 	bl	8000230 <__aeabi_uldivmod>
 8001d84:	0002      	movs	r2, r0
 8001d86:	000b      	movs	r3, r1
 8001d88:	0013      	movs	r3, r2
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d90:	e00d      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	0b5b      	lsrs	r3, r3, #13
 8001d98:	2207      	movs	r2, #7
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	3301      	adds	r3, #1
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	0212      	lsls	r2, r2, #8
 8001da6:	409a      	lsls	r2, r3
 8001da8:	0013      	movs	r3, r2
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dac:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b00e      	add	sp, #56	; 0x38
 8001db6:	bdb0      	pop	{r4, r5, r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	003d0900 	.word	0x003d0900
 8001dc0:	00f42400 	.word	0x00f42400
 8001dc4:	007a1200 	.word	0x007a1200
 8001dc8:	08003594 	.word	0x08003594

08001dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <HAL_RCC_GetHCLKFreq+0x10>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	20000000 	.word	0x20000000

08001de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001de4:	f7ff fff2 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 8001de8:	0001      	movs	r1, r0
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	2207      	movs	r2, #7
 8001df2:	4013      	ands	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001df6:	5cd3      	ldrb	r3, [r2, r3]
 8001df8:	40d9      	lsrs	r1, r3
 8001dfa:	000b      	movs	r3, r1
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	40021000 	.word	0x40021000
 8001e08:	0800358c 	.word	0x0800358c

08001e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e10:	f7ff ffdc 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 8001e14:	0001      	movs	r1, r0
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	0adb      	lsrs	r3, r3, #11
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	4013      	ands	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e22:	5cd3      	ldrb	r3, [r2, r3]
 8001e24:	40d9      	lsrs	r1, r3
 8001e26:	000b      	movs	r3, r1
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	40021000 	.word	0x40021000
 8001e34:	0800358c 	.word	0x0800358c

08001e38 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001e40:	2317      	movs	r3, #23
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d106      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d100      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001e5e:	e104      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e60:	4bb1      	ldr	r3, [pc, #708]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	055b      	lsls	r3, r3, #21
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d10a      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	4bae      	ldr	r3, [pc, #696]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e70:	4bad      	ldr	r3, [pc, #692]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e72:	2180      	movs	r1, #128	; 0x80
 8001e74:	0549      	lsls	r1, r1, #21
 8001e76:	430a      	orrs	r2, r1
 8001e78:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e7a:	2317      	movs	r3, #23
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e82:	4baa      	ldr	r3, [pc, #680]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d11a      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8e:	4ba7      	ldr	r3, [pc, #668]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4ba6      	ldr	r3, [pc, #664]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	0049      	lsls	r1, r1, #1
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9c:	f7fe fe7a 	bl	8000b94 <HAL_GetTick>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea6:	f7fe fe75 	bl	8000b94 <HAL_GetTick>
 8001eaa:	0002      	movs	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b64      	cmp	r3, #100	; 0x64
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e133      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	4b9c      	ldr	r3, [pc, #624]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001ec4:	4b98      	ldr	r3, [pc, #608]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	23c0      	movs	r3, #192	; 0xc0
 8001eca:	039b      	lsls	r3, r3, #14
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	23c0      	movs	r3, #192	; 0xc0
 8001ed6:	039b      	lsls	r3, r3, #14
 8001ed8:	4013      	ands	r3, r2
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	23c0      	movs	r3, #192	; 0xc0
 8001ee6:	039b      	lsls	r3, r3, #14
 8001ee8:	4013      	ands	r3, r2
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d013      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	23c0      	movs	r3, #192	; 0xc0
 8001ef6:	029b      	lsls	r3, r3, #10
 8001ef8:	401a      	ands	r2, r3
 8001efa:	23c0      	movs	r3, #192	; 0xc0
 8001efc:	029b      	lsls	r3, r3, #10
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d10a      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001f02:	4b89      	ldr	r3, [pc, #548]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	029b      	lsls	r3, r3, #10
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	029b      	lsls	r3, r3, #10
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d101      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e103      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001f18:	4b83      	ldr	r3, [pc, #524]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f1c:	23c0      	movs	r3, #192	; 0xc0
 8001f1e:	029b      	lsls	r3, r3, #10
 8001f20:	4013      	ands	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d049      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	23c0      	movs	r3, #192	; 0xc0
 8001f30:	029b      	lsls	r3, r3, #10
 8001f32:	4013      	ands	r3, r2
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d004      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	4013      	ands	r3, r2
 8001f42:	d10d      	bne.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	23c0      	movs	r3, #192	; 0xc0
 8001f4a:	029b      	lsls	r3, r3, #10
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d034      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d02e      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001f60:	4b71      	ldr	r3, [pc, #452]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f64:	4a72      	ldr	r2, [pc, #456]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f6a:	4b6f      	ldr	r3, [pc, #444]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f6e:	4b6e      	ldr	r3, [pc, #440]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f70:	2180      	movs	r1, #128	; 0x80
 8001f72:	0309      	lsls	r1, r1, #12
 8001f74:	430a      	orrs	r2, r1
 8001f76:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f78:	4b6b      	ldr	r3, [pc, #428]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f7c:	4b6a      	ldr	r3, [pc, #424]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f7e:	496d      	ldr	r1, [pc, #436]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001f80:	400a      	ands	r2, r1
 8001f82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001f84:	4b68      	ldr	r3, [pc, #416]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	d014      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7fe fdfe 	bl	8000b94 <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f9c:	e009      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7fe fdf9 	bl	8000b94 <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	4a63      	ldr	r2, [pc, #396]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e0b6      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fb2:	4b5d      	ldr	r3, [pc, #372]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d0ef      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d01f      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	23c0      	movs	r3, #192	; 0xc0
 8001fd0:	029b      	lsls	r3, r3, #10
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	23c0      	movs	r3, #192	; 0xc0
 8001fd6:	029b      	lsls	r3, r3, #10
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d10c      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001fdc:	4b52      	ldr	r3, [pc, #328]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a56      	ldr	r2, [pc, #344]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	23c0      	movs	r3, #192	; 0xc0
 8001fec:	039b      	lsls	r3, r3, #14
 8001fee:	401a      	ands	r2, r3
 8001ff0:	4b4d      	ldr	r3, [pc, #308]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	4b4c      	ldr	r3, [pc, #304]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ff8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	23c0      	movs	r3, #192	; 0xc0
 8002000:	029b      	lsls	r3, r3, #10
 8002002:	401a      	ands	r2, r3
 8002004:	4b48      	ldr	r3, [pc, #288]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002006:	430a      	orrs	r2, r1
 8002008:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2220      	movs	r2, #32
 8002010:	4013      	ands	r3, r2
 8002012:	d01f      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	23c0      	movs	r3, #192	; 0xc0
 800201a:	029b      	lsls	r3, r3, #10
 800201c:	401a      	ands	r2, r3
 800201e:	23c0      	movs	r3, #192	; 0xc0
 8002020:	029b      	lsls	r3, r3, #10
 8002022:	429a      	cmp	r2, r3
 8002024:	d10c      	bne.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002026:	4b40      	ldr	r3, [pc, #256]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a44      	ldr	r2, [pc, #272]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800202c:	4013      	ands	r3, r2
 800202e:	0019      	movs	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	23c0      	movs	r3, #192	; 0xc0
 8002036:	039b      	lsls	r3, r3, #14
 8002038:	401a      	ands	r2, r3
 800203a:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	4b39      	ldr	r3, [pc, #228]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002042:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	23c0      	movs	r3, #192	; 0xc0
 800204a:	029b      	lsls	r3, r3, #10
 800204c:	401a      	ands	r2, r3
 800204e:	4b36      	ldr	r3, [pc, #216]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002050:	430a      	orrs	r2, r1
 8002052:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002054:	2317      	movs	r3, #23
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d105      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205e:	4b32      	ldr	r3, [pc, #200]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002062:	4b31      	ldr	r3, [pc, #196]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002064:	4936      	ldr	r1, [pc, #216]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002066:	400a      	ands	r2, r1
 8002068:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2201      	movs	r2, #1
 8002070:	4013      	ands	r3, r2
 8002072:	d009      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002074:	4b2c      	ldr	r3, [pc, #176]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002078:	2203      	movs	r2, #3
 800207a:	4393      	bics	r3, r2
 800207c:	0019      	movs	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	4b29      	ldr	r3, [pc, #164]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002084:	430a      	orrs	r2, r1
 8002086:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2202      	movs	r2, #2
 800208e:	4013      	ands	r3, r2
 8002090:	d009      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002092:	4b25      	ldr	r3, [pc, #148]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	220c      	movs	r2, #12
 8002098:	4393      	bics	r3, r2
 800209a:	0019      	movs	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020a2:	430a      	orrs	r2, r1
 80020a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2204      	movs	r2, #4
 80020ac:	4013      	ands	r3, r2
 80020ae:	d009      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b4:	4a23      	ldr	r2, [pc, #140]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020c0:	430a      	orrs	r2, r1
 80020c2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2208      	movs	r2, #8
 80020ca:	4013      	ands	r3, r2
 80020cc:	d009      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020de:	430a      	orrs	r2, r1
 80020e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2240      	movs	r2, #64	; 0x40
 80020e8:	4013      	ands	r3, r2
 80020ea:	d009      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	4a16      	ldr	r2, [pc, #88]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1a      	ldr	r2, [r3, #32]
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020fc:	430a      	orrs	r2, r1
 80020fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2280      	movs	r2, #128	; 0x80
 8002106:	4013      	ands	r3, r2
 8002108:	d009      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210e:	4a10      	ldr	r2, [pc, #64]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002110:	4013      	ands	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69da      	ldr	r2, [r3, #28]
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800211a:	430a      	orrs	r2, r1
 800211c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	b006      	add	sp, #24
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40021000 	.word	0x40021000
 800212c:	40007000 	.word	0x40007000
 8002130:	fffcffff 	.word	0xfffcffff
 8002134:	fff7ffff 	.word	0xfff7ffff
 8002138:	00001388 	.word	0x00001388
 800213c:	ffcfffff 	.word	0xffcfffff
 8002140:	efffffff 	.word	0xefffffff
 8002144:	fffff3ff 	.word	0xfffff3ff
 8002148:	ffffcfff 	.word	0xffffcfff
 800214c:	fbffffff 	.word	0xfbffffff
 8002150:	fff3ffff 	.word	0xfff3ffff

08002154 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002154:	b5b0      	push	{r4, r5, r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800215c:	230f      	movs	r3, #15
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e088      	b.n	8002280 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2221      	movs	r2, #33	; 0x21
 8002172:	5c9b      	ldrb	r3, [r3, r2]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d107      	bne.n	800218a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2220      	movs	r2, #32
 800217e:	2100      	movs	r1, #0
 8002180:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	0018      	movs	r0, r3
 8002186:	f7fe fbdf 	bl	8000948 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2221      	movs	r2, #33	; 0x21
 800218e:	2102      	movs	r1, #2
 8002190:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2210      	movs	r2, #16
 800219a:	4013      	ands	r3, r2
 800219c:	2b10      	cmp	r3, #16
 800219e:	d05f      	beq.n	8002260 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	22ca      	movs	r2, #202	; 0xca
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2253      	movs	r2, #83	; 0x53
 80021ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80021b0:	250f      	movs	r5, #15
 80021b2:	197c      	adds	r4, r7, r5
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	0018      	movs	r0, r3
 80021b8:	f000 f9ce 	bl	8002558 <RTC_EnterInitMode>
 80021bc:	0003      	movs	r3, r0
 80021be:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80021c0:	0028      	movs	r0, r5
 80021c2:	183b      	adds	r3, r7, r0
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d12c      	bne.n	8002224 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	492c      	ldr	r1, [pc, #176]	; (8002288 <HAL_RTC_Init+0x134>)
 80021d6:	400a      	ands	r2, r1
 80021d8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6899      	ldr	r1, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68d2      	ldr	r2, [r2, #12]
 8002200:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6919      	ldr	r1, [r3, #16]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	041a      	lsls	r2, r3, #16
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002216:	183c      	adds	r4, r7, r0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	0018      	movs	r0, r3
 800221c:	f000 f9e0 	bl	80025e0 <RTC_ExitInitMode>
 8002220:	0003      	movs	r3, r0
 8002222:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002224:	230f      	movs	r3, #15
 8002226:	18fb      	adds	r3, r7, r3
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d113      	bne.n	8002256 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2103      	movs	r1, #3
 800223a:	438a      	bics	r2, r1
 800223c:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69da      	ldr	r2, [r3, #28]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	22ff      	movs	r2, #255	; 0xff
 800225c:	625a      	str	r2, [r3, #36]	; 0x24
 800225e:	e003      	b.n	8002268 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002260:	230f      	movs	r3, #15
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002268:	230f      	movs	r3, #15
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d103      	bne.n	800227a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2221      	movs	r2, #33	; 0x21
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800227a:	230f      	movs	r3, #15
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	781b      	ldrb	r3, [r3, #0]
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	b004      	add	sp, #16
 8002286:	bdb0      	pop	{r4, r5, r7, pc}
 8002288:	ff8fffbf 	.word	0xff8fffbf

0800228c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800228c:	b5b0      	push	{r4, r5, r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2220      	movs	r2, #32
 80022a0:	5c9b      	ldrb	r3, [r3, r2]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_RTC_SetTime+0x1e>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e092      	b.n	80023d0 <HAL_RTC_SetTime+0x144>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2220      	movs	r2, #32
 80022ae:	2101      	movs	r1, #1
 80022b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2221      	movs	r2, #33	; 0x21
 80022b6:	2102      	movs	r1, #2
 80022b8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d125      	bne.n	800230c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2240      	movs	r2, #64	; 0x40
 80022c8:	4013      	ands	r3, r2
 80022ca:	d102      	bne.n	80022d2 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2200      	movs	r2, #0
 80022d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	0018      	movs	r0, r3
 80022d8:	f000 f9ac 	bl	8002634 <RTC_ByteToBcd2>
 80022dc:	0003      	movs	r3, r0
 80022de:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	785b      	ldrb	r3, [r3, #1]
 80022e4:	0018      	movs	r0, r3
 80022e6:	f000 f9a5 	bl	8002634 <RTC_ByteToBcd2>
 80022ea:	0003      	movs	r3, r0
 80022ec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80022ee:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	789b      	ldrb	r3, [r3, #2]
 80022f4:	0018      	movs	r0, r3
 80022f6:	f000 f99d 	bl	8002634 <RTC_ByteToBcd2>
 80022fa:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80022fc:	0022      	movs	r2, r4
 80022fe:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	78db      	ldrb	r3, [r3, #3]
 8002304:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002306:	4313      	orrs	r3, r2
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e017      	b.n	800233c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2240      	movs	r2, #64	; 0x40
 8002314:	4013      	ands	r3, r2
 8002316:	d102      	bne.n	800231e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2200      	movs	r2, #0
 800231c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	785b      	ldrb	r3, [r3, #1]
 8002328:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800232a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002330:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	78db      	ldrb	r3, [r3, #3]
 8002336:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002338:	4313      	orrs	r3, r2
 800233a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	22ca      	movs	r2, #202	; 0xca
 8002342:	625a      	str	r2, [r3, #36]	; 0x24
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2253      	movs	r2, #83	; 0x53
 800234a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800234c:	2513      	movs	r5, #19
 800234e:	197c      	adds	r4, r7, r5
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	0018      	movs	r0, r3
 8002354:	f000 f900 	bl	8002558 <RTC_EnterInitMode>
 8002358:	0003      	movs	r3, r0
 800235a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800235c:	0028      	movs	r0, r5
 800235e:	183b      	adds	r3, r7, r0
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d120      	bne.n	80023a8 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	491a      	ldr	r1, [pc, #104]	; (80023d8 <HAL_RTC_SetTime+0x14c>)
 800236e:	400a      	ands	r2, r1
 8002370:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4917      	ldr	r1, [pc, #92]	; (80023dc <HAL_RTC_SetTime+0x150>)
 800237e:	400a      	ands	r2, r1
 8002380:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6899      	ldr	r1, [r3, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	431a      	orrs	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800239a:	183c      	adds	r4, r7, r0
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	0018      	movs	r0, r3
 80023a0:	f000 f91e 	bl	80025e0 <RTC_ExitInitMode>
 80023a4:	0003      	movs	r3, r0
 80023a6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80023a8:	2313      	movs	r3, #19
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d103      	bne.n	80023ba <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2221      	movs	r2, #33	; 0x21
 80023b6:	2101      	movs	r1, #1
 80023b8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	22ff      	movs	r2, #255	; 0xff
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2220      	movs	r2, #32
 80023c6:	2100      	movs	r1, #0
 80023c8:	5499      	strb	r1, [r3, r2]

  return status;
 80023ca:	2313      	movs	r3, #19
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	781b      	ldrb	r3, [r3, #0]
}
 80023d0:	0018      	movs	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b006      	add	sp, #24
 80023d6:	bdb0      	pop	{r4, r5, r7, pc}
 80023d8:	007f7f7f 	.word	0x007f7f7f
 80023dc:	fffbffff 	.word	0xfffbffff

080023e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023e0:	b5b0      	push	{r4, r5, r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	5c9b      	ldrb	r3, [r3, r2]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_RTC_SetDate+0x1e>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e07e      	b.n	80024fc <HAL_RTC_SetDate+0x11c>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	2101      	movs	r1, #1
 8002404:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2221      	movs	r2, #33	; 0x21
 800240a:	2102      	movs	r1, #2
 800240c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10e      	bne.n	8002432 <HAL_RTC_SetDate+0x52>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	785b      	ldrb	r3, [r3, #1]
 8002418:	001a      	movs	r2, r3
 800241a:	2310      	movs	r3, #16
 800241c:	4013      	ands	r3, r2
 800241e:	d008      	beq.n	8002432 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	785b      	ldrb	r3, [r3, #1]
 8002424:	2210      	movs	r2, #16
 8002426:	4393      	bics	r3, r2
 8002428:	b2db      	uxtb	r3, r3
 800242a:	330a      	adds	r3, #10
 800242c:	b2da      	uxtb	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d11c      	bne.n	8002472 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	78db      	ldrb	r3, [r3, #3]
 800243c:	0018      	movs	r0, r3
 800243e:	f000 f8f9 	bl	8002634 <RTC_ByteToBcd2>
 8002442:	0003      	movs	r3, r0
 8002444:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	785b      	ldrb	r3, [r3, #1]
 800244a:	0018      	movs	r0, r3
 800244c:	f000 f8f2 	bl	8002634 <RTC_ByteToBcd2>
 8002450:	0003      	movs	r3, r0
 8002452:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002454:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	789b      	ldrb	r3, [r3, #2]
 800245a:	0018      	movs	r0, r3
 800245c:	f000 f8ea 	bl	8002634 <RTC_ByteToBcd2>
 8002460:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002462:	0022      	movs	r2, r4
 8002464:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	e00e      	b.n	8002490 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	78db      	ldrb	r3, [r3, #3]
 8002476:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	785b      	ldrb	r3, [r3, #1]
 800247c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800247e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002484:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800248c:	4313      	orrs	r3, r2
 800248e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	22ca      	movs	r2, #202	; 0xca
 8002496:	625a      	str	r2, [r3, #36]	; 0x24
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2253      	movs	r2, #83	; 0x53
 800249e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80024a0:	2513      	movs	r5, #19
 80024a2:	197c      	adds	r4, r7, r5
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 f856 	bl	8002558 <RTC_EnterInitMode>
 80024ac:	0003      	movs	r3, r0
 80024ae:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80024b0:	0028      	movs	r0, r5
 80024b2:	183b      	adds	r3, r7, r0
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10c      	bne.n	80024d4 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4910      	ldr	r1, [pc, #64]	; (8002504 <HAL_RTC_SetDate+0x124>)
 80024c2:	400a      	ands	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80024c6:	183c      	adds	r4, r7, r0
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	0018      	movs	r0, r3
 80024cc:	f000 f888 	bl	80025e0 <RTC_ExitInitMode>
 80024d0:	0003      	movs	r3, r0
 80024d2:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80024d4:	2313      	movs	r3, #19
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d103      	bne.n	80024e6 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2221      	movs	r2, #33	; 0x21
 80024e2:	2101      	movs	r1, #1
 80024e4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	22ff      	movs	r2, #255	; 0xff
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2220      	movs	r2, #32
 80024f2:	2100      	movs	r1, #0
 80024f4:	5499      	strb	r1, [r3, r2]

  return status;
 80024f6:	2313      	movs	r3, #19
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	781b      	ldrb	r3, [r3, #0]
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	b006      	add	sp, #24
 8002502:	bdb0      	pop	{r4, r5, r7, pc}
 8002504:	00ffff3f 	.word	0x00ffff3f

08002508 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0e      	ldr	r2, [pc, #56]	; (8002554 <HAL_RTC_WaitForSynchro+0x4c>)
 800251a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800251c:	f7fe fb3a 	bl	8000b94 <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002524:	e00a      	b.n	800253c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002526:	f7fe fb35 	bl	8000b94 <HAL_GetTick>
 800252a:	0002      	movs	r2, r0
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1ad2      	subs	r2, r2, r3
 8002530:	23fa      	movs	r3, #250	; 0xfa
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	429a      	cmp	r2, r3
 8002536:	d901      	bls.n	800253c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e006      	b.n	800254a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	4013      	ands	r3, r2
 8002546:	d0ee      	beq.n	8002526 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	0018      	movs	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	b004      	add	sp, #16
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	00017f5f 	.word	0x00017f5f

08002558 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002564:	230f      	movs	r3, #15
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2240      	movs	r2, #64	; 0x40
 8002574:	4013      	ands	r3, r2
 8002576:	d12c      	bne.n	80025d2 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	430a      	orrs	r2, r1
 8002586:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002588:	f7fe fb04 	bl	8000b94 <HAL_GetTick>
 800258c:	0003      	movs	r3, r0
 800258e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002590:	e014      	b.n	80025bc <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002592:	f7fe faff 	bl	8000b94 <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	1ad2      	subs	r2, r2, r3
 800259c:	200f      	movs	r0, #15
 800259e:	183b      	adds	r3, r7, r0
 80025a0:	1839      	adds	r1, r7, r0
 80025a2:	7809      	ldrb	r1, [r1, #0]
 80025a4:	7019      	strb	r1, [r3, #0]
 80025a6:	23fa      	movs	r3, #250	; 0xfa
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d906      	bls.n	80025bc <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2221      	movs	r2, #33	; 0x21
 80025b2:	2104      	movs	r1, #4
 80025b4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80025b6:	183b      	adds	r3, r7, r0
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2240      	movs	r2, #64	; 0x40
 80025c4:	4013      	ands	r3, r2
 80025c6:	d104      	bne.n	80025d2 <RTC_EnterInitMode+0x7a>
 80025c8:	230f      	movs	r3, #15
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d1df      	bne.n	8002592 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80025d2:	230f      	movs	r3, #15
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	781b      	ldrb	r3, [r3, #0]
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b004      	add	sp, #16
 80025de:	bd80      	pop	{r7, pc}

080025e0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e8:	240f      	movs	r4, #15
 80025ea:	193b      	adds	r3, r7, r4
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2180      	movs	r1, #128	; 0x80
 80025fc:	438a      	bics	r2, r1
 80025fe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2220      	movs	r2, #32
 8002608:	4013      	ands	r3, r2
 800260a:	d10c      	bne.n	8002626 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	0018      	movs	r0, r3
 8002610:	f7ff ff7a 	bl	8002508 <HAL_RTC_WaitForSynchro>
 8002614:	1e03      	subs	r3, r0, #0
 8002616:	d006      	beq.n	8002626 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2221      	movs	r2, #33	; 0x21
 800261c:	2104      	movs	r1, #4
 800261e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002620:	193b      	adds	r3, r7, r4
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002626:	230f      	movs	r3, #15
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	781b      	ldrb	r3, [r3, #0]
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b005      	add	sp, #20
 8002632:	bd90      	pop	{r4, r7, pc}

08002634 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	0002      	movs	r2, r0
 800263c:	1dfb      	adds	r3, r7, #7
 800263e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002644:	e007      	b.n	8002656 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3301      	adds	r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800264c:	1dfb      	adds	r3, r7, #7
 800264e:	1dfa      	adds	r2, r7, #7
 8002650:	7812      	ldrb	r2, [r2, #0]
 8002652:	3a0a      	subs	r2, #10
 8002654:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002656:	1dfb      	adds	r3, r7, #7
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b09      	cmp	r3, #9
 800265c:	d8f3      	bhi.n	8002646 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	b2da      	uxtb	r2, r3
 8002666:	1dfb      	adds	r3, r7, #7
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	4313      	orrs	r3, r2
 800266c:	b2db      	uxtb	r3, r3
}
 800266e:	0018      	movs	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	b004      	add	sp, #16
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002684:	4b64      	ldr	r3, [pc, #400]	; (8002818 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	22fa      	movs	r2, #250	; 0xfa
 800268a:	01d1      	lsls	r1, r2, #7
 800268c:	0018      	movs	r0, r3
 800268e:	f7fd fd43 	bl	8000118 <__udivsi3>
 8002692:	0003      	movs	r3, r0
 8002694:	001a      	movs	r2, r3
 8002696:	0013      	movs	r3, r2
 8002698:	015b      	lsls	r3, r3, #5
 800269a:	1a9b      	subs	r3, r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	189b      	adds	r3, r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	5c9b      	ldrb	r3, [r3, r2]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e0ad      	b.n	800280e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2220      	movs	r2, #32
 80026b6:	2101      	movs	r1, #1
 80026b8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2221      	movs	r2, #33	; 0x21
 80026be:	2102      	movs	r1, #2
 80026c0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	22ca      	movs	r2, #202	; 0xca
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2253      	movs	r2, #83	; 0x53
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4013      	ands	r3, r2
 80026de:	d019      	beq.n	8002714 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10d      	bne.n	8002708 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	22ff      	movs	r2, #255	; 0xff
 80026f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2221      	movs	r2, #33	; 0x21
 80026f8:	2103      	movs	r1, #3
 80026fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	2100      	movs	r1, #0
 8002702:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e082      	b.n	800280e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2204      	movs	r2, #4
 8002710:	4013      	ands	r3, r2
 8002712:	d1e5      	bne.n	80026e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	493f      	ldr	r1, [pc, #252]	; (800281c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8002720:	400a      	ands	r2, r1
 8002722:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	22ff      	movs	r2, #255	; 0xff
 800272c:	401a      	ands	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	493b      	ldr	r1, [pc, #236]	; (8002820 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8002734:	430a      	orrs	r2, r1
 8002736:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002738:	4b37      	ldr	r3, [pc, #220]	; (8002818 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	22fa      	movs	r2, #250	; 0xfa
 800273e:	01d1      	lsls	r1, r2, #7
 8002740:	0018      	movs	r0, r3
 8002742:	f7fd fce9 	bl	8000118 <__udivsi3>
 8002746:	0003      	movs	r3, r0
 8002748:	001a      	movs	r2, r3
 800274a:	0013      	movs	r3, r2
 800274c:	015b      	lsls	r3, r3, #5
 800274e:	1a9b      	subs	r3, r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	189b      	adds	r3, r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3b01      	subs	r3, #1
 800275c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10d      	bne.n	8002780 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	22ff      	movs	r2, #255	; 0xff
 800276a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2221      	movs	r2, #33	; 0x21
 8002770:	2103      	movs	r1, #3
 8002772:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	2100      	movs	r1, #0
 800277a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e046      	b.n	800280e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2204      	movs	r2, #4
 8002788:	4013      	ands	r3, r2
 800278a:	d0e5      	beq.n	8002758 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2107      	movs	r1, #7
 8002798:	438a      	bics	r2, r1
 800279a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6899      	ldr	r1, [r3, #8]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80027b4:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80027ba:	2180      	movs	r1, #128	; 0x80
 80027bc:	0349      	lsls	r1, r1, #13
 80027be:	430a      	orrs	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80027c2:	4b18      	ldr	r3, [pc, #96]	; (8002824 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	4b17      	ldr	r3, [pc, #92]	; (8002824 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80027c8:	2180      	movs	r1, #128	; 0x80
 80027ca:	0349      	lsls	r1, r1, #13
 80027cc:	430a      	orrs	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2180      	movs	r1, #128	; 0x80
 80027dc:	01c9      	lsls	r1, r1, #7
 80027de:	430a      	orrs	r2, r1
 80027e0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2180      	movs	r1, #128	; 0x80
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	430a      	orrs	r2, r1
 80027f2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	22ff      	movs	r2, #255	; 0xff
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2221      	movs	r2, #33	; 0x21
 8002800:	2101      	movs	r1, #1
 8002802:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	2100      	movs	r1, #0
 800280a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	0018      	movs	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	b006      	add	sp, #24
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	20000000 	.word	0x20000000
 800281c:	fffffbff 	.word	0xfffffbff
 8002820:	fffffb7f 	.word	0xfffffb7f
 8002824:	40010400 	.word	0x40010400

08002828 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	5c9b      	ldrb	r3, [r3, r2]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 800283e:	2302      	movs	r3, #2
 8002840:	e04e      	b.n	80028e0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	2101      	movs	r1, #1
 8002848:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2221      	movs	r2, #33	; 0x21
 800284e:	2102      	movs	r1, #2
 8002850:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	22ca      	movs	r2, #202	; 0xca
 8002858:	625a      	str	r2, [r3, #36]	; 0x24
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2253      	movs	r2, #83	; 0x53
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	491e      	ldr	r1, [pc, #120]	; (80028e8 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 800286e:	400a      	ands	r2, r1
 8002870:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	491b      	ldr	r1, [pc, #108]	; (80028ec <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 800287e:	400a      	ands	r2, r1
 8002880:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002882:	f7fe f987 	bl	8000b94 <HAL_GetTick>
 8002886:	0003      	movs	r3, r0
 8002888:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800288a:	e016      	b.n	80028ba <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800288c:	f7fe f982 	bl	8000b94 <HAL_GetTick>
 8002890:	0002      	movs	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad2      	subs	r2, r2, r3
 8002896:	23fa      	movs	r3, #250	; 0xfa
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	429a      	cmp	r2, r3
 800289c:	d90d      	bls.n	80028ba <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	22ff      	movs	r2, #255	; 0xff
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2221      	movs	r2, #33	; 0x21
 80028aa:	2103      	movs	r1, #3
 80028ac:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	2100      	movs	r1, #0
 80028b4:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e012      	b.n	80028e0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2204      	movs	r2, #4
 80028c2:	4013      	ands	r3, r2
 80028c4:	d0e2      	beq.n	800288c <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	22ff      	movs	r2, #255	; 0xff
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2221      	movs	r2, #33	; 0x21
 80028d2:	2101      	movs	r1, #1
 80028d4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2220      	movs	r2, #32
 80028da:	2100      	movs	r1, #0
 80028dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	0018      	movs	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b004      	add	sp, #16
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	fffffbff 	.word	0xfffffbff
 80028ec:	ffffbfff 	.word	0xffffbfff

080028f0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80028f8:	4b13      	ldr	r3, [pc, #76]	; (8002948 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80028fa:	2280      	movs	r2, #128	; 0x80
 80028fc:	0352      	lsls	r2, r2, #13
 80028fe:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	01db      	lsls	r3, r3, #7
 800290a:	4013      	ands	r3, r2
 800290c:	d014      	beq.n	8002938 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4013      	ands	r3, r2
 800291a:	d00d      	beq.n	8002938 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	22ff      	movs	r2, #255	; 0xff
 8002924:	401a      	ands	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4908      	ldr	r1, [pc, #32]	; (800294c <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 800292c:	430a      	orrs	r2, r1
 800292e:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0018      	movs	r0, r3
 8002934:	f7fd ffca 	bl	80008cc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2221      	movs	r2, #33	; 0x21
 800293c:	2101      	movs	r1, #1
 800293e:	5499      	strb	r1, [r3, r2]
}
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	b002      	add	sp, #8
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40010400 	.word	0x40010400
 800294c:	fffffb7f 	.word	0xfffffb7f

08002950 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e044      	b.n	80029ec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d107      	bne.n	800297a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2278      	movs	r2, #120	; 0x78
 800296e:	2100      	movs	r1, #0
 8002970:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	0018      	movs	r0, r3
 8002976:	f7fe f807 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2224      	movs	r2, #36	; 0x24
 800297e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2101      	movs	r1, #1
 800298c:	438a      	bics	r2, r1
 800298e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	0018      	movs	r0, r3
 8002994:	f000 f8d0 	bl	8002b38 <UART_SetConfig>
 8002998:	0003      	movs	r3, r0
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e024      	b.n	80029ec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f000 fb47 	bl	8003040 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	490d      	ldr	r1, [pc, #52]	; (80029f4 <HAL_UART_Init+0xa4>)
 80029be:	400a      	ands	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	212a      	movs	r1, #42	; 0x2a
 80029ce:	438a      	bics	r2, r1
 80029d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2101      	movs	r1, #1
 80029de:	430a      	orrs	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f000 fbdf 	bl	80031a8 <UART_CheckIdleState>
 80029ea:	0003      	movs	r3, r0
}
 80029ec:	0018      	movs	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b002      	add	sp, #8
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	ffffb7ff 	.word	0xffffb7ff

080029f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	; 0x28
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	1dbb      	adds	r3, r7, #6
 8002a06:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d000      	beq.n	8002a12 <HAL_UART_Transmit+0x1a>
 8002a10:	e08c      	b.n	8002b2c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_UART_Transmit+0x28>
 8002a18:	1dbb      	adds	r3, r7, #6
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e084      	b.n	8002b2e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	015b      	lsls	r3, r3, #5
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d109      	bne.n	8002a44 <HAL_UART_Transmit+0x4c>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d105      	bne.n	8002a44 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d001      	beq.n	8002a44 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e074      	b.n	8002b2e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2284      	movs	r2, #132	; 0x84
 8002a48:	2100      	movs	r1, #0
 8002a4a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2221      	movs	r2, #33	; 0x21
 8002a50:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a52:	f7fe f89f 	bl	8000b94 <HAL_GetTick>
 8002a56:	0003      	movs	r3, r0
 8002a58:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1dba      	adds	r2, r7, #6
 8002a5e:	2150      	movs	r1, #80	; 0x50
 8002a60:	8812      	ldrh	r2, [r2, #0]
 8002a62:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1dba      	adds	r2, r7, #6
 8002a68:	2152      	movs	r1, #82	; 0x52
 8002a6a:	8812      	ldrh	r2, [r2, #0]
 8002a6c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	015b      	lsls	r3, r3, #5
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d108      	bne.n	8002a8c <HAL_UART_Transmit+0x94>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d104      	bne.n	8002a8c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	e003      	b.n	8002a94 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a94:	e02f      	b.n	8002af6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	0013      	movs	r3, r2
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2180      	movs	r1, #128	; 0x80
 8002aa4:	f000 fc28 	bl	80032f8 <UART_WaitOnFlagUntilTimeout>
 8002aa8:	1e03      	subs	r3, r0, #0
 8002aaa:	d004      	beq.n	8002ab6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e03b      	b.n	8002b2e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10b      	bne.n	8002ad4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	001a      	movs	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	05d2      	lsls	r2, r2, #23
 8002ac8:	0dd2      	lsrs	r2, r2, #23
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	3302      	adds	r3, #2
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	e007      	b.n	8002ae4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	781a      	ldrb	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2252      	movs	r2, #82	; 0x52
 8002ae8:	5a9b      	ldrh	r3, [r3, r2]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b299      	uxth	r1, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2252      	movs	r2, #82	; 0x52
 8002af4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2252      	movs	r2, #82	; 0x52
 8002afa:	5a9b      	ldrh	r3, [r3, r2]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1c9      	bne.n	8002a96 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	0013      	movs	r3, r2
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2140      	movs	r1, #64	; 0x40
 8002b10:	f000 fbf2 	bl	80032f8 <UART_WaitOnFlagUntilTimeout>
 8002b14:	1e03      	subs	r3, r0, #0
 8002b16:	d004      	beq.n	8002b22 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e005      	b.n	8002b2e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	e000      	b.n	8002b2e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002b2c:	2302      	movs	r3, #2
  }
}
 8002b2e:	0018      	movs	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b008      	add	sp, #32
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b38:	b5b0      	push	{r4, r5, r7, lr}
 8002b3a:	b08e      	sub	sp, #56	; 0x38
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b40:	231a      	movs	r3, #26
 8002b42:	2218      	movs	r2, #24
 8002b44:	189b      	adds	r3, r3, r2
 8002b46:	19db      	adds	r3, r3, r7
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4ac6      	ldr	r2, [pc, #792]	; (8002e84 <UART_SetConfig+0x34c>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	0019      	movs	r1, r3
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b76:	430a      	orrs	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4ac1      	ldr	r2, [pc, #772]	; (8002e88 <UART_SetConfig+0x350>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	0019      	movs	r1, r3
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4abb      	ldr	r2, [pc, #748]	; (8002e8c <UART_SetConfig+0x354>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d004      	beq.n	8002bac <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	4ab7      	ldr	r2, [pc, #732]	; (8002e90 <UART_SetConfig+0x358>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	0019      	movs	r1, r3
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4ab3      	ldr	r2, [pc, #716]	; (8002e94 <UART_SetConfig+0x35c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d131      	bne.n	8002c30 <UART_SetConfig+0xf8>
 8002bcc:	4bb2      	ldr	r3, [pc, #712]	; (8002e98 <UART_SetConfig+0x360>)
 8002bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d01d      	beq.n	8002c14 <UART_SetConfig+0xdc>
 8002bd8:	d823      	bhi.n	8002c22 <UART_SetConfig+0xea>
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d00c      	beq.n	8002bf8 <UART_SetConfig+0xc0>
 8002bde:	d820      	bhi.n	8002c22 <UART_SetConfig+0xea>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <UART_SetConfig+0xb2>
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d00e      	beq.n	8002c06 <UART_SetConfig+0xce>
 8002be8:	e01b      	b.n	8002c22 <UART_SetConfig+0xea>
 8002bea:	231b      	movs	r3, #27
 8002bec:	2218      	movs	r2, #24
 8002bee:	189b      	adds	r3, r3, r2
 8002bf0:	19db      	adds	r3, r3, r7
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	e09c      	b.n	8002d32 <UART_SetConfig+0x1fa>
 8002bf8:	231b      	movs	r3, #27
 8002bfa:	2218      	movs	r2, #24
 8002bfc:	189b      	adds	r3, r3, r2
 8002bfe:	19db      	adds	r3, r3, r7
 8002c00:	2202      	movs	r2, #2
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e095      	b.n	8002d32 <UART_SetConfig+0x1fa>
 8002c06:	231b      	movs	r3, #27
 8002c08:	2218      	movs	r2, #24
 8002c0a:	189b      	adds	r3, r3, r2
 8002c0c:	19db      	adds	r3, r3, r7
 8002c0e:	2204      	movs	r2, #4
 8002c10:	701a      	strb	r2, [r3, #0]
 8002c12:	e08e      	b.n	8002d32 <UART_SetConfig+0x1fa>
 8002c14:	231b      	movs	r3, #27
 8002c16:	2218      	movs	r2, #24
 8002c18:	189b      	adds	r3, r3, r2
 8002c1a:	19db      	adds	r3, r3, r7
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e087      	b.n	8002d32 <UART_SetConfig+0x1fa>
 8002c22:	231b      	movs	r3, #27
 8002c24:	2218      	movs	r2, #24
 8002c26:	189b      	adds	r3, r3, r2
 8002c28:	19db      	adds	r3, r3, r7
 8002c2a:	2210      	movs	r2, #16
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	e080      	b.n	8002d32 <UART_SetConfig+0x1fa>
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a99      	ldr	r2, [pc, #612]	; (8002e9c <UART_SetConfig+0x364>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d131      	bne.n	8002c9e <UART_SetConfig+0x166>
 8002c3a:	4b97      	ldr	r3, [pc, #604]	; (8002e98 <UART_SetConfig+0x360>)
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3e:	220c      	movs	r2, #12
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b0c      	cmp	r3, #12
 8002c44:	d01d      	beq.n	8002c82 <UART_SetConfig+0x14a>
 8002c46:	d823      	bhi.n	8002c90 <UART_SetConfig+0x158>
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d00c      	beq.n	8002c66 <UART_SetConfig+0x12e>
 8002c4c:	d820      	bhi.n	8002c90 <UART_SetConfig+0x158>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <UART_SetConfig+0x120>
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d00e      	beq.n	8002c74 <UART_SetConfig+0x13c>
 8002c56:	e01b      	b.n	8002c90 <UART_SetConfig+0x158>
 8002c58:	231b      	movs	r3, #27
 8002c5a:	2218      	movs	r2, #24
 8002c5c:	189b      	adds	r3, r3, r2
 8002c5e:	19db      	adds	r3, r3, r7
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e065      	b.n	8002d32 <UART_SetConfig+0x1fa>
 8002c66:	231b      	movs	r3, #27
 8002c68:	2218      	movs	r2, #24
 8002c6a:	189b      	adds	r3, r3, r2
 8002c6c:	19db      	adds	r3, r3, r7
 8002c6e:	2202      	movs	r2, #2
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	e05e      	b.n	8002d32 <UART_SetConfig+0x1fa>
 8002c74:	231b      	movs	r3, #27
 8002c76:	2218      	movs	r2, #24
 8002c78:	189b      	adds	r3, r3, r2
 8002c7a:	19db      	adds	r3, r3, r7
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	e057      	b.n	8002d32 <UART_SetConfig+0x1fa>
 8002c82:	231b      	movs	r3, #27
 8002c84:	2218      	movs	r2, #24
 8002c86:	189b      	adds	r3, r3, r2
 8002c88:	19db      	adds	r3, r3, r7
 8002c8a:	2208      	movs	r2, #8
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	e050      	b.n	8002d32 <UART_SetConfig+0x1fa>
 8002c90:	231b      	movs	r3, #27
 8002c92:	2218      	movs	r2, #24
 8002c94:	189b      	adds	r3, r3, r2
 8002c96:	19db      	adds	r3, r3, r7
 8002c98:	2210      	movs	r2, #16
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	e049      	b.n	8002d32 <UART_SetConfig+0x1fa>
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a7a      	ldr	r2, [pc, #488]	; (8002e8c <UART_SetConfig+0x354>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d13e      	bne.n	8002d26 <UART_SetConfig+0x1ee>
 8002ca8:	4b7b      	ldr	r3, [pc, #492]	; (8002e98 <UART_SetConfig+0x360>)
 8002caa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cac:	23c0      	movs	r3, #192	; 0xc0
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	22c0      	movs	r2, #192	; 0xc0
 8002cb4:	0112      	lsls	r2, r2, #4
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d027      	beq.n	8002d0a <UART_SetConfig+0x1d2>
 8002cba:	22c0      	movs	r2, #192	; 0xc0
 8002cbc:	0112      	lsls	r2, r2, #4
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d82a      	bhi.n	8002d18 <UART_SetConfig+0x1e0>
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	0112      	lsls	r2, r2, #4
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d011      	beq.n	8002cee <UART_SetConfig+0x1b6>
 8002cca:	2280      	movs	r2, #128	; 0x80
 8002ccc:	0112      	lsls	r2, r2, #4
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d822      	bhi.n	8002d18 <UART_SetConfig+0x1e0>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d004      	beq.n	8002ce0 <UART_SetConfig+0x1a8>
 8002cd6:	2280      	movs	r2, #128	; 0x80
 8002cd8:	00d2      	lsls	r2, r2, #3
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00e      	beq.n	8002cfc <UART_SetConfig+0x1c4>
 8002cde:	e01b      	b.n	8002d18 <UART_SetConfig+0x1e0>
 8002ce0:	231b      	movs	r3, #27
 8002ce2:	2218      	movs	r2, #24
 8002ce4:	189b      	adds	r3, r3, r2
 8002ce6:	19db      	adds	r3, r3, r7
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	e021      	b.n	8002d32 <UART_SetConfig+0x1fa>
 8002cee:	231b      	movs	r3, #27
 8002cf0:	2218      	movs	r2, #24
 8002cf2:	189b      	adds	r3, r3, r2
 8002cf4:	19db      	adds	r3, r3, r7
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	701a      	strb	r2, [r3, #0]
 8002cfa:	e01a      	b.n	8002d32 <UART_SetConfig+0x1fa>
 8002cfc:	231b      	movs	r3, #27
 8002cfe:	2218      	movs	r2, #24
 8002d00:	189b      	adds	r3, r3, r2
 8002d02:	19db      	adds	r3, r3, r7
 8002d04:	2204      	movs	r2, #4
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	e013      	b.n	8002d32 <UART_SetConfig+0x1fa>
 8002d0a:	231b      	movs	r3, #27
 8002d0c:	2218      	movs	r2, #24
 8002d0e:	189b      	adds	r3, r3, r2
 8002d10:	19db      	adds	r3, r3, r7
 8002d12:	2208      	movs	r2, #8
 8002d14:	701a      	strb	r2, [r3, #0]
 8002d16:	e00c      	b.n	8002d32 <UART_SetConfig+0x1fa>
 8002d18:	231b      	movs	r3, #27
 8002d1a:	2218      	movs	r2, #24
 8002d1c:	189b      	adds	r3, r3, r2
 8002d1e:	19db      	adds	r3, r3, r7
 8002d20:	2210      	movs	r2, #16
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	e005      	b.n	8002d32 <UART_SetConfig+0x1fa>
 8002d26:	231b      	movs	r3, #27
 8002d28:	2218      	movs	r2, #24
 8002d2a:	189b      	adds	r3, r3, r2
 8002d2c:	19db      	adds	r3, r3, r7
 8002d2e:	2210      	movs	r2, #16
 8002d30:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a55      	ldr	r2, [pc, #340]	; (8002e8c <UART_SetConfig+0x354>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d000      	beq.n	8002d3e <UART_SetConfig+0x206>
 8002d3c:	e084      	b.n	8002e48 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d3e:	231b      	movs	r3, #27
 8002d40:	2218      	movs	r2, #24
 8002d42:	189b      	adds	r3, r3, r2
 8002d44:	19db      	adds	r3, r3, r7
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d01d      	beq.n	8002d88 <UART_SetConfig+0x250>
 8002d4c:	dc20      	bgt.n	8002d90 <UART_SetConfig+0x258>
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d015      	beq.n	8002d7e <UART_SetConfig+0x246>
 8002d52:	dc1d      	bgt.n	8002d90 <UART_SetConfig+0x258>
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <UART_SetConfig+0x226>
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d005      	beq.n	8002d68 <UART_SetConfig+0x230>
 8002d5c:	e018      	b.n	8002d90 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d5e:	f7ff f83f 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002d62:	0003      	movs	r3, r0
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d66:	e01c      	b.n	8002da2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d68:	4b4b      	ldr	r3, [pc, #300]	; (8002e98 <UART_SetConfig+0x360>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2210      	movs	r2, #16
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d002      	beq.n	8002d78 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d72:	4b4b      	ldr	r3, [pc, #300]	; (8002ea0 <UART_SetConfig+0x368>)
 8002d74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d76:	e014      	b.n	8002da2 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002d78:	4b4a      	ldr	r3, [pc, #296]	; (8002ea4 <UART_SetConfig+0x36c>)
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d7c:	e011      	b.n	8002da2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d7e:	f7fe ff7f 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8002d82:	0003      	movs	r3, r0
 8002d84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d86:	e00c      	b.n	8002da2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d8e:	e008      	b.n	8002da2 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d94:	231a      	movs	r3, #26
 8002d96:	2218      	movs	r2, #24
 8002d98:	189b      	adds	r3, r3, r2
 8002d9a:	19db      	adds	r3, r3, r7
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
        break;
 8002da0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d100      	bne.n	8002daa <UART_SetConfig+0x272>
 8002da8:	e132      	b.n	8003010 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	0013      	movs	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	189b      	adds	r3, r3, r2
 8002db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d305      	bcc.n	8002dc6 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d906      	bls.n	8002dd4 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002dc6:	231a      	movs	r3, #26
 8002dc8:	2218      	movs	r2, #24
 8002dca:	189b      	adds	r3, r3, r2
 8002dcc:	19db      	adds	r3, r3, r7
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	e11d      	b.n	8003010 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	6939      	ldr	r1, [r7, #16]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	000b      	movs	r3, r1
 8002de2:	0e1b      	lsrs	r3, r3, #24
 8002de4:	0010      	movs	r0, r2
 8002de6:	0205      	lsls	r5, r0, #8
 8002de8:	431d      	orrs	r5, r3
 8002dea:	000b      	movs	r3, r1
 8002dec:	021c      	lsls	r4, r3, #8
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	085b      	lsrs	r3, r3, #1
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	68b8      	ldr	r0, [r7, #8]
 8002dfc:	68f9      	ldr	r1, [r7, #12]
 8002dfe:	1900      	adds	r0, r0, r4
 8002e00:	4169      	adcs	r1, r5
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	607b      	str	r3, [r7, #4]
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f7fd fa0e 	bl	8000230 <__aeabi_uldivmod>
 8002e14:	0002      	movs	r2, r0
 8002e16:	000b      	movs	r3, r1
 8002e18:	0013      	movs	r3, r2
 8002e1a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e1e:	23c0      	movs	r3, #192	; 0xc0
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d309      	bcc.n	8002e3a <UART_SetConfig+0x302>
 8002e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	035b      	lsls	r3, r3, #13
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d204      	bcs.n	8002e3a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e36:	60da      	str	r2, [r3, #12]
 8002e38:	e0ea      	b.n	8003010 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002e3a:	231a      	movs	r3, #26
 8002e3c:	2218      	movs	r2, #24
 8002e3e:	189b      	adds	r3, r3, r2
 8002e40:	19db      	adds	r3, r3, r7
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	e0e3      	b.n	8003010 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	69da      	ldr	r2, [r3, #28]
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d000      	beq.n	8002e56 <UART_SetConfig+0x31e>
 8002e54:	e085      	b.n	8002f62 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002e56:	231b      	movs	r3, #27
 8002e58:	2218      	movs	r2, #24
 8002e5a:	189b      	adds	r3, r3, r2
 8002e5c:	19db      	adds	r3, r3, r7
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d837      	bhi.n	8002ed4 <UART_SetConfig+0x39c>
 8002e64:	009a      	lsls	r2, r3, #2
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <UART_SetConfig+0x370>)
 8002e68:	18d3      	adds	r3, r2, r3
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e6e:	f7fe ffb7 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002e72:	0003      	movs	r3, r0
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e76:	e036      	b.n	8002ee6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e78:	f7fe ffc8 	bl	8001e0c <HAL_RCC_GetPCLK2Freq>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e80:	e031      	b.n	8002ee6 <UART_SetConfig+0x3ae>
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	efff69f3 	.word	0xefff69f3
 8002e88:	ffffcfff 	.word	0xffffcfff
 8002e8c:	40004800 	.word	0x40004800
 8002e90:	fffff4ff 	.word	0xfffff4ff
 8002e94:	40013800 	.word	0x40013800
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40004400 	.word	0x40004400
 8002ea0:	003d0900 	.word	0x003d0900
 8002ea4:	00f42400 	.word	0x00f42400
 8002ea8:	080035a0 	.word	0x080035a0
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002eac:	4b60      	ldr	r3, [pc, #384]	; (8003030 <UART_SetConfig+0x4f8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d002      	beq.n	8002ebc <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002eb6:	4b5f      	ldr	r3, [pc, #380]	; (8003034 <UART_SetConfig+0x4fc>)
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002eba:	e014      	b.n	8002ee6 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002ebc:	4b5e      	ldr	r3, [pc, #376]	; (8003038 <UART_SetConfig+0x500>)
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ec0:	e011      	b.n	8002ee6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ec2:	f7fe fedd 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002eca:	e00c      	b.n	8002ee6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ed2:	e008      	b.n	8002ee6 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ed8:	231a      	movs	r3, #26
 8002eda:	2218      	movs	r2, #24
 8002edc:	189b      	adds	r3, r3, r2
 8002ede:	19db      	adds	r3, r3, r7
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]
        break;
 8002ee4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d100      	bne.n	8002eee <UART_SetConfig+0x3b6>
 8002eec:	e090      	b.n	8003010 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	005a      	lsls	r2, r3, #1
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	18d2      	adds	r2, r2, r3
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	0019      	movs	r1, r3
 8002f00:	0010      	movs	r0, r2
 8002f02:	f7fd f909 	bl	8000118 <__udivsi3>
 8002f06:	0003      	movs	r3, r0
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	2b0f      	cmp	r3, #15
 8002f0e:	d921      	bls.n	8002f54 <UART_SetConfig+0x41c>
 8002f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	025b      	lsls	r3, r3, #9
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d21c      	bcs.n	8002f54 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	200e      	movs	r0, #14
 8002f20:	2418      	movs	r4, #24
 8002f22:	1903      	adds	r3, r0, r4
 8002f24:	19db      	adds	r3, r3, r7
 8002f26:	210f      	movs	r1, #15
 8002f28:	438a      	bics	r2, r1
 8002f2a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2207      	movs	r2, #7
 8002f34:	4013      	ands	r3, r2
 8002f36:	b299      	uxth	r1, r3
 8002f38:	1903      	adds	r3, r0, r4
 8002f3a:	19db      	adds	r3, r3, r7
 8002f3c:	1902      	adds	r2, r0, r4
 8002f3e:	19d2      	adds	r2, r2, r7
 8002f40:	8812      	ldrh	r2, [r2, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	1902      	adds	r2, r0, r4
 8002f4c:	19d2      	adds	r2, r2, r7
 8002f4e:	8812      	ldrh	r2, [r2, #0]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	e05d      	b.n	8003010 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002f54:	231a      	movs	r3, #26
 8002f56:	2218      	movs	r2, #24
 8002f58:	189b      	adds	r3, r3, r2
 8002f5a:	19db      	adds	r3, r3, r7
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	701a      	strb	r2, [r3, #0]
 8002f60:	e056      	b.n	8003010 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f62:	231b      	movs	r3, #27
 8002f64:	2218      	movs	r2, #24
 8002f66:	189b      	adds	r3, r3, r2
 8002f68:	19db      	adds	r3, r3, r7
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d822      	bhi.n	8002fb6 <UART_SetConfig+0x47e>
 8002f70:	009a      	lsls	r2, r3, #2
 8002f72:	4b32      	ldr	r3, [pc, #200]	; (800303c <UART_SetConfig+0x504>)
 8002f74:	18d3      	adds	r3, r2, r3
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f7a:	f7fe ff31 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f82:	e021      	b.n	8002fc8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f84:	f7fe ff42 	bl	8001e0c <HAL_RCC_GetPCLK2Freq>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f8c:	e01c      	b.n	8002fc8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f8e:	4b28      	ldr	r3, [pc, #160]	; (8003030 <UART_SetConfig+0x4f8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2210      	movs	r2, #16
 8002f94:	4013      	ands	r3, r2
 8002f96:	d002      	beq.n	8002f9e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f98:	4b26      	ldr	r3, [pc, #152]	; (8003034 <UART_SetConfig+0x4fc>)
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f9c:	e014      	b.n	8002fc8 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002f9e:	4b26      	ldr	r3, [pc, #152]	; (8003038 <UART_SetConfig+0x500>)
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fa2:	e011      	b.n	8002fc8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fa4:	f7fe fe6c 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fac:	e00c      	b.n	8002fc8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fb4:	e008      	b.n	8002fc8 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002fba:	231a      	movs	r3, #26
 8002fbc:	2218      	movs	r2, #24
 8002fbe:	189b      	adds	r3, r3, r2
 8002fc0:	19db      	adds	r3, r3, r7
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
        break;
 8002fc6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d020      	beq.n	8003010 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	085a      	lsrs	r2, r3, #1
 8002fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd6:	18d2      	adds	r2, r2, r3
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	0019      	movs	r1, r3
 8002fde:	0010      	movs	r0, r2
 8002fe0:	f7fd f89a 	bl	8000118 <__udivsi3>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	2b0f      	cmp	r3, #15
 8002fec:	d90a      	bls.n	8003004 <UART_SetConfig+0x4cc>
 8002fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	025b      	lsls	r3, r3, #9
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d205      	bcs.n	8003004 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	e005      	b.n	8003010 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003004:	231a      	movs	r3, #26
 8003006:	2218      	movs	r2, #24
 8003008:	189b      	adds	r3, r3, r2
 800300a:	19db      	adds	r3, r3, r7
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2200      	movs	r2, #0
 8003014:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	2200      	movs	r2, #0
 800301a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800301c:	231a      	movs	r3, #26
 800301e:	2218      	movs	r2, #24
 8003020:	189b      	adds	r3, r3, r2
 8003022:	19db      	adds	r3, r3, r7
 8003024:	781b      	ldrb	r3, [r3, #0]
}
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b00e      	add	sp, #56	; 0x38
 800302c:	bdb0      	pop	{r4, r5, r7, pc}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	40021000 	.word	0x40021000
 8003034:	003d0900 	.word	0x003d0900
 8003038:	00f42400 	.word	0x00f42400
 800303c:	080035c4 	.word	0x080035c4

08003040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	2201      	movs	r2, #1
 800304e:	4013      	ands	r3, r2
 8003050:	d00b      	beq.n	800306a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a4a      	ldr	r2, [pc, #296]	; (8003184 <UART_AdvFeatureConfig+0x144>)
 800305a:	4013      	ands	r3, r2
 800305c:	0019      	movs	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	2202      	movs	r2, #2
 8003070:	4013      	ands	r3, r2
 8003072:	d00b      	beq.n	800308c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4a43      	ldr	r2, [pc, #268]	; (8003188 <UART_AdvFeatureConfig+0x148>)
 800307c:	4013      	ands	r3, r2
 800307e:	0019      	movs	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2204      	movs	r2, #4
 8003092:	4013      	ands	r3, r2
 8003094:	d00b      	beq.n	80030ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a3b      	ldr	r2, [pc, #236]	; (800318c <UART_AdvFeatureConfig+0x14c>)
 800309e:	4013      	ands	r3, r2
 80030a0:	0019      	movs	r1, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	2208      	movs	r2, #8
 80030b4:	4013      	ands	r3, r2
 80030b6:	d00b      	beq.n	80030d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4a34      	ldr	r2, [pc, #208]	; (8003190 <UART_AdvFeatureConfig+0x150>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	0019      	movs	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	2210      	movs	r2, #16
 80030d6:	4013      	ands	r3, r2
 80030d8:	d00b      	beq.n	80030f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <UART_AdvFeatureConfig+0x154>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	0019      	movs	r1, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	2220      	movs	r2, #32
 80030f8:	4013      	ands	r3, r2
 80030fa:	d00b      	beq.n	8003114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	4a25      	ldr	r2, [pc, #148]	; (8003198 <UART_AdvFeatureConfig+0x158>)
 8003104:	4013      	ands	r3, r2
 8003106:	0019      	movs	r1, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	2240      	movs	r2, #64	; 0x40
 800311a:	4013      	ands	r3, r2
 800311c:	d01d      	beq.n	800315a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4a1d      	ldr	r2, [pc, #116]	; (800319c <UART_AdvFeatureConfig+0x15c>)
 8003126:	4013      	ands	r3, r2
 8003128:	0019      	movs	r1, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	035b      	lsls	r3, r3, #13
 800313e:	429a      	cmp	r2, r3
 8003140:	d10b      	bne.n	800315a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a15      	ldr	r2, [pc, #84]	; (80031a0 <UART_AdvFeatureConfig+0x160>)
 800314a:	4013      	ands	r3, r2
 800314c:	0019      	movs	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	2280      	movs	r2, #128	; 0x80
 8003160:	4013      	ands	r3, r2
 8003162:	d00b      	beq.n	800317c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4a0e      	ldr	r2, [pc, #56]	; (80031a4 <UART_AdvFeatureConfig+0x164>)
 800316c:	4013      	ands	r3, r2
 800316e:	0019      	movs	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]
  }
}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b002      	add	sp, #8
 8003182:	bd80      	pop	{r7, pc}
 8003184:	fffdffff 	.word	0xfffdffff
 8003188:	fffeffff 	.word	0xfffeffff
 800318c:	fffbffff 	.word	0xfffbffff
 8003190:	ffff7fff 	.word	0xffff7fff
 8003194:	ffffefff 	.word	0xffffefff
 8003198:	ffffdfff 	.word	0xffffdfff
 800319c:	ffefffff 	.word	0xffefffff
 80031a0:	ff9fffff 	.word	0xff9fffff
 80031a4:	fff7ffff 	.word	0xfff7ffff

080031a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b092      	sub	sp, #72	; 0x48
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2284      	movs	r2, #132	; 0x84
 80031b4:	2100      	movs	r1, #0
 80031b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031b8:	f7fd fcec 	bl	8000b94 <HAL_GetTick>
 80031bc:	0003      	movs	r3, r0
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2208      	movs	r2, #8
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d12c      	bne.n	8003228 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	0391      	lsls	r1, r2, #14
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	4a46      	ldr	r2, [pc, #280]	; (80032f0 <UART_CheckIdleState+0x148>)
 80031d8:	9200      	str	r2, [sp, #0]
 80031da:	2200      	movs	r2, #0
 80031dc:	f000 f88c 	bl	80032f8 <UART_WaitOnFlagUntilTimeout>
 80031e0:	1e03      	subs	r3, r0, #0
 80031e2:	d021      	beq.n	8003228 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e4:	f3ef 8310 	mrs	r3, PRIMASK
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ee:	2301      	movs	r3, #1
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f4:	f383 8810 	msr	PRIMASK, r3
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2180      	movs	r1, #128	; 0x80
 8003206:	438a      	bics	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	f383 8810 	msr	PRIMASK, r3
}
 8003214:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2278      	movs	r2, #120	; 0x78
 8003220:	2100      	movs	r1, #0
 8003222:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e05f      	b.n	80032e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2204      	movs	r2, #4
 8003230:	4013      	ands	r3, r2
 8003232:	2b04      	cmp	r3, #4
 8003234:	d146      	bne.n	80032c4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003238:	2280      	movs	r2, #128	; 0x80
 800323a:	03d1      	lsls	r1, r2, #15
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4a2c      	ldr	r2, [pc, #176]	; (80032f0 <UART_CheckIdleState+0x148>)
 8003240:	9200      	str	r2, [sp, #0]
 8003242:	2200      	movs	r2, #0
 8003244:	f000 f858 	bl	80032f8 <UART_WaitOnFlagUntilTimeout>
 8003248:	1e03      	subs	r3, r0, #0
 800324a:	d03b      	beq.n	80032c4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324c:	f3ef 8310 	mrs	r3, PRIMASK
 8003250:	60fb      	str	r3, [r7, #12]
  return(result);
 8003252:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003254:	637b      	str	r3, [r7, #52]	; 0x34
 8003256:	2301      	movs	r3, #1
 8003258:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f383 8810 	msr	PRIMASK, r3
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4921      	ldr	r1, [pc, #132]	; (80032f4 <UART_CheckIdleState+0x14c>)
 800326e:	400a      	ands	r2, r1
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003274:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f383 8810 	msr	PRIMASK, r3
}
 800327c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800327e:	f3ef 8310 	mrs	r3, PRIMASK
 8003282:	61bb      	str	r3, [r7, #24]
  return(result);
 8003284:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003286:	633b      	str	r3, [r7, #48]	; 0x30
 8003288:	2301      	movs	r3, #1
 800328a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f383 8810 	msr	PRIMASK, r3
}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2101      	movs	r1, #1
 80032a0:	438a      	bics	r2, r1
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	f383 8810 	msr	PRIMASK, r3
}
 80032ae:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2280      	movs	r2, #128	; 0x80
 80032b4:	2120      	movs	r1, #32
 80032b6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2278      	movs	r2, #120	; 0x78
 80032bc:	2100      	movs	r1, #0
 80032be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e011      	b.n	80032e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2280      	movs	r2, #128	; 0x80
 80032ce:	2120      	movs	r1, #32
 80032d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2278      	movs	r2, #120	; 0x78
 80032e2:	2100      	movs	r1, #0
 80032e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b010      	add	sp, #64	; 0x40
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	01ffffff 	.word	0x01ffffff
 80032f4:	fffffedf 	.word	0xfffffedf

080032f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	1dfb      	adds	r3, r7, #7
 8003306:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003308:	e04b      	b.n	80033a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	3301      	adds	r3, #1
 800330e:	d048      	beq.n	80033a2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003310:	f7fd fc40 	bl	8000b94 <HAL_GetTick>
 8003314:	0002      	movs	r2, r0
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	429a      	cmp	r2, r3
 800331e:	d302      	bcc.n	8003326 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e04b      	b.n	80033c2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2204      	movs	r2, #4
 8003332:	4013      	ands	r3, r2
 8003334:	d035      	beq.n	80033a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	2208      	movs	r2, #8
 800333e:	4013      	ands	r3, r2
 8003340:	2b08      	cmp	r3, #8
 8003342:	d111      	bne.n	8003368 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2208      	movs	r2, #8
 800334a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	0018      	movs	r0, r3
 8003350:	f000 f83c 	bl	80033cc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2284      	movs	r2, #132	; 0x84
 8003358:	2108      	movs	r1, #8
 800335a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2278      	movs	r2, #120	; 0x78
 8003360:	2100      	movs	r1, #0
 8003362:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e02c      	b.n	80033c2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69da      	ldr	r2, [r3, #28]
 800336e:	2380      	movs	r3, #128	; 0x80
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	401a      	ands	r2, r3
 8003374:	2380      	movs	r3, #128	; 0x80
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	429a      	cmp	r2, r3
 800337a:	d112      	bne.n	80033a2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2280      	movs	r2, #128	; 0x80
 8003382:	0112      	lsls	r2, r2, #4
 8003384:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	0018      	movs	r0, r3
 800338a:	f000 f81f 	bl	80033cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2284      	movs	r2, #132	; 0x84
 8003392:	2120      	movs	r1, #32
 8003394:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2278      	movs	r2, #120	; 0x78
 800339a:	2100      	movs	r1, #0
 800339c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e00f      	b.n	80033c2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	4013      	ands	r3, r2
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	425a      	negs	r2, r3
 80033b2:	4153      	adcs	r3, r2
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	001a      	movs	r2, r3
 80033b8:	1dfb      	adds	r3, r7, #7
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d0a4      	beq.n	800330a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	0018      	movs	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b004      	add	sp, #16
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08e      	sub	sp, #56	; 0x38
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d4:	f3ef 8310 	mrs	r3, PRIMASK
 80033d8:	617b      	str	r3, [r7, #20]
  return(result);
 80033da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34
 80033de:	2301      	movs	r3, #1
 80033e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f383 8810 	msr	PRIMASK, r3
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4926      	ldr	r1, [pc, #152]	; (8003490 <UART_EndRxTransfer+0xc4>)
 80033f6:	400a      	ands	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f383 8810 	msr	PRIMASK, r3
}
 8003404:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003406:	f3ef 8310 	mrs	r3, PRIMASK
 800340a:	623b      	str	r3, [r7, #32]
  return(result);
 800340c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800340e:	633b      	str	r3, [r7, #48]	; 0x30
 8003410:	2301      	movs	r3, #1
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	f383 8810 	msr	PRIMASK, r3
}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2101      	movs	r1, #1
 8003428:	438a      	bics	r2, r1
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	f383 8810 	msr	PRIMASK, r3
}
 8003436:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343c:	2b01      	cmp	r3, #1
 800343e:	d118      	bne.n	8003472 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003440:	f3ef 8310 	mrs	r3, PRIMASK
 8003444:	60bb      	str	r3, [r7, #8]
  return(result);
 8003446:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800344a:	2301      	movs	r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f383 8810 	msr	PRIMASK, r3
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2110      	movs	r1, #16
 8003462:	438a      	bics	r2, r1
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003468:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f383 8810 	msr	PRIMASK, r3
}
 8003470:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2280      	movs	r2, #128	; 0x80
 8003476:	2120      	movs	r1, #32
 8003478:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	46bd      	mov	sp, r7
 800348a:	b00e      	add	sp, #56	; 0x38
 800348c:	bd80      	pop	{r7, pc}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	fffffedf 	.word	0xfffffedf

08003494 <memset>:
 8003494:	0003      	movs	r3, r0
 8003496:	1882      	adds	r2, r0, r2
 8003498:	4293      	cmp	r3, r2
 800349a:	d100      	bne.n	800349e <memset+0xa>
 800349c:	4770      	bx	lr
 800349e:	7019      	strb	r1, [r3, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	e7f9      	b.n	8003498 <memset+0x4>

080034a4 <__libc_init_array>:
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	2600      	movs	r6, #0
 80034a8:	4c0c      	ldr	r4, [pc, #48]	; (80034dc <__libc_init_array+0x38>)
 80034aa:	4d0d      	ldr	r5, [pc, #52]	; (80034e0 <__libc_init_array+0x3c>)
 80034ac:	1b64      	subs	r4, r4, r5
 80034ae:	10a4      	asrs	r4, r4, #2
 80034b0:	42a6      	cmp	r6, r4
 80034b2:	d109      	bne.n	80034c8 <__libc_init_array+0x24>
 80034b4:	2600      	movs	r6, #0
 80034b6:	f000 f819 	bl	80034ec <_init>
 80034ba:	4c0a      	ldr	r4, [pc, #40]	; (80034e4 <__libc_init_array+0x40>)
 80034bc:	4d0a      	ldr	r5, [pc, #40]	; (80034e8 <__libc_init_array+0x44>)
 80034be:	1b64      	subs	r4, r4, r5
 80034c0:	10a4      	asrs	r4, r4, #2
 80034c2:	42a6      	cmp	r6, r4
 80034c4:	d105      	bne.n	80034d2 <__libc_init_array+0x2e>
 80034c6:	bd70      	pop	{r4, r5, r6, pc}
 80034c8:	00b3      	lsls	r3, r6, #2
 80034ca:	58eb      	ldr	r3, [r5, r3]
 80034cc:	4798      	blx	r3
 80034ce:	3601      	adds	r6, #1
 80034d0:	e7ee      	b.n	80034b0 <__libc_init_array+0xc>
 80034d2:	00b3      	lsls	r3, r6, #2
 80034d4:	58eb      	ldr	r3, [r5, r3]
 80034d6:	4798      	blx	r3
 80034d8:	3601      	adds	r6, #1
 80034da:	e7f2      	b.n	80034c2 <__libc_init_array+0x1e>
 80034dc:	080035f0 	.word	0x080035f0
 80034e0:	080035f0 	.word	0x080035f0
 80034e4:	080035f4 	.word	0x080035f4
 80034e8:	080035f0 	.word	0x080035f0

080034ec <_init>:
 80034ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f2:	bc08      	pop	{r3}
 80034f4:	469e      	mov	lr, r3
 80034f6:	4770      	bx	lr

080034f8 <_fini>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr
