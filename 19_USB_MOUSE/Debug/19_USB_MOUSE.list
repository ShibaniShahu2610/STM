
19_USB_MOUSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007668  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007728  08007728  00017728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077ec  080077ec  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077f4  080077f4  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077f4  080077f4  000177f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077f8  080077f8  000177f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  080077fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  20000164  08007960  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000958  08007960  00020958  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aefd  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000265f  00000000  00000000  0002b0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002d730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000073a  00000000  00000000  0002e110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000152fd  00000000  00000000  0002e84a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000da5c  00000000  00000000  00043b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076f24  00000000  00000000  000515a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002190  00000000  00000000  000c84c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000ca658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000164 	.word	0x20000164
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007710 	.word	0x08007710

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000168 	.word	0x20000168
 8000104:	08007710 	.word	0x08007710

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 f91a 	bl	80006e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f81e 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f892 	bl	80005dc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004b8:	f006 fc7c 	bl	8006db4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  buffer[0] = 0x00;
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <main+0x40>)
 80004be:	2200      	movs	r2, #0
 80004c0:	701a      	strb	r2, [r3, #0]
  buffer[1] = 0x00;
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <main+0x40>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	705a      	strb	r2, [r3, #1]
  buffer[2] = 0x10;
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <main+0x40>)
 80004ca:	2210      	movs	r2, #16
 80004cc:	709a      	strb	r2, [r3, #2]
  buffer[3] = 0x00;
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <main+0x40>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	70da      	strb	r2, [r3, #3]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  USBD_HID_SendReport(&hUsbDeviceFS, buffer, 4);
 80004d4:	4904      	ldr	r1, [pc, #16]	; (80004e8 <main+0x40>)
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <main+0x44>)
 80004d8:	2204      	movs	r2, #4
 80004da:	0018      	movs	r0, r3
 80004dc:	f005 fa10 	bl	8005900 <USBD_HID_SendReport>
	  HAL_Delay(100);
 80004e0:	2064      	movs	r0, #100	; 0x64
 80004e2:	f000 f96f 	bl	80007c4 <HAL_Delay>
	  USBD_HID_SendReport(&hUsbDeviceFS, buffer, 4);
 80004e6:	e7f5      	b.n	80004d4 <main+0x2c>
 80004e8:	20000180 	.word	0x20000180
 80004ec:	2000018c 	.word	0x2000018c

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b09d      	sub	sp, #116	; 0x74
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	2438      	movs	r4, #56	; 0x38
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	0018      	movs	r0, r3
 80004fc:	2338      	movs	r3, #56	; 0x38
 80004fe:	001a      	movs	r2, r3
 8000500:	2100      	movs	r1, #0
 8000502:	f007 f8d9 	bl	80076b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000506:	2324      	movs	r3, #36	; 0x24
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	0018      	movs	r0, r3
 800050c:	2314      	movs	r3, #20
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f007 f8d1 	bl	80076b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000516:	003b      	movs	r3, r7
 8000518:	0018      	movs	r0, r3
 800051a:	2324      	movs	r3, #36	; 0x24
 800051c:	001a      	movs	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	f007 f8ca 	bl	80076b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <SystemClock_Config+0xe4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a2b      	ldr	r2, [pc, #172]	; (80005d8 <SystemClock_Config+0xe8>)
 800052a:	401a      	ands	r2, r3
 800052c:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <SystemClock_Config+0xe4>)
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	0109      	lsls	r1, r1, #4
 8000532:	430a      	orrs	r2, r1
 8000534:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000536:	0021      	movs	r1, r4
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2222      	movs	r2, #34	; 0x22
 800053c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2201      	movs	r2, #1
 8000542:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2210      	movs	r2, #16
 8000548:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2201      	movs	r2, #1
 800054e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2202      	movs	r2, #2
 8000554:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	02d2      	lsls	r2, r2, #11
 8000562:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	03d2      	lsls	r2, r2, #15
 800056a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	187b      	adds	r3, r7, r1
 800056e:	0018      	movs	r0, r3
 8000570:	f002 f862 	bl	8002638 <HAL_RCC_OscConfig>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000578:	f000 f846 	bl	8000608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	2124      	movs	r1, #36	; 0x24
 800057e:	187b      	adds	r3, r7, r1
 8000580:	220f      	movs	r2, #15
 8000582:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2203      	movs	r2, #3
 8000588:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2101      	movs	r1, #1
 80005a0:	0018      	movs	r0, r3
 80005a2:	f002 fc0d 	bl	8002dc0 <HAL_RCC_ClockConfig>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005aa:	f000 f82d 	bl	8000608 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005ae:	003b      	movs	r3, r7
 80005b0:	2240      	movs	r2, #64	; 0x40
 80005b2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005b4:	003b      	movs	r3, r7
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	04d2      	lsls	r2, r2, #19
 80005ba:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005bc:	003b      	movs	r3, r7
 80005be:	0018      	movs	r0, r3
 80005c0:	f002 fdec 	bl	800319c <HAL_RCCEx_PeriphCLKConfig>
 80005c4:	1e03      	subs	r3, r0, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80005c8:	f000 f81e 	bl	8000608 <Error_Handler>
  }
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b01d      	add	sp, #116	; 0x74
 80005d2:	bd90      	pop	{r4, r7, pc}
 80005d4:	40007000 	.word	0x40007000
 80005d8:	ffffe7ff 	.word	0xffffe7ff

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <MX_GPIO_Init+0x28>)
 80005e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <MX_GPIO_Init+0x28>)
 80005e8:	2101      	movs	r1, #1
 80005ea:	430a      	orrs	r2, r1
 80005ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <MX_GPIO_Init+0x28>)
 80005f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005f2:	2201      	movs	r2, #1
 80005f4:	4013      	ands	r3, r2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b002      	add	sp, #8
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	40021000 	.word	0x40021000

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	e7fe      	b.n	8000610 <Error_Handler+0x8>
	...

08000614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <HAL_MspInit+0x24>)
 800061a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_MspInit+0x24>)
 800061e:	2101      	movs	r1, #1
 8000620:	430a      	orrs	r2, r1
 8000622:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <HAL_MspInit+0x24>)
 8000626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <HAL_MspInit+0x24>)
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	0549      	lsls	r1, r1, #21
 800062e:	430a      	orrs	r2, r1
 8000630:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000

0800063c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000640:	e7fe      	b.n	8000640 <NMI_Handler+0x4>

08000642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000646:	e7fe      	b.n	8000646 <HardFault_Handler+0x4>

08000648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000660:	f000 f894 	bl	800078c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <USB_IRQHandler+0x14>)
 8000672:	0018      	movs	r0, r3
 8000674:	f000 face 	bl	8000c14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	20000650 	.word	0x20000650

08000684 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000692:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000694:	f7ff fff6 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000698:	480c      	ldr	r0, [pc, #48]	; (80006cc <LoopForever+0x6>)
  ldr r1, =_edata
 800069a:	490d      	ldr	r1, [pc, #52]	; (80006d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800069c:	4a0d      	ldr	r2, [pc, #52]	; (80006d4 <LoopForever+0xe>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a0:	e002      	b.n	80006a8 <LoopCopyDataInit>

080006a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a6:	3304      	adds	r3, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ac:	d3f9      	bcc.n	80006a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b0:	4c0a      	ldr	r4, [pc, #40]	; (80006dc <LoopForever+0x16>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b4:	e001      	b.n	80006ba <LoopFillZerobss>

080006b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b8:	3204      	adds	r2, #4

080006ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006bc:	d3fb      	bcc.n	80006b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006be:	f007 f803 	bl	80076c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006c2:	f7ff fef1 	bl	80004a8 <main>

080006c6 <LoopForever>:

LoopForever:
    b LoopForever
 80006c6:	e7fe      	b.n	80006c6 <LoopForever>
  ldr   r0, =_estack
 80006c8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80006d4:	080077fc 	.word	0x080077fc
  ldr r2, =_sbss
 80006d8:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80006dc:	20000958 	.word	0x20000958

080006e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_COMP_IRQHandler>
	...

080006e4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <HAL_Init+0x3c>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <HAL_Init+0x3c>)
 80006f6:	2140      	movs	r1, #64	; 0x40
 80006f8:	430a      	orrs	r2, r1
 80006fa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006fc:	2000      	movs	r0, #0
 80006fe:	f000 f811 	bl	8000724 <HAL_InitTick>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d003      	beq.n	800070e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
 800070c:	e001      	b.n	8000712 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800070e:	f7ff ff81 	bl	8000614 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	781b      	ldrb	r3, [r3, #0]
}
 8000716:	0018      	movs	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	b002      	add	sp, #8
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	40022000 	.word	0x40022000

08000724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <HAL_InitTick+0x5c>)
 800072e:	681c      	ldr	r4, [r3, #0]
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <HAL_InitTick+0x60>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	0019      	movs	r1, r3
 8000736:	23fa      	movs	r3, #250	; 0xfa
 8000738:	0098      	lsls	r0, r3, #2
 800073a:	f7ff fce5 	bl	8000108 <__udivsi3>
 800073e:	0003      	movs	r3, r0
 8000740:	0019      	movs	r1, r3
 8000742:	0020      	movs	r0, r4
 8000744:	f7ff fce0 	bl	8000108 <__udivsi3>
 8000748:	0003      	movs	r3, r0
 800074a:	0018      	movs	r0, r3
 800074c:	f000 f92f 	bl	80009ae <HAL_SYSTICK_Config>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000754:	2301      	movs	r3, #1
 8000756:	e00f      	b.n	8000778 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b03      	cmp	r3, #3
 800075c:	d80b      	bhi.n	8000776 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	2301      	movs	r3, #1
 8000762:	425b      	negs	r3, r3
 8000764:	2200      	movs	r2, #0
 8000766:	0018      	movs	r0, r3
 8000768:	f000 f8fc 	bl	8000964 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_InitTick+0x64>)
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000772:	2300      	movs	r3, #0
 8000774:	e000      	b.n	8000778 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
}
 8000778:	0018      	movs	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	b003      	add	sp, #12
 800077e:	bd90      	pop	{r4, r7, pc}
 8000780:	20000000 	.word	0x20000000
 8000784:	20000008 	.word	0x20000008
 8000788:	20000004 	.word	0x20000004

0800078c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_IncTick+0x1c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	001a      	movs	r2, r3
 8000796:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_IncTick+0x20>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	18d2      	adds	r2, r2, r3
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <HAL_IncTick+0x20>)
 800079e:	601a      	str	r2, [r3, #0]
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20000184 	.word	0x20000184

080007b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  return uwTick;
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <HAL_GetTick+0x10>)
 80007b6:	681b      	ldr	r3, [r3, #0]
}
 80007b8:	0018      	movs	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	20000184 	.word	0x20000184

080007c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007cc:	f7ff fff0 	bl	80007b0 <HAL_GetTick>
 80007d0:	0003      	movs	r3, r0
 80007d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	3301      	adds	r3, #1
 80007dc:	d005      	beq.n	80007ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <HAL_Delay+0x44>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	001a      	movs	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	189b      	adds	r3, r3, r2
 80007e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	f7ff ffe0 	bl	80007b0 <HAL_GetTick>
 80007f0:	0002      	movs	r2, r0
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d8f7      	bhi.n	80007ec <HAL_Delay+0x28>
  {
  }
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b004      	add	sp, #16
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	20000008 	.word	0x20000008

0800080c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	0002      	movs	r2, r0
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b7f      	cmp	r3, #127	; 0x7f
 800081e:	d809      	bhi.n	8000834 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	001a      	movs	r2, r3
 8000826:	231f      	movs	r3, #31
 8000828:	401a      	ands	r2, r3
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <__NVIC_EnableIRQ+0x30>)
 800082c:	2101      	movs	r1, #1
 800082e:	4091      	lsls	r1, r2
 8000830:	000a      	movs	r2, r1
 8000832:	601a      	str	r2, [r3, #0]
  }
}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b002      	add	sp, #8
 800083a:	bd80      	pop	{r7, pc}
 800083c:	e000e100 	.word	0xe000e100

08000840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	0002      	movs	r2, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b7f      	cmp	r3, #127	; 0x7f
 8000854:	d828      	bhi.n	80008a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000856:	4a2f      	ldr	r2, [pc, #188]	; (8000914 <__NVIC_SetPriority+0xd4>)
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	b25b      	sxtb	r3, r3
 800085e:	089b      	lsrs	r3, r3, #2
 8000860:	33c0      	adds	r3, #192	; 0xc0
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	589b      	ldr	r3, [r3, r2]
 8000866:	1dfa      	adds	r2, r7, #7
 8000868:	7812      	ldrb	r2, [r2, #0]
 800086a:	0011      	movs	r1, r2
 800086c:	2203      	movs	r2, #3
 800086e:	400a      	ands	r2, r1
 8000870:	00d2      	lsls	r2, r2, #3
 8000872:	21ff      	movs	r1, #255	; 0xff
 8000874:	4091      	lsls	r1, r2
 8000876:	000a      	movs	r2, r1
 8000878:	43d2      	mvns	r2, r2
 800087a:	401a      	ands	r2, r3
 800087c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	019b      	lsls	r3, r3, #6
 8000882:	22ff      	movs	r2, #255	; 0xff
 8000884:	401a      	ands	r2, r3
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	0018      	movs	r0, r3
 800088c:	2303      	movs	r3, #3
 800088e:	4003      	ands	r3, r0
 8000890:	00db      	lsls	r3, r3, #3
 8000892:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000894:	481f      	ldr	r0, [pc, #124]	; (8000914 <__NVIC_SetPriority+0xd4>)
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b25b      	sxtb	r3, r3
 800089c:	089b      	lsrs	r3, r3, #2
 800089e:	430a      	orrs	r2, r1
 80008a0:	33c0      	adds	r3, #192	; 0xc0
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008a6:	e031      	b.n	800090c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a8:	4a1b      	ldr	r2, [pc, #108]	; (8000918 <__NVIC_SetPriority+0xd8>)
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	0019      	movs	r1, r3
 80008b0:	230f      	movs	r3, #15
 80008b2:	400b      	ands	r3, r1
 80008b4:	3b08      	subs	r3, #8
 80008b6:	089b      	lsrs	r3, r3, #2
 80008b8:	3306      	adds	r3, #6
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	18d3      	adds	r3, r2, r3
 80008be:	3304      	adds	r3, #4
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	1dfa      	adds	r2, r7, #7
 80008c4:	7812      	ldrb	r2, [r2, #0]
 80008c6:	0011      	movs	r1, r2
 80008c8:	2203      	movs	r2, #3
 80008ca:	400a      	ands	r2, r1
 80008cc:	00d2      	lsls	r2, r2, #3
 80008ce:	21ff      	movs	r1, #255	; 0xff
 80008d0:	4091      	lsls	r1, r2
 80008d2:	000a      	movs	r2, r1
 80008d4:	43d2      	mvns	r2, r2
 80008d6:	401a      	ands	r2, r3
 80008d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	019b      	lsls	r3, r3, #6
 80008de:	22ff      	movs	r2, #255	; 0xff
 80008e0:	401a      	ands	r2, r3
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	0018      	movs	r0, r3
 80008e8:	2303      	movs	r3, #3
 80008ea:	4003      	ands	r3, r0
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <__NVIC_SetPriority+0xd8>)
 80008f2:	1dfb      	adds	r3, r7, #7
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	001c      	movs	r4, r3
 80008f8:	230f      	movs	r3, #15
 80008fa:	4023      	ands	r3, r4
 80008fc:	3b08      	subs	r3, #8
 80008fe:	089b      	lsrs	r3, r3, #2
 8000900:	430a      	orrs	r2, r1
 8000902:	3306      	adds	r3, #6
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	18c3      	adds	r3, r0, r3
 8000908:	3304      	adds	r3, #4
 800090a:	601a      	str	r2, [r3, #0]
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b003      	add	sp, #12
 8000912:	bd90      	pop	{r4, r7, pc}
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	1e5a      	subs	r2, r3, #1
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	045b      	lsls	r3, r3, #17
 800092c:	429a      	cmp	r2, r3
 800092e:	d301      	bcc.n	8000934 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000930:	2301      	movs	r3, #1
 8000932:	e010      	b.n	8000956 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <SysTick_Config+0x44>)
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	3a01      	subs	r2, #1
 800093a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800093c:	2301      	movs	r3, #1
 800093e:	425b      	negs	r3, r3
 8000940:	2103      	movs	r1, #3
 8000942:	0018      	movs	r0, r3
 8000944:	f7ff ff7c 	bl	8000840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <SysTick_Config+0x44>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <SysTick_Config+0x44>)
 8000950:	2207      	movs	r2, #7
 8000952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000954:	2300      	movs	r3, #0
}
 8000956:	0018      	movs	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	e000e010 	.word	0xe000e010

08000964 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
 800096e:	210f      	movs	r1, #15
 8000970:	187b      	adds	r3, r7, r1
 8000972:	1c02      	adds	r2, r0, #0
 8000974:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	187b      	adds	r3, r7, r1
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	b25b      	sxtb	r3, r3
 800097e:	0011      	movs	r1, r2
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff ff5d 	bl	8000840 <__NVIC_SetPriority>
}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b004      	add	sp, #16
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	0002      	movs	r2, r0
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	0018      	movs	r0, r3
 80009a2:	f7ff ff33 	bl	800080c <__NVIC_EnableIRQ>
}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b002      	add	sp, #8
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff ffaf 	bl	800091c <SysTick_Config>
 80009be:	0003      	movs	r3, r0
}
 80009c0:	0018      	movs	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b002      	add	sp, #8
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80009c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ca:	b08b      	sub	sp, #44	; 0x2c
 80009cc:	af06      	add	r7, sp, #24
 80009ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d101      	bne.n	80009da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e0f0      	b.n	8000bbc <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a79      	ldr	r2, [pc, #484]	; (8000bc4 <HAL_PCD_Init+0x1fc>)
 80009de:	5c9b      	ldrb	r3, [r3, r2]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d108      	bne.n	80009f8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	23aa      	movs	r3, #170	; 0xaa
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	2100      	movs	r1, #0
 80009ee:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	0018      	movs	r0, r3
 80009f4:	f006 fb34 	bl	8007060 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a72      	ldr	r2, [pc, #456]	; (8000bc4 <HAL_PCD_Init+0x1fc>)
 80009fc:	2103      	movs	r1, #3
 80009fe:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	0018      	movs	r0, r3
 8000a06:	f002 fd6d 	bl	80034e4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	e049      	b.n	8000aa8 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000a14:	200f      	movs	r0, #15
 8000a16:	183b      	adds	r3, r7, r0
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	1c5a      	adds	r2, r3, #1
 8000a1e:	0013      	movs	r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	189b      	adds	r3, r3, r2
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	18cb      	adds	r3, r1, r3
 8000a28:	3301      	adds	r3, #1
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000a2e:	183b      	adds	r3, r7, r0
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	0013      	movs	r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	189b      	adds	r3, r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	183a      	adds	r2, r7, r0
 8000a40:	7812      	ldrb	r2, [r2, #0]
 8000a42:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000a44:	183b      	adds	r3, r7, r0
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	0013      	movs	r3, r2
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	189b      	adds	r3, r3, r2
 8000a52:	00db      	lsls	r3, r3, #3
 8000a54:	18cb      	adds	r3, r1, r3
 8000a56:	3303      	adds	r3, #3
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000a5c:	183b      	adds	r3, r7, r0
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	0013      	movs	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	189b      	adds	r3, r3, r2
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	18cb      	adds	r3, r1, r3
 8000a6c:	3338      	adds	r3, #56	; 0x38
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000a72:	183b      	adds	r3, r7, r0
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	0013      	movs	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	189b      	adds	r3, r3, r2
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	18cb      	adds	r3, r1, r3
 8000a82:	333c      	adds	r3, #60	; 0x3c
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000a88:	183b      	adds	r3, r7, r0
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	0013      	movs	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	189b      	adds	r3, r3, r2
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	18cb      	adds	r3, r1, r3
 8000a98:	3340      	adds	r3, #64	; 0x40
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a9e:	183b      	adds	r3, r7, r0
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	183b      	adds	r3, r7, r0
 8000aa4:	3201      	adds	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
 8000aa8:	210f      	movs	r1, #15
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d3ae      	bcc.n	8000a14 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
 8000abc:	e056      	b.n	8000b6c <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000abe:	240f      	movs	r4, #15
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	236a      	movs	r3, #106	; 0x6a
 8000ac8:	33ff      	adds	r3, #255	; 0xff
 8000aca:	0019      	movs	r1, r3
 8000acc:	0013      	movs	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	189b      	adds	r3, r3, r2
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	18c3      	adds	r3, r0, r3
 8000ad6:	185b      	adds	r3, r3, r1
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	781a      	ldrb	r2, [r3, #0]
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	23b4      	movs	r3, #180	; 0xb4
 8000ae4:	0059      	lsls	r1, r3, #1
 8000ae6:	0013      	movs	r3, r2
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	189b      	adds	r3, r3, r2
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	18c3      	adds	r3, r0, r3
 8000af0:	185b      	adds	r3, r3, r1
 8000af2:	193a      	adds	r2, r7, r4
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	236c      	movs	r3, #108	; 0x6c
 8000b00:	33ff      	adds	r3, #255	; 0xff
 8000b02:	0019      	movs	r1, r3
 8000b04:	0013      	movs	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	189b      	adds	r3, r3, r2
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	18c3      	adds	r3, r0, r3
 8000b0e:	185b      	adds	r3, r3, r1
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	23bc      	movs	r3, #188	; 0xbc
 8000b1c:	0059      	lsls	r1, r3, #1
 8000b1e:	0013      	movs	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	189b      	adds	r3, r3, r2
 8000b24:	00db      	lsls	r3, r3, #3
 8000b26:	18c3      	adds	r3, r0, r3
 8000b28:	185b      	adds	r3, r3, r1
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	23be      	movs	r3, #190	; 0xbe
 8000b36:	0059      	lsls	r1, r3, #1
 8000b38:	0013      	movs	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	189b      	adds	r3, r3, r2
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	18c3      	adds	r3, r0, r3
 8000b42:	185b      	adds	r3, r3, r1
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	781a      	ldrb	r2, [r3, #0]
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	23c0      	movs	r3, #192	; 0xc0
 8000b50:	0059      	lsls	r1, r3, #1
 8000b52:	0013      	movs	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	189b      	adds	r3, r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	18c3      	adds	r3, r0, r3
 8000b5c:	185b      	adds	r3, r3, r1
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	3201      	adds	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d3a1      	bcc.n	8000abe <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6818      	ldr	r0, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	466a      	mov	r2, sp
 8000b82:	0011      	movs	r1, r2
 8000b84:	001a      	movs	r2, r3
 8000b86:	3210      	adds	r2, #16
 8000b88:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000b8a:	c170      	stmia	r1!, {r4, r5, r6}
 8000b8c:	ca30      	ldmia	r2!, {r4, r5}
 8000b8e:	c130      	stmia	r1!, {r4, r5}
 8000b90:	6859      	ldr	r1, [r3, #4]
 8000b92:	689a      	ldr	r2, [r3, #8]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	f002 fcbf 	bl	8003518 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2224      	movs	r2, #36	; 0x24
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <HAL_PCD_Init+0x1fc>)
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d103      	bne.n	8000bba <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f001 fd09 	bl	80025cc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b005      	add	sp, #20
 8000bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc4:	000002a9 	.word	0x000002a9

08000bc8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	23aa      	movs	r3, #170	; 0xaa
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	5cd3      	ldrb	r3, [r2, r3]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d101      	bne.n	8000be0 <HAL_PCD_Start+0x18>
 8000bdc:	2302      	movs	r3, #2
 8000bde:	e014      	b.n	8000c0a <HAL_PCD_Start+0x42>
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	23aa      	movs	r3, #170	; 0xaa
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	2101      	movs	r1, #1
 8000be8:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f002 fc62 	bl	80034b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f004 fc65 	bl	80054c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	23aa      	movs	r3, #170	; 0xaa
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	2100      	movs	r1, #0
 8000c06:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b002      	add	sp, #8
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	0018      	movs	r0, r3
 8000c22:	f004 fc67 	bl	80054f4 <USB_ReadInterrupts>
 8000c26:	0003      	movs	r3, r0
 8000c28:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	021b      	lsls	r3, r3, #8
 8000c30:	4013      	ands	r3, r2
 8000c32:	d004      	beq.n	8000c3e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 fb48 	bl	80012cc <PCD_EP_ISR_Handler>

    return;
 8000c3c:	e11d      	b.n	8000e7a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	4013      	ands	r3, r2
 8000c46:	d015      	beq.n	8000c74 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2244      	movs	r2, #68	; 0x44
 8000c4e:	5a9b      	ldrh	r3, [r3, r2]
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	498a      	ldr	r1, [pc, #552]	; (8000e80 <HAL_PCD_IRQHandler+0x26c>)
 8000c58:	400a      	ands	r2, r1
 8000c5a:	b291      	uxth	r1, r2
 8000c5c:	2244      	movs	r2, #68	; 0x44
 8000c5e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	0018      	movs	r0, r3
 8000c64:	f006 fa7f 	bl	8007166 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 f915 	bl	8000e9c <HAL_PCD_SetAddress>

    return;
 8000c72:	e102      	b.n	8000e7a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	01db      	lsls	r3, r3, #7
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	d00c      	beq.n	8000c98 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2244      	movs	r2, #68	; 0x44
 8000c84:	5a9b      	ldrh	r3, [r3, r2]
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	497d      	ldr	r1, [pc, #500]	; (8000e84 <HAL_PCD_IRQHandler+0x270>)
 8000c8e:	400a      	ands	r2, r1
 8000c90:	b291      	uxth	r1, r2
 8000c92:	2244      	movs	r2, #68	; 0x44
 8000c94:	5299      	strh	r1, [r3, r2]

    return;
 8000c96:	e0f0      	b.n	8000e7a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	019b      	lsls	r3, r3, #6
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d00c      	beq.n	8000cbc <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2244      	movs	r2, #68	; 0x44
 8000ca8:	5a9b      	ldrh	r3, [r3, r2]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4975      	ldr	r1, [pc, #468]	; (8000e88 <HAL_PCD_IRQHandler+0x274>)
 8000cb2:	400a      	ands	r2, r1
 8000cb4:	b291      	uxth	r1, r2
 8000cb6:	2244      	movs	r2, #68	; 0x44
 8000cb8:	5299      	strh	r1, [r3, r2]

    return;
 8000cba:	e0de      	b.n	8000e7a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	015b      	lsls	r3, r3, #5
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	d038      	beq.n	8000d38 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2240      	movs	r2, #64	; 0x40
 8000ccc:	5a9b      	ldrh	r3, [r3, r2]
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2104      	movs	r1, #4
 8000cd6:	438a      	bics	r2, r1
 8000cd8:	b291      	uxth	r1, r2
 8000cda:	2240      	movs	r2, #64	; 0x40
 8000cdc:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2240      	movs	r2, #64	; 0x40
 8000ce4:	5a9b      	ldrh	r3, [r3, r2]
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2108      	movs	r1, #8
 8000cee:	438a      	bics	r2, r1
 8000cf0:	b291      	uxth	r1, r2
 8000cf2:	2240      	movs	r2, #64	; 0x40
 8000cf4:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	23b8      	movs	r3, #184	; 0xb8
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	5cd3      	ldrb	r3, [r2, r3]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d109      	bne.n	8000d16 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	23b8      	movs	r3, #184	; 0xb8
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	2100      	movs	r1, #0
 8000d0a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2100      	movs	r1, #0
 8000d10:	0018      	movs	r0, r3
 8000d12:	f001 fc85 	bl	8002620 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f006 fa65 	bl	80071e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2244      	movs	r2, #68	; 0x44
 8000d24:	5a9b      	ldrh	r3, [r3, r2]
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4957      	ldr	r1, [pc, #348]	; (8000e8c <HAL_PCD_IRQHandler+0x278>)
 8000d2e:	400a      	ands	r2, r1
 8000d30:	b291      	uxth	r1, r2
 8000d32:	2244      	movs	r2, #68	; 0x44
 8000d34:	5299      	strh	r1, [r3, r2]

    return;
 8000d36:	e0a0      	b.n	8000e7a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	011b      	lsls	r3, r3, #4
 8000d3e:	4013      	ands	r3, r2
 8000d40:	d028      	beq.n	8000d94 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2240      	movs	r2, #64	; 0x40
 8000d48:	5a9b      	ldrh	r3, [r3, r2]
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2108      	movs	r1, #8
 8000d52:	430a      	orrs	r2, r1
 8000d54:	b291      	uxth	r1, r2
 8000d56:	2240      	movs	r2, #64	; 0x40
 8000d58:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2244      	movs	r2, #68	; 0x44
 8000d60:	5a9b      	ldrh	r3, [r3, r2]
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4949      	ldr	r1, [pc, #292]	; (8000e90 <HAL_PCD_IRQHandler+0x27c>)
 8000d6a:	400a      	ands	r2, r1
 8000d6c:	b291      	uxth	r1, r2
 8000d6e:	2244      	movs	r2, #68	; 0x44
 8000d70:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2240      	movs	r2, #64	; 0x40
 8000d78:	5a9b      	ldrh	r3, [r3, r2]
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2104      	movs	r1, #4
 8000d82:	430a      	orrs	r2, r1
 8000d84:	b291      	uxth	r1, r2
 8000d86:	2240      	movs	r2, #64	; 0x40
 8000d88:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f006 fa0f 	bl	80071b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000d92:	e072      	b.n	8000e7a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2280      	movs	r2, #128	; 0x80
 8000d98:	4013      	ands	r3, r2
 8000d9a:	d046      	beq.n	8000e2a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2244      	movs	r2, #68	; 0x44
 8000da2:	5a9b      	ldrh	r3, [r3, r2]
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2180      	movs	r1, #128	; 0x80
 8000dac:	438a      	bics	r2, r1
 8000dae:	b291      	uxth	r1, r2
 8000db0:	2244      	movs	r2, #68	; 0x44
 8000db2:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	23b8      	movs	r3, #184	; 0xb8
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	5cd3      	ldrb	r3, [r2, r3]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d12f      	bne.n	8000e20 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2240      	movs	r2, #64	; 0x40
 8000dc6:	5a9b      	ldrh	r3, [r3, r2]
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2104      	movs	r1, #4
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	b291      	uxth	r1, r2
 8000dd4:	2240      	movs	r2, #64	; 0x40
 8000dd6:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2240      	movs	r2, #64	; 0x40
 8000dde:	5a9b      	ldrh	r3, [r3, r2]
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2108      	movs	r1, #8
 8000de8:	430a      	orrs	r2, r1
 8000dea:	b291      	uxth	r1, r2
 8000dec:	2240      	movs	r2, #64	; 0x40
 8000dee:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	23b8      	movs	r3, #184	; 0xb8
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	2101      	movs	r1, #1
 8000df8:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2254      	movs	r2, #84	; 0x54
 8000e00:	5a9b      	ldrh	r3, [r3, r2]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	223c      	movs	r2, #60	; 0x3c
 8000e08:	4013      	ands	r3, r2
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	23b9      	movs	r3, #185	; 0xb9
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2101      	movs	r1, #1
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f001 fc01 	bl	8002620 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000e1e:	e02c      	b.n	8000e7a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	0018      	movs	r0, r3
 8000e24:	f006 f9c4 	bl	80071b0 <HAL_PCD_SuspendCallback>
    return;
 8000e28:	e027      	b.n	8000e7a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4013      	ands	r3, r2
 8000e32:	d010      	beq.n	8000e56 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2244      	movs	r2, #68	; 0x44
 8000e3a:	5a9b      	ldrh	r3, [r3, r2]
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4914      	ldr	r1, [pc, #80]	; (8000e94 <HAL_PCD_IRQHandler+0x280>)
 8000e44:	400a      	ands	r2, r1
 8000e46:	b291      	uxth	r1, r2
 8000e48:	2244      	movs	r2, #68	; 0x44
 8000e4a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f006 f97a 	bl	8007148 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000e54:	e011      	b.n	8000e7a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	d00c      	beq.n	8000e7a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2244      	movs	r2, #68	; 0x44
 8000e66:	5a9b      	ldrh	r3, [r3, r2]
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	490a      	ldr	r1, [pc, #40]	; (8000e98 <HAL_PCD_IRQHandler+0x284>)
 8000e70:	400a      	ands	r2, r1
 8000e72:	b291      	uxth	r1, r2
 8000e74:	2244      	movs	r2, #68	; 0x44
 8000e76:	5299      	strh	r1, [r3, r2]

    return;
 8000e78:	46c0      	nop			; (mov r8, r8)
  }
}
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b004      	add	sp, #16
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	fffffbff 	.word	0xfffffbff
 8000e84:	ffffbfff 	.word	0xffffbfff
 8000e88:	ffffdfff 	.word	0xffffdfff
 8000e8c:	ffffefff 	.word	0xffffefff
 8000e90:	fffff7ff 	.word	0xfffff7ff
 8000e94:	fffffdff 	.word	0xfffffdff
 8000e98:	fffffeff 	.word	0xfffffeff

08000e9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	000a      	movs	r2, r1
 8000ea6:	1cfb      	adds	r3, r7, #3
 8000ea8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	23aa      	movs	r3, #170	; 0xaa
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	5cd3      	ldrb	r3, [r2, r3]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d101      	bne.n	8000eba <HAL_PCD_SetAddress+0x1e>
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e017      	b.n	8000eea <HAL_PCD_SetAddress+0x4e>
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	23aa      	movs	r3, #170	; 0xaa
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	1cfa      	adds	r2, r7, #3
 8000ec8:	2124      	movs	r1, #36	; 0x24
 8000eca:	7812      	ldrb	r2, [r2, #0]
 8000ecc:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	1cfb      	adds	r3, r7, #3
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	0010      	movs	r0, r2
 8000eda:	f004 fae1 	bl	80054a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	23aa      	movs	r3, #170	; 0xaa
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000ef2:	b590      	push	{r4, r7, lr}
 8000ef4:	b085      	sub	sp, #20
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	000c      	movs	r4, r1
 8000efc:	0010      	movs	r0, r2
 8000efe:	0019      	movs	r1, r3
 8000f00:	1cfb      	adds	r3, r7, #3
 8000f02:	1c22      	adds	r2, r4, #0
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	003b      	movs	r3, r7
 8000f08:	1c02      	adds	r2, r0, #0
 8000f0a:	801a      	strh	r2, [r3, #0]
 8000f0c:	1cbb      	adds	r3, r7, #2
 8000f0e:	1c0a      	adds	r2, r1, #0
 8000f10:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000f12:	230b      	movs	r3, #11
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f1a:	1cfb      	adds	r3, r7, #3
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b25b      	sxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	da0f      	bge.n	8000f44 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f24:	1cfb      	adds	r3, r7, #3
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2207      	movs	r2, #7
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	0013      	movs	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	189b      	adds	r3, r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	18d3      	adds	r3, r2, r3
 8000f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	705a      	strb	r2, [r3, #1]
 8000f42:	e00f      	b.n	8000f64 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f44:	1cfb      	adds	r3, r7, #3
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2207      	movs	r2, #7
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	0013      	movs	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	189b      	adds	r3, r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	3369      	adds	r3, #105	; 0x69
 8000f56:	33ff      	adds	r3, #255	; 0xff
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	18d3      	adds	r3, r2, r3
 8000f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2200      	movs	r2, #0
 8000f62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000f64:	1cfb      	adds	r3, r7, #3
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2207      	movs	r2, #7
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000f72:	003b      	movs	r3, r7
 8000f74:	881a      	ldrh	r2, [r3, #0]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	1cba      	adds	r2, r7, #2
 8000f7e:	7812      	ldrb	r2, [r2, #0]
 8000f80:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000f82:	1cbb      	adds	r3, r7, #2
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d102      	bne.n	8000f90 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	23aa      	movs	r3, #170	; 0xaa
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	5cd3      	ldrb	r3, [r2, r3]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d101      	bne.n	8000fa0 <HAL_PCD_EP_Open+0xae>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	e013      	b.n	8000fc8 <HAL_PCD_EP_Open+0xd6>
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	23aa      	movs	r3, #170	; 0xaa
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f002 fad8 	bl	8003568 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	23aa      	movs	r3, #170	; 0xaa
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	54d1      	strb	r1, [r2, r3]

  return ret;
 8000fc2:	230b      	movs	r3, #11
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	781b      	ldrb	r3, [r3, #0]
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b005      	add	sp, #20
 8000fce:	bd90      	pop	{r4, r7, pc}

08000fd0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	000a      	movs	r2, r1
 8000fda:	1cfb      	adds	r3, r7, #3
 8000fdc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000fde:	1cfb      	adds	r3, r7, #3
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	da0f      	bge.n	8001008 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fe8:	1cfb      	adds	r3, r7, #3
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2207      	movs	r2, #7
 8000fee:	4013      	ands	r3, r2
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	0013      	movs	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	189b      	adds	r3, r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	18d3      	adds	r3, r2, r3
 8000ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2201      	movs	r2, #1
 8001004:	705a      	strb	r2, [r3, #1]
 8001006:	e00f      	b.n	8001028 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001008:	1cfb      	adds	r3, r7, #3
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2207      	movs	r2, #7
 800100e:	401a      	ands	r2, r3
 8001010:	0013      	movs	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	189b      	adds	r3, r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	3369      	adds	r3, #105	; 0x69
 800101a:	33ff      	adds	r3, #255	; 0xff
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	18d3      	adds	r3, r2, r3
 8001020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2200      	movs	r2, #0
 8001026:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001028:	1cfb      	adds	r3, r7, #3
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2207      	movs	r2, #7
 800102e:	4013      	ands	r3, r2
 8001030:	b2da      	uxtb	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	23aa      	movs	r3, #170	; 0xaa
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	5cd3      	ldrb	r3, [r2, r3]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d101      	bne.n	8001046 <HAL_PCD_EP_Close+0x76>
 8001042:	2302      	movs	r3, #2
 8001044:	e011      	b.n	800106a <HAL_PCD_EP_Close+0x9a>
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	23aa      	movs	r3, #170	; 0xaa
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	2101      	movs	r1, #1
 800104e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	0011      	movs	r1, r2
 8001058:	0018      	movs	r0, r3
 800105a:	f002 fe27 	bl	8003cac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	23aa      	movs	r3, #170	; 0xaa
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	2100      	movs	r1, #0
 8001066:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	200b      	movs	r0, #11
 8001080:	183b      	adds	r3, r7, r0
 8001082:	1c0a      	adds	r2, r1, #0
 8001084:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001086:	0001      	movs	r1, r0
 8001088:	187b      	adds	r3, r7, r1
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2207      	movs	r2, #7
 800108e:	401a      	ands	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	189b      	adds	r3, r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	3369      	adds	r3, #105	; 0x69
 800109a:	33ff      	adds	r3, #255	; 0xff
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	18d3      	adds	r3, r2, r3
 80010a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2200      	movs	r2, #0
 80010b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	2200      	movs	r2, #0
 80010b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2207      	movs	r2, #7
 80010c0:	4013      	ands	r3, r2
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	0011      	movs	r1, r2
 80010d0:	0018      	movs	r0, r3
 80010d2:	f002 ffab 	bl	800402c <USB_EPStartXfer>

  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	0018      	movs	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	b006      	add	sp, #24
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	200b      	movs	r0, #11
 80010ee:	183b      	adds	r3, r7, r0
 80010f0:	1c0a      	adds	r2, r1, #0
 80010f2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010f4:	183b      	adds	r3, r7, r0
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2207      	movs	r2, #7
 80010fa:	4013      	ands	r3, r2
 80010fc:	1c5a      	adds	r2, r3, #1
 80010fe:	0013      	movs	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	189b      	adds	r3, r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	18d3      	adds	r3, r2, r3
 800110a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	2224      	movs	r2, #36	; 0x24
 800111c:	2101      	movs	r1, #1
 800111e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2200      	movs	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2201      	movs	r2, #1
 8001130:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001132:	183b      	adds	r3, r7, r0
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2207      	movs	r2, #7
 8001138:	4013      	ands	r3, r2
 800113a:	b2da      	uxtb	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	0011      	movs	r1, r2
 8001148:	0018      	movs	r0, r3
 800114a:	f002 ff6f 	bl	800402c <USB_EPStartXfer>

  return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	0018      	movs	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	b006      	add	sp, #24
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	000a      	movs	r2, r1
 8001162:	1cfb      	adds	r3, r7, #3
 8001164:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001166:	1cfb      	adds	r3, r7, #3
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2207      	movs	r2, #7
 800116c:	401a      	ands	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	429a      	cmp	r2, r3
 8001174:	d901      	bls.n	800117a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e046      	b.n	8001208 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800117a:	1cfb      	adds	r3, r7, #3
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b25b      	sxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	da0f      	bge.n	80011a4 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001184:	1cfb      	adds	r3, r7, #3
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2207      	movs	r2, #7
 800118a:	4013      	ands	r3, r2
 800118c:	1c5a      	adds	r2, r3, #1
 800118e:	0013      	movs	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	189b      	adds	r3, r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	18d3      	adds	r3, r2, r3
 800119a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2201      	movs	r2, #1
 80011a0:	705a      	strb	r2, [r3, #1]
 80011a2:	e00d      	b.n	80011c0 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80011a4:	1cfb      	adds	r3, r7, #3
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	0013      	movs	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	189b      	adds	r3, r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	3369      	adds	r3, #105	; 0x69
 80011b2:	33ff      	adds	r3, #255	; 0xff
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	18d3      	adds	r3, r2, r3
 80011b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2200      	movs	r2, #0
 80011be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2201      	movs	r2, #1
 80011c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011c6:	1cfb      	adds	r3, r7, #3
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2207      	movs	r2, #7
 80011cc:	4013      	ands	r3, r2
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	23aa      	movs	r3, #170	; 0xaa
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	5cd3      	ldrb	r3, [r2, r3]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <HAL_PCD_EP_SetStall+0x8c>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e011      	b.n	8001208 <HAL_PCD_EP_SetStall+0xb0>
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	23aa      	movs	r3, #170	; 0xaa
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	2101      	movs	r1, #1
 80011ec:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	0011      	movs	r1, r2
 80011f6:	0018      	movs	r0, r3
 80011f8:	f004 f850 	bl	800529c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	23aa      	movs	r3, #170	; 0xaa
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	2100      	movs	r1, #0
 8001204:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	b004      	add	sp, #16
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	000a      	movs	r2, r1
 800121a:	1cfb      	adds	r3, r7, #3
 800121c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800121e:	1cfb      	adds	r3, r7, #3
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	220f      	movs	r2, #15
 8001224:	401a      	ands	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	d901      	bls.n	8001232 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e048      	b.n	80012c4 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001232:	1cfb      	adds	r3, r7, #3
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b25b      	sxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	da0f      	bge.n	800125c <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800123c:	1cfb      	adds	r3, r7, #3
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2207      	movs	r2, #7
 8001242:	4013      	ands	r3, r2
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	0013      	movs	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	189b      	adds	r3, r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	18d3      	adds	r3, r2, r3
 8001252:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2201      	movs	r2, #1
 8001258:	705a      	strb	r2, [r3, #1]
 800125a:	e00f      	b.n	800127c <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800125c:	1cfb      	adds	r3, r7, #3
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2207      	movs	r2, #7
 8001262:	401a      	ands	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	189b      	adds	r3, r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	3369      	adds	r3, #105	; 0x69
 800126e:	33ff      	adds	r3, #255	; 0xff
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	18d3      	adds	r3, r2, r3
 8001274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2200      	movs	r2, #0
 800127a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2200      	movs	r2, #0
 8001280:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001282:	1cfb      	adds	r3, r7, #3
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2207      	movs	r2, #7
 8001288:	4013      	ands	r3, r2
 800128a:	b2da      	uxtb	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	23aa      	movs	r3, #170	; 0xaa
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	5cd3      	ldrb	r3, [r2, r3]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <HAL_PCD_EP_ClrStall+0x90>
 800129c:	2302      	movs	r3, #2
 800129e:	e011      	b.n	80012c4 <HAL_PCD_EP_ClrStall+0xb4>
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	23aa      	movs	r3, #170	; 0xaa
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	2101      	movs	r1, #1
 80012a8:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	0011      	movs	r1, r2
 80012b2:	0018      	movs	r0, r3
 80012b4:	f004 f842 	bl	800533c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	23aa      	movs	r3, #170	; 0xaa
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	2100      	movs	r1, #0
 80012c0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	0018      	movs	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b004      	add	sp, #16
 80012ca:	bd80      	pop	{r7, pc}

080012cc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80012cc:	b5b0      	push	{r4, r5, r7, lr}
 80012ce:	b096      	sub	sp, #88	; 0x58
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80012d4:	f000 fbec 	bl	8001ab0 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	204e      	movs	r0, #78	; 0x4e
 80012de:	183b      	adds	r3, r7, r0
 80012e0:	2144      	movs	r1, #68	; 0x44
 80012e2:	5a52      	ldrh	r2, [r2, r1]
 80012e4:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80012e6:	183b      	adds	r3, r7, r0
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	244d      	movs	r4, #77	; 0x4d
 80012ee:	193b      	adds	r3, r7, r4
 80012f0:	210f      	movs	r1, #15
 80012f2:	400a      	ands	r2, r1
 80012f4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80012f6:	193b      	adds	r3, r7, r4
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d000      	beq.n	8001300 <PCD_EP_ISR_Handler+0x34>
 80012fe:	e18f      	b.n	8001620 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001300:	183b      	adds	r3, r7, r0
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	2210      	movs	r2, #16
 8001306:	4013      	ands	r3, r2
 8001308:	d155      	bne.n	80013b6 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	b29a      	uxth	r2, r3
 8001312:	200e      	movs	r0, #14
 8001314:	183b      	adds	r3, r7, r0
 8001316:	49bb      	ldr	r1, [pc, #748]	; (8001604 <PCD_EP_ISR_Handler+0x338>)
 8001318:	400a      	ands	r2, r1
 800131a:	801a      	strh	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	183a      	adds	r2, r7, r0
 8001322:	8812      	ldrh	r2, [r2, #0]
 8001324:	49b8      	ldr	r1, [pc, #736]	; (8001608 <PCD_EP_ISR_Handler+0x33c>)
 8001326:	430a      	orrs	r2, r1
 8001328:	b292      	uxth	r2, r2
 800132a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3328      	adds	r3, #40	; 0x28
 8001330:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2250      	movs	r2, #80	; 0x50
 8001338:	5a9b      	ldrh	r3, [r3, r2]
 800133a:	b29b      	uxth	r3, r3
 800133c:	001a      	movs	r2, r3
 800133e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	18d2      	adds	r2, r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	18d3      	adds	r3, r2, r3
 800134c:	4aaf      	ldr	r2, [pc, #700]	; (800160c <PCD_EP_ISR_Handler+0x340>)
 800134e:	4694      	mov	ip, r2
 8001350:	4463      	add	r3, ip
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	059b      	lsls	r3, r3, #22
 8001356:	0d9a      	lsrs	r2, r3, #22
 8001358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800135a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800135c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800135e:	695a      	ldr	r2, [r3, #20]
 8001360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	18d2      	adds	r2, r2, r3
 8001366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001368:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2100      	movs	r1, #0
 800136e:	0018      	movs	r0, r3
 8001370:	f005 fecc 	bl	800710c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2224      	movs	r2, #36	; 0x24
 8001378:	5c9b      	ldrb	r3, [r3, r2]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <PCD_EP_ISR_Handler+0xb8>
 8001380:	f000 fb96 	bl	8001ab0 <PCD_EP_ISR_Handler+0x7e4>
 8001384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <PCD_EP_ISR_Handler+0xc4>
 800138c:	f000 fb90 	bl	8001ab0 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2224      	movs	r2, #36	; 0x24
 8001394:	5c9b      	ldrb	r3, [r3, r2]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2280      	movs	r2, #128	; 0x80
 800139a:	4252      	negs	r2, r2
 800139c:	4313      	orrs	r3, r2
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	b291      	uxth	r1, r2
 80013a6:	224c      	movs	r2, #76	; 0x4c
 80013a8:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2224      	movs	r2, #36	; 0x24
 80013ae:	2100      	movs	r1, #0
 80013b0:	5499      	strb	r1, [r3, r2]
 80013b2:	f000 fb7d 	bl	8001ab0 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3369      	adds	r3, #105	; 0x69
 80013ba:	33ff      	adds	r3, #255	; 0xff
 80013bc:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	214a      	movs	r1, #74	; 0x4a
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	8812      	ldrh	r2, [r2, #0]
 80013c8:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	881a      	ldrh	r2, [r3, #0]
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	4013      	ands	r3, r2
 80013d4:	d037      	beq.n	8001446 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2250      	movs	r2, #80	; 0x50
 80013dc:	5a9b      	ldrh	r3, [r3, r2]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	001a      	movs	r2, r3
 80013e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	18d2      	adds	r2, r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	18d3      	adds	r3, r2, r3
 80013f0:	4a87      	ldr	r2, [pc, #540]	; (8001610 <PCD_EP_ISR_Handler+0x344>)
 80013f2:	4694      	mov	ip, r2
 80013f4:	4463      	add	r3, ip
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	059b      	lsls	r3, r3, #22
 80013fa:	0d9a      	lsrs	r2, r3, #22
 80013fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013fe:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6818      	ldr	r0, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	22ac      	movs	r2, #172	; 0xac
 8001408:	0092      	lsls	r2, r2, #2
 800140a:	1899      	adds	r1, r3, r2
 800140c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800140e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001412:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001414:	b29b      	uxth	r3, r3
 8001416:	f004 f8c4 	bl	80055a2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	b29a      	uxth	r2, r3
 8001422:	2010      	movs	r0, #16
 8001424:	183b      	adds	r3, r7, r0
 8001426:	497b      	ldr	r1, [pc, #492]	; (8001614 <PCD_EP_ISR_Handler+0x348>)
 8001428:	400a      	ands	r2, r1
 800142a:	801a      	strh	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	183a      	adds	r2, r7, r0
 8001432:	8812      	ldrh	r2, [r2, #0]
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	430a      	orrs	r2, r1
 8001438:	b292      	uxth	r2, r2
 800143a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	0018      	movs	r0, r3
 8001440:	f005 fe2e 	bl	80070a0 <HAL_PCD_SetupStageCallback>
 8001444:	e334      	b.n	8001ab0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001446:	234a      	movs	r3, #74	; 0x4a
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	2200      	movs	r2, #0
 800144c:	5e9b      	ldrsh	r3, [r3, r2]
 800144e:	2b00      	cmp	r3, #0
 8001450:	db00      	blt.n	8001454 <PCD_EP_ISR_Handler+0x188>
 8001452:	e32d      	b.n	8001ab0 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	b29a      	uxth	r2, r3
 800145c:	201e      	movs	r0, #30
 800145e:	183b      	adds	r3, r7, r0
 8001460:	496c      	ldr	r1, [pc, #432]	; (8001614 <PCD_EP_ISR_Handler+0x348>)
 8001462:	400a      	ands	r2, r1
 8001464:	801a      	strh	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	183a      	adds	r2, r7, r0
 800146c:	8812      	ldrh	r2, [r2, #0]
 800146e:	2180      	movs	r1, #128	; 0x80
 8001470:	430a      	orrs	r2, r1
 8001472:	b292      	uxth	r2, r2
 8001474:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2250      	movs	r2, #80	; 0x50
 800147c:	5a9b      	ldrh	r3, [r3, r2]
 800147e:	b29b      	uxth	r3, r3
 8001480:	001a      	movs	r2, r3
 8001482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	18d2      	adds	r2, r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	18d3      	adds	r3, r2, r3
 8001490:	4a5f      	ldr	r2, [pc, #380]	; (8001610 <PCD_EP_ISR_Handler+0x344>)
 8001492:	4694      	mov	ip, r2
 8001494:	4463      	add	r3, ip
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	059b      	lsls	r3, r3, #22
 800149a:	0d9a      	lsrs	r2, r3, #22
 800149c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800149e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80014a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d01a      	beq.n	80014de <PCD_EP_ISR_Handler+0x212>
 80014a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d016      	beq.n	80014de <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014b6:	6959      	ldr	r1, [r3, #20]
 80014b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ba:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80014bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014be:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	f004 f86e 	bl	80055a2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80014c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c8:	695a      	ldr	r2, [r3, #20]
 80014ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	18d2      	adds	r2, r2, r3
 80014d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014d2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2100      	movs	r1, #0
 80014d8:	0018      	movs	r0, r3
 80014da:	f005 fdf6 	bl	80070ca <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	214a      	movs	r1, #74	; 0x4a
 80014e4:	187b      	adds	r3, r7, r1
 80014e6:	8812      	ldrh	r2, [r2, #0]
 80014e8:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	881a      	ldrh	r2, [r3, #0]
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	4013      	ands	r3, r2
 80014f4:	d000      	beq.n	80014f8 <PCD_EP_ISR_Handler+0x22c>
 80014f6:	e2db      	b.n	8001ab0 <PCD_EP_ISR_Handler+0x7e4>
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	881a      	ldrh	r2, [r3, #0]
 80014fc:	23c0      	movs	r3, #192	; 0xc0
 80014fe:	019b      	lsls	r3, r3, #6
 8001500:	401a      	ands	r2, r3
 8001502:	23c0      	movs	r3, #192	; 0xc0
 8001504:	019b      	lsls	r3, r3, #6
 8001506:	429a      	cmp	r2, r3
 8001508:	d100      	bne.n	800150c <PCD_EP_ISR_Handler+0x240>
 800150a:	e2d1      	b.n	8001ab0 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	61bb      	str	r3, [r7, #24]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2250      	movs	r2, #80	; 0x50
 8001518:	5a9b      	ldrh	r3, [r3, r2]
 800151a:	b29b      	uxth	r3, r3
 800151c:	001a      	movs	r2, r3
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	189b      	adds	r3, r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	4a3a      	ldr	r2, [pc, #232]	; (8001610 <PCD_EP_ISR_Handler+0x344>)
 8001528:	4694      	mov	ip, r2
 800152a:	4463      	add	r3, ip
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	b29b      	uxth	r3, r3
 8001534:	059b      	lsls	r3, r3, #22
 8001536:	0d9b      	lsrs	r3, r3, #22
 8001538:	b29a      	uxth	r2, r3
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	801a      	strh	r2, [r3, #0]
 800153e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b3e      	cmp	r3, #62	; 0x3e
 8001544:	d91a      	bls.n	800157c <PCD_EP_ISR_Handler+0x2b0>
 8001546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	095b      	lsrs	r3, r3, #5
 800154c:	647b      	str	r3, [r7, #68]	; 0x44
 800154e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	221f      	movs	r2, #31
 8001554:	4013      	ands	r3, r2
 8001556:	d102      	bne.n	800155e <PCD_EP_ISR_Handler+0x292>
 8001558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800155a:	3b01      	subs	r3, #1
 800155c:	647b      	str	r3, [r7, #68]	; 0x44
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	b29a      	uxth	r2, r3
 8001564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001566:	b29b      	uxth	r3, r3
 8001568:	029b      	lsls	r3, r3, #10
 800156a:	b29b      	uxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b29b      	uxth	r3, r3
 8001570:	4a25      	ldr	r2, [pc, #148]	; (8001608 <PCD_EP_ISR_Handler+0x33c>)
 8001572:	4313      	orrs	r3, r2
 8001574:	b29a      	uxth	r2, r3
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	801a      	strh	r2, [r3, #0]
 800157a:	e023      	b.n	80015c4 <PCD_EP_ISR_Handler+0x2f8>
 800157c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d108      	bne.n	8001596 <PCD_EP_ISR_Handler+0x2ca>
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	4a1f      	ldr	r2, [pc, #124]	; (8001608 <PCD_EP_ISR_Handler+0x33c>)
 800158c:	4313      	orrs	r3, r2
 800158e:	b29a      	uxth	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	801a      	strh	r2, [r3, #0]
 8001594:	e016      	b.n	80015c4 <PCD_EP_ISR_Handler+0x2f8>
 8001596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	085b      	lsrs	r3, r3, #1
 800159c:	647b      	str	r3, [r7, #68]	; 0x44
 800159e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	2201      	movs	r2, #1
 80015a4:	4013      	ands	r3, r2
 80015a6:	d002      	beq.n	80015ae <PCD_EP_ISR_Handler+0x2e2>
 80015a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015aa:	3301      	adds	r3, #1
 80015ac:	647b      	str	r3, [r7, #68]	; 0x44
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	029b      	lsls	r3, r3, #10
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b29a      	uxth	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	2012      	movs	r0, #18
 80015ce:	183b      	adds	r3, r7, r0
 80015d0:	4911      	ldr	r1, [pc, #68]	; (8001618 <PCD_EP_ISR_Handler+0x34c>)
 80015d2:	400a      	ands	r2, r1
 80015d4:	801a      	strh	r2, [r3, #0]
 80015d6:	183b      	adds	r3, r7, r0
 80015d8:	183a      	adds	r2, r7, r0
 80015da:	8812      	ldrh	r2, [r2, #0]
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	0149      	lsls	r1, r1, #5
 80015e0:	404a      	eors	r2, r1
 80015e2:	801a      	strh	r2, [r3, #0]
 80015e4:	183b      	adds	r3, r7, r0
 80015e6:	183a      	adds	r2, r7, r0
 80015e8:	8812      	ldrh	r2, [r2, #0]
 80015ea:	2180      	movs	r1, #128	; 0x80
 80015ec:	0189      	lsls	r1, r1, #6
 80015ee:	404a      	eors	r2, r1
 80015f0:	801a      	strh	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	183a      	adds	r2, r7, r0
 80015f8:	8812      	ldrh	r2, [r2, #0]
 80015fa:	4908      	ldr	r1, [pc, #32]	; (800161c <PCD_EP_ISR_Handler+0x350>)
 80015fc:	430a      	orrs	r2, r1
 80015fe:	b292      	uxth	r2, r2
 8001600:	801a      	strh	r2, [r3, #0]
 8001602:	e255      	b.n	8001ab0 <PCD_EP_ISR_Handler+0x7e4>
 8001604:	ffff8f0f 	.word	0xffff8f0f
 8001608:	ffff8000 	.word	0xffff8000
 800160c:	00000402 	.word	0x00000402
 8001610:	00000406 	.word	0x00000406
 8001614:	00000f8f 	.word	0x00000f8f
 8001618:	ffffbf8f 	.word	0xffffbf8f
 800161c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	001a      	movs	r2, r3
 8001626:	204d      	movs	r0, #77	; 0x4d
 8001628:	183b      	adds	r3, r7, r0
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	18d2      	adds	r2, r2, r3
 8001630:	214a      	movs	r1, #74	; 0x4a
 8001632:	187b      	adds	r3, r7, r1
 8001634:	8812      	ldrh	r2, [r2, #0]
 8001636:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001638:	187b      	adds	r3, r7, r1
 800163a:	2200      	movs	r2, #0
 800163c:	5e9b      	ldrsh	r3, [r3, r2]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db00      	blt.n	8001644 <PCD_EP_ISR_Handler+0x378>
 8001642:	e0fa      	b.n	800183a <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	001a      	movs	r2, r3
 800164a:	183b      	adds	r3, r7, r0
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	18d3      	adds	r3, r2, r3
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	b29a      	uxth	r2, r3
 8001656:	2448      	movs	r4, #72	; 0x48
 8001658:	193b      	adds	r3, r7, r4
 800165a:	49d1      	ldr	r1, [pc, #836]	; (80019a0 <PCD_EP_ISR_Handler+0x6d4>)
 800165c:	400a      	ands	r2, r1
 800165e:	801a      	strh	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	001a      	movs	r2, r3
 8001666:	183b      	adds	r3, r7, r0
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	18d3      	adds	r3, r2, r3
 800166e:	193a      	adds	r2, r7, r4
 8001670:	8812      	ldrh	r2, [r2, #0]
 8001672:	2180      	movs	r1, #128	; 0x80
 8001674:	430a      	orrs	r2, r1
 8001676:	b292      	uxth	r2, r2
 8001678:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800167a:	183b      	adds	r3, r7, r0
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	0013      	movs	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	189b      	adds	r3, r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	3369      	adds	r3, #105	; 0x69
 8001688:	33ff      	adds	r3, #255	; 0xff
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	18d3      	adds	r3, r2, r3
 800168e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001692:	7b1b      	ldrb	r3, [r3, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d125      	bne.n	80016e4 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2250      	movs	r2, #80	; 0x50
 800169e:	5a9b      	ldrh	r3, [r3, r2]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	001a      	movs	r2, r3
 80016a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	18d2      	adds	r2, r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	18d3      	adds	r3, r2, r3
 80016b2:	4abc      	ldr	r2, [pc, #752]	; (80019a4 <PCD_EP_ISR_Handler+0x6d8>)
 80016b4:	4694      	mov	ip, r2
 80016b6:	4463      	add	r3, ip
 80016b8:	881a      	ldrh	r2, [r3, #0]
 80016ba:	2450      	movs	r4, #80	; 0x50
 80016bc:	193b      	adds	r3, r7, r4
 80016be:	0592      	lsls	r2, r2, #22
 80016c0:	0d92      	lsrs	r2, r2, #22
 80016c2:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80016c4:	193b      	adds	r3, r7, r4
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d100      	bne.n	80016ce <PCD_EP_ISR_Handler+0x402>
 80016cc:	e08d      	b.n	80017ea <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d4:	6959      	ldr	r1, [r3, #20]
 80016d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d8:	88da      	ldrh	r2, [r3, #6]
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	f003 ff60 	bl	80055a2 <USB_ReadPMA>
 80016e2:	e082      	b.n	80017ea <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80016e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016e6:	78db      	ldrb	r3, [r3, #3]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d10c      	bne.n	8001706 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80016ec:	2350      	movs	r3, #80	; 0x50
 80016ee:	18fc      	adds	r4, r7, r3
 80016f0:	234a      	movs	r3, #74	; 0x4a
 80016f2:	18fb      	adds	r3, r7, r3
 80016f4:	881a      	ldrh	r2, [r3, #0]
 80016f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	0018      	movs	r0, r3
 80016fc:	f000 f9ec 	bl	8001ad8 <HAL_PCD_EP_DB_Receive>
 8001700:	0003      	movs	r3, r0
 8001702:	8023      	strh	r3, [r4, #0]
 8001704:	e071      	b.n	80017ea <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	001a      	movs	r2, r3
 800170c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	18d3      	adds	r3, r2, r3
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	b29a      	uxth	r2, r3
 8001718:	2052      	movs	r0, #82	; 0x52
 800171a:	183b      	adds	r3, r7, r0
 800171c:	49a2      	ldr	r1, [pc, #648]	; (80019a8 <PCD_EP_ISR_Handler+0x6dc>)
 800171e:	400a      	ands	r2, r1
 8001720:	801a      	strh	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	001a      	movs	r2, r3
 8001728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	18d3      	adds	r3, r2, r3
 8001730:	183a      	adds	r2, r7, r0
 8001732:	8812      	ldrh	r2, [r2, #0]
 8001734:	499d      	ldr	r1, [pc, #628]	; (80019ac <PCD_EP_ISR_Handler+0x6e0>)
 8001736:	430a      	orrs	r2, r1
 8001738:	b292      	uxth	r2, r2
 800173a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	001a      	movs	r2, r3
 8001742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	18d3      	adds	r3, r2, r3
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	b29b      	uxth	r3, r3
 800174e:	001a      	movs	r2, r3
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	01db      	lsls	r3, r3, #7
 8001754:	4013      	ands	r3, r2
 8001756:	d024      	beq.n	80017a2 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2250      	movs	r2, #80	; 0x50
 800175e:	5a9b      	ldrh	r3, [r3, r2]
 8001760:	b29b      	uxth	r3, r3
 8001762:	001a      	movs	r2, r3
 8001764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	18d2      	adds	r2, r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	18d3      	adds	r3, r2, r3
 8001772:	4a8f      	ldr	r2, [pc, #572]	; (80019b0 <PCD_EP_ISR_Handler+0x6e4>)
 8001774:	4694      	mov	ip, r2
 8001776:	4463      	add	r3, ip
 8001778:	881a      	ldrh	r2, [r3, #0]
 800177a:	2450      	movs	r4, #80	; 0x50
 800177c:	193b      	adds	r3, r7, r4
 800177e:	0592      	lsls	r2, r2, #22
 8001780:	0d92      	lsrs	r2, r2, #22
 8001782:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001784:	193b      	adds	r3, r7, r4
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d02e      	beq.n	80017ea <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001792:	6959      	ldr	r1, [r3, #20]
 8001794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001796:	891a      	ldrh	r2, [r3, #8]
 8001798:	193b      	adds	r3, r7, r4
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	f003 ff01 	bl	80055a2 <USB_ReadPMA>
 80017a0:	e023      	b.n	80017ea <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2250      	movs	r2, #80	; 0x50
 80017a8:	5a9b      	ldrh	r3, [r3, r2]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	001a      	movs	r2, r3
 80017ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	18d2      	adds	r2, r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	18d3      	adds	r3, r2, r3
 80017bc:	4a79      	ldr	r2, [pc, #484]	; (80019a4 <PCD_EP_ISR_Handler+0x6d8>)
 80017be:	4694      	mov	ip, r2
 80017c0:	4463      	add	r3, ip
 80017c2:	881a      	ldrh	r2, [r3, #0]
 80017c4:	2450      	movs	r4, #80	; 0x50
 80017c6:	193b      	adds	r3, r7, r4
 80017c8:	0592      	lsls	r2, r2, #22
 80017ca:	0d92      	lsrs	r2, r2, #22
 80017cc:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80017ce:	193b      	adds	r3, r7, r4
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d009      	beq.n	80017ea <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6818      	ldr	r0, [r3, #0]
 80017da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017dc:	6959      	ldr	r1, [r3, #20]
 80017de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e0:	895a      	ldrh	r2, [r3, #10]
 80017e2:	193b      	adds	r3, r7, r4
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	f003 fedc 	bl	80055a2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80017ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ec:	69da      	ldr	r2, [r3, #28]
 80017ee:	2150      	movs	r1, #80	; 0x50
 80017f0:	187b      	adds	r3, r7, r1
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	18d2      	adds	r2, r2, r3
 80017f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80017fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	18d2      	adds	r2, r2, r3
 8001804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001806:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <PCD_EP_ISR_Handler+0x550>
 8001810:	187b      	adds	r3, r7, r1
 8001812:	881a      	ldrh	r2, [r3, #0]
 8001814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	d207      	bcs.n	800182c <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800181c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	0011      	movs	r1, r2
 8001824:	0018      	movs	r0, r3
 8001826:	f005 fc50 	bl	80070ca <HAL_PCD_DataOutStageCallback>
 800182a:	e006      	b.n	800183a <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001832:	0011      	movs	r1, r2
 8001834:	0018      	movs	r0, r3
 8001836:	f002 fbf9 	bl	800402c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800183a:	244a      	movs	r4, #74	; 0x4a
 800183c:	193b      	adds	r3, r7, r4
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	2280      	movs	r2, #128	; 0x80
 8001842:	4013      	ands	r3, r2
 8001844:	d100      	bne.n	8001848 <PCD_EP_ISR_Handler+0x57c>
 8001846:	e133      	b.n	8001ab0 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001848:	204d      	movs	r0, #77	; 0x4d
 800184a:	183b      	adds	r3, r7, r0
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	0013      	movs	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	189b      	adds	r3, r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	18d3      	adds	r3, r2, r3
 800185c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	001a      	movs	r2, r3
 8001864:	183b      	adds	r3, r7, r0
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	18d3      	adds	r3, r2, r3
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	b29a      	uxth	r2, r3
 8001870:	2542      	movs	r5, #66	; 0x42
 8001872:	197b      	adds	r3, r7, r5
 8001874:	494f      	ldr	r1, [pc, #316]	; (80019b4 <PCD_EP_ISR_Handler+0x6e8>)
 8001876:	400a      	ands	r2, r1
 8001878:	801a      	strh	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	001a      	movs	r2, r3
 8001880:	183b      	adds	r3, r7, r0
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	18d3      	adds	r3, r2, r3
 8001888:	197a      	adds	r2, r7, r5
 800188a:	8812      	ldrh	r2, [r2, #0]
 800188c:	494a      	ldr	r1, [pc, #296]	; (80019b8 <PCD_EP_ISR_Handler+0x6ec>)
 800188e:	430a      	orrs	r2, r1
 8001890:	b292      	uxth	r2, r2
 8001892:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001896:	78db      	ldrb	r3, [r3, #3]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d000      	beq.n	800189e <PCD_EP_ISR_Handler+0x5d2>
 800189c:	e0af      	b.n	80019fe <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800189e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80018a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a6:	7b1b      	ldrb	r3, [r3, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d100      	bne.n	80018ae <PCD_EP_ISR_Handler+0x5e2>
 80018ac:	e09f      	b.n	80019ee <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	2240      	movs	r2, #64	; 0x40
 80018b4:	4013      	ands	r3, r2
 80018b6:	d046      	beq.n	8001946 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80018b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ba:	785b      	ldrb	r3, [r3, #1]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d125      	bne.n	800190c <PCD_EP_ISR_Handler+0x640>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2250      	movs	r2, #80	; 0x50
 80018cc:	5a9b      	ldrh	r3, [r3, r2]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	001a      	movs	r2, r3
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	189b      	adds	r3, r3, r2
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
 80018d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	00da      	lsls	r2, r3, #3
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	18d3      	adds	r3, r2, r3
 80018e2:	4a33      	ldr	r2, [pc, #204]	; (80019b0 <PCD_EP_ISR_Handler+0x6e4>)
 80018e4:	4694      	mov	ip, r2
 80018e6:	4463      	add	r3, ip
 80018e8:	623b      	str	r3, [r7, #32]
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	059b      	lsls	r3, r3, #22
 80018f2:	0d9b      	lsrs	r3, r3, #22
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	801a      	strh	r2, [r3, #0]
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4a2d      	ldr	r2, [pc, #180]	; (80019b8 <PCD_EP_ISR_Handler+0x6ec>)
 8001902:	4313      	orrs	r3, r2
 8001904:	b29a      	uxth	r2, r3
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	801a      	strh	r2, [r3, #0]
 800190a:	e070      	b.n	80019ee <PCD_EP_ISR_Handler+0x722>
 800190c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190e:	785b      	ldrb	r3, [r3, #1]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d16c      	bne.n	80019ee <PCD_EP_ISR_Handler+0x722>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2250      	movs	r2, #80	; 0x50
 8001920:	5a9b      	ldrh	r3, [r3, r2]
 8001922:	b29b      	uxth	r3, r3
 8001924:	001a      	movs	r2, r3
 8001926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001928:	189b      	adds	r3, r3, r2
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800192c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	00da      	lsls	r2, r3, #3
 8001932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001934:	18d3      	adds	r3, r2, r3
 8001936:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <PCD_EP_ISR_Handler+0x6e4>)
 8001938:	4694      	mov	ip, r2
 800193a:	4463      	add	r3, ip
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
 800193e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001940:	2200      	movs	r2, #0
 8001942:	801a      	strh	r2, [r3, #0]
 8001944:	e053      	b.n	80019ee <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800194c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194e:	785b      	ldrb	r3, [r3, #1]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d133      	bne.n	80019bc <PCD_EP_ISR_Handler+0x6f0>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2250      	movs	r2, #80	; 0x50
 8001960:	5a9b      	ldrh	r3, [r3, r2]
 8001962:	b29b      	uxth	r3, r3
 8001964:	001a      	movs	r2, r3
 8001966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001968:	189b      	adds	r3, r3, r2
 800196a:	637b      	str	r3, [r7, #52]	; 0x34
 800196c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	00da      	lsls	r2, r3, #3
 8001972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001974:	18d3      	adds	r3, r2, r3
 8001976:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <PCD_EP_ISR_Handler+0x6d8>)
 8001978:	4694      	mov	ip, r2
 800197a:	4463      	add	r3, ip
 800197c:	633b      	str	r3, [r7, #48]	; 0x30
 800197e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	059b      	lsls	r3, r3, #22
 8001986:	0d9b      	lsrs	r3, r3, #22
 8001988:	b29a      	uxth	r2, r3
 800198a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198c:	801a      	strh	r2, [r3, #0]
 800198e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <PCD_EP_ISR_Handler+0x6ec>)
 8001996:	4313      	orrs	r3, r2
 8001998:	b29a      	uxth	r2, r3
 800199a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199c:	801a      	strh	r2, [r3, #0]
 800199e:	e026      	b.n	80019ee <PCD_EP_ISR_Handler+0x722>
 80019a0:	00000f8f 	.word	0x00000f8f
 80019a4:	00000406 	.word	0x00000406
 80019a8:	ffff8f8f 	.word	0xffff8f8f
 80019ac:	ffff80c0 	.word	0xffff80c0
 80019b0:	00000402 	.word	0x00000402
 80019b4:	ffff8f0f 	.word	0xffff8f0f
 80019b8:	ffff8000 	.word	0xffff8000
 80019bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019be:	785b      	ldrb	r3, [r3, #1]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d114      	bne.n	80019ee <PCD_EP_ISR_Handler+0x722>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2250      	movs	r2, #80	; 0x50
 80019ca:	5a9b      	ldrh	r3, [r3, r2]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	001a      	movs	r2, r3
 80019d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d2:	189b      	adds	r3, r3, r2
 80019d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	00da      	lsls	r2, r3, #3
 80019dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019de:	18d3      	adds	r3, r2, r3
 80019e0:	4a3b      	ldr	r2, [pc, #236]	; (8001ad0 <PCD_EP_ISR_Handler+0x804>)
 80019e2:	4694      	mov	ip, r2
 80019e4:	4463      	add	r3, ip
 80019e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80019e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ea:	2200      	movs	r2, #0
 80019ec:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f0:	781a      	ldrb	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	0011      	movs	r1, r2
 80019f6:	0018      	movs	r0, r3
 80019f8:	f005 fb88 	bl	800710c <HAL_PCD_DataInStageCallback>
 80019fc:	e058      	b.n	8001ab0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80019fe:	234a      	movs	r3, #74	; 0x4a
 8001a00:	18fb      	adds	r3, r7, r3
 8001a02:	881a      	ldrh	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d149      	bne.n	8001aa0 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2250      	movs	r2, #80	; 0x50
 8001a12:	5a9b      	ldrh	r3, [r3, r2]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	001a      	movs	r2, r3
 8001a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	18d2      	adds	r2, r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	18d3      	adds	r3, r2, r3
 8001a26:	4a2b      	ldr	r2, [pc, #172]	; (8001ad4 <PCD_EP_ISR_Handler+0x808>)
 8001a28:	4694      	mov	ip, r2
 8001a2a:	4463      	add	r3, ip
 8001a2c:	881a      	ldrh	r2, [r3, #0]
 8001a2e:	2140      	movs	r1, #64	; 0x40
 8001a30:	187b      	adds	r3, r7, r1
 8001a32:	0592      	lsls	r2, r2, #22
 8001a34:	0d92      	lsrs	r2, r2, #22
 8001a36:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8001a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3a:	699a      	ldr	r2, [r3, #24]
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d907      	bls.n	8001a54 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8001a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a46:	699a      	ldr	r2, [r3, #24]
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	1ad2      	subs	r2, r2, r3
 8001a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a50:	619a      	str	r2, [r3, #24]
 8001a52:	e002      	b.n	8001a5a <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8001a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d107      	bne.n	8001a72 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	0011      	movs	r1, r2
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f005 fb4e 	bl	800710c <HAL_PCD_DataInStageCallback>
 8001a70:	e01e      	b.n	8001ab0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	2140      	movs	r1, #64	; 0x40
 8001a78:	187b      	adds	r3, r7, r1
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	18d2      	adds	r2, r2, r3
 8001a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a80:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a84:	69da      	ldr	r2, [r3, #28]
 8001a86:	187b      	adds	r3, r7, r1
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	18d2      	adds	r2, r2, r3
 8001a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a96:	0011      	movs	r1, r2
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f002 fac7 	bl	800402c <USB_EPStartXfer>
 8001a9e:	e007      	b.n	8001ab0 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001aa0:	234a      	movs	r3, #74	; 0x4a
 8001aa2:	18fb      	adds	r3, r7, r3
 8001aa4:	881a      	ldrh	r2, [r3, #0]
 8001aa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f000 f930 	bl	8001d10 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2244      	movs	r2, #68	; 0x44
 8001ab6:	5a9b      	ldrh	r3, [r3, r2]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da01      	bge.n	8001ac4 <PCD_EP_ISR_Handler+0x7f8>
 8001ac0:	f7ff fc0a 	bl	80012d8 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b016      	add	sp, #88	; 0x58
 8001acc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	00000406 	.word	0x00000406
 8001ad4:	00000402 	.word	0x00000402

08001ad8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	1dbb      	adds	r3, r7, #6
 8001ae4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ae6:	1dbb      	adds	r3, r7, #6
 8001ae8:	881a      	ldrh	r2, [r3, #0]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	01db      	lsls	r3, r3, #7
 8001aee:	4013      	ands	r3, r2
 8001af0:	d100      	bne.n	8001af4 <HAL_PCD_EP_DB_Receive+0x1c>
 8001af2:	e07d      	b.n	8001bf0 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2250      	movs	r2, #80	; 0x50
 8001afa:	5a9b      	ldrh	r3, [r3, r2]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	001a      	movs	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	18d2      	adds	r2, r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	18d3      	adds	r3, r2, r3
 8001b0e:	4a7a      	ldr	r2, [pc, #488]	; (8001cf8 <HAL_PCD_EP_DB_Receive+0x220>)
 8001b10:	4694      	mov	ip, r2
 8001b12:	4463      	add	r3, ip
 8001b14:	881a      	ldrh	r2, [r3, #0]
 8001b16:	211a      	movs	r1, #26
 8001b18:	187b      	adds	r3, r7, r1
 8001b1a:	0592      	lsls	r2, r2, #22
 8001b1c:	0d92      	lsrs	r2, r2, #22
 8001b1e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	699a      	ldr	r2, [r3, #24]
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d307      	bcc.n	8001b3c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	699a      	ldr	r2, [r3, #24]
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	1ad2      	subs	r2, r2, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	619a      	str	r2, [r3, #24]
 8001b3a:	e002      	b.n	8001b42 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d121      	bne.n	8001b8e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	001a      	movs	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	18d3      	adds	r3, r2, r3
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	2018      	movs	r0, #24
 8001b5e:	183b      	adds	r3, r7, r0
 8001b60:	4966      	ldr	r1, [pc, #408]	; (8001cfc <HAL_PCD_EP_DB_Receive+0x224>)
 8001b62:	400a      	ands	r2, r1
 8001b64:	801a      	strh	r2, [r3, #0]
 8001b66:	183b      	adds	r3, r7, r0
 8001b68:	183a      	adds	r2, r7, r0
 8001b6a:	8812      	ldrh	r2, [r2, #0]
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	0189      	lsls	r1, r1, #6
 8001b70:	404a      	eors	r2, r1
 8001b72:	801a      	strh	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	001a      	movs	r2, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	18d3      	adds	r3, r2, r3
 8001b82:	183a      	adds	r2, r7, r0
 8001b84:	8812      	ldrh	r2, [r2, #0]
 8001b86:	495e      	ldr	r1, [pc, #376]	; (8001d00 <HAL_PCD_EP_DB_Receive+0x228>)
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	b292      	uxth	r2, r2
 8001b8c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b8e:	1dbb      	adds	r3, r7, #6
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	2240      	movs	r2, #64	; 0x40
 8001b94:	4013      	ands	r3, r2
 8001b96:	d01a      	beq.n	8001bce <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	001a      	movs	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	18d3      	adds	r3, r2, r3
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	2016      	movs	r0, #22
 8001bac:	183b      	adds	r3, r7, r0
 8001bae:	4955      	ldr	r1, [pc, #340]	; (8001d04 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	801a      	strh	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	001a      	movs	r2, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	18d3      	adds	r3, r2, r3
 8001bc2:	183a      	adds	r2, r7, r0
 8001bc4:	8812      	ldrh	r2, [r2, #0]
 8001bc6:	4950      	ldr	r1, [pc, #320]	; (8001d08 <HAL_PCD_EP_DB_Receive+0x230>)
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	b292      	uxth	r2, r2
 8001bcc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001bce:	241a      	movs	r4, #26
 8001bd0:	193b      	adds	r3, r7, r4
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d100      	bne.n	8001bda <HAL_PCD_EP_DB_Receive+0x102>
 8001bd8:	e086      	b.n	8001ce8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	6959      	ldr	r1, [r3, #20]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	891a      	ldrh	r2, [r3, #8]
 8001be6:	193b      	adds	r3, r7, r4
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	f003 fcda 	bl	80055a2 <USB_ReadPMA>
 8001bee:	e07b      	b.n	8001ce8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2250      	movs	r2, #80	; 0x50
 8001bf6:	5a9b      	ldrh	r3, [r3, r2]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	001a      	movs	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	18d2      	adds	r2, r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	18d3      	adds	r3, r2, r3
 8001c0a:	4a40      	ldr	r2, [pc, #256]	; (8001d0c <HAL_PCD_EP_DB_Receive+0x234>)
 8001c0c:	4694      	mov	ip, r2
 8001c0e:	4463      	add	r3, ip
 8001c10:	881a      	ldrh	r2, [r3, #0]
 8001c12:	211a      	movs	r1, #26
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	0592      	lsls	r2, r2, #22
 8001c18:	0d92      	lsrs	r2, r2, #22
 8001c1a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	699a      	ldr	r2, [r3, #24]
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d307      	bcc.n	8001c38 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	699a      	ldr	r2, [r3, #24]
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	1ad2      	subs	r2, r2, r3
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	619a      	str	r2, [r3, #24]
 8001c36:	e002      	b.n	8001c3e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d121      	bne.n	8001c8a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	001a      	movs	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	18d3      	adds	r3, r2, r3
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	201e      	movs	r0, #30
 8001c5a:	183b      	adds	r3, r7, r0
 8001c5c:	4927      	ldr	r1, [pc, #156]	; (8001cfc <HAL_PCD_EP_DB_Receive+0x224>)
 8001c5e:	400a      	ands	r2, r1
 8001c60:	801a      	strh	r2, [r3, #0]
 8001c62:	183b      	adds	r3, r7, r0
 8001c64:	183a      	adds	r2, r7, r0
 8001c66:	8812      	ldrh	r2, [r2, #0]
 8001c68:	2180      	movs	r1, #128	; 0x80
 8001c6a:	0189      	lsls	r1, r1, #6
 8001c6c:	404a      	eors	r2, r1
 8001c6e:	801a      	strh	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	001a      	movs	r2, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	18d3      	adds	r3, r2, r3
 8001c7e:	183a      	adds	r2, r7, r0
 8001c80:	8812      	ldrh	r2, [r2, #0]
 8001c82:	491f      	ldr	r1, [pc, #124]	; (8001d00 <HAL_PCD_EP_DB_Receive+0x228>)
 8001c84:	430a      	orrs	r2, r1
 8001c86:	b292      	uxth	r2, r2
 8001c88:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001c8a:	1dbb      	adds	r3, r7, #6
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	2240      	movs	r2, #64	; 0x40
 8001c90:	4013      	ands	r3, r2
 8001c92:	d11a      	bne.n	8001cca <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	001a      	movs	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	18d3      	adds	r3, r2, r3
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	201c      	movs	r0, #28
 8001ca8:	183b      	adds	r3, r7, r0
 8001caa:	4916      	ldr	r1, [pc, #88]	; (8001d04 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001cac:	400a      	ands	r2, r1
 8001cae:	801a      	strh	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	001a      	movs	r2, r3
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	18d3      	adds	r3, r2, r3
 8001cbe:	183a      	adds	r2, r7, r0
 8001cc0:	8812      	ldrh	r2, [r2, #0]
 8001cc2:	4911      	ldr	r1, [pc, #68]	; (8001d08 <HAL_PCD_EP_DB_Receive+0x230>)
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	b292      	uxth	r2, r2
 8001cc8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001cca:	241a      	movs	r4, #26
 8001ccc:	193b      	adds	r3, r7, r4
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d009      	beq.n	8001ce8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	6959      	ldr	r1, [r3, #20]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	895a      	ldrh	r2, [r3, #10]
 8001ce0:	193b      	adds	r3, r7, r4
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	f003 fc5d 	bl	80055a2 <USB_ReadPMA>
    }
  }

  return count;
 8001ce8:	231a      	movs	r3, #26
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	881b      	ldrh	r3, [r3, #0]
}
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b009      	add	sp, #36	; 0x24
 8001cf4:	bd90      	pop	{r4, r7, pc}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	00000402 	.word	0x00000402
 8001cfc:	ffffbf8f 	.word	0xffffbf8f
 8001d00:	ffff8080 	.word	0xffff8080
 8001d04:	ffff8f8f 	.word	0xffff8f8f
 8001d08:	ffff80c0 	.word	0xffff80c0
 8001d0c:	00000406 	.word	0x00000406

08001d10 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b0a4      	sub	sp, #144	; 0x90
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	1dbb      	adds	r3, r7, #6
 8001d1c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d1e:	1dbb      	adds	r3, r7, #6
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	2240      	movs	r2, #64	; 0x40
 8001d24:	4013      	ands	r3, r2
 8001d26:	d100      	bne.n	8001d2a <HAL_PCD_EP_DB_Transmit+0x1a>
 8001d28:	e1e4      	b.n	80020f4 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2250      	movs	r2, #80	; 0x50
 8001d30:	5a9b      	ldrh	r3, [r3, r2]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	001a      	movs	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	18d2      	adds	r2, r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	18d3      	adds	r3, r2, r3
 8001d44:	4ad0      	ldr	r2, [pc, #832]	; (8002088 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001d46:	4694      	mov	ip, r2
 8001d48:	4463      	add	r3, ip
 8001d4a:	881a      	ldrh	r2, [r3, #0]
 8001d4c:	2186      	movs	r1, #134	; 0x86
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	0592      	lsls	r2, r2, #22
 8001d52:	0d92      	lsrs	r2, r2, #22
 8001d54:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	187b      	adds	r3, r7, r1
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d907      	bls.n	8001d72 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	699a      	ldr	r2, [r3, #24]
 8001d66:	187b      	adds	r3, r7, r1
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	1ad2      	subs	r2, r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	619a      	str	r2, [r3, #24]
 8001d70:	e002      	b.n	8001d78 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d000      	beq.n	8001d82 <HAL_PCD_EP_DB_Transmit+0x72>
 8001d80:	e0b5      	b.n	8001eee <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	785b      	ldrb	r3, [r3, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d125      	bne.n	8001dd6 <HAL_PCD_EP_DB_Transmit+0xc6>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2250      	movs	r2, #80	; 0x50
 8001d96:	5a9b      	ldrh	r3, [r3, r2]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	001a      	movs	r2, r3
 8001d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9e:	189b      	adds	r3, r3, r2
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	00da      	lsls	r2, r3, #3
 8001da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001daa:	18d3      	adds	r3, r2, r3
 8001dac:	4ab6      	ldr	r2, [pc, #728]	; (8002088 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001dae:	4694      	mov	ip, r2
 8001db0:	4463      	add	r3, ip
 8001db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	059b      	lsls	r3, r3, #22
 8001dbc:	0d9b      	lsrs	r3, r3, #22
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc2:	801a      	strh	r2, [r3, #0]
 8001dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	4ab0      	ldr	r2, [pc, #704]	; (800208c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd2:	801a      	strh	r2, [r3, #0]
 8001dd4:	e01b      	b.n	8001e0e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	785b      	ldrb	r3, [r3, #1]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d117      	bne.n	8001e0e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	637b      	str	r3, [r7, #52]	; 0x34
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2250      	movs	r2, #80	; 0x50
 8001dea:	5a9b      	ldrh	r3, [r3, r2]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	001a      	movs	r2, r3
 8001df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df2:	189b      	adds	r3, r3, r2
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	00da      	lsls	r2, r3, #3
 8001dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfe:	18d3      	adds	r3, r2, r3
 8001e00:	4aa1      	ldr	r2, [pc, #644]	; (8002088 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001e02:	4694      	mov	ip, r2
 8001e04:	4463      	add	r3, ip
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
 8001e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	785b      	ldrb	r3, [r3, #1]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d125      	bne.n	8001e68 <HAL_PCD_EP_DB_Transmit+0x158>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2250      	movs	r2, #80	; 0x50
 8001e28:	5a9b      	ldrh	r3, [r3, r2]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	001a      	movs	r2, r3
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	189b      	adds	r3, r3, r2
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	00da      	lsls	r2, r3, #3
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	18d3      	adds	r3, r2, r3
 8001e3e:	4a94      	ldr	r2, [pc, #592]	; (8002090 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001e40:	4694      	mov	ip, r2
 8001e42:	4463      	add	r3, ip
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	059b      	lsls	r3, r3, #22
 8001e4e:	0d9b      	lsrs	r3, r3, #22
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	801a      	strh	r2, [r3, #0]
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4a8b      	ldr	r2, [pc, #556]	; (800208c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	801a      	strh	r2, [r3, #0]
 8001e66:	e018      	b.n	8001e9a <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	785b      	ldrb	r3, [r3, #1]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d114      	bne.n	8001e9a <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2250      	movs	r2, #80	; 0x50
 8001e76:	5a9b      	ldrh	r3, [r3, r2]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	001a      	movs	r2, r3
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	189b      	adds	r3, r3, r2
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	00da      	lsls	r2, r3, #3
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	18d3      	adds	r3, r2, r3
 8001e8c:	4a80      	ldr	r2, [pc, #512]	; (8002090 <HAL_PCD_EP_DB_Transmit+0x380>)
 8001e8e:	4694      	mov	ip, r2
 8001e90:	4463      	add	r3, ip
 8001e92:	623b      	str	r3, [r7, #32]
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	2200      	movs	r2, #0
 8001e98:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	0011      	movs	r1, r2
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f005 f932 	bl	800710c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ea8:	1dbb      	adds	r3, r7, #6
 8001eaa:	881a      	ldrh	r2, [r3, #0]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	01db      	lsls	r3, r3, #7
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d100      	bne.n	8001eb6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8001eb4:	e309      	b.n	80024ca <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	001a      	movs	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	18d3      	adds	r3, r2, r3
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	2016      	movs	r0, #22
 8001eca:	183b      	adds	r3, r7, r0
 8001ecc:	4971      	ldr	r1, [pc, #452]	; (8002094 <HAL_PCD_EP_DB_Transmit+0x384>)
 8001ece:	400a      	ands	r2, r1
 8001ed0:	801a      	strh	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	001a      	movs	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	18d3      	adds	r3, r2, r3
 8001ee0:	183a      	adds	r2, r7, r0
 8001ee2:	8812      	ldrh	r2, [r2, #0]
 8001ee4:	496c      	ldr	r1, [pc, #432]	; (8002098 <HAL_PCD_EP_DB_Transmit+0x388>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	b292      	uxth	r2, r2
 8001eea:	801a      	strh	r2, [r3, #0]
 8001eec:	e2ed      	b.n	80024ca <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001eee:	1dbb      	adds	r3, r7, #6
 8001ef0:	881a      	ldrh	r2, [r3, #0]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	01db      	lsls	r3, r3, #7
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d01a      	beq.n	8001f30 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	001a      	movs	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	18d3      	adds	r3, r2, r3
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	208a      	movs	r0, #138	; 0x8a
 8001f0e:	183b      	adds	r3, r7, r0
 8001f10:	4960      	ldr	r1, [pc, #384]	; (8002094 <HAL_PCD_EP_DB_Transmit+0x384>)
 8001f12:	400a      	ands	r2, r1
 8001f14:	801a      	strh	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	001a      	movs	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	18d3      	adds	r3, r2, r3
 8001f24:	183a      	adds	r2, r7, r0
 8001f26:	8812      	ldrh	r2, [r2, #0]
 8001f28:	495b      	ldr	r1, [pc, #364]	; (8002098 <HAL_PCD_EP_DB_Transmit+0x388>)
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2224      	movs	r2, #36	; 0x24
 8001f34:	5c9b      	ldrb	r3, [r3, r2]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d000      	beq.n	8001f3c <HAL_PCD_EP_DB_Transmit+0x22c>
 8001f3a:	e2c6      	b.n	80024ca <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	2186      	movs	r1, #134	; 0x86
 8001f42:	187b      	adds	r3, r7, r1
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	18d2      	adds	r2, r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	69da      	ldr	r2, [r3, #28]
 8001f50:	187b      	adds	r3, r7, r1
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	18d2      	adds	r2, r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	6a1a      	ldr	r2, [r3, #32]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d30c      	bcc.n	8001f80 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	218c      	movs	r1, #140	; 0x8c
 8001f6c:	187a      	adds	r2, r7, r1
 8001f6e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	6a1a      	ldr	r2, [r3, #32]
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	1ad2      	subs	r2, r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	621a      	str	r2, [r3, #32]
 8001f7e:	e01a      	b.n	8001fb6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10a      	bne.n	8001f9e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8001f88:	2386      	movs	r3, #134	; 0x86
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	228c      	movs	r2, #140	; 0x8c
 8001f90:	18ba      	adds	r2, r7, r2
 8001f92:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2224      	movs	r2, #36	; 0x24
 8001f98:	2100      	movs	r1, #0
 8001f9a:	5499      	strb	r1, [r3, r2]
 8001f9c:	e00b      	b.n	8001fb6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2224      	movs	r2, #36	; 0x24
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	228c      	movs	r2, #140	; 0x8c
 8001fac:	18ba      	adds	r2, r7, r2
 8001fae:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	785b      	ldrb	r3, [r3, #1]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d000      	beq.n	8001fc0 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8001fbe:	e06d      	b.n	800209c <HAL_PCD_EP_DB_Transmit+0x38c>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2250      	movs	r2, #80	; 0x50
 8001fcc:	5a9b      	ldrh	r3, [r3, r2]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	001a      	movs	r2, r3
 8001fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd4:	189b      	adds	r3, r3, r2
 8001fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	00da      	lsls	r2, r3, #3
 8001fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fe0:	18d3      	adds	r3, r2, r3
 8001fe2:	4a29      	ldr	r2, [pc, #164]	; (8002088 <HAL_PCD_EP_DB_Transmit+0x378>)
 8001fe4:	4694      	mov	ip, r2
 8001fe6:	4463      	add	r3, ip
 8001fe8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	059b      	lsls	r3, r3, #22
 8001ff2:	0d9b      	lsrs	r3, r3, #22
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff8:	801a      	strh	r2, [r3, #0]
 8001ffa:	228c      	movs	r2, #140	; 0x8c
 8001ffc:	18bb      	adds	r3, r7, r2
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b3e      	cmp	r3, #62	; 0x3e
 8002002:	d91a      	bls.n	800203a <HAL_PCD_EP_DB_Transmit+0x32a>
 8002004:	18bb      	adds	r3, r7, r2
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	64bb      	str	r3, [r7, #72]	; 0x48
 800200c:	18bb      	adds	r3, r7, r2
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	221f      	movs	r2, #31
 8002012:	4013      	ands	r3, r2
 8002014:	d102      	bne.n	800201c <HAL_PCD_EP_DB_Transmit+0x30c>
 8002016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002018:	3b01      	subs	r3, #1
 800201a:	64bb      	str	r3, [r7, #72]	; 0x48
 800201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	b29a      	uxth	r2, r3
 8002022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002024:	b29b      	uxth	r3, r3
 8002026:	029b      	lsls	r3, r3, #10
 8002028:	b29b      	uxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b29b      	uxth	r3, r3
 800202e:	4a17      	ldr	r2, [pc, #92]	; (800208c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002030:	4313      	orrs	r3, r2
 8002032:	b29a      	uxth	r2, r3
 8002034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002036:	801a      	strh	r2, [r3, #0]
 8002038:	e04f      	b.n	80020da <HAL_PCD_EP_DB_Transmit+0x3ca>
 800203a:	238c      	movs	r3, #140	; 0x8c
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d108      	bne.n	8002056 <HAL_PCD_EP_DB_Transmit+0x346>
 8002044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	4a10      	ldr	r2, [pc, #64]	; (800208c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800204c:	4313      	orrs	r3, r2
 800204e:	b29a      	uxth	r2, r3
 8002050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002052:	801a      	strh	r2, [r3, #0]
 8002054:	e041      	b.n	80020da <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002056:	228c      	movs	r2, #140	; 0x8c
 8002058:	18bb      	adds	r3, r7, r2
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	085b      	lsrs	r3, r3, #1
 800205e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002060:	18bb      	adds	r3, r7, r2
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2201      	movs	r2, #1
 8002066:	4013      	ands	r3, r2
 8002068:	d002      	beq.n	8002070 <HAL_PCD_EP_DB_Transmit+0x360>
 800206a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800206c:	3301      	adds	r3, #1
 800206e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	b29a      	uxth	r2, r3
 8002076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002078:	b29b      	uxth	r3, r3
 800207a:	029b      	lsls	r3, r3, #10
 800207c:	b29b      	uxth	r3, r3
 800207e:	4313      	orrs	r3, r2
 8002080:	b29a      	uxth	r2, r3
 8002082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002084:	801a      	strh	r2, [r3, #0]
 8002086:	e028      	b.n	80020da <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002088:	00000402 	.word	0x00000402
 800208c:	ffff8000 	.word	0xffff8000
 8002090:	00000406 	.word	0x00000406
 8002094:	ffff8f8f 	.word	0xffff8f8f
 8002098:	ffffc080 	.word	0xffffc080
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	785b      	ldrb	r3, [r3, #1]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d11a      	bne.n	80020da <HAL_PCD_EP_DB_Transmit+0x3ca>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	647b      	str	r3, [r7, #68]	; 0x44
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2250      	movs	r2, #80	; 0x50
 80020b0:	5a9b      	ldrh	r3, [r3, r2]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	001a      	movs	r2, r3
 80020b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b8:	189b      	adds	r3, r3, r2
 80020ba:	647b      	str	r3, [r7, #68]	; 0x44
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	00da      	lsls	r2, r3, #3
 80020c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c4:	18d3      	adds	r3, r2, r3
 80020c6:	4adb      	ldr	r2, [pc, #876]	; (8002434 <HAL_PCD_EP_DB_Transmit+0x724>)
 80020c8:	4694      	mov	ip, r2
 80020ca:	4463      	add	r3, ip
 80020cc:	643b      	str	r3, [r7, #64]	; 0x40
 80020ce:	238c      	movs	r3, #140	; 0x8c
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	6959      	ldr	r1, [r3, #20]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	891a      	ldrh	r2, [r3, #8]
 80020e6:	238c      	movs	r3, #140	; 0x8c
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f003 fa0f 	bl	8005510 <USB_WritePMA>
 80020f2:	e1ea      	b.n	80024ca <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2250      	movs	r2, #80	; 0x50
 80020fa:	5a9b      	ldrh	r3, [r3, r2]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	001a      	movs	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	18d2      	adds	r2, r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	18d3      	adds	r3, r2, r3
 800210e:	4aca      	ldr	r2, [pc, #808]	; (8002438 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002110:	4694      	mov	ip, r2
 8002112:	4463      	add	r3, ip
 8002114:	881a      	ldrh	r2, [r3, #0]
 8002116:	2186      	movs	r1, #134	; 0x86
 8002118:	187b      	adds	r3, r7, r1
 800211a:	0592      	lsls	r2, r2, #22
 800211c:	0d92      	lsrs	r2, r2, #22
 800211e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	699a      	ldr	r2, [r3, #24]
 8002124:	187b      	adds	r3, r7, r1
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d307      	bcc.n	800213c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	699a      	ldr	r2, [r3, #24]
 8002130:	187b      	adds	r3, r7, r1
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	1ad2      	subs	r2, r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	619a      	str	r2, [r3, #24]
 800213a:	e002      	b.n	8002142 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2200      	movs	r2, #0
 8002140:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d000      	beq.n	800214c <HAL_PCD_EP_DB_Transmit+0x43c>
 800214a:	e0bb      	b.n	80022c4 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	785b      	ldrb	r3, [r3, #1]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d125      	bne.n	80021a0 <HAL_PCD_EP_DB_Transmit+0x490>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	67fb      	str	r3, [r7, #124]	; 0x7c
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2250      	movs	r2, #80	; 0x50
 8002160:	5a9b      	ldrh	r3, [r3, r2]
 8002162:	b29b      	uxth	r3, r3
 8002164:	001a      	movs	r2, r3
 8002166:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002168:	189b      	adds	r3, r3, r2
 800216a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	00da      	lsls	r2, r3, #3
 8002172:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002174:	18d3      	adds	r3, r2, r3
 8002176:	4aaf      	ldr	r2, [pc, #700]	; (8002434 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002178:	4694      	mov	ip, r2
 800217a:	4463      	add	r3, ip
 800217c:	67bb      	str	r3, [r7, #120]	; 0x78
 800217e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	059b      	lsls	r3, r3, #22
 8002186:	0d9b      	lsrs	r3, r3, #22
 8002188:	b29a      	uxth	r2, r3
 800218a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800218c:	801a      	strh	r2, [r3, #0]
 800218e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	4aa9      	ldr	r2, [pc, #676]	; (800243c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002196:	4313      	orrs	r3, r2
 8002198:	b29a      	uxth	r2, r3
 800219a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800219c:	801a      	strh	r2, [r3, #0]
 800219e:	e01b      	b.n	80021d8 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	785b      	ldrb	r3, [r3, #1]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d117      	bne.n	80021d8 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	667b      	str	r3, [r7, #100]	; 0x64
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2250      	movs	r2, #80	; 0x50
 80021b4:	5a9b      	ldrh	r3, [r3, r2]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	001a      	movs	r2, r3
 80021ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021bc:	189b      	adds	r3, r3, r2
 80021be:	667b      	str	r3, [r7, #100]	; 0x64
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	00da      	lsls	r2, r3, #3
 80021c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021c8:	18d3      	adds	r3, r2, r3
 80021ca:	4a9a      	ldr	r2, [pc, #616]	; (8002434 <HAL_PCD_EP_DB_Transmit+0x724>)
 80021cc:	4694      	mov	ip, r2
 80021ce:	4463      	add	r3, ip
 80021d0:	663b      	str	r3, [r7, #96]	; 0x60
 80021d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021d4:	2200      	movs	r2, #0
 80021d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	677b      	str	r3, [r7, #116]	; 0x74
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	785b      	ldrb	r3, [r3, #1]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d12b      	bne.n	800223e <HAL_PCD_EP_DB_Transmit+0x52e>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2250      	movs	r2, #80	; 0x50
 80021f2:	5a9b      	ldrh	r3, [r3, r2]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	001a      	movs	r2, r3
 80021f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021fa:	189b      	adds	r3, r3, r2
 80021fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	00da      	lsls	r2, r3, #3
 8002204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002206:	18d3      	adds	r3, r2, r3
 8002208:	4a8b      	ldr	r2, [pc, #556]	; (8002438 <HAL_PCD_EP_DB_Transmit+0x728>)
 800220a:	4694      	mov	ip, r2
 800220c:	4463      	add	r3, ip
 800220e:	2180      	movs	r1, #128	; 0x80
 8002210:	187a      	adds	r2, r7, r1
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	187b      	adds	r3, r7, r1
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	059b      	lsls	r3, r3, #22
 800221e:	0d9b      	lsrs	r3, r3, #22
 8002220:	b29a      	uxth	r2, r3
 8002222:	187b      	adds	r3, r7, r1
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	801a      	strh	r2, [r3, #0]
 8002228:	187b      	adds	r3, r7, r1
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	b29b      	uxth	r3, r3
 8002230:	4a82      	ldr	r2, [pc, #520]	; (800243c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002232:	4313      	orrs	r3, r2
 8002234:	b29a      	uxth	r2, r3
 8002236:	187b      	adds	r3, r7, r1
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	801a      	strh	r2, [r3, #0]
 800223c:	e018      	b.n	8002270 <HAL_PCD_EP_DB_Transmit+0x560>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	785b      	ldrb	r3, [r3, #1]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d114      	bne.n	8002270 <HAL_PCD_EP_DB_Transmit+0x560>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2250      	movs	r2, #80	; 0x50
 800224c:	5a9b      	ldrh	r3, [r3, r2]
 800224e:	b29b      	uxth	r3, r3
 8002250:	001a      	movs	r2, r3
 8002252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002254:	189b      	adds	r3, r3, r2
 8002256:	677b      	str	r3, [r7, #116]	; 0x74
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	00da      	lsls	r2, r3, #3
 800225e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002260:	18d3      	adds	r3, r2, r3
 8002262:	4a75      	ldr	r2, [pc, #468]	; (8002438 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002264:	4694      	mov	ip, r2
 8002266:	4463      	add	r3, ip
 8002268:	673b      	str	r3, [r7, #112]	; 0x70
 800226a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800226c:	2200      	movs	r2, #0
 800226e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	781a      	ldrb	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	0011      	movs	r1, r2
 8002278:	0018      	movs	r0, r3
 800227a:	f004 ff47 	bl	800710c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800227e:	1dbb      	adds	r3, r7, #6
 8002280:	881a      	ldrh	r2, [r3, #0]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	01db      	lsls	r3, r3, #7
 8002286:	4013      	ands	r3, r2
 8002288:	d000      	beq.n	800228c <HAL_PCD_EP_DB_Transmit+0x57c>
 800228a:	e11e      	b.n	80024ca <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	001a      	movs	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	18d3      	adds	r3, r2, r3
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	b29a      	uxth	r2, r3
 800229e:	2088      	movs	r0, #136	; 0x88
 80022a0:	183b      	adds	r3, r7, r0
 80022a2:	4967      	ldr	r1, [pc, #412]	; (8002440 <HAL_PCD_EP_DB_Transmit+0x730>)
 80022a4:	400a      	ands	r2, r1
 80022a6:	801a      	strh	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	001a      	movs	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	18d3      	adds	r3, r2, r3
 80022b6:	183a      	adds	r2, r7, r0
 80022b8:	8812      	ldrh	r2, [r2, #0]
 80022ba:	4962      	ldr	r1, [pc, #392]	; (8002444 <HAL_PCD_EP_DB_Transmit+0x734>)
 80022bc:	430a      	orrs	r2, r1
 80022be:	b292      	uxth	r2, r2
 80022c0:	801a      	strh	r2, [r3, #0]
 80022c2:	e102      	b.n	80024ca <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022c4:	1dbb      	adds	r3, r7, #6
 80022c6:	881a      	ldrh	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	01db      	lsls	r3, r3, #7
 80022cc:	4013      	ands	r3, r2
 80022ce:	d11a      	bne.n	8002306 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	001a      	movs	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	18d3      	adds	r3, r2, r3
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	204e      	movs	r0, #78	; 0x4e
 80022e4:	183b      	adds	r3, r7, r0
 80022e6:	4956      	ldr	r1, [pc, #344]	; (8002440 <HAL_PCD_EP_DB_Transmit+0x730>)
 80022e8:	400a      	ands	r2, r1
 80022ea:	801a      	strh	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	001a      	movs	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	18d3      	adds	r3, r2, r3
 80022fa:	183a      	adds	r2, r7, r0
 80022fc:	8812      	ldrh	r2, [r2, #0]
 80022fe:	4951      	ldr	r1, [pc, #324]	; (8002444 <HAL_PCD_EP_DB_Transmit+0x734>)
 8002300:	430a      	orrs	r2, r1
 8002302:	b292      	uxth	r2, r2
 8002304:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2224      	movs	r2, #36	; 0x24
 800230a:	5c9b      	ldrb	r3, [r3, r2]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d000      	beq.n	8002312 <HAL_PCD_EP_DB_Transmit+0x602>
 8002310:	e0db      	b.n	80024ca <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	2186      	movs	r1, #134	; 0x86
 8002318:	187b      	adds	r3, r7, r1
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	18d2      	adds	r2, r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	187b      	adds	r3, r7, r1
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	18d2      	adds	r2, r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	6a1a      	ldr	r2, [r3, #32]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	429a      	cmp	r2, r3
 800233a:	d30c      	bcc.n	8002356 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	218c      	movs	r1, #140	; 0x8c
 8002342:	187a      	adds	r2, r7, r1
 8002344:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	6a1a      	ldr	r2, [r3, #32]
 800234a:	187b      	adds	r3, r7, r1
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	1ad2      	subs	r2, r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	621a      	str	r2, [r3, #32]
 8002354:	e01a      	b.n	800238c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800235e:	2386      	movs	r3, #134	; 0x86
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	228c      	movs	r2, #140	; 0x8c
 8002366:	18ba      	adds	r2, r7, r2
 8002368:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2224      	movs	r2, #36	; 0x24
 800236e:	2100      	movs	r1, #0
 8002370:	5499      	strb	r1, [r3, r2]
 8002372:	e00b      	b.n	800238c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	228c      	movs	r2, #140	; 0x8c
 800237a:	18ba      	adds	r2, r7, r2
 800237c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2200      	movs	r2, #0
 8002382:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2224      	movs	r2, #36	; 0x24
 8002388:	2100      	movs	r1, #0
 800238a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	657b      	str	r3, [r7, #84]	; 0x54
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	785b      	ldrb	r3, [r3, #1]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d000      	beq.n	800239c <HAL_PCD_EP_DB_Transmit+0x68c>
 800239a:	e06e      	b.n	800247a <HAL_PCD_EP_DB_Transmit+0x76a>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2250      	movs	r2, #80	; 0x50
 80023a8:	5a9b      	ldrh	r3, [r3, r2]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	001a      	movs	r2, r3
 80023ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b0:	189b      	adds	r3, r3, r2
 80023b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	00da      	lsls	r2, r3, #3
 80023ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023bc:	18d3      	adds	r3, r2, r3
 80023be:	4a1e      	ldr	r2, [pc, #120]	; (8002438 <HAL_PCD_EP_DB_Transmit+0x728>)
 80023c0:	4694      	mov	ip, r2
 80023c2:	4463      	add	r3, ip
 80023c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80023c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	059b      	lsls	r3, r3, #22
 80023ce:	0d9b      	lsrs	r3, r3, #22
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023d4:	801a      	strh	r2, [r3, #0]
 80023d6:	228c      	movs	r2, #140	; 0x8c
 80023d8:	18bb      	adds	r3, r7, r2
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b3e      	cmp	r3, #62	; 0x3e
 80023de:	d91a      	bls.n	8002416 <HAL_PCD_EP_DB_Transmit+0x706>
 80023e0:	18bb      	adds	r3, r7, r2
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80023e8:	18bb      	adds	r3, r7, r2
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	221f      	movs	r2, #31
 80023ee:	4013      	ands	r3, r2
 80023f0:	d102      	bne.n	80023f8 <HAL_PCD_EP_DB_Transmit+0x6e8>
 80023f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023f4:	3b01      	subs	r3, #1
 80023f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80023f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002400:	b29b      	uxth	r3, r3
 8002402:	029b      	lsls	r3, r3, #10
 8002404:	b29b      	uxth	r3, r3
 8002406:	4313      	orrs	r3, r2
 8002408:	b29b      	uxth	r3, r3
 800240a:	4a0c      	ldr	r2, [pc, #48]	; (800243c <HAL_PCD_EP_DB_Transmit+0x72c>)
 800240c:	4313      	orrs	r3, r2
 800240e:	b29a      	uxth	r2, r3
 8002410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002412:	801a      	strh	r2, [r3, #0]
 8002414:	e04d      	b.n	80024b2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002416:	238c      	movs	r3, #140	; 0x8c
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d113      	bne.n	8002448 <HAL_PCD_EP_DB_Transmit+0x738>
 8002420:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002428:	4313      	orrs	r3, r2
 800242a:	b29a      	uxth	r2, r3
 800242c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800242e:	801a      	strh	r2, [r3, #0]
 8002430:	e03f      	b.n	80024b2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	00000402 	.word	0x00000402
 8002438:	00000406 	.word	0x00000406
 800243c:	ffff8000 	.word	0xffff8000
 8002440:	ffff8f8f 	.word	0xffff8f8f
 8002444:	ffffc080 	.word	0xffffc080
 8002448:	228c      	movs	r2, #140	; 0x8c
 800244a:	18bb      	adds	r3, r7, r2
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	085b      	lsrs	r3, r3, #1
 8002450:	66bb      	str	r3, [r7, #104]	; 0x68
 8002452:	18bb      	adds	r3, r7, r2
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2201      	movs	r2, #1
 8002458:	4013      	ands	r3, r2
 800245a:	d002      	beq.n	8002462 <HAL_PCD_EP_DB_Transmit+0x752>
 800245c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800245e:	3301      	adds	r3, #1
 8002460:	66bb      	str	r3, [r7, #104]	; 0x68
 8002462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29a      	uxth	r2, r3
 8002468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800246a:	b29b      	uxth	r3, r3
 800246c:	029b      	lsls	r3, r3, #10
 800246e:	b29b      	uxth	r3, r3
 8002470:	4313      	orrs	r3, r2
 8002472:	b29a      	uxth	r2, r3
 8002474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002476:	801a      	strh	r2, [r3, #0]
 8002478:	e01b      	b.n	80024b2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	785b      	ldrb	r3, [r3, #1]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d117      	bne.n	80024b2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2250      	movs	r2, #80	; 0x50
 8002488:	5a9b      	ldrh	r3, [r3, r2]
 800248a:	b29b      	uxth	r3, r3
 800248c:	001a      	movs	r2, r3
 800248e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002490:	189b      	adds	r3, r3, r2
 8002492:	657b      	str	r3, [r7, #84]	; 0x54
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	00da      	lsls	r2, r3, #3
 800249a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800249c:	18d3      	adds	r3, r2, r3
 800249e:	4a21      	ldr	r2, [pc, #132]	; (8002524 <HAL_PCD_EP_DB_Transmit+0x814>)
 80024a0:	4694      	mov	ip, r2
 80024a2:	4463      	add	r3, ip
 80024a4:	653b      	str	r3, [r7, #80]	; 0x50
 80024a6:	238c      	movs	r3, #140	; 0x8c
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024b0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	6959      	ldr	r1, [r3, #20]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	895a      	ldrh	r2, [r3, #10]
 80024be:	238c      	movs	r3, #140	; 0x8c
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	f003 f823 	bl	8005510 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	001a      	movs	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	18d3      	adds	r3, r2, r3
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	b29a      	uxth	r2, r3
 80024dc:	2014      	movs	r0, #20
 80024de:	183b      	adds	r3, r7, r0
 80024e0:	4911      	ldr	r1, [pc, #68]	; (8002528 <HAL_PCD_EP_DB_Transmit+0x818>)
 80024e2:	400a      	ands	r2, r1
 80024e4:	801a      	strh	r2, [r3, #0]
 80024e6:	183b      	adds	r3, r7, r0
 80024e8:	183a      	adds	r2, r7, r0
 80024ea:	8812      	ldrh	r2, [r2, #0]
 80024ec:	2110      	movs	r1, #16
 80024ee:	404a      	eors	r2, r1
 80024f0:	801a      	strh	r2, [r3, #0]
 80024f2:	183b      	adds	r3, r7, r0
 80024f4:	183a      	adds	r2, r7, r0
 80024f6:	8812      	ldrh	r2, [r2, #0]
 80024f8:	2120      	movs	r1, #32
 80024fa:	404a      	eors	r2, r1
 80024fc:	801a      	strh	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	001a      	movs	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	18d3      	adds	r3, r2, r3
 800250c:	183a      	adds	r2, r7, r0
 800250e:	8812      	ldrh	r2, [r2, #0]
 8002510:	4906      	ldr	r1, [pc, #24]	; (800252c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8002512:	430a      	orrs	r2, r1
 8002514:	b292      	uxth	r2, r2
 8002516:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b024      	add	sp, #144	; 0x90
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	00000406 	.word	0x00000406
 8002528:	ffff8fbf 	.word	0xffff8fbf
 800252c:	ffff8080 	.word	0xffff8080

08002530 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	0008      	movs	r0, r1
 800253a:	0011      	movs	r1, r2
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	240a      	movs	r4, #10
 8002540:	193b      	adds	r3, r7, r4
 8002542:	1c02      	adds	r2, r0, #0
 8002544:	801a      	strh	r2, [r3, #0]
 8002546:	2308      	movs	r3, #8
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	1c0a      	adds	r2, r1, #0
 800254c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800254e:	0021      	movs	r1, r4
 8002550:	187b      	adds	r3, r7, r1
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	2280      	movs	r2, #128	; 0x80
 8002556:	4013      	ands	r3, r2
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00c      	beq.n	8002578 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800255e:	187b      	adds	r3, r7, r1
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	2207      	movs	r2, #7
 8002564:	4013      	ands	r3, r2
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	0013      	movs	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	189b      	adds	r3, r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	18d3      	adds	r3, r2, r3
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	e00b      	b.n	8002590 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002578:	230a      	movs	r3, #10
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	881a      	ldrh	r2, [r3, #0]
 800257e:	0013      	movs	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	189b      	adds	r3, r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	3369      	adds	r3, #105	; 0x69
 8002588:	33ff      	adds	r3, #255	; 0xff
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	18d3      	adds	r3, r2, r3
 800258e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002590:	2308      	movs	r3, #8
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d107      	bne.n	80025aa <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2200      	movs	r2, #0
 800259e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	80da      	strh	r2, [r3, #6]
 80025a8:	e00b      	b.n	80025c2 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2201      	movs	r2, #1
 80025ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	0c1b      	lsrs	r3, r3, #16
 80025bc:	b29a      	uxth	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b007      	add	sp, #28
 80025ca:	bd90      	pop	{r4, r7, pc}

080025cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	23ba      	movs	r3, #186	; 0xba
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	2101      	movs	r1, #1
 80025e2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	23b8      	movs	r3, #184	; 0xb8
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	2100      	movs	r1, #0
 80025ec:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2254      	movs	r2, #84	; 0x54
 80025f2:	5a9b      	ldrh	r3, [r3, r2]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2201      	movs	r2, #1
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b299      	uxth	r1, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2254      	movs	r2, #84	; 0x54
 8002600:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2254      	movs	r2, #84	; 0x54
 8002606:	5a9b      	ldrh	r3, [r3, r2]
 8002608:	b29b      	uxth	r3, r3
 800260a:	2202      	movs	r2, #2
 800260c:	4313      	orrs	r3, r2
 800260e:	b299      	uxth	r1, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2254      	movs	r2, #84	; 0x54
 8002614:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	b004      	add	sp, #16
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	000a      	movs	r2, r1
 800262a:	1cfb      	adds	r3, r7, #3
 800262c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	b002      	add	sp, #8
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002638:	b5b0      	push	{r4, r5, r7, lr}
 800263a:	b08a      	sub	sp, #40	; 0x28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d102      	bne.n	800264c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	f000 fbaf 	bl	8002daa <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264c:	4bcf      	ldr	r3, [pc, #828]	; (800298c <HAL_RCC_OscConfig+0x354>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	220c      	movs	r2, #12
 8002652:	4013      	ands	r3, r2
 8002654:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002656:	4bcd      	ldr	r3, [pc, #820]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	025b      	lsls	r3, r3, #9
 800265e:	4013      	ands	r3, r2
 8002660:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2201      	movs	r2, #1
 8002668:	4013      	ands	r3, r2
 800266a:	d100      	bne.n	800266e <HAL_RCC_OscConfig+0x36>
 800266c:	e07e      	b.n	800276c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	2b08      	cmp	r3, #8
 8002672:	d007      	beq.n	8002684 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	2b0c      	cmp	r3, #12
 8002678:	d112      	bne.n	80026a0 <HAL_RCC_OscConfig+0x68>
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	025b      	lsls	r3, r3, #9
 8002680:	429a      	cmp	r2, r3
 8002682:	d10d      	bne.n	80026a0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002684:	4bc1      	ldr	r3, [pc, #772]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	029b      	lsls	r3, r3, #10
 800268c:	4013      	ands	r3, r2
 800268e:	d100      	bne.n	8002692 <HAL_RCC_OscConfig+0x5a>
 8002690:	e06b      	b.n	800276a <HAL_RCC_OscConfig+0x132>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d167      	bne.n	800276a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	f000 fb85 	bl	8002daa <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	025b      	lsls	r3, r3, #9
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d107      	bne.n	80026bc <HAL_RCC_OscConfig+0x84>
 80026ac:	4bb7      	ldr	r3, [pc, #732]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4bb6      	ldr	r3, [pc, #728]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80026b2:	2180      	movs	r1, #128	; 0x80
 80026b4:	0249      	lsls	r1, r1, #9
 80026b6:	430a      	orrs	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e027      	b.n	800270c <HAL_RCC_OscConfig+0xd4>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	23a0      	movs	r3, #160	; 0xa0
 80026c2:	02db      	lsls	r3, r3, #11
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d10e      	bne.n	80026e6 <HAL_RCC_OscConfig+0xae>
 80026c8:	4bb0      	ldr	r3, [pc, #704]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4baf      	ldr	r3, [pc, #700]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80026ce:	2180      	movs	r1, #128	; 0x80
 80026d0:	02c9      	lsls	r1, r1, #11
 80026d2:	430a      	orrs	r2, r1
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	4bad      	ldr	r3, [pc, #692]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	4bac      	ldr	r3, [pc, #688]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80026dc:	2180      	movs	r1, #128	; 0x80
 80026de:	0249      	lsls	r1, r1, #9
 80026e0:	430a      	orrs	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	e012      	b.n	800270c <HAL_RCC_OscConfig+0xd4>
 80026e6:	4ba9      	ldr	r3, [pc, #676]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4ba8      	ldr	r3, [pc, #672]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80026ec:	49a8      	ldr	r1, [pc, #672]	; (8002990 <HAL_RCC_OscConfig+0x358>)
 80026ee:	400a      	ands	r2, r1
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	4ba6      	ldr	r3, [pc, #664]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	2380      	movs	r3, #128	; 0x80
 80026f8:	025b      	lsls	r3, r3, #9
 80026fa:	4013      	ands	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4ba2      	ldr	r3, [pc, #648]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4ba1      	ldr	r3, [pc, #644]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002706:	49a3      	ldr	r1, [pc, #652]	; (8002994 <HAL_RCC_OscConfig+0x35c>)
 8002708:	400a      	ands	r2, r1
 800270a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d015      	beq.n	8002740 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7fe f84c 	bl	80007b0 <HAL_GetTick>
 8002718:	0003      	movs	r3, r0
 800271a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800271c:	e009      	b.n	8002732 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800271e:	f7fe f847 	bl	80007b0 <HAL_GetTick>
 8002722:	0002      	movs	r2, r0
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b64      	cmp	r3, #100	; 0x64
 800272a:	d902      	bls.n	8002732 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	f000 fb3c 	bl	8002daa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002732:	4b96      	ldr	r3, [pc, #600]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	029b      	lsls	r3, r3, #10
 800273a:	4013      	ands	r3, r2
 800273c:	d0ef      	beq.n	800271e <HAL_RCC_OscConfig+0xe6>
 800273e:	e015      	b.n	800276c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7fe f836 	bl	80007b0 <HAL_GetTick>
 8002744:	0003      	movs	r3, r0
 8002746:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800274a:	f7fe f831 	bl	80007b0 <HAL_GetTick>
 800274e:	0002      	movs	r2, r0
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b64      	cmp	r3, #100	; 0x64
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e326      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800275c:	4b8b      	ldr	r3, [pc, #556]	; (800298c <HAL_RCC_OscConfig+0x354>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	029b      	lsls	r3, r3, #10
 8002764:	4013      	ands	r3, r2
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x112>
 8002768:	e000      	b.n	800276c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2202      	movs	r2, #2
 8002772:	4013      	ands	r3, r2
 8002774:	d100      	bne.n	8002778 <HAL_RCC_OscConfig+0x140>
 8002776:	e08b      	b.n	8002890 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d005      	beq.n	8002790 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d13e      	bne.n	8002808 <HAL_RCC_OscConfig+0x1d0>
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d13b      	bne.n	8002808 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002790:	4b7e      	ldr	r3, [pc, #504]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2204      	movs	r2, #4
 8002796:	4013      	ands	r3, r2
 8002798:	d004      	beq.n	80027a4 <HAL_RCC_OscConfig+0x16c>
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e302      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a4:	4b79      	ldr	r3, [pc, #484]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4a7b      	ldr	r2, [pc, #492]	; (8002998 <HAL_RCC_OscConfig+0x360>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	0019      	movs	r1, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	021a      	lsls	r2, r3, #8
 80027b4:	4b75      	ldr	r3, [pc, #468]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80027b6:	430a      	orrs	r2, r1
 80027b8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80027ba:	4b74      	ldr	r3, [pc, #464]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2209      	movs	r2, #9
 80027c0:	4393      	bics	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	4b71      	ldr	r3, [pc, #452]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027cc:	f000 fc40 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 80027d0:	0001      	movs	r1, r0
 80027d2:	4b6e      	ldr	r3, [pc, #440]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	220f      	movs	r2, #15
 80027da:	4013      	ands	r3, r2
 80027dc:	4a6f      	ldr	r2, [pc, #444]	; (800299c <HAL_RCC_OscConfig+0x364>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	000a      	movs	r2, r1
 80027e2:	40da      	lsrs	r2, r3
 80027e4:	4b6e      	ldr	r3, [pc, #440]	; (80029a0 <HAL_RCC_OscConfig+0x368>)
 80027e6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80027e8:	4b6e      	ldr	r3, [pc, #440]	; (80029a4 <HAL_RCC_OscConfig+0x36c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2513      	movs	r5, #19
 80027ee:	197c      	adds	r4, r7, r5
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7fd ff97 	bl	8000724 <HAL_InitTick>
 80027f6:	0003      	movs	r3, r0
 80027f8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80027fa:	197b      	adds	r3, r7, r5
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d046      	beq.n	8002890 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002802:	197b      	adds	r3, r7, r5
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	e2d0      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d027      	beq.n	800285e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800280e:	4b5f      	ldr	r3, [pc, #380]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2209      	movs	r2, #9
 8002814:	4393      	bics	r3, r2
 8002816:	0019      	movs	r1, r3
 8002818:	4b5c      	ldr	r3, [pc, #368]	; (800298c <HAL_RCC_OscConfig+0x354>)
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fd ffc6 	bl	80007b0 <HAL_GetTick>
 8002824:	0003      	movs	r3, r0
 8002826:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800282a:	f7fd ffc1 	bl	80007b0 <HAL_GetTick>
 800282e:	0002      	movs	r2, r0
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e2b6      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800283c:	4b53      	ldr	r3, [pc, #332]	; (800298c <HAL_RCC_OscConfig+0x354>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2204      	movs	r2, #4
 8002842:	4013      	ands	r3, r2
 8002844:	d0f1      	beq.n	800282a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002846:	4b51      	ldr	r3, [pc, #324]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4a53      	ldr	r2, [pc, #332]	; (8002998 <HAL_RCC_OscConfig+0x360>)
 800284c:	4013      	ands	r3, r2
 800284e:	0019      	movs	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	021a      	lsls	r2, r3, #8
 8002856:	4b4d      	ldr	r3, [pc, #308]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002858:	430a      	orrs	r2, r1
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	e018      	b.n	8002890 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285e:	4b4b      	ldr	r3, [pc, #300]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4b4a      	ldr	r3, [pc, #296]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002864:	2101      	movs	r1, #1
 8002866:	438a      	bics	r2, r1
 8002868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286a:	f7fd ffa1 	bl	80007b0 <HAL_GetTick>
 800286e:	0003      	movs	r3, r0
 8002870:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002874:	f7fd ff9c 	bl	80007b0 <HAL_GetTick>
 8002878:	0002      	movs	r2, r0
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e291      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002886:	4b41      	ldr	r3, [pc, #260]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2204      	movs	r2, #4
 800288c:	4013      	ands	r3, r2
 800288e:	d1f1      	bne.n	8002874 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2210      	movs	r2, #16
 8002896:	4013      	ands	r3, r2
 8002898:	d100      	bne.n	800289c <HAL_RCC_OscConfig+0x264>
 800289a:	e0a1      	b.n	80029e0 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d140      	bne.n	8002924 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028a2:	4b3a      	ldr	r3, [pc, #232]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4013      	ands	r3, r2
 80028ac:	d005      	beq.n	80028ba <HAL_RCC_OscConfig+0x282>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e277      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ba:	4b34      	ldr	r3, [pc, #208]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4a3a      	ldr	r2, [pc, #232]	; (80029a8 <HAL_RCC_OscConfig+0x370>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028c8:	4b30      	ldr	r3, [pc, #192]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ce:	4b2f      	ldr	r3, [pc, #188]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	0a19      	lsrs	r1, r3, #8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	061a      	lsls	r2, r3, #24
 80028dc:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	0b5b      	lsrs	r3, r3, #13
 80028e8:	3301      	adds	r3, #1
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	0212      	lsls	r2, r2, #8
 80028ee:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80028f0:	4b26      	ldr	r3, [pc, #152]	; (800298c <HAL_RCC_OscConfig+0x354>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	210f      	movs	r1, #15
 80028f8:	400b      	ands	r3, r1
 80028fa:	4928      	ldr	r1, [pc, #160]	; (800299c <HAL_RCC_OscConfig+0x364>)
 80028fc:	5ccb      	ldrb	r3, [r1, r3]
 80028fe:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002900:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <HAL_RCC_OscConfig+0x368>)
 8002902:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002904:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <HAL_RCC_OscConfig+0x36c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2513      	movs	r5, #19
 800290a:	197c      	adds	r4, r7, r5
 800290c:	0018      	movs	r0, r3
 800290e:	f7fd ff09 	bl	8000724 <HAL_InitTick>
 8002912:	0003      	movs	r3, r0
 8002914:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002916:	197b      	adds	r3, r7, r5
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d060      	beq.n	80029e0 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800291e:	197b      	adds	r3, r7, r5
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	e242      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d03f      	beq.n	80029ac <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800292c:	4b17      	ldr	r3, [pc, #92]	; (800298c <HAL_RCC_OscConfig+0x354>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002932:	2180      	movs	r1, #128	; 0x80
 8002934:	0049      	lsls	r1, r1, #1
 8002936:	430a      	orrs	r2, r1
 8002938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7fd ff39 	bl	80007b0 <HAL_GetTick>
 800293e:	0003      	movs	r3, r0
 8002940:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002944:	f7fd ff34 	bl	80007b0 <HAL_GetTick>
 8002948:	0002      	movs	r2, r0
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e229      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4013      	ands	r3, r2
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4a10      	ldr	r2, [pc, #64]	; (80029a8 <HAL_RCC_OscConfig+0x370>)
 8002968:	4013      	ands	r3, r2
 800296a:	0019      	movs	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	0a19      	lsrs	r1, r3, #8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	061a      	lsls	r2, r3, #24
 8002984:	4b01      	ldr	r3, [pc, #4]	; (800298c <HAL_RCC_OscConfig+0x354>)
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	e029      	b.n	80029e0 <HAL_RCC_OscConfig+0x3a8>
 800298c:	40021000 	.word	0x40021000
 8002990:	fffeffff 	.word	0xfffeffff
 8002994:	fffbffff 	.word	0xfffbffff
 8002998:	ffffe0ff 	.word	0xffffe0ff
 800299c:	08007770 	.word	0x08007770
 80029a0:	20000000 	.word	0x20000000
 80029a4:	20000004 	.word	0x20000004
 80029a8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029ac:	4bbd      	ldr	r3, [pc, #756]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4bbc      	ldr	r3, [pc, #752]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 80029b2:	49bd      	ldr	r1, [pc, #756]	; (8002ca8 <HAL_RCC_OscConfig+0x670>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7fd fefa 	bl	80007b0 <HAL_GetTick>
 80029bc:	0003      	movs	r3, r0
 80029be:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029c2:	f7fd fef5 	bl	80007b0 <HAL_GetTick>
 80029c6:	0002      	movs	r2, r0
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e1ea      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80029d4:	4bb3      	ldr	r3, [pc, #716]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4013      	ands	r3, r2
 80029de:	d1f0      	bne.n	80029c2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2208      	movs	r2, #8
 80029e6:	4013      	ands	r3, r2
 80029e8:	d036      	beq.n	8002a58 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d019      	beq.n	8002a26 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f2:	4bac      	ldr	r3, [pc, #688]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 80029f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029f6:	4bab      	ldr	r3, [pc, #684]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 80029f8:	2101      	movs	r1, #1
 80029fa:	430a      	orrs	r2, r1
 80029fc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fe:	f7fd fed7 	bl	80007b0 <HAL_GetTick>
 8002a02:	0003      	movs	r3, r0
 8002a04:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a08:	f7fd fed2 	bl	80007b0 <HAL_GetTick>
 8002a0c:	0002      	movs	r2, r0
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e1c7      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a1a:	4ba2      	ldr	r3, [pc, #648]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1e:	2202      	movs	r2, #2
 8002a20:	4013      	ands	r3, r2
 8002a22:	d0f1      	beq.n	8002a08 <HAL_RCC_OscConfig+0x3d0>
 8002a24:	e018      	b.n	8002a58 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a26:	4b9f      	ldr	r3, [pc, #636]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002a28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a2a:	4b9e      	ldr	r3, [pc, #632]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	438a      	bics	r2, r1
 8002a30:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a32:	f7fd febd 	bl	80007b0 <HAL_GetTick>
 8002a36:	0003      	movs	r3, r0
 8002a38:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7fd feb8 	bl	80007b0 <HAL_GetTick>
 8002a40:	0002      	movs	r2, r0
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e1ad      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a4e:	4b95      	ldr	r3, [pc, #596]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a52:	2202      	movs	r2, #2
 8002a54:	4013      	ands	r3, r2
 8002a56:	d1f1      	bne.n	8002a3c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d100      	bne.n	8002a64 <HAL_RCC_OscConfig+0x42c>
 8002a62:	e0ae      	b.n	8002bc2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a64:	2027      	movs	r0, #39	; 0x27
 8002a66:	183b      	adds	r3, r7, r0
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6c:	4b8d      	ldr	r3, [pc, #564]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	055b      	lsls	r3, r3, #21
 8002a74:	4013      	ands	r3, r2
 8002a76:	d109      	bne.n	8002a8c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a78:	4b8a      	ldr	r3, [pc, #552]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a7c:	4b89      	ldr	r3, [pc, #548]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	0549      	lsls	r1, r1, #21
 8002a82:	430a      	orrs	r2, r1
 8002a84:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a86:	183b      	adds	r3, r7, r0
 8002a88:	2201      	movs	r2, #1
 8002a8a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	4b87      	ldr	r3, [pc, #540]	; (8002cac <HAL_RCC_OscConfig+0x674>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4013      	ands	r3, r2
 8002a96:	d11a      	bne.n	8002ace <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a98:	4b84      	ldr	r3, [pc, #528]	; (8002cac <HAL_RCC_OscConfig+0x674>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b83      	ldr	r3, [pc, #524]	; (8002cac <HAL_RCC_OscConfig+0x674>)
 8002a9e:	2180      	movs	r1, #128	; 0x80
 8002aa0:	0049      	lsls	r1, r1, #1
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa6:	f7fd fe83 	bl	80007b0 <HAL_GetTick>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab0:	f7fd fe7e 	bl	80007b0 <HAL_GetTick>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e173      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac2:	4b7a      	ldr	r3, [pc, #488]	; (8002cac <HAL_RCC_OscConfig+0x674>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4013      	ands	r3, r2
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_OscConfig+0x4b2>
 8002ada:	4b72      	ldr	r3, [pc, #456]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002adc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ade:	4b71      	ldr	r3, [pc, #452]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002ae0:	2180      	movs	r1, #128	; 0x80
 8002ae2:	0049      	lsls	r1, r1, #1
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	651a      	str	r2, [r3, #80]	; 0x50
 8002ae8:	e031      	b.n	8002b4e <HAL_RCC_OscConfig+0x516>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4d4>
 8002af2:	4b6c      	ldr	r3, [pc, #432]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002af4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002af6:	4b6b      	ldr	r3, [pc, #428]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002af8:	496b      	ldr	r1, [pc, #428]	; (8002ca8 <HAL_RCC_OscConfig+0x670>)
 8002afa:	400a      	ands	r2, r1
 8002afc:	651a      	str	r2, [r3, #80]	; 0x50
 8002afe:	4b69      	ldr	r3, [pc, #420]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002b00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b02:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002b04:	496a      	ldr	r1, [pc, #424]	; (8002cb0 <HAL_RCC_OscConfig+0x678>)
 8002b06:	400a      	ands	r2, r1
 8002b08:	651a      	str	r2, [r3, #80]	; 0x50
 8002b0a:	e020      	b.n	8002b4e <HAL_RCC_OscConfig+0x516>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	23a0      	movs	r3, #160	; 0xa0
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d10e      	bne.n	8002b36 <HAL_RCC_OscConfig+0x4fe>
 8002b18:	4b62      	ldr	r3, [pc, #392]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002b1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b1c:	4b61      	ldr	r3, [pc, #388]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002b1e:	2180      	movs	r1, #128	; 0x80
 8002b20:	00c9      	lsls	r1, r1, #3
 8002b22:	430a      	orrs	r2, r1
 8002b24:	651a      	str	r2, [r3, #80]	; 0x50
 8002b26:	4b5f      	ldr	r3, [pc, #380]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b2a:	4b5e      	ldr	r3, [pc, #376]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002b2c:	2180      	movs	r1, #128	; 0x80
 8002b2e:	0049      	lsls	r1, r1, #1
 8002b30:	430a      	orrs	r2, r1
 8002b32:	651a      	str	r2, [r3, #80]	; 0x50
 8002b34:	e00b      	b.n	8002b4e <HAL_RCC_OscConfig+0x516>
 8002b36:	4b5b      	ldr	r3, [pc, #364]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002b38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b3a:	4b5a      	ldr	r3, [pc, #360]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002b3c:	495a      	ldr	r1, [pc, #360]	; (8002ca8 <HAL_RCC_OscConfig+0x670>)
 8002b3e:	400a      	ands	r2, r1
 8002b40:	651a      	str	r2, [r3, #80]	; 0x50
 8002b42:	4b58      	ldr	r3, [pc, #352]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002b44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b46:	4b57      	ldr	r3, [pc, #348]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002b48:	4959      	ldr	r1, [pc, #356]	; (8002cb0 <HAL_RCC_OscConfig+0x678>)
 8002b4a:	400a      	ands	r2, r1
 8002b4c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d015      	beq.n	8002b82 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b56:	f7fd fe2b 	bl	80007b0 <HAL_GetTick>
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b5e:	e009      	b.n	8002b74 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7fd fe26 	bl	80007b0 <HAL_GetTick>
 8002b64:	0002      	movs	r2, r0
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	4a52      	ldr	r2, [pc, #328]	; (8002cb4 <HAL_RCC_OscConfig+0x67c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e11a      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b74:	4b4b      	ldr	r3, [pc, #300]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002b76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d0ef      	beq.n	8002b60 <HAL_RCC_OscConfig+0x528>
 8002b80:	e014      	b.n	8002bac <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b82:	f7fd fe15 	bl	80007b0 <HAL_GetTick>
 8002b86:	0003      	movs	r3, r0
 8002b88:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b8a:	e009      	b.n	8002ba0 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8c:	f7fd fe10 	bl	80007b0 <HAL_GetTick>
 8002b90:	0002      	movs	r2, r0
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	4a47      	ldr	r2, [pc, #284]	; (8002cb4 <HAL_RCC_OscConfig+0x67c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e104      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ba0:	4b40      	ldr	r3, [pc, #256]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002ba2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d1ef      	bne.n	8002b8c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bac:	2327      	movs	r3, #39	; 0x27
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d105      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bba:	4b3a      	ldr	r3, [pc, #232]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002bbc:	493e      	ldr	r1, [pc, #248]	; (8002cb8 <HAL_RCC_OscConfig+0x680>)
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d049      	beq.n	8002c60 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d026      	beq.n	8002c22 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002bd4:	4b33      	ldr	r3, [pc, #204]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	4b32      	ldr	r3, [pc, #200]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002bda:	2101      	movs	r1, #1
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	4b30      	ldr	r3, [pc, #192]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002be4:	4b2f      	ldr	r3, [pc, #188]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002be6:	2101      	movs	r1, #1
 8002be8:	430a      	orrs	r2, r1
 8002bea:	635a      	str	r2, [r3, #52]	; 0x34
 8002bec:	4b33      	ldr	r3, [pc, #204]	; (8002cbc <HAL_RCC_OscConfig+0x684>)
 8002bee:	6a1a      	ldr	r2, [r3, #32]
 8002bf0:	4b32      	ldr	r3, [pc, #200]	; (8002cbc <HAL_RCC_OscConfig+0x684>)
 8002bf2:	2180      	movs	r1, #128	; 0x80
 8002bf4:	0189      	lsls	r1, r1, #6
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fd fdd9 	bl	80007b0 <HAL_GetTick>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c04:	f7fd fdd4 	bl	80007b0 <HAL_GetTick>
 8002c08:	0002      	movs	r2, r0
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e0c9      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c16:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d0f1      	beq.n	8002c04 <HAL_RCC_OscConfig+0x5cc>
 8002c20:	e01e      	b.n	8002c60 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002c22:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	4b1f      	ldr	r3, [pc, #124]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002c28:	2101      	movs	r1, #1
 8002c2a:	438a      	bics	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <HAL_RCC_OscConfig+0x684>)
 8002c30:	6a1a      	ldr	r2, [r3, #32]
 8002c32:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <HAL_RCC_OscConfig+0x684>)
 8002c34:	4922      	ldr	r1, [pc, #136]	; (8002cc0 <HAL_RCC_OscConfig+0x688>)
 8002c36:	400a      	ands	r2, r1
 8002c38:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7fd fdb9 	bl	80007b0 <HAL_GetTick>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c44:	f7fd fdb4 	bl	80007b0 <HAL_GetTick>
 8002c48:	0002      	movs	r2, r0
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e0a9      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d1f1      	bne.n	8002c44 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d100      	bne.n	8002c6a <HAL_RCC_OscConfig+0x632>
 8002c68:	e09e      	b.n	8002da8 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	d100      	bne.n	8002c72 <HAL_RCC_OscConfig+0x63a>
 8002c70:	e077      	b.n	8002d62 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d158      	bne.n	8002d2c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_RCC_OscConfig+0x66c>)
 8002c80:	4910      	ldr	r1, [pc, #64]	; (8002cc4 <HAL_RCC_OscConfig+0x68c>)
 8002c82:	400a      	ands	r2, r1
 8002c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7fd fd93 	bl	80007b0 <HAL_GetTick>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c8e:	e01b      	b.n	8002cc8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c90:	f7fd fd8e 	bl	80007b0 <HAL_GetTick>
 8002c94:	0002      	movs	r2, r0
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d914      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e083      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	fffffeff 	.word	0xfffffeff
 8002cac:	40007000 	.word	0x40007000
 8002cb0:	fffffbff 	.word	0xfffffbff
 8002cb4:	00001388 	.word	0x00001388
 8002cb8:	efffffff 	.word	0xefffffff
 8002cbc:	40010000 	.word	0x40010000
 8002cc0:	ffffdfff 	.word	0xffffdfff
 8002cc4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cc8:	4b3a      	ldr	r3, [pc, #232]	; (8002db4 <HAL_RCC_OscConfig+0x77c>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	049b      	lsls	r3, r3, #18
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d1dd      	bne.n	8002c90 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd4:	4b37      	ldr	r3, [pc, #220]	; (8002db4 <HAL_RCC_OscConfig+0x77c>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a37      	ldr	r2, [pc, #220]	; (8002db8 <HAL_RCC_OscConfig+0x780>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	0019      	movs	r1, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cec:	431a      	orrs	r2, r3
 8002cee:	4b31      	ldr	r3, [pc, #196]	; (8002db4 <HAL_RCC_OscConfig+0x77c>)
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf4:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <HAL_RCC_OscConfig+0x77c>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b2e      	ldr	r3, [pc, #184]	; (8002db4 <HAL_RCC_OscConfig+0x77c>)
 8002cfa:	2180      	movs	r1, #128	; 0x80
 8002cfc:	0449      	lsls	r1, r1, #17
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d02:	f7fd fd55 	bl	80007b0 <HAL_GetTick>
 8002d06:	0003      	movs	r3, r0
 8002d08:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fd fd50 	bl	80007b0 <HAL_GetTick>
 8002d10:	0002      	movs	r2, r0
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e045      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d1e:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <HAL_RCC_OscConfig+0x77c>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	049b      	lsls	r3, r3, #18
 8002d26:	4013      	ands	r3, r2
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x6d4>
 8002d2a:	e03d      	b.n	8002da8 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2c:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <HAL_RCC_OscConfig+0x77c>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <HAL_RCC_OscConfig+0x77c>)
 8002d32:	4922      	ldr	r1, [pc, #136]	; (8002dbc <HAL_RCC_OscConfig+0x784>)
 8002d34:	400a      	ands	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7fd fd3a 	bl	80007b0 <HAL_GetTick>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d42:	f7fd fd35 	bl	80007b0 <HAL_GetTick>
 8002d46:	0002      	movs	r2, r0
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e02a      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d54:	4b17      	ldr	r3, [pc, #92]	; (8002db4 <HAL_RCC_OscConfig+0x77c>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	049b      	lsls	r3, r3, #18
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d1f0      	bne.n	8002d42 <HAL_RCC_OscConfig+0x70a>
 8002d60:	e022      	b.n	8002da8 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e01d      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <HAL_RCC_OscConfig+0x77c>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	025b      	lsls	r3, r3, #9
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d10f      	bne.n	8002da4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	23f0      	movs	r3, #240	; 0xf0
 8002d88:	039b      	lsls	r3, r3, #14
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	23c0      	movs	r3, #192	; 0xc0
 8002d98:	041b      	lsls	r3, r3, #16
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b00a      	add	sp, #40	; 0x28
 8002db0:	bdb0      	pop	{r4, r5, r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	40021000 	.word	0x40021000
 8002db8:	ff02ffff 	.word	0xff02ffff
 8002dbc:	feffffff 	.word	0xfeffffff

08002dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc0:	b5b0      	push	{r4, r5, r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e128      	b.n	8003026 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd4:	4b96      	ldr	r3, [pc, #600]	; (8003030 <HAL_RCC_ClockConfig+0x270>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4013      	ands	r3, r2
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d91e      	bls.n	8002e20 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de2:	4b93      	ldr	r3, [pc, #588]	; (8003030 <HAL_RCC_ClockConfig+0x270>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2201      	movs	r2, #1
 8002de8:	4393      	bics	r3, r2
 8002dea:	0019      	movs	r1, r3
 8002dec:	4b90      	ldr	r3, [pc, #576]	; (8003030 <HAL_RCC_ClockConfig+0x270>)
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002df4:	f7fd fcdc 	bl	80007b0 <HAL_GetTick>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfc:	e009      	b.n	8002e12 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfe:	f7fd fcd7 	bl	80007b0 <HAL_GetTick>
 8002e02:	0002      	movs	r2, r0
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	4a8a      	ldr	r2, [pc, #552]	; (8003034 <HAL_RCC_ClockConfig+0x274>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e109      	b.n	8003026 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b87      	ldr	r3, [pc, #540]	; (8003030 <HAL_RCC_ClockConfig+0x270>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2201      	movs	r2, #1
 8002e18:	4013      	ands	r3, r2
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d1ee      	bne.n	8002dfe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2202      	movs	r2, #2
 8002e26:	4013      	ands	r3, r2
 8002e28:	d009      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e2a:	4b83      	ldr	r3, [pc, #524]	; (8003038 <HAL_RCC_ClockConfig+0x278>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	22f0      	movs	r2, #240	; 0xf0
 8002e30:	4393      	bics	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	4b7f      	ldr	r3, [pc, #508]	; (8003038 <HAL_RCC_ClockConfig+0x278>)
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2201      	movs	r2, #1
 8002e44:	4013      	ands	r3, r2
 8002e46:	d100      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x8a>
 8002e48:	e089      	b.n	8002f5e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d107      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e52:	4b79      	ldr	r3, [pc, #484]	; (8003038 <HAL_RCC_ClockConfig+0x278>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	029b      	lsls	r3, r3, #10
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d120      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e0e1      	b.n	8003026 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e6a:	4b73      	ldr	r3, [pc, #460]	; (8003038 <HAL_RCC_ClockConfig+0x278>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	049b      	lsls	r3, r3, #18
 8002e72:	4013      	ands	r3, r2
 8002e74:	d114      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e0d5      	b.n	8003026 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d106      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e82:	4b6d      	ldr	r3, [pc, #436]	; (8003038 <HAL_RCC_ClockConfig+0x278>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2204      	movs	r2, #4
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d109      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0ca      	b.n	8003026 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e90:	4b69      	ldr	r3, [pc, #420]	; (8003038 <HAL_RCC_ClockConfig+0x278>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d101      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0c2      	b.n	8003026 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea0:	4b65      	ldr	r3, [pc, #404]	; (8003038 <HAL_RCC_ClockConfig+0x278>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	4393      	bics	r3, r2
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	4b62      	ldr	r3, [pc, #392]	; (8003038 <HAL_RCC_ClockConfig+0x278>)
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb4:	f7fd fc7c 	bl	80007b0 <HAL_GetTick>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d111      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ec4:	e009      	b.n	8002eda <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec6:	f7fd fc73 	bl	80007b0 <HAL_GetTick>
 8002eca:	0002      	movs	r2, r0
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	4a58      	ldr	r2, [pc, #352]	; (8003034 <HAL_RCC_ClockConfig+0x274>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e0a5      	b.n	8003026 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eda:	4b57      	ldr	r3, [pc, #348]	; (8003038 <HAL_RCC_ClockConfig+0x278>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	220c      	movs	r2, #12
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d1ef      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0x106>
 8002ee6:	e03a      	b.n	8002f5e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d111      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ef0:	e009      	b.n	8002f06 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef2:	f7fd fc5d 	bl	80007b0 <HAL_GetTick>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	4a4d      	ldr	r2, [pc, #308]	; (8003034 <HAL_RCC_ClockConfig+0x274>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e08f      	b.n	8003026 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f06:	4b4c      	ldr	r3, [pc, #304]	; (8003038 <HAL_RCC_ClockConfig+0x278>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b0c      	cmp	r3, #12
 8002f10:	d1ef      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x132>
 8002f12:	e024      	b.n	8002f5e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d11b      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f1c:	e009      	b.n	8002f32 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f1e:	f7fd fc47 	bl	80007b0 <HAL_GetTick>
 8002f22:	0002      	movs	r2, r0
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	4a42      	ldr	r2, [pc, #264]	; (8003034 <HAL_RCC_ClockConfig+0x274>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e079      	b.n	8003026 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f32:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCC_ClockConfig+0x278>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	220c      	movs	r2, #12
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d1ef      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x15e>
 8002f3e:	e00e      	b.n	8002f5e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f40:	f7fd fc36 	bl	80007b0 <HAL_GetTick>
 8002f44:	0002      	movs	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	4a3a      	ldr	r2, [pc, #232]	; (8003034 <HAL_RCC_ClockConfig+0x274>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e068      	b.n	8003026 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f54:	4b38      	ldr	r3, [pc, #224]	; (8003038 <HAL_RCC_ClockConfig+0x278>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	220c      	movs	r2, #12
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f5e:	4b34      	ldr	r3, [pc, #208]	; (8003030 <HAL_RCC_ClockConfig+0x270>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2201      	movs	r2, #1
 8002f64:	4013      	ands	r3, r2
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d21e      	bcs.n	8002faa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6c:	4b30      	ldr	r3, [pc, #192]	; (8003030 <HAL_RCC_ClockConfig+0x270>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2201      	movs	r2, #1
 8002f72:	4393      	bics	r3, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	4b2e      	ldr	r3, [pc, #184]	; (8003030 <HAL_RCC_ClockConfig+0x270>)
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f7e:	f7fd fc17 	bl	80007b0 <HAL_GetTick>
 8002f82:	0003      	movs	r3, r0
 8002f84:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	e009      	b.n	8002f9c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f88:	f7fd fc12 	bl	80007b0 <HAL_GetTick>
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	4a28      	ldr	r2, [pc, #160]	; (8003034 <HAL_RCC_ClockConfig+0x274>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e044      	b.n	8003026 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9c:	4b24      	ldr	r3, [pc, #144]	; (8003030 <HAL_RCC_ClockConfig+0x270>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d1ee      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2204      	movs	r2, #4
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d009      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb4:	4b20      	ldr	r3, [pc, #128]	; (8003038 <HAL_RCC_ClockConfig+0x278>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4a20      	ldr	r2, [pc, #128]	; (800303c <HAL_RCC_ClockConfig+0x27c>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HAL_RCC_ClockConfig+0x278>)
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2208      	movs	r2, #8
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_RCC_ClockConfig+0x278>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	4a1a      	ldr	r2, [pc, #104]	; (8003040 <HAL_RCC_ClockConfig+0x280>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	0019      	movs	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	00da      	lsls	r2, r3, #3
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <HAL_RCC_ClockConfig+0x278>)
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fe8:	f000 f832 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 8002fec:	0001      	movs	r1, r0
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_RCC_ClockConfig+0x278>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	220f      	movs	r2, #15
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	4a12      	ldr	r2, [pc, #72]	; (8003044 <HAL_RCC_ClockConfig+0x284>)
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	000a      	movs	r2, r1
 8002ffe:	40da      	lsrs	r2, r3
 8003000:	4b11      	ldr	r3, [pc, #68]	; (8003048 <HAL_RCC_ClockConfig+0x288>)
 8003002:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003004:	4b11      	ldr	r3, [pc, #68]	; (800304c <HAL_RCC_ClockConfig+0x28c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	250b      	movs	r5, #11
 800300a:	197c      	adds	r4, r7, r5
 800300c:	0018      	movs	r0, r3
 800300e:	f7fd fb89 	bl	8000724 <HAL_InitTick>
 8003012:	0003      	movs	r3, r0
 8003014:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003016:	197b      	adds	r3, r7, r5
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800301e:	197b      	adds	r3, r7, r5
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	e000      	b.n	8003026 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b004      	add	sp, #16
 800302c:	bdb0      	pop	{r4, r5, r7, pc}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	40022000 	.word	0x40022000
 8003034:	00001388 	.word	0x00001388
 8003038:	40021000 	.word	0x40021000
 800303c:	fffff8ff 	.word	0xfffff8ff
 8003040:	ffffc7ff 	.word	0xffffc7ff
 8003044:	08007770 	.word	0x08007770
 8003048:	20000000 	.word	0x20000000
 800304c:	20000004 	.word	0x20000004

08003050 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	b08e      	sub	sp, #56	; 0x38
 8003054:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003056:	4b4c      	ldr	r3, [pc, #304]	; (8003188 <HAL_RCC_GetSysClockFreq+0x138>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800305c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800305e:	230c      	movs	r3, #12
 8003060:	4013      	ands	r3, r2
 8003062:	2b0c      	cmp	r3, #12
 8003064:	d014      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x40>
 8003066:	d900      	bls.n	800306a <HAL_RCC_GetSysClockFreq+0x1a>
 8003068:	e07b      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x112>
 800306a:	2b04      	cmp	r3, #4
 800306c:	d002      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x24>
 800306e:	2b08      	cmp	r3, #8
 8003070:	d00b      	beq.n	800308a <HAL_RCC_GetSysClockFreq+0x3a>
 8003072:	e076      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003074:	4b44      	ldr	r3, [pc, #272]	; (8003188 <HAL_RCC_GetSysClockFreq+0x138>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2210      	movs	r2, #16
 800307a:	4013      	ands	r3, r2
 800307c:	d002      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800307e:	4b43      	ldr	r3, [pc, #268]	; (800318c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003080:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003082:	e07c      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003084:	4b42      	ldr	r3, [pc, #264]	; (8003190 <HAL_RCC_GetSysClockFreq+0x140>)
 8003086:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003088:	e079      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800308a:	4b42      	ldr	r3, [pc, #264]	; (8003194 <HAL_RCC_GetSysClockFreq+0x144>)
 800308c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800308e:	e076      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003092:	0c9a      	lsrs	r2, r3, #18
 8003094:	230f      	movs	r3, #15
 8003096:	401a      	ands	r2, r3
 8003098:	4b3f      	ldr	r3, [pc, #252]	; (8003198 <HAL_RCC_GetSysClockFreq+0x148>)
 800309a:	5c9b      	ldrb	r3, [r3, r2]
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800309e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a0:	0d9a      	lsrs	r2, r3, #22
 80030a2:	2303      	movs	r3, #3
 80030a4:	4013      	ands	r3, r2
 80030a6:	3301      	adds	r3, #1
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030aa:	4b37      	ldr	r3, [pc, #220]	; (8003188 <HAL_RCC_GetSysClockFreq+0x138>)
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	025b      	lsls	r3, r3, #9
 80030b2:	4013      	ands	r3, r2
 80030b4:	d01a      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	4a35      	ldr	r2, [pc, #212]	; (8003194 <HAL_RCC_GetSysClockFreq+0x144>)
 80030c0:	2300      	movs	r3, #0
 80030c2:	69b8      	ldr	r0, [r7, #24]
 80030c4:	69f9      	ldr	r1, [r7, #28]
 80030c6:	f7fd f8cb 	bl	8000260 <__aeabi_lmul>
 80030ca:	0002      	movs	r2, r0
 80030cc:	000b      	movs	r3, r1
 80030ce:	0010      	movs	r0, r2
 80030d0:	0019      	movs	r1, r3
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f7fd f89f 	bl	8000220 <__aeabi_uldivmod>
 80030e2:	0002      	movs	r2, r0
 80030e4:	000b      	movs	r3, r1
 80030e6:	0013      	movs	r3, r2
 80030e8:	637b      	str	r3, [r7, #52]	; 0x34
 80030ea:	e037      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80030ec:	4b26      	ldr	r3, [pc, #152]	; (8003188 <HAL_RCC_GetSysClockFreq+0x138>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2210      	movs	r2, #16
 80030f2:	4013      	ands	r3, r2
 80030f4:	d01a      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4a23      	ldr	r2, [pc, #140]	; (800318c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003100:	2300      	movs	r3, #0
 8003102:	68b8      	ldr	r0, [r7, #8]
 8003104:	68f9      	ldr	r1, [r7, #12]
 8003106:	f7fd f8ab 	bl	8000260 <__aeabi_lmul>
 800310a:	0002      	movs	r2, r0
 800310c:	000b      	movs	r3, r1
 800310e:	0010      	movs	r0, r2
 8003110:	0019      	movs	r1, r3
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	2300      	movs	r3, #0
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f7fd f87f 	bl	8000220 <__aeabi_uldivmod>
 8003122:	0002      	movs	r2, r0
 8003124:	000b      	movs	r3, r1
 8003126:	0013      	movs	r3, r2
 8003128:	637b      	str	r3, [r7, #52]	; 0x34
 800312a:	e017      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	0018      	movs	r0, r3
 8003130:	2300      	movs	r3, #0
 8003132:	0019      	movs	r1, r3
 8003134:	4a16      	ldr	r2, [pc, #88]	; (8003190 <HAL_RCC_GetSysClockFreq+0x140>)
 8003136:	2300      	movs	r3, #0
 8003138:	f7fd f892 	bl	8000260 <__aeabi_lmul>
 800313c:	0002      	movs	r2, r0
 800313e:	000b      	movs	r3, r1
 8003140:	0010      	movs	r0, r2
 8003142:	0019      	movs	r1, r3
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	001c      	movs	r4, r3
 8003148:	2300      	movs	r3, #0
 800314a:	001d      	movs	r5, r3
 800314c:	0022      	movs	r2, r4
 800314e:	002b      	movs	r3, r5
 8003150:	f7fd f866 	bl	8000220 <__aeabi_uldivmod>
 8003154:	0002      	movs	r2, r0
 8003156:	000b      	movs	r3, r1
 8003158:	0013      	movs	r3, r2
 800315a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800315c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003160:	e00d      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003162:	4b09      	ldr	r3, [pc, #36]	; (8003188 <HAL_RCC_GetSysClockFreq+0x138>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	0b5b      	lsrs	r3, r3, #13
 8003168:	2207      	movs	r2, #7
 800316a:	4013      	ands	r3, r2
 800316c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	3301      	adds	r3, #1
 8003172:	2280      	movs	r2, #128	; 0x80
 8003174:	0212      	lsls	r2, r2, #8
 8003176:	409a      	lsls	r2, r3
 8003178:	0013      	movs	r3, r2
 800317a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800317c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b00e      	add	sp, #56	; 0x38
 8003186:	bdb0      	pop	{r4, r5, r7, pc}
 8003188:	40021000 	.word	0x40021000
 800318c:	003d0900 	.word	0x003d0900
 8003190:	00f42400 	.word	0x00f42400
 8003194:	007a1200 	.word	0x007a1200
 8003198:	08007780 	.word	0x08007780

0800319c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80031a4:	2317      	movs	r3, #23
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2220      	movs	r2, #32
 80031b2:	4013      	ands	r3, r2
 80031b4:	d106      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	4013      	ands	r3, r2
 80031c0:	d100      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80031c2:	e104      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c4:	4bb1      	ldr	r3, [pc, #708]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	055b      	lsls	r3, r3, #21
 80031cc:	4013      	ands	r3, r2
 80031ce:	d10a      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d0:	4bae      	ldr	r3, [pc, #696]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d4:	4bad      	ldr	r3, [pc, #692]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031d6:	2180      	movs	r1, #128	; 0x80
 80031d8:	0549      	lsls	r1, r1, #21
 80031da:	430a      	orrs	r2, r1
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80031de:	2317      	movs	r3, #23
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	2201      	movs	r2, #1
 80031e4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e6:	4baa      	ldr	r3, [pc, #680]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	2380      	movs	r3, #128	; 0x80
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4013      	ands	r3, r2
 80031f0:	d11a      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f2:	4ba7      	ldr	r3, [pc, #668]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4ba6      	ldr	r3, [pc, #664]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031f8:	2180      	movs	r1, #128	; 0x80
 80031fa:	0049      	lsls	r1, r1, #1
 80031fc:	430a      	orrs	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003200:	f7fd fad6 	bl	80007b0 <HAL_GetTick>
 8003204:	0003      	movs	r3, r0
 8003206:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003208:	e008      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320a:	f7fd fad1 	bl	80007b0 <HAL_GetTick>
 800320e:	0002      	movs	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b64      	cmp	r3, #100	; 0x64
 8003216:	d901      	bls.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e133      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	4b9c      	ldr	r3, [pc, #624]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	2380      	movs	r3, #128	; 0x80
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4013      	ands	r3, r2
 8003226:	d0f0      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003228:	4b98      	ldr	r3, [pc, #608]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	23c0      	movs	r3, #192	; 0xc0
 800322e:	039b      	lsls	r3, r3, #14
 8003230:	4013      	ands	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	23c0      	movs	r3, #192	; 0xc0
 800323a:	039b      	lsls	r3, r3, #14
 800323c:	4013      	ands	r3, r2
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	429a      	cmp	r2, r3
 8003242:	d107      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	23c0      	movs	r3, #192	; 0xc0
 800324a:	039b      	lsls	r3, r3, #14
 800324c:	4013      	ands	r3, r2
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	429a      	cmp	r2, r3
 8003252:	d013      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	23c0      	movs	r3, #192	; 0xc0
 800325a:	029b      	lsls	r3, r3, #10
 800325c:	401a      	ands	r2, r3
 800325e:	23c0      	movs	r3, #192	; 0xc0
 8003260:	029b      	lsls	r3, r3, #10
 8003262:	429a      	cmp	r2, r3
 8003264:	d10a      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003266:	4b89      	ldr	r3, [pc, #548]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	029b      	lsls	r3, r3, #10
 800326e:	401a      	ands	r2, r3
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	029b      	lsls	r3, r3, #10
 8003274:	429a      	cmp	r2, r3
 8003276:	d101      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e103      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800327c:	4b83      	ldr	r3, [pc, #524]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800327e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003280:	23c0      	movs	r3, #192	; 0xc0
 8003282:	029b      	lsls	r3, r3, #10
 8003284:	4013      	ands	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d049      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	23c0      	movs	r3, #192	; 0xc0
 8003294:	029b      	lsls	r3, r3, #10
 8003296:	4013      	ands	r3, r2
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	429a      	cmp	r2, r3
 800329c:	d004      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2220      	movs	r2, #32
 80032a4:	4013      	ands	r3, r2
 80032a6:	d10d      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	23c0      	movs	r3, #192	; 0xc0
 80032ae:	029b      	lsls	r3, r3, #10
 80032b0:	4013      	ands	r3, r2
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d034      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	4013      	ands	r3, r2
 80032c2:	d02e      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80032c4:	4b71      	ldr	r3, [pc, #452]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c8:	4a72      	ldr	r2, [pc, #456]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ce:	4b6f      	ldr	r3, [pc, #444]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032d2:	4b6e      	ldr	r3, [pc, #440]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	0309      	lsls	r1, r1, #12
 80032d8:	430a      	orrs	r2, r1
 80032da:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032dc:	4b6b      	ldr	r3, [pc, #428]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032e0:	4b6a      	ldr	r3, [pc, #424]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032e2:	496d      	ldr	r1, [pc, #436]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80032e4:	400a      	ands	r2, r1
 80032e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80032e8:	4b68      	ldr	r3, [pc, #416]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4013      	ands	r3, r2
 80032f6:	d014      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fd fa5a 	bl	80007b0 <HAL_GetTick>
 80032fc:	0003      	movs	r3, r0
 80032fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003300:	e009      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003302:	f7fd fa55 	bl	80007b0 <HAL_GetTick>
 8003306:	0002      	movs	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	4a63      	ldr	r2, [pc, #396]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e0b6      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003316:	4b5d      	ldr	r3, [pc, #372]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4013      	ands	r3, r2
 8003320:	d0ef      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	4013      	ands	r3, r2
 800332c:	d01f      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	23c0      	movs	r3, #192	; 0xc0
 8003334:	029b      	lsls	r3, r3, #10
 8003336:	401a      	ands	r2, r3
 8003338:	23c0      	movs	r3, #192	; 0xc0
 800333a:	029b      	lsls	r3, r3, #10
 800333c:	429a      	cmp	r2, r3
 800333e:	d10c      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003340:	4b52      	ldr	r3, [pc, #328]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a56      	ldr	r2, [pc, #344]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003346:	4013      	ands	r3, r2
 8003348:	0019      	movs	r1, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	23c0      	movs	r3, #192	; 0xc0
 8003350:	039b      	lsls	r3, r3, #14
 8003352:	401a      	ands	r2, r3
 8003354:	4b4d      	ldr	r3, [pc, #308]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003356:	430a      	orrs	r2, r1
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	4b4c      	ldr	r3, [pc, #304]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800335c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	23c0      	movs	r3, #192	; 0xc0
 8003364:	029b      	lsls	r3, r3, #10
 8003366:	401a      	ands	r2, r3
 8003368:	4b48      	ldr	r3, [pc, #288]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800336a:	430a      	orrs	r2, r1
 800336c:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2220      	movs	r2, #32
 8003374:	4013      	ands	r3, r2
 8003376:	d01f      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	23c0      	movs	r3, #192	; 0xc0
 800337e:	029b      	lsls	r3, r3, #10
 8003380:	401a      	ands	r2, r3
 8003382:	23c0      	movs	r3, #192	; 0xc0
 8003384:	029b      	lsls	r3, r3, #10
 8003386:	429a      	cmp	r2, r3
 8003388:	d10c      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800338a:	4b40      	ldr	r3, [pc, #256]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a44      	ldr	r2, [pc, #272]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003390:	4013      	ands	r3, r2
 8003392:	0019      	movs	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	23c0      	movs	r3, #192	; 0xc0
 800339a:	039b      	lsls	r3, r3, #14
 800339c:	401a      	ands	r2, r3
 800339e:	4b3b      	ldr	r3, [pc, #236]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	4b39      	ldr	r3, [pc, #228]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033a6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	23c0      	movs	r3, #192	; 0xc0
 80033ae:	029b      	lsls	r3, r3, #10
 80033b0:	401a      	ands	r2, r3
 80033b2:	4b36      	ldr	r3, [pc, #216]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033b4:	430a      	orrs	r2, r1
 80033b6:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033b8:	2317      	movs	r3, #23
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d105      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c2:	4b32      	ldr	r3, [pc, #200]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c6:	4b31      	ldr	r3, [pc, #196]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033c8:	4936      	ldr	r1, [pc, #216]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80033ca:	400a      	ands	r2, r1
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2201      	movs	r2, #1
 80033d4:	4013      	ands	r3, r2
 80033d6:	d009      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033d8:	4b2c      	ldr	r3, [pc, #176]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033dc:	2203      	movs	r2, #3
 80033de:	4393      	bics	r3, r2
 80033e0:	0019      	movs	r1, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	4b29      	ldr	r3, [pc, #164]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033e8:	430a      	orrs	r2, r1
 80033ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2202      	movs	r2, #2
 80033f2:	4013      	ands	r3, r2
 80033f4:	d009      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033f6:	4b25      	ldr	r3, [pc, #148]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fa:	220c      	movs	r2, #12
 80033fc:	4393      	bics	r3, r2
 80033fe:	0019      	movs	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	4b21      	ldr	r3, [pc, #132]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003406:	430a      	orrs	r2, r1
 8003408:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2204      	movs	r2, #4
 8003410:	4013      	ands	r3, r2
 8003412:	d009      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003414:	4b1d      	ldr	r3, [pc, #116]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003418:	4a23      	ldr	r2, [pc, #140]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800341a:	4013      	ands	r3, r2
 800341c:	0019      	movs	r1, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695a      	ldr	r2, [r3, #20]
 8003422:	4b1a      	ldr	r3, [pc, #104]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003424:	430a      	orrs	r2, r1
 8003426:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2208      	movs	r2, #8
 800342e:	4013      	ands	r3, r2
 8003430:	d009      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003432:	4b16      	ldr	r3, [pc, #88]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003436:	4a1d      	ldr	r2, [pc, #116]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003438:	4013      	ands	r3, r2
 800343a:	0019      	movs	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699a      	ldr	r2, [r3, #24]
 8003440:	4b12      	ldr	r3, [pc, #72]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003442:	430a      	orrs	r2, r1
 8003444:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2240      	movs	r2, #64	; 0x40
 800344c:	4013      	ands	r3, r2
 800344e:	d009      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003450:	4b0e      	ldr	r3, [pc, #56]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003454:	4a16      	ldr	r2, [pc, #88]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003456:	4013      	ands	r3, r2
 8003458:	0019      	movs	r1, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1a      	ldr	r2, [r3, #32]
 800345e:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003460:	430a      	orrs	r2, r1
 8003462:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2280      	movs	r2, #128	; 0x80
 800346a:	4013      	ands	r3, r2
 800346c:	d009      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800346e:	4b07      	ldr	r3, [pc, #28]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003472:	4a10      	ldr	r2, [pc, #64]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003474:	4013      	ands	r3, r2
 8003476:	0019      	movs	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69da      	ldr	r2, [r3, #28]
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800347e:	430a      	orrs	r2, r1
 8003480:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b006      	add	sp, #24
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	40007000 	.word	0x40007000
 8003494:	fffcffff 	.word	0xfffcffff
 8003498:	fff7ffff 	.word	0xfff7ffff
 800349c:	00001388 	.word	0x00001388
 80034a0:	ffcfffff 	.word	0xffcfffff
 80034a4:	efffffff 	.word	0xefffffff
 80034a8:	fffff3ff 	.word	0xfffff3ff
 80034ac:	ffffcfff 	.word	0xffffcfff
 80034b0:	fbffffff 	.word	0xfbffffff
 80034b4:	fff3ffff 	.word	0xfff3ffff

080034b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2244      	movs	r2, #68	; 0x44
 80034c4:	2100      	movs	r1, #0
 80034c6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <USB_EnableGlobalInt+0x28>)
 80034ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	b299      	uxth	r1, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2240      	movs	r2, #64	; 0x40
 80034d4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b004      	add	sp, #16
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	0000bf80 	.word	0x0000bf80

080034e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80034ec:	4b09      	ldr	r3, [pc, #36]	; (8003514 <USB_DisableGlobalInt+0x30>)
 80034ee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2240      	movs	r2, #64	; 0x40
 80034f4:	5a9b      	ldrh	r3, [r3, r2]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	b292      	uxth	r2, r2
 80034fc:	43d2      	mvns	r2, r2
 80034fe:	b292      	uxth	r2, r2
 8003500:	4013      	ands	r3, r2
 8003502:	b299      	uxth	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2240      	movs	r2, #64	; 0x40
 8003508:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	0018      	movs	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	b004      	add	sp, #16
 8003512:	bd80      	pop	{r7, pc}
 8003514:	0000bf80 	.word	0x0000bf80

08003518 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003518:	b084      	sub	sp, #16
 800351a:	b590      	push	{r4, r7, lr}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	2004      	movs	r0, #4
 8003524:	2410      	movs	r4, #16
 8003526:	1900      	adds	r0, r0, r4
 8003528:	2408      	movs	r4, #8
 800352a:	46a4      	mov	ip, r4
 800352c:	44bc      	add	ip, r7
 800352e:	4460      	add	r0, ip
 8003530:	6001      	str	r1, [r0, #0]
 8003532:	6042      	str	r2, [r0, #4]
 8003534:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2240      	movs	r2, #64	; 0x40
 800353a:	2101      	movs	r1, #1
 800353c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2240      	movs	r2, #64	; 0x40
 8003542:	2100      	movs	r1, #0
 8003544:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2244      	movs	r2, #68	; 0x44
 800354a:	2100      	movs	r1, #0
 800354c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2250      	movs	r2, #80	; 0x50
 8003552:	2100      	movs	r1, #0
 8003554:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	0018      	movs	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	b003      	add	sp, #12
 800355e:	bc90      	pop	{r4, r7}
 8003560:	bc08      	pop	{r3}
 8003562:	b004      	add	sp, #16
 8003564:	4718      	bx	r3
	...

08003568 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b09c      	sub	sp, #112	; 0x70
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003572:	236f      	movs	r3, #111	; 0x6f
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	18d3      	adds	r3, r2, r3
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	b29a      	uxth	r2, r3
 8003588:	236c      	movs	r3, #108	; 0x6c
 800358a:	18fb      	adds	r3, r7, r3
 800358c:	49a3      	ldr	r1, [pc, #652]	; (800381c <USB_ActivateEndpoint+0x2b4>)
 800358e:	400a      	ands	r2, r1
 8003590:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	78db      	ldrb	r3, [r3, #3]
 8003596:	2b03      	cmp	r3, #3
 8003598:	d017      	beq.n	80035ca <USB_ActivateEndpoint+0x62>
 800359a:	dc28      	bgt.n	80035ee <USB_ActivateEndpoint+0x86>
 800359c:	2b02      	cmp	r3, #2
 800359e:	d00e      	beq.n	80035be <USB_ActivateEndpoint+0x56>
 80035a0:	dc25      	bgt.n	80035ee <USB_ActivateEndpoint+0x86>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <USB_ActivateEndpoint+0x44>
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d018      	beq.n	80035dc <USB_ActivateEndpoint+0x74>
 80035aa:	e020      	b.n	80035ee <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80035ac:	226c      	movs	r2, #108	; 0x6c
 80035ae:	18bb      	adds	r3, r7, r2
 80035b0:	18ba      	adds	r2, r7, r2
 80035b2:	8812      	ldrh	r2, [r2, #0]
 80035b4:	2180      	movs	r1, #128	; 0x80
 80035b6:	0089      	lsls	r1, r1, #2
 80035b8:	430a      	orrs	r2, r1
 80035ba:	801a      	strh	r2, [r3, #0]
      break;
 80035bc:	e01c      	b.n	80035f8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80035be:	226c      	movs	r2, #108	; 0x6c
 80035c0:	18bb      	adds	r3, r7, r2
 80035c2:	18ba      	adds	r2, r7, r2
 80035c4:	8812      	ldrh	r2, [r2, #0]
 80035c6:	801a      	strh	r2, [r3, #0]
      break;
 80035c8:	e016      	b.n	80035f8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80035ca:	226c      	movs	r2, #108	; 0x6c
 80035cc:	18bb      	adds	r3, r7, r2
 80035ce:	18ba      	adds	r2, r7, r2
 80035d0:	8812      	ldrh	r2, [r2, #0]
 80035d2:	21c0      	movs	r1, #192	; 0xc0
 80035d4:	00c9      	lsls	r1, r1, #3
 80035d6:	430a      	orrs	r2, r1
 80035d8:	801a      	strh	r2, [r3, #0]
      break;
 80035da:	e00d      	b.n	80035f8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80035dc:	226c      	movs	r2, #108	; 0x6c
 80035de:	18bb      	adds	r3, r7, r2
 80035e0:	18ba      	adds	r2, r7, r2
 80035e2:	8812      	ldrh	r2, [r2, #0]
 80035e4:	2180      	movs	r1, #128	; 0x80
 80035e6:	00c9      	lsls	r1, r1, #3
 80035e8:	430a      	orrs	r2, r1
 80035ea:	801a      	strh	r2, [r3, #0]
      break;
 80035ec:	e004      	b.n	80035f8 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80035ee:	236f      	movs	r3, #111	; 0x6f
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
      break;
 80035f6:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	18d3      	adds	r3, r2, r3
 8003602:	226c      	movs	r2, #108	; 0x6c
 8003604:	18ba      	adds	r2, r7, r2
 8003606:	8812      	ldrh	r2, [r2, #0]
 8003608:	4985      	ldr	r1, [pc, #532]	; (8003820 <USB_ActivateEndpoint+0x2b8>)
 800360a:	430a      	orrs	r2, r1
 800360c:	b292      	uxth	r2, r2
 800360e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	18d3      	adds	r3, r2, r3
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b29b      	uxth	r3, r3
 800361e:	b21b      	sxth	r3, r3
 8003620:	4a80      	ldr	r2, [pc, #512]	; (8003824 <USB_ActivateEndpoint+0x2bc>)
 8003622:	4013      	ands	r3, r2
 8003624:	b21a      	sxth	r2, r3
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	b21b      	sxth	r3, r3
 800362c:	4313      	orrs	r3, r2
 800362e:	b21a      	sxth	r2, r3
 8003630:	2166      	movs	r1, #102	; 0x66
 8003632:	187b      	adds	r3, r7, r1
 8003634:	801a      	strh	r2, [r3, #0]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	18d3      	adds	r3, r2, r3
 8003640:	187a      	adds	r2, r7, r1
 8003642:	8812      	ldrh	r2, [r2, #0]
 8003644:	4976      	ldr	r1, [pc, #472]	; (8003820 <USB_ActivateEndpoint+0x2b8>)
 8003646:	430a      	orrs	r2, r1
 8003648:	b292      	uxth	r2, r2
 800364a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	7b1b      	ldrb	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d000      	beq.n	8003656 <USB_ActivateEndpoint+0xee>
 8003654:	e178      	b.n	8003948 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	785b      	ldrb	r3, [r3, #1]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d100      	bne.n	8003660 <USB_ActivateEndpoint+0xf8>
 800365e:	e07a      	b.n	8003756 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2250      	movs	r2, #80	; 0x50
 8003668:	5a9b      	ldrh	r3, [r3, r2]
 800366a:	b29b      	uxth	r3, r3
 800366c:	001a      	movs	r2, r3
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	189b      	adds	r3, r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	00da      	lsls	r2, r3, #3
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	18d3      	adds	r3, r2, r3
 800367e:	2280      	movs	r2, #128	; 0x80
 8003680:	00d2      	lsls	r2, r2, #3
 8003682:	4694      	mov	ip, r2
 8003684:	4463      	add	r3, ip
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	88db      	ldrh	r3, [r3, #6]
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	b29b      	uxth	r3, r3
 8003690:	18db      	adds	r3, r3, r3
 8003692:	b29a      	uxth	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	18d2      	adds	r2, r2, r3
 80036a2:	2112      	movs	r1, #18
 80036a4:	187b      	adds	r3, r7, r1
 80036a6:	8812      	ldrh	r2, [r2, #0]
 80036a8:	801a      	strh	r2, [r3, #0]
 80036aa:	187b      	adds	r3, r7, r1
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	2240      	movs	r2, #64	; 0x40
 80036b0:	4013      	ands	r3, r2
 80036b2:	d016      	beq.n	80036e2 <USB_ActivateEndpoint+0x17a>
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	18d3      	adds	r3, r2, r3
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	2010      	movs	r0, #16
 80036c4:	183b      	adds	r3, r7, r0
 80036c6:	4957      	ldr	r1, [pc, #348]	; (8003824 <USB_ActivateEndpoint+0x2bc>)
 80036c8:	400a      	ands	r2, r1
 80036ca:	801a      	strh	r2, [r3, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	18d3      	adds	r3, r2, r3
 80036d6:	183a      	adds	r2, r7, r0
 80036d8:	8812      	ldrh	r2, [r2, #0]
 80036da:	4953      	ldr	r1, [pc, #332]	; (8003828 <USB_ActivateEndpoint+0x2c0>)
 80036dc:	430a      	orrs	r2, r1
 80036de:	b292      	uxth	r2, r2
 80036e0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	78db      	ldrb	r3, [r3, #3]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d01d      	beq.n	8003726 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	18d3      	adds	r3, r2, r3
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	200c      	movs	r0, #12
 80036fa:	183b      	adds	r3, r7, r0
 80036fc:	494b      	ldr	r1, [pc, #300]	; (800382c <USB_ActivateEndpoint+0x2c4>)
 80036fe:	400a      	ands	r2, r1
 8003700:	801a      	strh	r2, [r3, #0]
 8003702:	183b      	adds	r3, r7, r0
 8003704:	183a      	adds	r2, r7, r0
 8003706:	8812      	ldrh	r2, [r2, #0]
 8003708:	2120      	movs	r1, #32
 800370a:	404a      	eors	r2, r1
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	18d3      	adds	r3, r2, r3
 8003718:	183a      	adds	r2, r7, r0
 800371a:	8812      	ldrh	r2, [r2, #0]
 800371c:	4940      	ldr	r1, [pc, #256]	; (8003820 <USB_ActivateEndpoint+0x2b8>)
 800371e:	430a      	orrs	r2, r1
 8003720:	b292      	uxth	r2, r2
 8003722:	801a      	strh	r2, [r3, #0]
 8003724:	e2b4      	b.n	8003c90 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	18d3      	adds	r3, r2, r3
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b29a      	uxth	r2, r3
 8003734:	200e      	movs	r0, #14
 8003736:	183b      	adds	r3, r7, r0
 8003738:	493c      	ldr	r1, [pc, #240]	; (800382c <USB_ActivateEndpoint+0x2c4>)
 800373a:	400a      	ands	r2, r1
 800373c:	801a      	strh	r2, [r3, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	18d3      	adds	r3, r2, r3
 8003748:	183a      	adds	r2, r7, r0
 800374a:	8812      	ldrh	r2, [r2, #0]
 800374c:	4934      	ldr	r1, [pc, #208]	; (8003820 <USB_ActivateEndpoint+0x2b8>)
 800374e:	430a      	orrs	r2, r1
 8003750:	b292      	uxth	r2, r2
 8003752:	801a      	strh	r2, [r3, #0]
 8003754:	e29c      	b.n	8003c90 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	633b      	str	r3, [r7, #48]	; 0x30
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2250      	movs	r2, #80	; 0x50
 800375e:	5a9b      	ldrh	r3, [r3, r2]
 8003760:	b29b      	uxth	r3, r3
 8003762:	001a      	movs	r2, r3
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	189b      	adds	r3, r3, r2
 8003768:	633b      	str	r3, [r7, #48]	; 0x30
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	00da      	lsls	r2, r3, #3
 8003770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003772:	18d3      	adds	r3, r2, r3
 8003774:	4a2e      	ldr	r2, [pc, #184]	; (8003830 <USB_ActivateEndpoint+0x2c8>)
 8003776:	4694      	mov	ip, r2
 8003778:	4463      	add	r3, ip
 800377a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	88db      	ldrh	r3, [r3, #6]
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	b29b      	uxth	r3, r3
 8003784:	18db      	adds	r3, r3, r3
 8003786:	b29a      	uxth	r2, r3
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2250      	movs	r2, #80	; 0x50
 8003794:	5a9b      	ldrh	r3, [r3, r2]
 8003796:	b29b      	uxth	r3, r3
 8003798:	001a      	movs	r2, r3
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	189b      	adds	r3, r3, r2
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	00da      	lsls	r2, r3, #3
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	18d3      	adds	r3, r2, r3
 80037aa:	4a22      	ldr	r2, [pc, #136]	; (8003834 <USB_ActivateEndpoint+0x2cc>)
 80037ac:	4694      	mov	ip, r2
 80037ae:	4463      	add	r3, ip
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	059b      	lsls	r3, r3, #22
 80037ba:	0d9b      	lsrs	r3, r3, #22
 80037bc:	b29a      	uxth	r2, r3
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	801a      	strh	r2, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b3e      	cmp	r3, #62	; 0x3e
 80037c8:	d91a      	bls.n	8003800 <USB_ActivateEndpoint+0x298>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	221f      	movs	r2, #31
 80037d8:	4013      	ands	r3, r2
 80037da:	d102      	bne.n	80037e2 <USB_ActivateEndpoint+0x27a>
 80037dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037de:	3b01      	subs	r3, #1
 80037e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	029b      	lsls	r3, r3, #10
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	4313      	orrs	r3, r2
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	4a10      	ldr	r2, [pc, #64]	; (8003838 <USB_ActivateEndpoint+0x2d0>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	801a      	strh	r2, [r3, #0]
 80037fe:	e034      	b.n	800386a <USB_ActivateEndpoint+0x302>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d119      	bne.n	800383c <USB_ActivateEndpoint+0x2d4>
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	b29b      	uxth	r3, r3
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <USB_ActivateEndpoint+0x2d0>)
 8003810:	4313      	orrs	r3, r2
 8003812:	b29a      	uxth	r2, r3
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	801a      	strh	r2, [r3, #0]
 8003818:	e027      	b.n	800386a <USB_ActivateEndpoint+0x302>
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	ffff898f 	.word	0xffff898f
 8003820:	ffff8080 	.word	0xffff8080
 8003824:	ffff8f8f 	.word	0xffff8f8f
 8003828:	ffff80c0 	.word	0xffff80c0
 800382c:	ffff8fbf 	.word	0xffff8fbf
 8003830:	00000404 	.word	0x00000404
 8003834:	00000406 	.word	0x00000406
 8003838:	ffff8000 	.word	0xffff8000
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	085b      	lsrs	r3, r3, #1
 8003842:	66bb      	str	r3, [r7, #104]	; 0x68
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2201      	movs	r2, #1
 800384a:	4013      	ands	r3, r2
 800384c:	d002      	beq.n	8003854 <USB_ActivateEndpoint+0x2ec>
 800384e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003850:	3301      	adds	r3, #1
 8003852:	66bb      	str	r3, [r7, #104]	; 0x68
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	b29a      	uxth	r2, r3
 800385a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800385c:	b29b      	uxth	r3, r3
 800385e:	029b      	lsls	r3, r3, #10
 8003860:	b29b      	uxth	r3, r3
 8003862:	4313      	orrs	r3, r2
 8003864:	b29a      	uxth	r2, r3
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	18d2      	adds	r2, r2, r3
 8003874:	2122      	movs	r1, #34	; 0x22
 8003876:	187b      	adds	r3, r7, r1
 8003878:	8812      	ldrh	r2, [r2, #0]
 800387a:	801a      	strh	r2, [r3, #0]
 800387c:	187b      	adds	r3, r7, r1
 800387e:	881a      	ldrh	r2, [r3, #0]
 8003880:	2380      	movs	r3, #128	; 0x80
 8003882:	01db      	lsls	r3, r3, #7
 8003884:	4013      	ands	r3, r2
 8003886:	d016      	beq.n	80038b6 <USB_ActivateEndpoint+0x34e>
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	18d3      	adds	r3, r2, r3
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	b29a      	uxth	r2, r3
 8003896:	2020      	movs	r0, #32
 8003898:	183b      	adds	r3, r7, r0
 800389a:	49dd      	ldr	r1, [pc, #884]	; (8003c10 <USB_ActivateEndpoint+0x6a8>)
 800389c:	400a      	ands	r2, r1
 800389e:	801a      	strh	r2, [r3, #0]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	18d3      	adds	r3, r2, r3
 80038aa:	183a      	adds	r2, r7, r0
 80038ac:	8812      	ldrh	r2, [r2, #0]
 80038ae:	49d9      	ldr	r1, [pc, #868]	; (8003c14 <USB_ActivateEndpoint+0x6ac>)
 80038b0:	430a      	orrs	r2, r1
 80038b2:	b292      	uxth	r2, r2
 80038b4:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d125      	bne.n	800390a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	18d3      	adds	r3, r2, r3
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	201c      	movs	r0, #28
 80038ce:	183b      	adds	r3, r7, r0
 80038d0:	49d1      	ldr	r1, [pc, #836]	; (8003c18 <USB_ActivateEndpoint+0x6b0>)
 80038d2:	400a      	ands	r2, r1
 80038d4:	801a      	strh	r2, [r3, #0]
 80038d6:	183b      	adds	r3, r7, r0
 80038d8:	183a      	adds	r2, r7, r0
 80038da:	8812      	ldrh	r2, [r2, #0]
 80038dc:	2180      	movs	r1, #128	; 0x80
 80038de:	0149      	lsls	r1, r1, #5
 80038e0:	404a      	eors	r2, r1
 80038e2:	801a      	strh	r2, [r3, #0]
 80038e4:	183b      	adds	r3, r7, r0
 80038e6:	183a      	adds	r2, r7, r0
 80038e8:	8812      	ldrh	r2, [r2, #0]
 80038ea:	2180      	movs	r1, #128	; 0x80
 80038ec:	0189      	lsls	r1, r1, #6
 80038ee:	404a      	eors	r2, r1
 80038f0:	801a      	strh	r2, [r3, #0]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	18d3      	adds	r3, r2, r3
 80038fc:	183a      	adds	r2, r7, r0
 80038fe:	8812      	ldrh	r2, [r2, #0]
 8003900:	49c6      	ldr	r1, [pc, #792]	; (8003c1c <USB_ActivateEndpoint+0x6b4>)
 8003902:	430a      	orrs	r2, r1
 8003904:	b292      	uxth	r2, r2
 8003906:	801a      	strh	r2, [r3, #0]
 8003908:	e1c2      	b.n	8003c90 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	18d3      	adds	r3, r2, r3
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	b29a      	uxth	r2, r3
 8003918:	201e      	movs	r0, #30
 800391a:	183b      	adds	r3, r7, r0
 800391c:	49be      	ldr	r1, [pc, #760]	; (8003c18 <USB_ActivateEndpoint+0x6b0>)
 800391e:	400a      	ands	r2, r1
 8003920:	801a      	strh	r2, [r3, #0]
 8003922:	183b      	adds	r3, r7, r0
 8003924:	183a      	adds	r2, r7, r0
 8003926:	8812      	ldrh	r2, [r2, #0]
 8003928:	2180      	movs	r1, #128	; 0x80
 800392a:	0189      	lsls	r1, r1, #6
 800392c:	404a      	eors	r2, r1
 800392e:	801a      	strh	r2, [r3, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	18d3      	adds	r3, r2, r3
 800393a:	183a      	adds	r2, r7, r0
 800393c:	8812      	ldrh	r2, [r2, #0]
 800393e:	49b7      	ldr	r1, [pc, #732]	; (8003c1c <USB_ActivateEndpoint+0x6b4>)
 8003940:	430a      	orrs	r2, r1
 8003942:	b292      	uxth	r2, r2
 8003944:	801a      	strh	r2, [r3, #0]
 8003946:	e1a3      	b.n	8003c90 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	78db      	ldrb	r3, [r3, #3]
 800394c:	2b02      	cmp	r3, #2
 800394e:	d117      	bne.n	8003980 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	18d3      	adds	r3, r2, r3
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	b29a      	uxth	r2, r3
 800395e:	2062      	movs	r0, #98	; 0x62
 8003960:	183b      	adds	r3, r7, r0
 8003962:	49ab      	ldr	r1, [pc, #684]	; (8003c10 <USB_ActivateEndpoint+0x6a8>)
 8003964:	400a      	ands	r2, r1
 8003966:	801a      	strh	r2, [r3, #0]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	18d3      	adds	r3, r2, r3
 8003972:	183a      	adds	r2, r7, r0
 8003974:	8812      	ldrh	r2, [r2, #0]
 8003976:	49aa      	ldr	r1, [pc, #680]	; (8003c20 <USB_ActivateEndpoint+0x6b8>)
 8003978:	430a      	orrs	r2, r1
 800397a:	b292      	uxth	r2, r2
 800397c:	801a      	strh	r2, [r3, #0]
 800397e:	e016      	b.n	80039ae <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	18d3      	adds	r3, r2, r3
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	b29a      	uxth	r2, r3
 800398e:	2064      	movs	r0, #100	; 0x64
 8003990:	183b      	adds	r3, r7, r0
 8003992:	49a4      	ldr	r1, [pc, #656]	; (8003c24 <USB_ActivateEndpoint+0x6bc>)
 8003994:	400a      	ands	r2, r1
 8003996:	801a      	strh	r2, [r3, #0]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	18d3      	adds	r3, r2, r3
 80039a2:	183a      	adds	r2, r7, r0
 80039a4:	8812      	ldrh	r2, [r2, #0]
 80039a6:	499d      	ldr	r1, [pc, #628]	; (8003c1c <USB_ActivateEndpoint+0x6b4>)
 80039a8:	430a      	orrs	r2, r1
 80039aa:	b292      	uxth	r2, r2
 80039ac:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2250      	movs	r2, #80	; 0x50
 80039b6:	5a9b      	ldrh	r3, [r3, r2]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	001a      	movs	r2, r3
 80039bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039be:	189b      	adds	r3, r3, r2
 80039c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	00da      	lsls	r2, r3, #3
 80039c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ca:	18d3      	adds	r3, r2, r3
 80039cc:	2280      	movs	r2, #128	; 0x80
 80039ce:	00d2      	lsls	r2, r2, #3
 80039d0:	4694      	mov	ip, r2
 80039d2:	4463      	add	r3, ip
 80039d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	891b      	ldrh	r3, [r3, #8]
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	b29b      	uxth	r3, r3
 80039de:	18db      	adds	r3, r3, r3
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039e4:	801a      	strh	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	657b      	str	r3, [r7, #84]	; 0x54
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2250      	movs	r2, #80	; 0x50
 80039ee:	5a9b      	ldrh	r3, [r3, r2]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	001a      	movs	r2, r3
 80039f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f6:	189b      	adds	r3, r3, r2
 80039f8:	657b      	str	r3, [r7, #84]	; 0x54
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	00da      	lsls	r2, r3, #3
 8003a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a02:	18d3      	adds	r3, r2, r3
 8003a04:	4a88      	ldr	r2, [pc, #544]	; (8003c28 <USB_ActivateEndpoint+0x6c0>)
 8003a06:	4694      	mov	ip, r2
 8003a08:	4463      	add	r3, ip
 8003a0a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	895b      	ldrh	r3, [r3, #10]
 8003a10:	085b      	lsrs	r3, r3, #1
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	18db      	adds	r3, r3, r3
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a1a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	785b      	ldrb	r3, [r3, #1]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d000      	beq.n	8003a26 <USB_ActivateEndpoint+0x4be>
 8003a24:	e087      	b.n	8003b36 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	18d2      	adds	r2, r2, r3
 8003a30:	2140      	movs	r1, #64	; 0x40
 8003a32:	187b      	adds	r3, r7, r1
 8003a34:	8812      	ldrh	r2, [r2, #0]
 8003a36:	801a      	strh	r2, [r3, #0]
 8003a38:	187b      	adds	r3, r7, r1
 8003a3a:	881a      	ldrh	r2, [r3, #0]
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	01db      	lsls	r3, r3, #7
 8003a40:	4013      	ands	r3, r2
 8003a42:	d016      	beq.n	8003a72 <USB_ActivateEndpoint+0x50a>
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	18d3      	adds	r3, r2, r3
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	203e      	movs	r0, #62	; 0x3e
 8003a54:	183b      	adds	r3, r7, r0
 8003a56:	496e      	ldr	r1, [pc, #440]	; (8003c10 <USB_ActivateEndpoint+0x6a8>)
 8003a58:	400a      	ands	r2, r1
 8003a5a:	801a      	strh	r2, [r3, #0]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	18d3      	adds	r3, r2, r3
 8003a66:	183a      	adds	r2, r7, r0
 8003a68:	8812      	ldrh	r2, [r2, #0]
 8003a6a:	496a      	ldr	r1, [pc, #424]	; (8003c14 <USB_ActivateEndpoint+0x6ac>)
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	b292      	uxth	r2, r2
 8003a70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	18d2      	adds	r2, r2, r3
 8003a7c:	213c      	movs	r1, #60	; 0x3c
 8003a7e:	187b      	adds	r3, r7, r1
 8003a80:	8812      	ldrh	r2, [r2, #0]
 8003a82:	801a      	strh	r2, [r3, #0]
 8003a84:	187b      	adds	r3, r7, r1
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	2240      	movs	r2, #64	; 0x40
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d016      	beq.n	8003abc <USB_ActivateEndpoint+0x554>
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	18d3      	adds	r3, r2, r3
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	203a      	movs	r0, #58	; 0x3a
 8003a9e:	183b      	adds	r3, r7, r0
 8003aa0:	495b      	ldr	r1, [pc, #364]	; (8003c10 <USB_ActivateEndpoint+0x6a8>)
 8003aa2:	400a      	ands	r2, r1
 8003aa4:	801a      	strh	r2, [r3, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	18d3      	adds	r3, r2, r3
 8003ab0:	183a      	adds	r2, r7, r0
 8003ab2:	8812      	ldrh	r2, [r2, #0]
 8003ab4:	495d      	ldr	r1, [pc, #372]	; (8003c2c <USB_ActivateEndpoint+0x6c4>)
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	b292      	uxth	r2, r2
 8003aba:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	18d3      	adds	r3, r2, r3
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	2038      	movs	r0, #56	; 0x38
 8003acc:	183b      	adds	r3, r7, r0
 8003ace:	4952      	ldr	r1, [pc, #328]	; (8003c18 <USB_ActivateEndpoint+0x6b0>)
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	801a      	strh	r2, [r3, #0]
 8003ad4:	183b      	adds	r3, r7, r0
 8003ad6:	183a      	adds	r2, r7, r0
 8003ad8:	8812      	ldrh	r2, [r2, #0]
 8003ada:	2180      	movs	r1, #128	; 0x80
 8003adc:	0149      	lsls	r1, r1, #5
 8003ade:	404a      	eors	r2, r1
 8003ae0:	801a      	strh	r2, [r3, #0]
 8003ae2:	183b      	adds	r3, r7, r0
 8003ae4:	183a      	adds	r2, r7, r0
 8003ae6:	8812      	ldrh	r2, [r2, #0]
 8003ae8:	2180      	movs	r1, #128	; 0x80
 8003aea:	0189      	lsls	r1, r1, #6
 8003aec:	404a      	eors	r2, r1
 8003aee:	801a      	strh	r2, [r3, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	18d3      	adds	r3, r2, r3
 8003afa:	183a      	adds	r2, r7, r0
 8003afc:	8812      	ldrh	r2, [r2, #0]
 8003afe:	4947      	ldr	r1, [pc, #284]	; (8003c1c <USB_ActivateEndpoint+0x6b4>)
 8003b00:	430a      	orrs	r2, r1
 8003b02:	b292      	uxth	r2, r2
 8003b04:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	18d3      	adds	r3, r2, r3
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	2036      	movs	r0, #54	; 0x36
 8003b16:	183b      	adds	r3, r7, r0
 8003b18:	4945      	ldr	r1, [pc, #276]	; (8003c30 <USB_ActivateEndpoint+0x6c8>)
 8003b1a:	400a      	ands	r2, r1
 8003b1c:	801a      	strh	r2, [r3, #0]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	18d3      	adds	r3, r2, r3
 8003b28:	183a      	adds	r2, r7, r0
 8003b2a:	8812      	ldrh	r2, [r2, #0]
 8003b2c:	493b      	ldr	r1, [pc, #236]	; (8003c1c <USB_ActivateEndpoint+0x6b4>)
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	b292      	uxth	r2, r2
 8003b32:	801a      	strh	r2, [r3, #0]
 8003b34:	e0ac      	b.n	8003c90 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	18d2      	adds	r2, r2, r3
 8003b40:	214e      	movs	r1, #78	; 0x4e
 8003b42:	187b      	adds	r3, r7, r1
 8003b44:	8812      	ldrh	r2, [r2, #0]
 8003b46:	801a      	strh	r2, [r3, #0]
 8003b48:	187b      	adds	r3, r7, r1
 8003b4a:	881a      	ldrh	r2, [r3, #0]
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	01db      	lsls	r3, r3, #7
 8003b50:	4013      	ands	r3, r2
 8003b52:	d016      	beq.n	8003b82 <USB_ActivateEndpoint+0x61a>
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	18d3      	adds	r3, r2, r3
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	204c      	movs	r0, #76	; 0x4c
 8003b64:	183b      	adds	r3, r7, r0
 8003b66:	492a      	ldr	r1, [pc, #168]	; (8003c10 <USB_ActivateEndpoint+0x6a8>)
 8003b68:	400a      	ands	r2, r1
 8003b6a:	801a      	strh	r2, [r3, #0]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	18d3      	adds	r3, r2, r3
 8003b76:	183a      	adds	r2, r7, r0
 8003b78:	8812      	ldrh	r2, [r2, #0]
 8003b7a:	4926      	ldr	r1, [pc, #152]	; (8003c14 <USB_ActivateEndpoint+0x6ac>)
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	b292      	uxth	r2, r2
 8003b80:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	18d2      	adds	r2, r2, r3
 8003b8c:	214a      	movs	r1, #74	; 0x4a
 8003b8e:	187b      	adds	r3, r7, r1
 8003b90:	8812      	ldrh	r2, [r2, #0]
 8003b92:	801a      	strh	r2, [r3, #0]
 8003b94:	187b      	adds	r3, r7, r1
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	2240      	movs	r2, #64	; 0x40
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d016      	beq.n	8003bcc <USB_ActivateEndpoint+0x664>
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	18d3      	adds	r3, r2, r3
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	2048      	movs	r0, #72	; 0x48
 8003bae:	183b      	adds	r3, r7, r0
 8003bb0:	4917      	ldr	r1, [pc, #92]	; (8003c10 <USB_ActivateEndpoint+0x6a8>)
 8003bb2:	400a      	ands	r2, r1
 8003bb4:	801a      	strh	r2, [r3, #0]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	18d3      	adds	r3, r2, r3
 8003bc0:	183a      	adds	r2, r7, r0
 8003bc2:	8812      	ldrh	r2, [r2, #0]
 8003bc4:	4919      	ldr	r1, [pc, #100]	; (8003c2c <USB_ActivateEndpoint+0x6c4>)
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	b292      	uxth	r2, r2
 8003bca:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	78db      	ldrb	r3, [r3, #3]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d02f      	beq.n	8003c34 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	18d3      	adds	r3, r2, r3
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	2044      	movs	r0, #68	; 0x44
 8003be4:	183b      	adds	r3, r7, r0
 8003be6:	4912      	ldr	r1, [pc, #72]	; (8003c30 <USB_ActivateEndpoint+0x6c8>)
 8003be8:	400a      	ands	r2, r1
 8003bea:	801a      	strh	r2, [r3, #0]
 8003bec:	183b      	adds	r3, r7, r0
 8003bee:	183a      	adds	r2, r7, r0
 8003bf0:	8812      	ldrh	r2, [r2, #0]
 8003bf2:	2120      	movs	r1, #32
 8003bf4:	404a      	eors	r2, r1
 8003bf6:	801a      	strh	r2, [r3, #0]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	18d3      	adds	r3, r2, r3
 8003c02:	183a      	adds	r2, r7, r0
 8003c04:	8812      	ldrh	r2, [r2, #0]
 8003c06:	4905      	ldr	r1, [pc, #20]	; (8003c1c <USB_ActivateEndpoint+0x6b4>)
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	b292      	uxth	r2, r2
 8003c0c:	801a      	strh	r2, [r3, #0]
 8003c0e:	e028      	b.n	8003c62 <USB_ActivateEndpoint+0x6fa>
 8003c10:	ffff8f8f 	.word	0xffff8f8f
 8003c14:	ffffc080 	.word	0xffffc080
 8003c18:	ffffbf8f 	.word	0xffffbf8f
 8003c1c:	ffff8080 	.word	0xffff8080
 8003c20:	ffff8180 	.word	0xffff8180
 8003c24:	ffff8e8f 	.word	0xffff8e8f
 8003c28:	00000404 	.word	0x00000404
 8003c2c:	ffff80c0 	.word	0xffff80c0
 8003c30:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	18d3      	adds	r3, r2, r3
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	2046      	movs	r0, #70	; 0x46
 8003c44:	183b      	adds	r3, r7, r0
 8003c46:	4916      	ldr	r1, [pc, #88]	; (8003ca0 <USB_ActivateEndpoint+0x738>)
 8003c48:	400a      	ands	r2, r1
 8003c4a:	801a      	strh	r2, [r3, #0]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	18d3      	adds	r3, r2, r3
 8003c56:	183a      	adds	r2, r7, r0
 8003c58:	8812      	ldrh	r2, [r2, #0]
 8003c5a:	4912      	ldr	r1, [pc, #72]	; (8003ca4 <USB_ActivateEndpoint+0x73c>)
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	b292      	uxth	r2, r2
 8003c60:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	18d3      	adds	r3, r2, r3
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	2042      	movs	r0, #66	; 0x42
 8003c72:	183b      	adds	r3, r7, r0
 8003c74:	490c      	ldr	r1, [pc, #48]	; (8003ca8 <USB_ActivateEndpoint+0x740>)
 8003c76:	400a      	ands	r2, r1
 8003c78:	801a      	strh	r2, [r3, #0]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	18d3      	adds	r3, r2, r3
 8003c84:	183a      	adds	r2, r7, r0
 8003c86:	8812      	ldrh	r2, [r2, #0]
 8003c88:	4906      	ldr	r1, [pc, #24]	; (8003ca4 <USB_ActivateEndpoint+0x73c>)
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	b292      	uxth	r2, r2
 8003c8e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003c90:	236f      	movs	r3, #111	; 0x6f
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	781b      	ldrb	r3, [r3, #0]
}
 8003c96:	0018      	movs	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b01c      	add	sp, #112	; 0x70
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	ffff8fbf 	.word	0xffff8fbf
 8003ca4:	ffff8080 	.word	0xffff8080
 8003ca8:	ffffbf8f 	.word	0xffffbf8f

08003cac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08c      	sub	sp, #48	; 0x30
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	7b1b      	ldrb	r3, [r3, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d000      	beq.n	8003cc0 <USB_DeactivateEndpoint+0x14>
 8003cbe:	e07e      	b.n	8003dbe <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	785b      	ldrb	r3, [r3, #1]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d03c      	beq.n	8003d42 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	18d2      	adds	r2, r2, r3
 8003cd2:	210c      	movs	r1, #12
 8003cd4:	187b      	adds	r3, r7, r1
 8003cd6:	8812      	ldrh	r2, [r2, #0]
 8003cd8:	801a      	strh	r2, [r3, #0]
 8003cda:	187b      	adds	r3, r7, r1
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	2240      	movs	r2, #64	; 0x40
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d016      	beq.n	8003d12 <USB_DeactivateEndpoint+0x66>
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	18d3      	adds	r3, r2, r3
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	200a      	movs	r0, #10
 8003cf4:	183b      	adds	r3, r7, r0
 8003cf6:	49c7      	ldr	r1, [pc, #796]	; (8004014 <USB_DeactivateEndpoint+0x368>)
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	801a      	strh	r2, [r3, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	18d3      	adds	r3, r2, r3
 8003d06:	183a      	adds	r2, r7, r0
 8003d08:	8812      	ldrh	r2, [r2, #0]
 8003d0a:	49c3      	ldr	r1, [pc, #780]	; (8004018 <USB_DeactivateEndpoint+0x36c>)
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	b292      	uxth	r2, r2
 8003d10:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	18d3      	adds	r3, r2, r3
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	2008      	movs	r0, #8
 8003d22:	183b      	adds	r3, r7, r0
 8003d24:	49bd      	ldr	r1, [pc, #756]	; (800401c <USB_DeactivateEndpoint+0x370>)
 8003d26:	400a      	ands	r2, r1
 8003d28:	801a      	strh	r2, [r3, #0]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	18d3      	adds	r3, r2, r3
 8003d34:	183a      	adds	r2, r7, r0
 8003d36:	8812      	ldrh	r2, [r2, #0]
 8003d38:	49b9      	ldr	r1, [pc, #740]	; (8004020 <USB_DeactivateEndpoint+0x374>)
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	b292      	uxth	r2, r2
 8003d3e:	801a      	strh	r2, [r3, #0]
 8003d40:	e163      	b.n	800400a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	18d2      	adds	r2, r2, r3
 8003d4c:	2112      	movs	r1, #18
 8003d4e:	187b      	adds	r3, r7, r1
 8003d50:	8812      	ldrh	r2, [r2, #0]
 8003d52:	801a      	strh	r2, [r3, #0]
 8003d54:	187b      	adds	r3, r7, r1
 8003d56:	881a      	ldrh	r2, [r3, #0]
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	01db      	lsls	r3, r3, #7
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d016      	beq.n	8003d8e <USB_DeactivateEndpoint+0xe2>
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	18d3      	adds	r3, r2, r3
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	2010      	movs	r0, #16
 8003d70:	183b      	adds	r3, r7, r0
 8003d72:	49a8      	ldr	r1, [pc, #672]	; (8004014 <USB_DeactivateEndpoint+0x368>)
 8003d74:	400a      	ands	r2, r1
 8003d76:	801a      	strh	r2, [r3, #0]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	18d3      	adds	r3, r2, r3
 8003d82:	183a      	adds	r2, r7, r0
 8003d84:	8812      	ldrh	r2, [r2, #0]
 8003d86:	49a7      	ldr	r1, [pc, #668]	; (8004024 <USB_DeactivateEndpoint+0x378>)
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	b292      	uxth	r2, r2
 8003d8c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	18d3      	adds	r3, r2, r3
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	200e      	movs	r0, #14
 8003d9e:	183b      	adds	r3, r7, r0
 8003da0:	49a1      	ldr	r1, [pc, #644]	; (8004028 <USB_DeactivateEndpoint+0x37c>)
 8003da2:	400a      	ands	r2, r1
 8003da4:	801a      	strh	r2, [r3, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	18d3      	adds	r3, r2, r3
 8003db0:	183a      	adds	r2, r7, r0
 8003db2:	8812      	ldrh	r2, [r2, #0]
 8003db4:	499a      	ldr	r1, [pc, #616]	; (8004020 <USB_DeactivateEndpoint+0x374>)
 8003db6:	430a      	orrs	r2, r1
 8003db8:	b292      	uxth	r2, r2
 8003dba:	801a      	strh	r2, [r3, #0]
 8003dbc:	e125      	b.n	800400a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	785b      	ldrb	r3, [r3, #1]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d000      	beq.n	8003dc8 <USB_DeactivateEndpoint+0x11c>
 8003dc6:	e090      	b.n	8003eea <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	18d2      	adds	r2, r2, r3
 8003dd2:	2120      	movs	r1, #32
 8003dd4:	187b      	adds	r3, r7, r1
 8003dd6:	8812      	ldrh	r2, [r2, #0]
 8003dd8:	801a      	strh	r2, [r3, #0]
 8003dda:	187b      	adds	r3, r7, r1
 8003ddc:	881a      	ldrh	r2, [r3, #0]
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	01db      	lsls	r3, r3, #7
 8003de2:	4013      	ands	r3, r2
 8003de4:	d016      	beq.n	8003e14 <USB_DeactivateEndpoint+0x168>
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	18d3      	adds	r3, r2, r3
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	201e      	movs	r0, #30
 8003df6:	183b      	adds	r3, r7, r0
 8003df8:	4986      	ldr	r1, [pc, #536]	; (8004014 <USB_DeactivateEndpoint+0x368>)
 8003dfa:	400a      	ands	r2, r1
 8003dfc:	801a      	strh	r2, [r3, #0]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	18d3      	adds	r3, r2, r3
 8003e08:	183a      	adds	r2, r7, r0
 8003e0a:	8812      	ldrh	r2, [r2, #0]
 8003e0c:	4985      	ldr	r1, [pc, #532]	; (8004024 <USB_DeactivateEndpoint+0x378>)
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	b292      	uxth	r2, r2
 8003e12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	18d2      	adds	r2, r2, r3
 8003e1e:	211c      	movs	r1, #28
 8003e20:	187b      	adds	r3, r7, r1
 8003e22:	8812      	ldrh	r2, [r2, #0]
 8003e24:	801a      	strh	r2, [r3, #0]
 8003e26:	187b      	adds	r3, r7, r1
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	2240      	movs	r2, #64	; 0x40
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d016      	beq.n	8003e5e <USB_DeactivateEndpoint+0x1b2>
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	18d3      	adds	r3, r2, r3
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	201a      	movs	r0, #26
 8003e40:	183b      	adds	r3, r7, r0
 8003e42:	4974      	ldr	r1, [pc, #464]	; (8004014 <USB_DeactivateEndpoint+0x368>)
 8003e44:	400a      	ands	r2, r1
 8003e46:	801a      	strh	r2, [r3, #0]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	18d3      	adds	r3, r2, r3
 8003e52:	183a      	adds	r2, r7, r0
 8003e54:	8812      	ldrh	r2, [r2, #0]
 8003e56:	4970      	ldr	r1, [pc, #448]	; (8004018 <USB_DeactivateEndpoint+0x36c>)
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	b292      	uxth	r2, r2
 8003e5c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	18d3      	adds	r3, r2, r3
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	2018      	movs	r0, #24
 8003e6e:	183b      	adds	r3, r7, r0
 8003e70:	4968      	ldr	r1, [pc, #416]	; (8004014 <USB_DeactivateEndpoint+0x368>)
 8003e72:	400a      	ands	r2, r1
 8003e74:	801a      	strh	r2, [r3, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	18d3      	adds	r3, r2, r3
 8003e80:	183a      	adds	r2, r7, r0
 8003e82:	8812      	ldrh	r2, [r2, #0]
 8003e84:	4964      	ldr	r1, [pc, #400]	; (8004018 <USB_DeactivateEndpoint+0x36c>)
 8003e86:	430a      	orrs	r2, r1
 8003e88:	b292      	uxth	r2, r2
 8003e8a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	18d3      	adds	r3, r2, r3
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	2016      	movs	r0, #22
 8003e9c:	183b      	adds	r3, r7, r0
 8003e9e:	4962      	ldr	r1, [pc, #392]	; (8004028 <USB_DeactivateEndpoint+0x37c>)
 8003ea0:	400a      	ands	r2, r1
 8003ea2:	801a      	strh	r2, [r3, #0]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	18d3      	adds	r3, r2, r3
 8003eae:	183a      	adds	r2, r7, r0
 8003eb0:	8812      	ldrh	r2, [r2, #0]
 8003eb2:	495b      	ldr	r1, [pc, #364]	; (8004020 <USB_DeactivateEndpoint+0x374>)
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	b292      	uxth	r2, r2
 8003eb8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	18d3      	adds	r3, r2, r3
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	2014      	movs	r0, #20
 8003eca:	183b      	adds	r3, r7, r0
 8003ecc:	4953      	ldr	r1, [pc, #332]	; (800401c <USB_DeactivateEndpoint+0x370>)
 8003ece:	400a      	ands	r2, r1
 8003ed0:	801a      	strh	r2, [r3, #0]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	18d3      	adds	r3, r2, r3
 8003edc:	183a      	adds	r2, r7, r0
 8003ede:	8812      	ldrh	r2, [r2, #0]
 8003ee0:	494f      	ldr	r1, [pc, #316]	; (8004020 <USB_DeactivateEndpoint+0x374>)
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	b292      	uxth	r2, r2
 8003ee6:	801a      	strh	r2, [r3, #0]
 8003ee8:	e08f      	b.n	800400a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	18d2      	adds	r2, r2, r3
 8003ef4:	212e      	movs	r1, #46	; 0x2e
 8003ef6:	187b      	adds	r3, r7, r1
 8003ef8:	8812      	ldrh	r2, [r2, #0]
 8003efa:	801a      	strh	r2, [r3, #0]
 8003efc:	187b      	adds	r3, r7, r1
 8003efe:	881a      	ldrh	r2, [r3, #0]
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	01db      	lsls	r3, r3, #7
 8003f04:	4013      	ands	r3, r2
 8003f06:	d016      	beq.n	8003f36 <USB_DeactivateEndpoint+0x28a>
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	18d3      	adds	r3, r2, r3
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	202c      	movs	r0, #44	; 0x2c
 8003f18:	183b      	adds	r3, r7, r0
 8003f1a:	493e      	ldr	r1, [pc, #248]	; (8004014 <USB_DeactivateEndpoint+0x368>)
 8003f1c:	400a      	ands	r2, r1
 8003f1e:	801a      	strh	r2, [r3, #0]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	18d3      	adds	r3, r2, r3
 8003f2a:	183a      	adds	r2, r7, r0
 8003f2c:	8812      	ldrh	r2, [r2, #0]
 8003f2e:	493d      	ldr	r1, [pc, #244]	; (8004024 <USB_DeactivateEndpoint+0x378>)
 8003f30:	430a      	orrs	r2, r1
 8003f32:	b292      	uxth	r2, r2
 8003f34:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	18d2      	adds	r2, r2, r3
 8003f40:	212a      	movs	r1, #42	; 0x2a
 8003f42:	187b      	adds	r3, r7, r1
 8003f44:	8812      	ldrh	r2, [r2, #0]
 8003f46:	801a      	strh	r2, [r3, #0]
 8003f48:	187b      	adds	r3, r7, r1
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	2240      	movs	r2, #64	; 0x40
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d016      	beq.n	8003f80 <USB_DeactivateEndpoint+0x2d4>
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	18d3      	adds	r3, r2, r3
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	2028      	movs	r0, #40	; 0x28
 8003f62:	183b      	adds	r3, r7, r0
 8003f64:	492b      	ldr	r1, [pc, #172]	; (8004014 <USB_DeactivateEndpoint+0x368>)
 8003f66:	400a      	ands	r2, r1
 8003f68:	801a      	strh	r2, [r3, #0]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	18d3      	adds	r3, r2, r3
 8003f74:	183a      	adds	r2, r7, r0
 8003f76:	8812      	ldrh	r2, [r2, #0]
 8003f78:	4927      	ldr	r1, [pc, #156]	; (8004018 <USB_DeactivateEndpoint+0x36c>)
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	b292      	uxth	r2, r2
 8003f7e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	18d3      	adds	r3, r2, r3
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	2026      	movs	r0, #38	; 0x26
 8003f90:	183b      	adds	r3, r7, r0
 8003f92:	4920      	ldr	r1, [pc, #128]	; (8004014 <USB_DeactivateEndpoint+0x368>)
 8003f94:	400a      	ands	r2, r1
 8003f96:	801a      	strh	r2, [r3, #0]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	18d3      	adds	r3, r2, r3
 8003fa2:	183a      	adds	r2, r7, r0
 8003fa4:	8812      	ldrh	r2, [r2, #0]
 8003fa6:	491f      	ldr	r1, [pc, #124]	; (8004024 <USB_DeactivateEndpoint+0x378>)
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	b292      	uxth	r2, r2
 8003fac:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	18d3      	adds	r3, r2, r3
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	2024      	movs	r0, #36	; 0x24
 8003fbe:	183b      	adds	r3, r7, r0
 8003fc0:	4916      	ldr	r1, [pc, #88]	; (800401c <USB_DeactivateEndpoint+0x370>)
 8003fc2:	400a      	ands	r2, r1
 8003fc4:	801a      	strh	r2, [r3, #0]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	18d3      	adds	r3, r2, r3
 8003fd0:	183a      	adds	r2, r7, r0
 8003fd2:	8812      	ldrh	r2, [r2, #0]
 8003fd4:	4912      	ldr	r1, [pc, #72]	; (8004020 <USB_DeactivateEndpoint+0x374>)
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	b292      	uxth	r2, r2
 8003fda:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	18d3      	adds	r3, r2, r3
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	2022      	movs	r0, #34	; 0x22
 8003fec:	183b      	adds	r3, r7, r0
 8003fee:	490e      	ldr	r1, [pc, #56]	; (8004028 <USB_DeactivateEndpoint+0x37c>)
 8003ff0:	400a      	ands	r2, r1
 8003ff2:	801a      	strh	r2, [r3, #0]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	18d3      	adds	r3, r2, r3
 8003ffe:	183a      	adds	r2, r7, r0
 8004000:	8812      	ldrh	r2, [r2, #0]
 8004002:	4907      	ldr	r1, [pc, #28]	; (8004020 <USB_DeactivateEndpoint+0x374>)
 8004004:	430a      	orrs	r2, r1
 8004006:	b292      	uxth	r2, r2
 8004008:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	0018      	movs	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	b00c      	add	sp, #48	; 0x30
 8004012:	bd80      	pop	{r7, pc}
 8004014:	ffff8f8f 	.word	0xffff8f8f
 8004018:	ffff80c0 	.word	0xffff80c0
 800401c:	ffff8fbf 	.word	0xffff8fbf
 8004020:	ffff8080 	.word	0xffff8080
 8004024:	ffffc080 	.word	0xffffc080
 8004028:	ffffbf8f 	.word	0xffffbf8f

0800402c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800402c:	b590      	push	{r4, r7, lr}
 800402e:	b0c3      	sub	sp, #268	; 0x10c
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	785b      	ldrb	r3, [r3, #1]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d001      	beq.n	8004042 <USB_EPStartXfer+0x16>
 800403e:	f000 fd2d 	bl	8004a9c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	429a      	cmp	r2, r3
 800404c:	d905      	bls.n	800405a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	1d7a      	adds	r2, r7, #5
 8004054:	32ff      	adds	r2, #255	; 0xff
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	e004      	b.n	8004064 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	1d7a      	adds	r2, r7, #5
 8004060:	32ff      	adds	r2, #255	; 0xff
 8004062:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	7b1b      	ldrb	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d125      	bne.n	80040b8 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	6959      	ldr	r1, [r3, #20]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	88da      	ldrh	r2, [r3, #6]
 8004074:	1d7b      	adds	r3, r7, #5
 8004076:	33ff      	adds	r3, #255	; 0xff
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	b29b      	uxth	r3, r3
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f001 fa47 	bl	8005510 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2250      	movs	r2, #80	; 0x50
 800408a:	5a9b      	ldrh	r3, [r3, r2]
 800408c:	b29b      	uxth	r3, r3
 800408e:	001a      	movs	r2, r3
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	189b      	adds	r3, r3, r2
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	00da      	lsls	r2, r3, #3
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	18d3      	adds	r3, r2, r3
 80040a0:	4ad7      	ldr	r2, [pc, #860]	; (8004400 <USB_EPStartXfer+0x3d4>)
 80040a2:	4694      	mov	ip, r2
 80040a4:	4463      	add	r3, ip
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	1d7b      	adds	r3, r7, #5
 80040aa:	33ff      	adds	r3, #255	; 0xff
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	801a      	strh	r2, [r3, #0]
 80040b4:	f000 fccd 	bl	8004a52 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	78db      	ldrb	r3, [r3, #3]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d000      	beq.n	80040c2 <USB_EPStartXfer+0x96>
 80040c0:	e362      	b.n	8004788 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	6a1a      	ldr	r2, [r3, #32]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d800      	bhi.n	80040d0 <USB_EPStartXfer+0xa4>
 80040ce:	e309      	b.n	80046e4 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	18d3      	adds	r3, r2, r3
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	b29a      	uxth	r2, r3
 80040de:	2056      	movs	r0, #86	; 0x56
 80040e0:	183b      	adds	r3, r7, r0
 80040e2:	49c8      	ldr	r1, [pc, #800]	; (8004404 <USB_EPStartXfer+0x3d8>)
 80040e4:	400a      	ands	r2, r1
 80040e6:	801a      	strh	r2, [r3, #0]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	18d3      	adds	r3, r2, r3
 80040f2:	183a      	adds	r2, r7, r0
 80040f4:	8812      	ldrh	r2, [r2, #0]
 80040f6:	49c4      	ldr	r1, [pc, #784]	; (8004408 <USB_EPStartXfer+0x3dc>)
 80040f8:	430a      	orrs	r2, r1
 80040fa:	b292      	uxth	r2, r2
 80040fc:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6a1a      	ldr	r2, [r3, #32]
 8004102:	1d7b      	adds	r3, r7, #5
 8004104:	33ff      	adds	r3, #255	; 0xff
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	1ad2      	subs	r2, r2, r3
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	18d3      	adds	r3, r2, r3
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	b29b      	uxth	r3, r3
 800411c:	001a      	movs	r2, r3
 800411e:	2340      	movs	r3, #64	; 0x40
 8004120:	4013      	ands	r3, r2
 8004122:	d100      	bne.n	8004126 <USB_EPStartXfer+0xfa>
 8004124:	e176      	b.n	8004414 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	633b      	str	r3, [r7, #48]	; 0x30
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	785b      	ldrb	r3, [r3, #1]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d000      	beq.n	8004134 <USB_EPStartXfer+0x108>
 8004132:	e074      	b.n	800421e <USB_EPStartXfer+0x1f2>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	62bb      	str	r3, [r7, #40]	; 0x28
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2250      	movs	r2, #80	; 0x50
 800413c:	5a9b      	ldrh	r3, [r3, r2]
 800413e:	b29b      	uxth	r3, r3
 8004140:	001a      	movs	r2, r3
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	189b      	adds	r3, r3, r2
 8004146:	62bb      	str	r3, [r7, #40]	; 0x28
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	00da      	lsls	r2, r3, #3
 800414e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004150:	18d3      	adds	r3, r2, r3
 8004152:	4aae      	ldr	r2, [pc, #696]	; (800440c <USB_EPStartXfer+0x3e0>)
 8004154:	4694      	mov	ip, r2
 8004156:	4463      	add	r3, ip
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	b29b      	uxth	r3, r3
 8004160:	059b      	lsls	r3, r3, #22
 8004162:	0d9b      	lsrs	r3, r3, #22
 8004164:	b29a      	uxth	r2, r3
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	801a      	strh	r2, [r3, #0]
 800416a:	1d7b      	adds	r3, r7, #5
 800416c:	33ff      	adds	r3, #255	; 0xff
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b3e      	cmp	r3, #62	; 0x3e
 8004172:	d924      	bls.n	80041be <USB_EPStartXfer+0x192>
 8004174:	1d7b      	adds	r3, r7, #5
 8004176:	33ff      	adds	r3, #255	; 0xff
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	1c7a      	adds	r2, r7, #1
 800417e:	32ff      	adds	r2, #255	; 0xff
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	1d7b      	adds	r3, r7, #5
 8004184:	33ff      	adds	r3, #255	; 0xff
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	221f      	movs	r2, #31
 800418a:	4013      	ands	r3, r2
 800418c:	d106      	bne.n	800419c <USB_EPStartXfer+0x170>
 800418e:	1c7b      	adds	r3, r7, #1
 8004190:	33ff      	adds	r3, #255	; 0xff
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3b01      	subs	r3, #1
 8004196:	1c7a      	adds	r2, r7, #1
 8004198:	32ff      	adds	r2, #255	; 0xff
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	1c7b      	adds	r3, r7, #1
 80041a4:	33ff      	adds	r3, #255	; 0xff
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	029b      	lsls	r3, r3, #10
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	4313      	orrs	r3, r2
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	4a97      	ldr	r2, [pc, #604]	; (8004410 <USB_EPStartXfer+0x3e4>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	801a      	strh	r2, [r3, #0]
 80041bc:	e04a      	b.n	8004254 <USB_EPStartXfer+0x228>
 80041be:	1d7b      	adds	r3, r7, #5
 80041c0:	33ff      	adds	r3, #255	; 0xff
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d108      	bne.n	80041da <USB_EPStartXfer+0x1ae>
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	4a90      	ldr	r2, [pc, #576]	; (8004410 <USB_EPStartXfer+0x3e4>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	801a      	strh	r2, [r3, #0]
 80041d8:	e03c      	b.n	8004254 <USB_EPStartXfer+0x228>
 80041da:	1d7b      	adds	r3, r7, #5
 80041dc:	33ff      	adds	r3, #255	; 0xff
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	085b      	lsrs	r3, r3, #1
 80041e2:	1c7a      	adds	r2, r7, #1
 80041e4:	32ff      	adds	r2, #255	; 0xff
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	1d7b      	adds	r3, r7, #5
 80041ea:	33ff      	adds	r3, #255	; 0xff
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2201      	movs	r2, #1
 80041f0:	4013      	ands	r3, r2
 80041f2:	d006      	beq.n	8004202 <USB_EPStartXfer+0x1d6>
 80041f4:	1c7b      	adds	r3, r7, #1
 80041f6:	33ff      	adds	r3, #255	; 0xff
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3301      	adds	r3, #1
 80041fc:	1c7a      	adds	r2, r7, #1
 80041fe:	32ff      	adds	r2, #255	; 0xff
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29a      	uxth	r2, r3
 8004208:	1c7b      	adds	r3, r7, #1
 800420a:	33ff      	adds	r3, #255	; 0xff
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	029b      	lsls	r3, r3, #10
 8004212:	b29b      	uxth	r3, r3
 8004214:	4313      	orrs	r3, r2
 8004216:	b29a      	uxth	r2, r3
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	801a      	strh	r2, [r3, #0]
 800421c:	e01a      	b.n	8004254 <USB_EPStartXfer+0x228>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	785b      	ldrb	r3, [r3, #1]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d116      	bne.n	8004254 <USB_EPStartXfer+0x228>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2250      	movs	r2, #80	; 0x50
 800422a:	5a9b      	ldrh	r3, [r3, r2]
 800422c:	b29b      	uxth	r3, r3
 800422e:	001a      	movs	r2, r3
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	189b      	adds	r3, r3, r2
 8004234:	633b      	str	r3, [r7, #48]	; 0x30
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	00da      	lsls	r2, r3, #3
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	18d3      	adds	r3, r2, r3
 8004240:	4a72      	ldr	r2, [pc, #456]	; (800440c <USB_EPStartXfer+0x3e0>)
 8004242:	4694      	mov	ip, r2
 8004244:	4463      	add	r3, ip
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004248:	1d7b      	adds	r3, r7, #5
 800424a:	33ff      	adds	r3, #255	; 0xff
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	b29a      	uxth	r2, r3
 8004250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004252:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004254:	2076      	movs	r0, #118	; 0x76
 8004256:	183b      	adds	r3, r7, r0
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	8952      	ldrh	r2, [r2, #10]
 800425c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6959      	ldr	r1, [r3, #20]
 8004262:	1d7b      	adds	r3, r7, #5
 8004264:	33ff      	adds	r3, #255	; 0xff
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	b29c      	uxth	r4, r3
 800426a:	183b      	adds	r3, r7, r0
 800426c:	881a      	ldrh	r2, [r3, #0]
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	0023      	movs	r3, r4
 8004272:	f001 f94d 	bl	8005510 <USB_WritePMA>
            ep->xfer_buff += len;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	695a      	ldr	r2, [r3, #20]
 800427a:	1d7b      	adds	r3, r7, #5
 800427c:	33ff      	adds	r3, #255	; 0xff
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	18d2      	adds	r2, r2, r3
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6a1a      	ldr	r2, [r3, #32]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	429a      	cmp	r2, r3
 8004290:	d908      	bls.n	80042a4 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6a1a      	ldr	r2, [r3, #32]
 8004296:	1d7b      	adds	r3, r7, #5
 8004298:	33ff      	adds	r3, #255	; 0xff
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	1ad2      	subs	r2, r2, r3
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	621a      	str	r2, [r3, #32]
 80042a2:	e007      	b.n	80042b4 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	1d7a      	adds	r2, r7, #5
 80042aa:	32ff      	adds	r2, #255	; 0xff
 80042ac:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2200      	movs	r2, #0
 80042b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	785b      	ldrb	r3, [r3, #1]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d000      	beq.n	80042be <USB_EPStartXfer+0x292>
 80042bc:	e070      	b.n	80043a0 <USB_EPStartXfer+0x374>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2250      	movs	r2, #80	; 0x50
 80042c6:	5a9b      	ldrh	r3, [r3, r2]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	001a      	movs	r2, r3
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	189b      	adds	r3, r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	00da      	lsls	r2, r3, #3
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	18d3      	adds	r3, r2, r3
 80042dc:	4a48      	ldr	r2, [pc, #288]	; (8004400 <USB_EPStartXfer+0x3d4>)
 80042de:	4694      	mov	ip, r2
 80042e0:	4463      	add	r3, ip
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	059b      	lsls	r3, r3, #22
 80042ec:	0d9b      	lsrs	r3, r3, #22
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	801a      	strh	r2, [r3, #0]
 80042f4:	1d7b      	adds	r3, r7, #5
 80042f6:	33ff      	adds	r3, #255	; 0xff
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b3e      	cmp	r3, #62	; 0x3e
 80042fc:	d922      	bls.n	8004344 <USB_EPStartXfer+0x318>
 80042fe:	1d7b      	adds	r3, r7, #5
 8004300:	33ff      	adds	r3, #255	; 0xff
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	21fc      	movs	r1, #252	; 0xfc
 8004308:	187a      	adds	r2, r7, r1
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	1d7b      	adds	r3, r7, #5
 800430e:	33ff      	adds	r3, #255	; 0xff
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	221f      	movs	r2, #31
 8004314:	4013      	ands	r3, r2
 8004316:	d104      	bne.n	8004322 <USB_EPStartXfer+0x2f6>
 8004318:	187b      	adds	r3, r7, r1
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3b01      	subs	r3, #1
 800431e:	187a      	adds	r2, r7, r1
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29a      	uxth	r2, r3
 8004328:	23fc      	movs	r3, #252	; 0xfc
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	029b      	lsls	r3, r3, #10
 8004332:	b29b      	uxth	r3, r3
 8004334:	4313      	orrs	r3, r2
 8004336:	b29b      	uxth	r3, r3
 8004338:	4a35      	ldr	r2, [pc, #212]	; (8004410 <USB_EPStartXfer+0x3e4>)
 800433a:	4313      	orrs	r3, r2
 800433c:	b29a      	uxth	r2, r3
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	801a      	strh	r2, [r3, #0]
 8004342:	e04a      	b.n	80043da <USB_EPStartXfer+0x3ae>
 8004344:	1d7b      	adds	r3, r7, #5
 8004346:	33ff      	adds	r3, #255	; 0xff
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d108      	bne.n	8004360 <USB_EPStartXfer+0x334>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	b29b      	uxth	r3, r3
 8004354:	4a2e      	ldr	r2, [pc, #184]	; (8004410 <USB_EPStartXfer+0x3e4>)
 8004356:	4313      	orrs	r3, r2
 8004358:	b29a      	uxth	r2, r3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	e03c      	b.n	80043da <USB_EPStartXfer+0x3ae>
 8004360:	1d7b      	adds	r3, r7, #5
 8004362:	33ff      	adds	r3, #255	; 0xff
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	085b      	lsrs	r3, r3, #1
 8004368:	21fc      	movs	r1, #252	; 0xfc
 800436a:	187a      	adds	r2, r7, r1
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	1d7b      	adds	r3, r7, #5
 8004370:	33ff      	adds	r3, #255	; 0xff
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2201      	movs	r2, #1
 8004376:	4013      	ands	r3, r2
 8004378:	d004      	beq.n	8004384 <USB_EPStartXfer+0x358>
 800437a:	187b      	adds	r3, r7, r1
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3301      	adds	r3, #1
 8004380:	187a      	adds	r2, r7, r1
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	b29a      	uxth	r2, r3
 800438a:	23fc      	movs	r3, #252	; 0xfc
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	b29b      	uxth	r3, r3
 8004392:	029b      	lsls	r3, r3, #10
 8004394:	b29b      	uxth	r3, r3
 8004396:	4313      	orrs	r3, r2
 8004398:	b29a      	uxth	r2, r3
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	801a      	strh	r2, [r3, #0]
 800439e:	e01c      	b.n	80043da <USB_EPStartXfer+0x3ae>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	785b      	ldrb	r3, [r3, #1]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d118      	bne.n	80043da <USB_EPStartXfer+0x3ae>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	623b      	str	r3, [r7, #32]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2250      	movs	r2, #80	; 0x50
 80043b0:	5a9b      	ldrh	r3, [r3, r2]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	001a      	movs	r2, r3
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	189b      	adds	r3, r3, r2
 80043ba:	623b      	str	r3, [r7, #32]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	00da      	lsls	r2, r3, #3
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	18d3      	adds	r3, r2, r3
 80043c6:	4a0e      	ldr	r2, [pc, #56]	; (8004400 <USB_EPStartXfer+0x3d4>)
 80043c8:	4694      	mov	ip, r2
 80043ca:	4463      	add	r3, ip
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	1d7b      	adds	r3, r7, #5
 80043d0:	33ff      	adds	r3, #255	; 0xff
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80043da:	2076      	movs	r0, #118	; 0x76
 80043dc:	183b      	adds	r3, r7, r0
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	8912      	ldrh	r2, [r2, #8]
 80043e2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	6959      	ldr	r1, [r3, #20]
 80043e8:	1d7b      	adds	r3, r7, #5
 80043ea:	33ff      	adds	r3, #255	; 0xff
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	b29c      	uxth	r4, r3
 80043f0:	183b      	adds	r3, r7, r0
 80043f2:	881a      	ldrh	r2, [r3, #0]
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	0023      	movs	r3, r4
 80043f8:	f001 f88a 	bl	8005510 <USB_WritePMA>
 80043fc:	e329      	b.n	8004a52 <USB_EPStartXfer+0xa26>
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	00000402 	.word	0x00000402
 8004404:	ffff8f8f 	.word	0xffff8f8f
 8004408:	ffff8180 	.word	0xffff8180
 800440c:	00000406 	.word	0x00000406
 8004410:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	785b      	ldrb	r3, [r3, #1]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d000      	beq.n	800441e <USB_EPStartXfer+0x3f2>
 800441c:	e070      	b.n	8004500 <USB_EPStartXfer+0x4d4>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	64bb      	str	r3, [r7, #72]	; 0x48
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2250      	movs	r2, #80	; 0x50
 8004426:	5a9b      	ldrh	r3, [r3, r2]
 8004428:	b29b      	uxth	r3, r3
 800442a:	001a      	movs	r2, r3
 800442c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800442e:	189b      	adds	r3, r3, r2
 8004430:	64bb      	str	r3, [r7, #72]	; 0x48
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	00da      	lsls	r2, r3, #3
 8004438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800443a:	18d3      	adds	r3, r2, r3
 800443c:	4acd      	ldr	r2, [pc, #820]	; (8004774 <USB_EPStartXfer+0x748>)
 800443e:	4694      	mov	ip, r2
 8004440:	4463      	add	r3, ip
 8004442:	647b      	str	r3, [r7, #68]	; 0x44
 8004444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29b      	uxth	r3, r3
 800444a:	059b      	lsls	r3, r3, #22
 800444c:	0d9b      	lsrs	r3, r3, #22
 800444e:	b29a      	uxth	r2, r3
 8004450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004452:	801a      	strh	r2, [r3, #0]
 8004454:	1d7b      	adds	r3, r7, #5
 8004456:	33ff      	adds	r3, #255	; 0xff
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b3e      	cmp	r3, #62	; 0x3e
 800445c:	d922      	bls.n	80044a4 <USB_EPStartXfer+0x478>
 800445e:	1d7b      	adds	r3, r7, #5
 8004460:	33ff      	adds	r3, #255	; 0xff
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	21f8      	movs	r1, #248	; 0xf8
 8004468:	187a      	adds	r2, r7, r1
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	1d7b      	adds	r3, r7, #5
 800446e:	33ff      	adds	r3, #255	; 0xff
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	221f      	movs	r2, #31
 8004474:	4013      	ands	r3, r2
 8004476:	d104      	bne.n	8004482 <USB_EPStartXfer+0x456>
 8004478:	187b      	adds	r3, r7, r1
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3b01      	subs	r3, #1
 800447e:	187a      	adds	r2, r7, r1
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29a      	uxth	r2, r3
 8004488:	23f8      	movs	r3, #248	; 0xf8
 800448a:	18fb      	adds	r3, r7, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	b29b      	uxth	r3, r3
 8004490:	029b      	lsls	r3, r3, #10
 8004492:	b29b      	uxth	r3, r3
 8004494:	4313      	orrs	r3, r2
 8004496:	b29b      	uxth	r3, r3
 8004498:	4ab7      	ldr	r2, [pc, #732]	; (8004778 <USB_EPStartXfer+0x74c>)
 800449a:	4313      	orrs	r3, r2
 800449c:	b29a      	uxth	r2, r3
 800449e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a0:	801a      	strh	r2, [r3, #0]
 80044a2:	e04a      	b.n	800453a <USB_EPStartXfer+0x50e>
 80044a4:	1d7b      	adds	r3, r7, #5
 80044a6:	33ff      	adds	r3, #255	; 0xff
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d108      	bne.n	80044c0 <USB_EPStartXfer+0x494>
 80044ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	4ab0      	ldr	r2, [pc, #704]	; (8004778 <USB_EPStartXfer+0x74c>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044bc:	801a      	strh	r2, [r3, #0]
 80044be:	e03c      	b.n	800453a <USB_EPStartXfer+0x50e>
 80044c0:	1d7b      	adds	r3, r7, #5
 80044c2:	33ff      	adds	r3, #255	; 0xff
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	085b      	lsrs	r3, r3, #1
 80044c8:	21f8      	movs	r1, #248	; 0xf8
 80044ca:	187a      	adds	r2, r7, r1
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	1d7b      	adds	r3, r7, #5
 80044d0:	33ff      	adds	r3, #255	; 0xff
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2201      	movs	r2, #1
 80044d6:	4013      	ands	r3, r2
 80044d8:	d004      	beq.n	80044e4 <USB_EPStartXfer+0x4b8>
 80044da:	187b      	adds	r3, r7, r1
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3301      	adds	r3, #1
 80044e0:	187a      	adds	r2, r7, r1
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	23f8      	movs	r3, #248	; 0xf8
 80044ec:	18fb      	adds	r3, r7, r3
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	029b      	lsls	r3, r3, #10
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	4313      	orrs	r3, r2
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fc:	801a      	strh	r2, [r3, #0]
 80044fe:	e01c      	b.n	800453a <USB_EPStartXfer+0x50e>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	785b      	ldrb	r3, [r3, #1]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d118      	bne.n	800453a <USB_EPStartXfer+0x50e>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	653b      	str	r3, [r7, #80]	; 0x50
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2250      	movs	r2, #80	; 0x50
 8004510:	5a9b      	ldrh	r3, [r3, r2]
 8004512:	b29b      	uxth	r3, r3
 8004514:	001a      	movs	r2, r3
 8004516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004518:	189b      	adds	r3, r3, r2
 800451a:	653b      	str	r3, [r7, #80]	; 0x50
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	00da      	lsls	r2, r3, #3
 8004522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004524:	18d3      	adds	r3, r2, r3
 8004526:	4a93      	ldr	r2, [pc, #588]	; (8004774 <USB_EPStartXfer+0x748>)
 8004528:	4694      	mov	ip, r2
 800452a:	4463      	add	r3, ip
 800452c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800452e:	1d7b      	adds	r3, r7, #5
 8004530:	33ff      	adds	r3, #255	; 0xff
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	b29a      	uxth	r2, r3
 8004536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004538:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800453a:	2076      	movs	r0, #118	; 0x76
 800453c:	183b      	adds	r3, r7, r0
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	8912      	ldrh	r2, [r2, #8]
 8004542:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	6959      	ldr	r1, [r3, #20]
 8004548:	1d7b      	adds	r3, r7, #5
 800454a:	33ff      	adds	r3, #255	; 0xff
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	b29c      	uxth	r4, r3
 8004550:	183b      	adds	r3, r7, r0
 8004552:	881a      	ldrh	r2, [r3, #0]
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	0023      	movs	r3, r4
 8004558:	f000 ffda 	bl	8005510 <USB_WritePMA>
            ep->xfer_buff += len;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	695a      	ldr	r2, [r3, #20]
 8004560:	1d7b      	adds	r3, r7, #5
 8004562:	33ff      	adds	r3, #255	; 0xff
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	18d2      	adds	r2, r2, r3
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	6a1a      	ldr	r2, [r3, #32]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	429a      	cmp	r2, r3
 8004576:	d908      	bls.n	800458a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	6a1a      	ldr	r2, [r3, #32]
 800457c:	1d7b      	adds	r3, r7, #5
 800457e:	33ff      	adds	r3, #255	; 0xff
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	1ad2      	subs	r2, r2, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	621a      	str	r2, [r3, #32]
 8004588:	e007      	b.n	800459a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	1d7a      	adds	r2, r7, #5
 8004590:	32ff      	adds	r2, #255	; 0xff
 8004592:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2200      	movs	r2, #0
 8004598:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	643b      	str	r3, [r7, #64]	; 0x40
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	785b      	ldrb	r3, [r3, #1]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d000      	beq.n	80045a8 <USB_EPStartXfer+0x57c>
 80045a6:	e070      	b.n	800468a <USB_EPStartXfer+0x65e>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2250      	movs	r2, #80	; 0x50
 80045b0:	5a9b      	ldrh	r3, [r3, r2]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	001a      	movs	r2, r3
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	189b      	adds	r3, r3, r2
 80045ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	00da      	lsls	r2, r3, #3
 80045c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c4:	18d3      	adds	r3, r2, r3
 80045c6:	4a6d      	ldr	r2, [pc, #436]	; (800477c <USB_EPStartXfer+0x750>)
 80045c8:	4694      	mov	ip, r2
 80045ca:	4463      	add	r3, ip
 80045cc:	637b      	str	r3, [r7, #52]	; 0x34
 80045ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	059b      	lsls	r3, r3, #22
 80045d6:	0d9b      	lsrs	r3, r3, #22
 80045d8:	b29a      	uxth	r2, r3
 80045da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045dc:	801a      	strh	r2, [r3, #0]
 80045de:	1d7b      	adds	r3, r7, #5
 80045e0:	33ff      	adds	r3, #255	; 0xff
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b3e      	cmp	r3, #62	; 0x3e
 80045e6:	d922      	bls.n	800462e <USB_EPStartXfer+0x602>
 80045e8:	1d7b      	adds	r3, r7, #5
 80045ea:	33ff      	adds	r3, #255	; 0xff
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	21f4      	movs	r1, #244	; 0xf4
 80045f2:	187a      	adds	r2, r7, r1
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	1d7b      	adds	r3, r7, #5
 80045f8:	33ff      	adds	r3, #255	; 0xff
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	221f      	movs	r2, #31
 80045fe:	4013      	ands	r3, r2
 8004600:	d104      	bne.n	800460c <USB_EPStartXfer+0x5e0>
 8004602:	187b      	adds	r3, r7, r1
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3b01      	subs	r3, #1
 8004608:	187a      	adds	r2, r7, r1
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29a      	uxth	r2, r3
 8004612:	23f4      	movs	r3, #244	; 0xf4
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	029b      	lsls	r3, r3, #10
 800461c:	b29b      	uxth	r3, r3
 800461e:	4313      	orrs	r3, r2
 8004620:	b29b      	uxth	r3, r3
 8004622:	4a55      	ldr	r2, [pc, #340]	; (8004778 <USB_EPStartXfer+0x74c>)
 8004624:	4313      	orrs	r3, r2
 8004626:	b29a      	uxth	r2, r3
 8004628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462a:	801a      	strh	r2, [r3, #0]
 800462c:	e048      	b.n	80046c0 <USB_EPStartXfer+0x694>
 800462e:	1d7b      	adds	r3, r7, #5
 8004630:	33ff      	adds	r3, #255	; 0xff
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d108      	bne.n	800464a <USB_EPStartXfer+0x61e>
 8004638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	4a4e      	ldr	r2, [pc, #312]	; (8004778 <USB_EPStartXfer+0x74c>)
 8004640:	4313      	orrs	r3, r2
 8004642:	b29a      	uxth	r2, r3
 8004644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004646:	801a      	strh	r2, [r3, #0]
 8004648:	e03a      	b.n	80046c0 <USB_EPStartXfer+0x694>
 800464a:	1d7b      	adds	r3, r7, #5
 800464c:	33ff      	adds	r3, #255	; 0xff
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	085b      	lsrs	r3, r3, #1
 8004652:	21f4      	movs	r1, #244	; 0xf4
 8004654:	187a      	adds	r2, r7, r1
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	1d7b      	adds	r3, r7, #5
 800465a:	33ff      	adds	r3, #255	; 0xff
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2201      	movs	r2, #1
 8004660:	4013      	ands	r3, r2
 8004662:	d004      	beq.n	800466e <USB_EPStartXfer+0x642>
 8004664:	187b      	adds	r3, r7, r1
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3301      	adds	r3, #1
 800466a:	187a      	adds	r2, r7, r1
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29a      	uxth	r2, r3
 8004674:	23f4      	movs	r3, #244	; 0xf4
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	029b      	lsls	r3, r3, #10
 800467e:	b29b      	uxth	r3, r3
 8004680:	4313      	orrs	r3, r2
 8004682:	b29a      	uxth	r2, r3
 8004684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004686:	801a      	strh	r2, [r3, #0]
 8004688:	e01a      	b.n	80046c0 <USB_EPStartXfer+0x694>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	785b      	ldrb	r3, [r3, #1]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d116      	bne.n	80046c0 <USB_EPStartXfer+0x694>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2250      	movs	r2, #80	; 0x50
 8004696:	5a9b      	ldrh	r3, [r3, r2]
 8004698:	b29b      	uxth	r3, r3
 800469a:	001a      	movs	r2, r3
 800469c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469e:	189b      	adds	r3, r3, r2
 80046a0:	643b      	str	r3, [r7, #64]	; 0x40
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	00da      	lsls	r2, r3, #3
 80046a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046aa:	18d3      	adds	r3, r2, r3
 80046ac:	4a33      	ldr	r2, [pc, #204]	; (800477c <USB_EPStartXfer+0x750>)
 80046ae:	4694      	mov	ip, r2
 80046b0:	4463      	add	r3, ip
 80046b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b4:	1d7b      	adds	r3, r7, #5
 80046b6:	33ff      	adds	r3, #255	; 0xff
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80046c0:	2076      	movs	r0, #118	; 0x76
 80046c2:	183b      	adds	r3, r7, r0
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	8952      	ldrh	r2, [r2, #10]
 80046c8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6959      	ldr	r1, [r3, #20]
 80046ce:	1d7b      	adds	r3, r7, #5
 80046d0:	33ff      	adds	r3, #255	; 0xff
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	b29c      	uxth	r4, r3
 80046d6:	183b      	adds	r3, r7, r0
 80046d8:	881a      	ldrh	r2, [r3, #0]
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	0023      	movs	r3, r4
 80046de:	f000 ff17 	bl	8005510 <USB_WritePMA>
 80046e2:	e1b6      	b.n	8004a52 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	1d7a      	adds	r2, r7, #5
 80046ea:	32ff      	adds	r2, #255	; 0xff
 80046ec:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	18d3      	adds	r3, r2, r3
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	2062      	movs	r0, #98	; 0x62
 80046fe:	183b      	adds	r3, r7, r0
 8004700:	491f      	ldr	r1, [pc, #124]	; (8004780 <USB_EPStartXfer+0x754>)
 8004702:	400a      	ands	r2, r1
 8004704:	801a      	strh	r2, [r3, #0]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	18d3      	adds	r3, r2, r3
 8004710:	183a      	adds	r2, r7, r0
 8004712:	8812      	ldrh	r2, [r2, #0]
 8004714:	491b      	ldr	r1, [pc, #108]	; (8004784 <USB_EPStartXfer+0x758>)
 8004716:	430a      	orrs	r2, r1
 8004718:	b292      	uxth	r2, r2
 800471a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2250      	movs	r2, #80	; 0x50
 8004724:	5a9b      	ldrh	r3, [r3, r2]
 8004726:	b29b      	uxth	r3, r3
 8004728:	001a      	movs	r2, r3
 800472a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800472c:	189b      	adds	r3, r3, r2
 800472e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	00da      	lsls	r2, r3, #3
 8004736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004738:	18d3      	adds	r3, r2, r3
 800473a:	4a0e      	ldr	r2, [pc, #56]	; (8004774 <USB_EPStartXfer+0x748>)
 800473c:	4694      	mov	ip, r2
 800473e:	4463      	add	r3, ip
 8004740:	65bb      	str	r3, [r7, #88]	; 0x58
 8004742:	1d7b      	adds	r3, r7, #5
 8004744:	33ff      	adds	r3, #255	; 0xff
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	b29a      	uxth	r2, r3
 800474a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800474c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800474e:	2076      	movs	r0, #118	; 0x76
 8004750:	183b      	adds	r3, r7, r0
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	8912      	ldrh	r2, [r2, #8]
 8004756:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	6959      	ldr	r1, [r3, #20]
 800475c:	1d7b      	adds	r3, r7, #5
 800475e:	33ff      	adds	r3, #255	; 0xff
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	b29c      	uxth	r4, r3
 8004764:	183b      	adds	r3, r7, r0
 8004766:	881a      	ldrh	r2, [r3, #0]
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	0023      	movs	r3, r4
 800476c:	f000 fed0 	bl	8005510 <USB_WritePMA>
 8004770:	e16f      	b.n	8004a52 <USB_EPStartXfer+0xa26>
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	00000402 	.word	0x00000402
 8004778:	ffff8000 	.word	0xffff8000
 800477c:	00000406 	.word	0x00000406
 8004780:	ffff8e8f 	.word	0xffff8e8f
 8004784:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	6a1a      	ldr	r2, [r3, #32]
 800478c:	1d7b      	adds	r3, r7, #5
 800478e:	33ff      	adds	r3, #255	; 0xff
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	1ad2      	subs	r2, r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	18d3      	adds	r3, r2, r3
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	001a      	movs	r2, r3
 80047a8:	2340      	movs	r3, #64	; 0x40
 80047aa:	4013      	ands	r3, r2
 80047ac:	d100      	bne.n	80047b0 <USB_EPStartXfer+0x784>
 80047ae:	e0a4      	b.n	80048fa <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	673b      	str	r3, [r7, #112]	; 0x70
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	785b      	ldrb	r3, [r3, #1]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d000      	beq.n	80047be <USB_EPStartXfer+0x792>
 80047bc:	e070      	b.n	80048a0 <USB_EPStartXfer+0x874>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2250      	movs	r2, #80	; 0x50
 80047c6:	5a9b      	ldrh	r3, [r3, r2]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	001a      	movs	r2, r3
 80047cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ce:	189b      	adds	r3, r3, r2
 80047d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	00da      	lsls	r2, r3, #3
 80047d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047da:	18d3      	adds	r3, r2, r3
 80047dc:	4abc      	ldr	r2, [pc, #752]	; (8004ad0 <USB_EPStartXfer+0xaa4>)
 80047de:	4694      	mov	ip, r2
 80047e0:	4463      	add	r3, ip
 80047e2:	667b      	str	r3, [r7, #100]	; 0x64
 80047e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	059b      	lsls	r3, r3, #22
 80047ec:	0d9b      	lsrs	r3, r3, #22
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047f2:	801a      	strh	r2, [r3, #0]
 80047f4:	1d7b      	adds	r3, r7, #5
 80047f6:	33ff      	adds	r3, #255	; 0xff
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b3e      	cmp	r3, #62	; 0x3e
 80047fc:	d922      	bls.n	8004844 <USB_EPStartXfer+0x818>
 80047fe:	1d7b      	adds	r3, r7, #5
 8004800:	33ff      	adds	r3, #255	; 0xff
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	21f0      	movs	r1, #240	; 0xf0
 8004808:	187a      	adds	r2, r7, r1
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	1d7b      	adds	r3, r7, #5
 800480e:	33ff      	adds	r3, #255	; 0xff
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	221f      	movs	r2, #31
 8004814:	4013      	ands	r3, r2
 8004816:	d104      	bne.n	8004822 <USB_EPStartXfer+0x7f6>
 8004818:	187b      	adds	r3, r7, r1
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3b01      	subs	r3, #1
 800481e:	187a      	adds	r2, r7, r1
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b29a      	uxth	r2, r3
 8004828:	23f0      	movs	r3, #240	; 0xf0
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	029b      	lsls	r3, r3, #10
 8004832:	b29b      	uxth	r3, r3
 8004834:	4313      	orrs	r3, r2
 8004836:	b29b      	uxth	r3, r3
 8004838:	4aa6      	ldr	r2, [pc, #664]	; (8004ad4 <USB_EPStartXfer+0xaa8>)
 800483a:	4313      	orrs	r3, r2
 800483c:	b29a      	uxth	r2, r3
 800483e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004840:	801a      	strh	r2, [r3, #0]
 8004842:	e048      	b.n	80048d6 <USB_EPStartXfer+0x8aa>
 8004844:	1d7b      	adds	r3, r7, #5
 8004846:	33ff      	adds	r3, #255	; 0xff
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d108      	bne.n	8004860 <USB_EPStartXfer+0x834>
 800484e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	4a9f      	ldr	r2, [pc, #636]	; (8004ad4 <USB_EPStartXfer+0xaa8>)
 8004856:	4313      	orrs	r3, r2
 8004858:	b29a      	uxth	r2, r3
 800485a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800485c:	801a      	strh	r2, [r3, #0]
 800485e:	e03a      	b.n	80048d6 <USB_EPStartXfer+0x8aa>
 8004860:	1d7b      	adds	r3, r7, #5
 8004862:	33ff      	adds	r3, #255	; 0xff
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	085b      	lsrs	r3, r3, #1
 8004868:	21f0      	movs	r1, #240	; 0xf0
 800486a:	187a      	adds	r2, r7, r1
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	1d7b      	adds	r3, r7, #5
 8004870:	33ff      	adds	r3, #255	; 0xff
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2201      	movs	r2, #1
 8004876:	4013      	ands	r3, r2
 8004878:	d004      	beq.n	8004884 <USB_EPStartXfer+0x858>
 800487a:	187b      	adds	r3, r7, r1
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3301      	adds	r3, #1
 8004880:	187a      	adds	r2, r7, r1
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	b29a      	uxth	r2, r3
 800488a:	23f0      	movs	r3, #240	; 0xf0
 800488c:	18fb      	adds	r3, r7, r3
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	b29b      	uxth	r3, r3
 8004892:	029b      	lsls	r3, r3, #10
 8004894:	b29b      	uxth	r3, r3
 8004896:	4313      	orrs	r3, r2
 8004898:	b29a      	uxth	r2, r3
 800489a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800489c:	801a      	strh	r2, [r3, #0]
 800489e:	e01a      	b.n	80048d6 <USB_EPStartXfer+0x8aa>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	785b      	ldrb	r3, [r3, #1]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d116      	bne.n	80048d6 <USB_EPStartXfer+0x8aa>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2250      	movs	r2, #80	; 0x50
 80048ac:	5a9b      	ldrh	r3, [r3, r2]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	001a      	movs	r2, r3
 80048b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048b4:	189b      	adds	r3, r3, r2
 80048b6:	673b      	str	r3, [r7, #112]	; 0x70
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	00da      	lsls	r2, r3, #3
 80048be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048c0:	18d3      	adds	r3, r2, r3
 80048c2:	4a83      	ldr	r2, [pc, #524]	; (8004ad0 <USB_EPStartXfer+0xaa4>)
 80048c4:	4694      	mov	ip, r2
 80048c6:	4463      	add	r3, ip
 80048c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048ca:	1d7b      	adds	r3, r7, #5
 80048cc:	33ff      	adds	r3, #255	; 0xff
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80048d6:	2076      	movs	r0, #118	; 0x76
 80048d8:	183b      	adds	r3, r7, r0
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	8952      	ldrh	r2, [r2, #10]
 80048de:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	6959      	ldr	r1, [r3, #20]
 80048e4:	1d7b      	adds	r3, r7, #5
 80048e6:	33ff      	adds	r3, #255	; 0xff
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	b29c      	uxth	r4, r3
 80048ec:	183b      	adds	r3, r7, r0
 80048ee:	881a      	ldrh	r2, [r3, #0]
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	0023      	movs	r3, r4
 80048f4:	f000 fe0c 	bl	8005510 <USB_WritePMA>
 80048f8:	e0ab      	b.n	8004a52 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	785b      	ldrb	r3, [r3, #1]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d000      	beq.n	8004904 <USB_EPStartXfer+0x8d8>
 8004902:	e070      	b.n	80049e6 <USB_EPStartXfer+0x9ba>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2250      	movs	r2, #80	; 0x50
 800490c:	5a9b      	ldrh	r3, [r3, r2]
 800490e:	b29b      	uxth	r3, r3
 8004910:	001a      	movs	r2, r3
 8004912:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004914:	189b      	adds	r3, r3, r2
 8004916:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	00da      	lsls	r2, r3, #3
 800491e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004920:	18d3      	adds	r3, r2, r3
 8004922:	4a6d      	ldr	r2, [pc, #436]	; (8004ad8 <USB_EPStartXfer+0xaac>)
 8004924:	4694      	mov	ip, r2
 8004926:	4463      	add	r3, ip
 8004928:	67bb      	str	r3, [r7, #120]	; 0x78
 800492a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	059b      	lsls	r3, r3, #22
 8004932:	0d9b      	lsrs	r3, r3, #22
 8004934:	b29a      	uxth	r2, r3
 8004936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004938:	801a      	strh	r2, [r3, #0]
 800493a:	1d7b      	adds	r3, r7, #5
 800493c:	33ff      	adds	r3, #255	; 0xff
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b3e      	cmp	r3, #62	; 0x3e
 8004942:	d922      	bls.n	800498a <USB_EPStartXfer+0x95e>
 8004944:	1d7b      	adds	r3, r7, #5
 8004946:	33ff      	adds	r3, #255	; 0xff
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	21ec      	movs	r1, #236	; 0xec
 800494e:	187a      	adds	r2, r7, r1
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	1d7b      	adds	r3, r7, #5
 8004954:	33ff      	adds	r3, #255	; 0xff
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	221f      	movs	r2, #31
 800495a:	4013      	ands	r3, r2
 800495c:	d104      	bne.n	8004968 <USB_EPStartXfer+0x93c>
 800495e:	187b      	adds	r3, r7, r1
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3b01      	subs	r3, #1
 8004964:	187a      	adds	r2, r7, r1
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29a      	uxth	r2, r3
 800496e:	23ec      	movs	r3, #236	; 0xec
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	029b      	lsls	r3, r3, #10
 8004978:	b29b      	uxth	r3, r3
 800497a:	4313      	orrs	r3, r2
 800497c:	b29b      	uxth	r3, r3
 800497e:	4a55      	ldr	r2, [pc, #340]	; (8004ad4 <USB_EPStartXfer+0xaa8>)
 8004980:	4313      	orrs	r3, r2
 8004982:	b29a      	uxth	r2, r3
 8004984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004986:	801a      	strh	r2, [r3, #0]
 8004988:	e052      	b.n	8004a30 <USB_EPStartXfer+0xa04>
 800498a:	1d7b      	adds	r3, r7, #5
 800498c:	33ff      	adds	r3, #255	; 0xff
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d108      	bne.n	80049a6 <USB_EPStartXfer+0x97a>
 8004994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	b29b      	uxth	r3, r3
 800499a:	4a4e      	ldr	r2, [pc, #312]	; (8004ad4 <USB_EPStartXfer+0xaa8>)
 800499c:	4313      	orrs	r3, r2
 800499e:	b29a      	uxth	r2, r3
 80049a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a2:	801a      	strh	r2, [r3, #0]
 80049a4:	e044      	b.n	8004a30 <USB_EPStartXfer+0xa04>
 80049a6:	1d7b      	adds	r3, r7, #5
 80049a8:	33ff      	adds	r3, #255	; 0xff
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	21ec      	movs	r1, #236	; 0xec
 80049b0:	187a      	adds	r2, r7, r1
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	1d7b      	adds	r3, r7, #5
 80049b6:	33ff      	adds	r3, #255	; 0xff
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2201      	movs	r2, #1
 80049bc:	4013      	ands	r3, r2
 80049be:	d004      	beq.n	80049ca <USB_EPStartXfer+0x99e>
 80049c0:	187b      	adds	r3, r7, r1
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3301      	adds	r3, #1
 80049c6:	187a      	adds	r2, r7, r1
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	23ec      	movs	r3, #236	; 0xec
 80049d2:	18fb      	adds	r3, r7, r3
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	029b      	lsls	r3, r3, #10
 80049da:	b29b      	uxth	r3, r3
 80049dc:	4313      	orrs	r3, r2
 80049de:	b29a      	uxth	r2, r3
 80049e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049e2:	801a      	strh	r2, [r3, #0]
 80049e4:	e024      	b.n	8004a30 <USB_EPStartXfer+0xa04>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	785b      	ldrb	r3, [r3, #1]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d120      	bne.n	8004a30 <USB_EPStartXfer+0xa04>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2184      	movs	r1, #132	; 0x84
 80049f2:	187a      	adds	r2, r7, r1
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2250      	movs	r2, #80	; 0x50
 80049fa:	5a9b      	ldrh	r3, [r3, r2]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	001a      	movs	r2, r3
 8004a00:	187b      	adds	r3, r7, r1
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	189b      	adds	r3, r3, r2
 8004a06:	187a      	adds	r2, r7, r1
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	00da      	lsls	r2, r3, #3
 8004a10:	187b      	adds	r3, r7, r1
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	18d3      	adds	r3, r2, r3
 8004a16:	4a30      	ldr	r2, [pc, #192]	; (8004ad8 <USB_EPStartXfer+0xaac>)
 8004a18:	4694      	mov	ip, r2
 8004a1a:	4463      	add	r3, ip
 8004a1c:	2180      	movs	r1, #128	; 0x80
 8004a1e:	187a      	adds	r2, r7, r1
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	1d7b      	adds	r3, r7, #5
 8004a24:	33ff      	adds	r3, #255	; 0xff
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	187b      	adds	r3, r7, r1
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004a30:	2076      	movs	r0, #118	; 0x76
 8004a32:	183b      	adds	r3, r7, r0
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	8912      	ldrh	r2, [r2, #8]
 8004a38:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6959      	ldr	r1, [r3, #20]
 8004a3e:	1d7b      	adds	r3, r7, #5
 8004a40:	33ff      	adds	r3, #255	; 0xff
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	b29c      	uxth	r4, r3
 8004a46:	183b      	adds	r3, r7, r0
 8004a48:	881a      	ldrh	r2, [r3, #0]
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	0023      	movs	r3, r4
 8004a4e:	f000 fd5f 	bl	8005510 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	18d3      	adds	r3, r2, r3
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	200a      	movs	r0, #10
 8004a62:	183b      	adds	r3, r7, r0
 8004a64:	491d      	ldr	r1, [pc, #116]	; (8004adc <USB_EPStartXfer+0xab0>)
 8004a66:	400a      	ands	r2, r1
 8004a68:	801a      	strh	r2, [r3, #0]
 8004a6a:	183b      	adds	r3, r7, r0
 8004a6c:	183a      	adds	r2, r7, r0
 8004a6e:	8812      	ldrh	r2, [r2, #0]
 8004a70:	2110      	movs	r1, #16
 8004a72:	404a      	eors	r2, r1
 8004a74:	801a      	strh	r2, [r3, #0]
 8004a76:	183b      	adds	r3, r7, r0
 8004a78:	183a      	adds	r2, r7, r0
 8004a7a:	8812      	ldrh	r2, [r2, #0]
 8004a7c:	2120      	movs	r1, #32
 8004a7e:	404a      	eors	r2, r1
 8004a80:	801a      	strh	r2, [r3, #0]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	18d3      	adds	r3, r2, r3
 8004a8c:	183a      	adds	r2, r7, r0
 8004a8e:	8812      	ldrh	r2, [r2, #0]
 8004a90:	4913      	ldr	r1, [pc, #76]	; (8004ae0 <USB_EPStartXfer+0xab4>)
 8004a92:	430a      	orrs	r2, r1
 8004a94:	b292      	uxth	r2, r2
 8004a96:	801a      	strh	r2, [r3, #0]
 8004a98:	f000 fbf4 	bl	8005284 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	7b1b      	ldrb	r3, [r3, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d000      	beq.n	8004aa6 <USB_EPStartXfer+0xa7a>
 8004aa4:	e0a9      	b.n	8004bfa <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d918      	bls.n	8004ae4 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	1d7a      	adds	r2, r7, #5
 8004ab8:	32ff      	adds	r2, #255	; 0xff
 8004aba:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	699a      	ldr	r2, [r3, #24]
 8004ac0:	1d7b      	adds	r3, r7, #5
 8004ac2:	33ff      	adds	r3, #255	; 0xff
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	1ad2      	subs	r2, r2, r3
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	619a      	str	r2, [r3, #24]
 8004acc:	e012      	b.n	8004af4 <USB_EPStartXfer+0xac8>
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	00000406 	.word	0x00000406
 8004ad4:	ffff8000 	.word	0xffff8000
 8004ad8:	00000402 	.word	0x00000402
 8004adc:	ffff8fbf 	.word	0xffff8fbf
 8004ae0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	1d7a      	adds	r2, r7, #5
 8004aea:	32ff      	adds	r2, #255	; 0xff
 8004aec:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2200      	movs	r2, #0
 8004af2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2190      	movs	r1, #144	; 0x90
 8004af8:	187a      	adds	r2, r7, r1
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2250      	movs	r2, #80	; 0x50
 8004b00:	5a9b      	ldrh	r3, [r3, r2]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	001a      	movs	r2, r3
 8004b06:	187b      	adds	r3, r7, r1
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	187a      	adds	r2, r7, r1
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	00da      	lsls	r2, r3, #3
 8004b16:	187b      	adds	r3, r7, r1
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	18d3      	adds	r3, r2, r3
 8004b1c:	4acf      	ldr	r2, [pc, #828]	; (8004e5c <USB_EPStartXfer+0xe30>)
 8004b1e:	4694      	mov	ip, r2
 8004b20:	4463      	add	r3, ip
 8004b22:	218c      	movs	r1, #140	; 0x8c
 8004b24:	187a      	adds	r2, r7, r1
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	187b      	adds	r3, r7, r1
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	059b      	lsls	r3, r3, #22
 8004b32:	0d9b      	lsrs	r3, r3, #22
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	187b      	adds	r3, r7, r1
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	1d7b      	adds	r3, r7, #5
 8004b3e:	33ff      	adds	r3, #255	; 0xff
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b3e      	cmp	r3, #62	; 0x3e
 8004b44:	d925      	bls.n	8004b92 <USB_EPStartXfer+0xb66>
 8004b46:	1d7b      	adds	r3, r7, #5
 8004b48:	33ff      	adds	r3, #255	; 0xff
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	21e8      	movs	r1, #232	; 0xe8
 8004b50:	187a      	adds	r2, r7, r1
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	1d7b      	adds	r3, r7, #5
 8004b56:	33ff      	adds	r3, #255	; 0xff
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	221f      	movs	r2, #31
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d104      	bne.n	8004b6a <USB_EPStartXfer+0xb3e>
 8004b60:	187b      	adds	r3, r7, r1
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3b01      	subs	r3, #1
 8004b66:	187a      	adds	r2, r7, r1
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	218c      	movs	r1, #140	; 0x8c
 8004b6c:	187b      	adds	r3, r7, r1
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	23e8      	movs	r3, #232	; 0xe8
 8004b76:	18fb      	adds	r3, r7, r3
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	029b      	lsls	r3, r3, #10
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	4313      	orrs	r3, r2
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	4ab6      	ldr	r2, [pc, #728]	; (8004e60 <USB_EPStartXfer+0xe34>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	187b      	adds	r3, r7, r1
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	801a      	strh	r2, [r3, #0]
 8004b90:	e353      	b.n	800523a <USB_EPStartXfer+0x120e>
 8004b92:	1d7b      	adds	r3, r7, #5
 8004b94:	33ff      	adds	r3, #255	; 0xff
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10b      	bne.n	8004bb4 <USB_EPStartXfer+0xb88>
 8004b9c:	218c      	movs	r1, #140	; 0x8c
 8004b9e:	187b      	adds	r3, r7, r1
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	4aae      	ldr	r2, [pc, #696]	; (8004e60 <USB_EPStartXfer+0xe34>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	187b      	adds	r3, r7, r1
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	801a      	strh	r2, [r3, #0]
 8004bb2:	e342      	b.n	800523a <USB_EPStartXfer+0x120e>
 8004bb4:	1d7b      	adds	r3, r7, #5
 8004bb6:	33ff      	adds	r3, #255	; 0xff
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	085b      	lsrs	r3, r3, #1
 8004bbc:	21e8      	movs	r1, #232	; 0xe8
 8004bbe:	187a      	adds	r2, r7, r1
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	1d7b      	adds	r3, r7, #5
 8004bc4:	33ff      	adds	r3, #255	; 0xff
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <USB_EPStartXfer+0xbac>
 8004bce:	187b      	adds	r3, r7, r1
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	187a      	adds	r2, r7, r1
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	218c      	movs	r1, #140	; 0x8c
 8004bda:	187b      	adds	r3, r7, r1
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	23e8      	movs	r3, #232	; 0xe8
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	029b      	lsls	r3, r3, #10
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	187b      	adds	r3, r7, r1
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	801a      	strh	r2, [r3, #0]
 8004bf8:	e31f      	b.n	800523a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	78db      	ldrb	r3, [r3, #3]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d000      	beq.n	8004c04 <USB_EPStartXfer+0xbd8>
 8004c02:	e191      	b.n	8004f28 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	785b      	ldrb	r3, [r3, #1]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d000      	beq.n	8004c0e <USB_EPStartXfer+0xbe2>
 8004c0c:	e07c      	b.n	8004d08 <USB_EPStartXfer+0xcdc>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	21ac      	movs	r1, #172	; 0xac
 8004c12:	187a      	adds	r2, r7, r1
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2250      	movs	r2, #80	; 0x50
 8004c1a:	5a9b      	ldrh	r3, [r3, r2]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	001a      	movs	r2, r3
 8004c20:	187b      	adds	r3, r7, r1
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	189b      	adds	r3, r3, r2
 8004c26:	187a      	adds	r2, r7, r1
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	00da      	lsls	r2, r3, #3
 8004c30:	187b      	adds	r3, r7, r1
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	18d3      	adds	r3, r2, r3
 8004c36:	4a8b      	ldr	r2, [pc, #556]	; (8004e64 <USB_EPStartXfer+0xe38>)
 8004c38:	4694      	mov	ip, r2
 8004c3a:	4463      	add	r3, ip
 8004c3c:	21a8      	movs	r1, #168	; 0xa8
 8004c3e:	187a      	adds	r2, r7, r1
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	187b      	adds	r3, r7, r1
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	059b      	lsls	r3, r3, #22
 8004c4c:	0d9b      	lsrs	r3, r3, #22
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	187b      	adds	r3, r7, r1
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	801a      	strh	r2, [r3, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b3e      	cmp	r3, #62	; 0x3e
 8004c5c:	d923      	bls.n	8004ca6 <USB_EPStartXfer+0xc7a>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	21e4      	movs	r1, #228	; 0xe4
 8004c66:	187a      	adds	r2, r7, r1
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	221f      	movs	r2, #31
 8004c70:	4013      	ands	r3, r2
 8004c72:	d104      	bne.n	8004c7e <USB_EPStartXfer+0xc52>
 8004c74:	187b      	adds	r3, r7, r1
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	187a      	adds	r2, r7, r1
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	21a8      	movs	r1, #168	; 0xa8
 8004c80:	187b      	adds	r3, r7, r1
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	23e4      	movs	r3, #228	; 0xe4
 8004c8a:	18fb      	adds	r3, r7, r3
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	029b      	lsls	r3, r3, #10
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	4313      	orrs	r3, r2
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	4a71      	ldr	r2, [pc, #452]	; (8004e60 <USB_EPStartXfer+0xe34>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	187b      	adds	r3, r7, r1
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	801a      	strh	r2, [r3, #0]
 8004ca4:	e054      	b.n	8004d50 <USB_EPStartXfer+0xd24>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10b      	bne.n	8004cc6 <USB_EPStartXfer+0xc9a>
 8004cae:	21a8      	movs	r1, #168	; 0xa8
 8004cb0:	187b      	adds	r3, r7, r1
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	4a69      	ldr	r2, [pc, #420]	; (8004e60 <USB_EPStartXfer+0xe34>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	187b      	adds	r3, r7, r1
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	e044      	b.n	8004d50 <USB_EPStartXfer+0xd24>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	21e4      	movs	r1, #228	; 0xe4
 8004cce:	187a      	adds	r2, r7, r1
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	4013      	ands	r3, r2
 8004cda:	d004      	beq.n	8004ce6 <USB_EPStartXfer+0xcba>
 8004cdc:	187b      	adds	r3, r7, r1
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	187a      	adds	r2, r7, r1
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	21a8      	movs	r1, #168	; 0xa8
 8004ce8:	187b      	adds	r3, r7, r1
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	23e4      	movs	r3, #228	; 0xe4
 8004cf2:	18fb      	adds	r3, r7, r3
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	029b      	lsls	r3, r3, #10
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	187b      	adds	r3, r7, r1
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	801a      	strh	r2, [r3, #0]
 8004d06:	e023      	b.n	8004d50 <USB_EPStartXfer+0xd24>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	785b      	ldrb	r3, [r3, #1]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d11f      	bne.n	8004d50 <USB_EPStartXfer+0xd24>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	21b4      	movs	r1, #180	; 0xb4
 8004d14:	187a      	adds	r2, r7, r1
 8004d16:	6013      	str	r3, [r2, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2250      	movs	r2, #80	; 0x50
 8004d1c:	5a9b      	ldrh	r3, [r3, r2]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	001a      	movs	r2, r3
 8004d22:	187b      	adds	r3, r7, r1
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	189b      	adds	r3, r3, r2
 8004d28:	187a      	adds	r2, r7, r1
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	00da      	lsls	r2, r3, #3
 8004d32:	187b      	adds	r3, r7, r1
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	18d3      	adds	r3, r2, r3
 8004d38:	4a4a      	ldr	r2, [pc, #296]	; (8004e64 <USB_EPStartXfer+0xe38>)
 8004d3a:	4694      	mov	ip, r2
 8004d3c:	4463      	add	r3, ip
 8004d3e:	21b0      	movs	r1, #176	; 0xb0
 8004d40:	187a      	adds	r2, r7, r1
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	187b      	adds	r3, r7, r1
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	801a      	strh	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	22a4      	movs	r2, #164	; 0xa4
 8004d54:	18ba      	adds	r2, r7, r2
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	785b      	ldrb	r3, [r3, #1]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d000      	beq.n	8004d62 <USB_EPStartXfer+0xd36>
 8004d60:	e082      	b.n	8004e68 <USB_EPStartXfer+0xe3c>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	219c      	movs	r1, #156	; 0x9c
 8004d66:	187a      	adds	r2, r7, r1
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2250      	movs	r2, #80	; 0x50
 8004d6e:	5a9b      	ldrh	r3, [r3, r2]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	001a      	movs	r2, r3
 8004d74:	187b      	adds	r3, r7, r1
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	189b      	adds	r3, r3, r2
 8004d7a:	187a      	adds	r2, r7, r1
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	00da      	lsls	r2, r3, #3
 8004d84:	187b      	adds	r3, r7, r1
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	18d3      	adds	r3, r2, r3
 8004d8a:	4a34      	ldr	r2, [pc, #208]	; (8004e5c <USB_EPStartXfer+0xe30>)
 8004d8c:	4694      	mov	ip, r2
 8004d8e:	4463      	add	r3, ip
 8004d90:	2198      	movs	r1, #152	; 0x98
 8004d92:	187a      	adds	r2, r7, r1
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	187b      	adds	r3, r7, r1
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	059b      	lsls	r3, r3, #22
 8004da0:	0d9b      	lsrs	r3, r3, #22
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	187b      	adds	r3, r7, r1
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	801a      	strh	r2, [r3, #0]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	2b3e      	cmp	r3, #62	; 0x3e
 8004db0:	d923      	bls.n	8004dfa <USB_EPStartXfer+0xdce>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	21e0      	movs	r1, #224	; 0xe0
 8004dba:	187a      	adds	r2, r7, r1
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	221f      	movs	r2, #31
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d104      	bne.n	8004dd2 <USB_EPStartXfer+0xda6>
 8004dc8:	187b      	adds	r3, r7, r1
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	187a      	adds	r2, r7, r1
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	2198      	movs	r1, #152	; 0x98
 8004dd4:	187b      	adds	r3, r7, r1
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	23e0      	movs	r3, #224	; 0xe0
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	029b      	lsls	r3, r3, #10
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	4313      	orrs	r3, r2
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	4a1c      	ldr	r2, [pc, #112]	; (8004e60 <USB_EPStartXfer+0xe34>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	187b      	adds	r3, r7, r1
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	801a      	strh	r2, [r3, #0]
 8004df8:	e057      	b.n	8004eaa <USB_EPStartXfer+0xe7e>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10b      	bne.n	8004e1a <USB_EPStartXfer+0xdee>
 8004e02:	2198      	movs	r1, #152	; 0x98
 8004e04:	187b      	adds	r3, r7, r1
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	4a14      	ldr	r2, [pc, #80]	; (8004e60 <USB_EPStartXfer+0xe34>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	187b      	adds	r3, r7, r1
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	801a      	strh	r2, [r3, #0]
 8004e18:	e047      	b.n	8004eaa <USB_EPStartXfer+0xe7e>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	085b      	lsrs	r3, r3, #1
 8004e20:	21e0      	movs	r1, #224	; 0xe0
 8004e22:	187a      	adds	r2, r7, r1
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <USB_EPStartXfer+0xe0e>
 8004e30:	187b      	adds	r3, r7, r1
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3301      	adds	r3, #1
 8004e36:	187a      	adds	r2, r7, r1
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	2198      	movs	r1, #152	; 0x98
 8004e3c:	187b      	adds	r3, r7, r1
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	23e0      	movs	r3, #224	; 0xe0
 8004e46:	18fb      	adds	r3, r7, r3
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	029b      	lsls	r3, r3, #10
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	4313      	orrs	r3, r2
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	187b      	adds	r3, r7, r1
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	801a      	strh	r2, [r3, #0]
 8004e5a:	e026      	b.n	8004eaa <USB_EPStartXfer+0xe7e>
 8004e5c:	00000406 	.word	0x00000406
 8004e60:	ffff8000 	.word	0xffff8000
 8004e64:	00000402 	.word	0x00000402
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d11c      	bne.n	8004eaa <USB_EPStartXfer+0xe7e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2250      	movs	r2, #80	; 0x50
 8004e74:	5a9b      	ldrh	r3, [r3, r2]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	001a      	movs	r2, r3
 8004e7a:	21a4      	movs	r1, #164	; 0xa4
 8004e7c:	187b      	adds	r3, r7, r1
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	189b      	adds	r3, r3, r2
 8004e82:	187a      	adds	r2, r7, r1
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	00da      	lsls	r2, r3, #3
 8004e8c:	187b      	adds	r3, r7, r1
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	18d3      	adds	r3, r2, r3
 8004e92:	4ad2      	ldr	r2, [pc, #840]	; (80051dc <USB_EPStartXfer+0x11b0>)
 8004e94:	4694      	mov	ip, r2
 8004e96:	4463      	add	r3, ip
 8004e98:	21a0      	movs	r1, #160	; 0xa0
 8004e9a:	187a      	adds	r2, r7, r1
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	187b      	adds	r3, r7, r1
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d100      	bne.n	8004eb4 <USB_EPStartXfer+0xe88>
 8004eb2:	e1c2      	b.n	800523a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	18d2      	adds	r2, r2, r3
 8004ebe:	2196      	movs	r1, #150	; 0x96
 8004ec0:	187b      	adds	r3, r7, r1
 8004ec2:	8812      	ldrh	r2, [r2, #0]
 8004ec4:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004ec6:	187b      	adds	r3, r7, r1
 8004ec8:	881a      	ldrh	r2, [r3, #0]
 8004eca:	2380      	movs	r3, #128	; 0x80
 8004ecc:	01db      	lsls	r3, r3, #7
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d004      	beq.n	8004edc <USB_EPStartXfer+0xeb0>
 8004ed2:	187b      	adds	r3, r7, r1
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	2240      	movs	r2, #64	; 0x40
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d10d      	bne.n	8004ef8 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004edc:	2196      	movs	r1, #150	; 0x96
 8004ede:	187b      	adds	r3, r7, r1
 8004ee0:	881a      	ldrh	r2, [r3, #0]
 8004ee2:	2380      	movs	r3, #128	; 0x80
 8004ee4:	01db      	lsls	r3, r3, #7
 8004ee6:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004ee8:	d000      	beq.n	8004eec <USB_EPStartXfer+0xec0>
 8004eea:	e1a6      	b.n	800523a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004eec:	187b      	adds	r3, r7, r1
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	2240      	movs	r2, #64	; 0x40
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d000      	beq.n	8004ef8 <USB_EPStartXfer+0xecc>
 8004ef6:	e1a0      	b.n	800523a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	18d3      	adds	r3, r2, r3
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	2094      	movs	r0, #148	; 0x94
 8004f08:	183b      	adds	r3, r7, r0
 8004f0a:	49b5      	ldr	r1, [pc, #724]	; (80051e0 <USB_EPStartXfer+0x11b4>)
 8004f0c:	400a      	ands	r2, r1
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	18d3      	adds	r3, r2, r3
 8004f1a:	183a      	adds	r2, r7, r0
 8004f1c:	8812      	ldrh	r2, [r2, #0]
 8004f1e:	49b1      	ldr	r1, [pc, #708]	; (80051e4 <USB_EPStartXfer+0x11b8>)
 8004f20:	430a      	orrs	r2, r1
 8004f22:	b292      	uxth	r2, r2
 8004f24:	801a      	strh	r2, [r3, #0]
 8004f26:	e188      	b.n	800523a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	78db      	ldrb	r3, [r3, #3]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d000      	beq.n	8004f32 <USB_EPStartXfer+0xf06>
 8004f30:	e181      	b.n	8005236 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d90d      	bls.n	8004f5a <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	1d7a      	adds	r2, r7, #5
 8004f44:	32ff      	adds	r2, #255	; 0xff
 8004f46:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	699a      	ldr	r2, [r3, #24]
 8004f4c:	1d7b      	adds	r3, r7, #5
 8004f4e:	33ff      	adds	r3, #255	; 0xff
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	1ad2      	subs	r2, r2, r3
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	619a      	str	r2, [r3, #24]
 8004f58:	e007      	b.n	8004f6a <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	1d7a      	adds	r2, r7, #5
 8004f60:	32ff      	adds	r2, #255	; 0xff
 8004f62:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2200      	movs	r2, #0
 8004f68:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	785b      	ldrb	r3, [r3, #1]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d000      	beq.n	8004f74 <USB_EPStartXfer+0xf48>
 8004f72:	e082      	b.n	800507a <USB_EPStartXfer+0x104e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	21cc      	movs	r1, #204	; 0xcc
 8004f78:	187a      	adds	r2, r7, r1
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2250      	movs	r2, #80	; 0x50
 8004f80:	5a9b      	ldrh	r3, [r3, r2]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	001a      	movs	r2, r3
 8004f86:	187b      	adds	r3, r7, r1
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	189b      	adds	r3, r3, r2
 8004f8c:	187a      	adds	r2, r7, r1
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	00da      	lsls	r2, r3, #3
 8004f96:	187b      	adds	r3, r7, r1
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	18d3      	adds	r3, r2, r3
 8004f9c:	4a92      	ldr	r2, [pc, #584]	; (80051e8 <USB_EPStartXfer+0x11bc>)
 8004f9e:	4694      	mov	ip, r2
 8004fa0:	4463      	add	r3, ip
 8004fa2:	21c8      	movs	r1, #200	; 0xc8
 8004fa4:	187a      	adds	r2, r7, r1
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	187b      	adds	r3, r7, r1
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	059b      	lsls	r3, r3, #22
 8004fb2:	0d9b      	lsrs	r3, r3, #22
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	187b      	adds	r3, r7, r1
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	1d7b      	adds	r3, r7, #5
 8004fbe:	33ff      	adds	r3, #255	; 0xff
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b3e      	cmp	r3, #62	; 0x3e
 8004fc4:	d925      	bls.n	8005012 <USB_EPStartXfer+0xfe6>
 8004fc6:	1d7b      	adds	r3, r7, #5
 8004fc8:	33ff      	adds	r3, #255	; 0xff
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	095b      	lsrs	r3, r3, #5
 8004fce:	21dc      	movs	r1, #220	; 0xdc
 8004fd0:	187a      	adds	r2, r7, r1
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	1d7b      	adds	r3, r7, #5
 8004fd6:	33ff      	adds	r3, #255	; 0xff
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	221f      	movs	r2, #31
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d104      	bne.n	8004fea <USB_EPStartXfer+0xfbe>
 8004fe0:	187b      	adds	r3, r7, r1
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	187a      	adds	r2, r7, r1
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	21c8      	movs	r1, #200	; 0xc8
 8004fec:	187b      	adds	r3, r7, r1
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	23dc      	movs	r3, #220	; 0xdc
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	029b      	lsls	r3, r3, #10
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	4313      	orrs	r3, r2
 8005002:	b29b      	uxth	r3, r3
 8005004:	4a79      	ldr	r2, [pc, #484]	; (80051ec <USB_EPStartXfer+0x11c0>)
 8005006:	4313      	orrs	r3, r2
 8005008:	b29a      	uxth	r2, r3
 800500a:	187b      	adds	r3, r7, r1
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	801a      	strh	r2, [r3, #0]
 8005010:	e058      	b.n	80050c4 <USB_EPStartXfer+0x1098>
 8005012:	1d7b      	adds	r3, r7, #5
 8005014:	33ff      	adds	r3, #255	; 0xff
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10b      	bne.n	8005034 <USB_EPStartXfer+0x1008>
 800501c:	21c8      	movs	r1, #200	; 0xc8
 800501e:	187b      	adds	r3, r7, r1
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	4a71      	ldr	r2, [pc, #452]	; (80051ec <USB_EPStartXfer+0x11c0>)
 8005028:	4313      	orrs	r3, r2
 800502a:	b29a      	uxth	r2, r3
 800502c:	187b      	adds	r3, r7, r1
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	801a      	strh	r2, [r3, #0]
 8005032:	e047      	b.n	80050c4 <USB_EPStartXfer+0x1098>
 8005034:	1d7b      	adds	r3, r7, #5
 8005036:	33ff      	adds	r3, #255	; 0xff
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	085b      	lsrs	r3, r3, #1
 800503c:	21dc      	movs	r1, #220	; 0xdc
 800503e:	187a      	adds	r2, r7, r1
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	1d7b      	adds	r3, r7, #5
 8005044:	33ff      	adds	r3, #255	; 0xff
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2201      	movs	r2, #1
 800504a:	4013      	ands	r3, r2
 800504c:	d004      	beq.n	8005058 <USB_EPStartXfer+0x102c>
 800504e:	187b      	adds	r3, r7, r1
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	187a      	adds	r2, r7, r1
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	21c8      	movs	r1, #200	; 0xc8
 800505a:	187b      	adds	r3, r7, r1
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29a      	uxth	r2, r3
 8005062:	23dc      	movs	r3, #220	; 0xdc
 8005064:	18fb      	adds	r3, r7, r3
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	029b      	lsls	r3, r3, #10
 800506c:	b29b      	uxth	r3, r3
 800506e:	4313      	orrs	r3, r2
 8005070:	b29a      	uxth	r2, r3
 8005072:	187b      	adds	r3, r7, r1
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	801a      	strh	r2, [r3, #0]
 8005078:	e024      	b.n	80050c4 <USB_EPStartXfer+0x1098>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	785b      	ldrb	r3, [r3, #1]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d120      	bne.n	80050c4 <USB_EPStartXfer+0x1098>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	21d4      	movs	r1, #212	; 0xd4
 8005086:	187a      	adds	r2, r7, r1
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2250      	movs	r2, #80	; 0x50
 800508e:	5a9b      	ldrh	r3, [r3, r2]
 8005090:	b29b      	uxth	r3, r3
 8005092:	001a      	movs	r2, r3
 8005094:	187b      	adds	r3, r7, r1
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	189b      	adds	r3, r3, r2
 800509a:	187a      	adds	r2, r7, r1
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	00da      	lsls	r2, r3, #3
 80050a4:	187b      	adds	r3, r7, r1
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	18d3      	adds	r3, r2, r3
 80050aa:	4a4f      	ldr	r2, [pc, #316]	; (80051e8 <USB_EPStartXfer+0x11bc>)
 80050ac:	4694      	mov	ip, r2
 80050ae:	4463      	add	r3, ip
 80050b0:	21d0      	movs	r1, #208	; 0xd0
 80050b2:	187a      	adds	r2, r7, r1
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	1d7b      	adds	r3, r7, #5
 80050b8:	33ff      	adds	r3, #255	; 0xff
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	b29a      	uxth	r2, r3
 80050be:	187b      	adds	r3, r7, r1
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	22c4      	movs	r2, #196	; 0xc4
 80050c8:	18ba      	adds	r2, r7, r2
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	785b      	ldrb	r3, [r3, #1]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d000      	beq.n	80050d6 <USB_EPStartXfer+0x10aa>
 80050d4:	e08c      	b.n	80051f0 <USB_EPStartXfer+0x11c4>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	21bc      	movs	r1, #188	; 0xbc
 80050da:	187a      	adds	r2, r7, r1
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2250      	movs	r2, #80	; 0x50
 80050e2:	5a9b      	ldrh	r3, [r3, r2]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	001a      	movs	r2, r3
 80050e8:	187b      	adds	r3, r7, r1
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	189b      	adds	r3, r3, r2
 80050ee:	187a      	adds	r2, r7, r1
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	00da      	lsls	r2, r3, #3
 80050f8:	187b      	adds	r3, r7, r1
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	18d3      	adds	r3, r2, r3
 80050fe:	4a37      	ldr	r2, [pc, #220]	; (80051dc <USB_EPStartXfer+0x11b0>)
 8005100:	4694      	mov	ip, r2
 8005102:	4463      	add	r3, ip
 8005104:	21b8      	movs	r1, #184	; 0xb8
 8005106:	187a      	adds	r2, r7, r1
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	187b      	adds	r3, r7, r1
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	059b      	lsls	r3, r3, #22
 8005114:	0d9b      	lsrs	r3, r3, #22
 8005116:	b29a      	uxth	r2, r3
 8005118:	187b      	adds	r3, r7, r1
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	801a      	strh	r2, [r3, #0]
 800511e:	1d7b      	adds	r3, r7, #5
 8005120:	33ff      	adds	r3, #255	; 0xff
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b3e      	cmp	r3, #62	; 0x3e
 8005126:	d925      	bls.n	8005174 <USB_EPStartXfer+0x1148>
 8005128:	1d7b      	adds	r3, r7, #5
 800512a:	33ff      	adds	r3, #255	; 0xff
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	21d8      	movs	r1, #216	; 0xd8
 8005132:	187a      	adds	r2, r7, r1
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	1d7b      	adds	r3, r7, #5
 8005138:	33ff      	adds	r3, #255	; 0xff
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	221f      	movs	r2, #31
 800513e:	4013      	ands	r3, r2
 8005140:	d104      	bne.n	800514c <USB_EPStartXfer+0x1120>
 8005142:	187b      	adds	r3, r7, r1
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3b01      	subs	r3, #1
 8005148:	187a      	adds	r2, r7, r1
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	21b8      	movs	r1, #184	; 0xb8
 800514e:	187b      	adds	r3, r7, r1
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	b29a      	uxth	r2, r3
 8005156:	23d8      	movs	r3, #216	; 0xd8
 8005158:	18fb      	adds	r3, r7, r3
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	029b      	lsls	r3, r3, #10
 8005160:	b29b      	uxth	r3, r3
 8005162:	4313      	orrs	r3, r2
 8005164:	b29b      	uxth	r3, r3
 8005166:	4a21      	ldr	r2, [pc, #132]	; (80051ec <USB_EPStartXfer+0x11c0>)
 8005168:	4313      	orrs	r3, r2
 800516a:	b29a      	uxth	r2, r3
 800516c:	187b      	adds	r3, r7, r1
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	801a      	strh	r2, [r3, #0]
 8005172:	e062      	b.n	800523a <USB_EPStartXfer+0x120e>
 8005174:	1d7b      	adds	r3, r7, #5
 8005176:	33ff      	adds	r3, #255	; 0xff
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10b      	bne.n	8005196 <USB_EPStartXfer+0x116a>
 800517e:	21b8      	movs	r1, #184	; 0xb8
 8005180:	187b      	adds	r3, r7, r1
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	4a18      	ldr	r2, [pc, #96]	; (80051ec <USB_EPStartXfer+0x11c0>)
 800518a:	4313      	orrs	r3, r2
 800518c:	b29a      	uxth	r2, r3
 800518e:	187b      	adds	r3, r7, r1
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	801a      	strh	r2, [r3, #0]
 8005194:	e051      	b.n	800523a <USB_EPStartXfer+0x120e>
 8005196:	1d7b      	adds	r3, r7, #5
 8005198:	33ff      	adds	r3, #255	; 0xff
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	21d8      	movs	r1, #216	; 0xd8
 80051a0:	187a      	adds	r2, r7, r1
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	1d7b      	adds	r3, r7, #5
 80051a6:	33ff      	adds	r3, #255	; 0xff
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2201      	movs	r2, #1
 80051ac:	4013      	ands	r3, r2
 80051ae:	d004      	beq.n	80051ba <USB_EPStartXfer+0x118e>
 80051b0:	187b      	adds	r3, r7, r1
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3301      	adds	r3, #1
 80051b6:	187a      	adds	r2, r7, r1
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	21b8      	movs	r1, #184	; 0xb8
 80051bc:	187b      	adds	r3, r7, r1
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	23d8      	movs	r3, #216	; 0xd8
 80051c6:	18fb      	adds	r3, r7, r3
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	029b      	lsls	r3, r3, #10
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	4313      	orrs	r3, r2
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	187b      	adds	r3, r7, r1
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	801a      	strh	r2, [r3, #0]
 80051da:	e02e      	b.n	800523a <USB_EPStartXfer+0x120e>
 80051dc:	00000406 	.word	0x00000406
 80051e0:	ffff8f8f 	.word	0xffff8f8f
 80051e4:	ffff80c0 	.word	0xffff80c0
 80051e8:	00000402 	.word	0x00000402
 80051ec:	ffff8000 	.word	0xffff8000
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	785b      	ldrb	r3, [r3, #1]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d120      	bne.n	800523a <USB_EPStartXfer+0x120e>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2250      	movs	r2, #80	; 0x50
 80051fc:	5a9b      	ldrh	r3, [r3, r2]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	001a      	movs	r2, r3
 8005202:	21c4      	movs	r1, #196	; 0xc4
 8005204:	187b      	adds	r3, r7, r1
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	189b      	adds	r3, r3, r2
 800520a:	187a      	adds	r2, r7, r1
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	00da      	lsls	r2, r3, #3
 8005214:	187b      	adds	r3, r7, r1
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	18d3      	adds	r3, r2, r3
 800521a:	4a1d      	ldr	r2, [pc, #116]	; (8005290 <USB_EPStartXfer+0x1264>)
 800521c:	4694      	mov	ip, r2
 800521e:	4463      	add	r3, ip
 8005220:	21c0      	movs	r1, #192	; 0xc0
 8005222:	187a      	adds	r2, r7, r1
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	1d7b      	adds	r3, r7, #5
 8005228:	33ff      	adds	r3, #255	; 0xff
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	b29a      	uxth	r2, r3
 800522e:	187b      	adds	r3, r7, r1
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	801a      	strh	r2, [r3, #0]
 8005234:	e001      	b.n	800523a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e025      	b.n	8005286 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	18d3      	adds	r3, r2, r3
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	b29a      	uxth	r2, r3
 8005248:	208a      	movs	r0, #138	; 0x8a
 800524a:	183b      	adds	r3, r7, r0
 800524c:	4911      	ldr	r1, [pc, #68]	; (8005294 <USB_EPStartXfer+0x1268>)
 800524e:	400a      	ands	r2, r1
 8005250:	801a      	strh	r2, [r3, #0]
 8005252:	183b      	adds	r3, r7, r0
 8005254:	183a      	adds	r2, r7, r0
 8005256:	8812      	ldrh	r2, [r2, #0]
 8005258:	2180      	movs	r1, #128	; 0x80
 800525a:	0149      	lsls	r1, r1, #5
 800525c:	404a      	eors	r2, r1
 800525e:	801a      	strh	r2, [r3, #0]
 8005260:	183b      	adds	r3, r7, r0
 8005262:	183a      	adds	r2, r7, r0
 8005264:	8812      	ldrh	r2, [r2, #0]
 8005266:	2180      	movs	r1, #128	; 0x80
 8005268:	0189      	lsls	r1, r1, #6
 800526a:	404a      	eors	r2, r1
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	18d3      	adds	r3, r2, r3
 8005278:	183a      	adds	r2, r7, r0
 800527a:	8812      	ldrh	r2, [r2, #0]
 800527c:	4906      	ldr	r1, [pc, #24]	; (8005298 <USB_EPStartXfer+0x126c>)
 800527e:	430a      	orrs	r2, r1
 8005280:	b292      	uxth	r2, r2
 8005282:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	0018      	movs	r0, r3
 8005288:	46bd      	mov	sp, r7
 800528a:	b043      	add	sp, #268	; 0x10c
 800528c:	bd90      	pop	{r4, r7, pc}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	00000406 	.word	0x00000406
 8005294:	ffffbf8f 	.word	0xffffbf8f
 8005298:	ffff8080 	.word	0xffff8080

0800529c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	785b      	ldrb	r3, [r3, #1]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d01d      	beq.n	80052ea <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	18d3      	adds	r3, r2, r3
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	200c      	movs	r0, #12
 80052be:	183b      	adds	r3, r7, r0
 80052c0:	491b      	ldr	r1, [pc, #108]	; (8005330 <USB_EPSetStall+0x94>)
 80052c2:	400a      	ands	r2, r1
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	183b      	adds	r3, r7, r0
 80052c8:	183a      	adds	r2, r7, r0
 80052ca:	8812      	ldrh	r2, [r2, #0]
 80052cc:	2110      	movs	r1, #16
 80052ce:	404a      	eors	r2, r1
 80052d0:	801a      	strh	r2, [r3, #0]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	18d3      	adds	r3, r2, r3
 80052dc:	183a      	adds	r2, r7, r0
 80052de:	8812      	ldrh	r2, [r2, #0]
 80052e0:	4914      	ldr	r1, [pc, #80]	; (8005334 <USB_EPSetStall+0x98>)
 80052e2:	430a      	orrs	r2, r1
 80052e4:	b292      	uxth	r2, r2
 80052e6:	801a      	strh	r2, [r3, #0]
 80052e8:	e01d      	b.n	8005326 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	18d3      	adds	r3, r2, r3
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	200e      	movs	r0, #14
 80052fa:	183b      	adds	r3, r7, r0
 80052fc:	490e      	ldr	r1, [pc, #56]	; (8005338 <USB_EPSetStall+0x9c>)
 80052fe:	400a      	ands	r2, r1
 8005300:	801a      	strh	r2, [r3, #0]
 8005302:	183b      	adds	r3, r7, r0
 8005304:	183a      	adds	r2, r7, r0
 8005306:	8812      	ldrh	r2, [r2, #0]
 8005308:	2180      	movs	r1, #128	; 0x80
 800530a:	0149      	lsls	r1, r1, #5
 800530c:	404a      	eors	r2, r1
 800530e:	801a      	strh	r2, [r3, #0]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	18d3      	adds	r3, r2, r3
 800531a:	183a      	adds	r2, r7, r0
 800531c:	8812      	ldrh	r2, [r2, #0]
 800531e:	4905      	ldr	r1, [pc, #20]	; (8005334 <USB_EPSetStall+0x98>)
 8005320:	430a      	orrs	r2, r1
 8005322:	b292      	uxth	r2, r2
 8005324:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	0018      	movs	r0, r3
 800532a:	46bd      	mov	sp, r7
 800532c:	b004      	add	sp, #16
 800532e:	bd80      	pop	{r7, pc}
 8005330:	ffff8fbf 	.word	0xffff8fbf
 8005334:	ffff8080 	.word	0xffff8080
 8005338:	ffffbf8f 	.word	0xffffbf8f

0800533c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	7b1b      	ldrb	r3, [r3, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d000      	beq.n	8005350 <USB_EPClearStall+0x14>
 800534e:	e095      	b.n	800547c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	785b      	ldrb	r3, [r3, #1]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d046      	beq.n	80053e6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	18d2      	adds	r2, r2, r3
 8005362:	2110      	movs	r1, #16
 8005364:	187b      	adds	r3, r7, r1
 8005366:	8812      	ldrh	r2, [r2, #0]
 8005368:	801a      	strh	r2, [r3, #0]
 800536a:	187b      	adds	r3, r7, r1
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	2240      	movs	r2, #64	; 0x40
 8005370:	4013      	ands	r3, r2
 8005372:	d016      	beq.n	80053a2 <USB_EPClearStall+0x66>
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	18d3      	adds	r3, r2, r3
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	b29a      	uxth	r2, r3
 8005382:	200e      	movs	r0, #14
 8005384:	183b      	adds	r3, r7, r0
 8005386:	4940      	ldr	r1, [pc, #256]	; (8005488 <USB_EPClearStall+0x14c>)
 8005388:	400a      	ands	r2, r1
 800538a:	801a      	strh	r2, [r3, #0]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	18d3      	adds	r3, r2, r3
 8005396:	183a      	adds	r2, r7, r0
 8005398:	8812      	ldrh	r2, [r2, #0]
 800539a:	493c      	ldr	r1, [pc, #240]	; (800548c <USB_EPClearStall+0x150>)
 800539c:	430a      	orrs	r2, r1
 800539e:	b292      	uxth	r2, r2
 80053a0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	78db      	ldrb	r3, [r3, #3]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d068      	beq.n	800547c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	18d3      	adds	r3, r2, r3
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	200c      	movs	r0, #12
 80053ba:	183b      	adds	r3, r7, r0
 80053bc:	4934      	ldr	r1, [pc, #208]	; (8005490 <USB_EPClearStall+0x154>)
 80053be:	400a      	ands	r2, r1
 80053c0:	801a      	strh	r2, [r3, #0]
 80053c2:	183b      	adds	r3, r7, r0
 80053c4:	183a      	adds	r2, r7, r0
 80053c6:	8812      	ldrh	r2, [r2, #0]
 80053c8:	2120      	movs	r1, #32
 80053ca:	404a      	eors	r2, r1
 80053cc:	801a      	strh	r2, [r3, #0]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	18d3      	adds	r3, r2, r3
 80053d8:	183a      	adds	r2, r7, r0
 80053da:	8812      	ldrh	r2, [r2, #0]
 80053dc:	492d      	ldr	r1, [pc, #180]	; (8005494 <USB_EPClearStall+0x158>)
 80053de:	430a      	orrs	r2, r1
 80053e0:	b292      	uxth	r2, r2
 80053e2:	801a      	strh	r2, [r3, #0]
 80053e4:	e04a      	b.n	800547c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	18d2      	adds	r2, r2, r3
 80053f0:	2116      	movs	r1, #22
 80053f2:	187b      	adds	r3, r7, r1
 80053f4:	8812      	ldrh	r2, [r2, #0]
 80053f6:	801a      	strh	r2, [r3, #0]
 80053f8:	187b      	adds	r3, r7, r1
 80053fa:	881a      	ldrh	r2, [r3, #0]
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	01db      	lsls	r3, r3, #7
 8005400:	4013      	ands	r3, r2
 8005402:	d016      	beq.n	8005432 <USB_EPClearStall+0xf6>
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	18d3      	adds	r3, r2, r3
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	b29a      	uxth	r2, r3
 8005412:	2014      	movs	r0, #20
 8005414:	183b      	adds	r3, r7, r0
 8005416:	491c      	ldr	r1, [pc, #112]	; (8005488 <USB_EPClearStall+0x14c>)
 8005418:	400a      	ands	r2, r1
 800541a:	801a      	strh	r2, [r3, #0]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	18d3      	adds	r3, r2, r3
 8005426:	183a      	adds	r2, r7, r0
 8005428:	8812      	ldrh	r2, [r2, #0]
 800542a:	491b      	ldr	r1, [pc, #108]	; (8005498 <USB_EPClearStall+0x15c>)
 800542c:	430a      	orrs	r2, r1
 800542e:	b292      	uxth	r2, r2
 8005430:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	18d3      	adds	r3, r2, r3
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29a      	uxth	r2, r3
 8005440:	2012      	movs	r0, #18
 8005442:	183b      	adds	r3, r7, r0
 8005444:	4915      	ldr	r1, [pc, #84]	; (800549c <USB_EPClearStall+0x160>)
 8005446:	400a      	ands	r2, r1
 8005448:	801a      	strh	r2, [r3, #0]
 800544a:	183b      	adds	r3, r7, r0
 800544c:	183a      	adds	r2, r7, r0
 800544e:	8812      	ldrh	r2, [r2, #0]
 8005450:	2180      	movs	r1, #128	; 0x80
 8005452:	0149      	lsls	r1, r1, #5
 8005454:	404a      	eors	r2, r1
 8005456:	801a      	strh	r2, [r3, #0]
 8005458:	183b      	adds	r3, r7, r0
 800545a:	183a      	adds	r2, r7, r0
 800545c:	8812      	ldrh	r2, [r2, #0]
 800545e:	2180      	movs	r1, #128	; 0x80
 8005460:	0189      	lsls	r1, r1, #6
 8005462:	404a      	eors	r2, r1
 8005464:	801a      	strh	r2, [r3, #0]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	18d3      	adds	r3, r2, r3
 8005470:	183a      	adds	r2, r7, r0
 8005472:	8812      	ldrh	r2, [r2, #0]
 8005474:	4907      	ldr	r1, [pc, #28]	; (8005494 <USB_EPClearStall+0x158>)
 8005476:	430a      	orrs	r2, r1
 8005478:	b292      	uxth	r2, r2
 800547a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	0018      	movs	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	b006      	add	sp, #24
 8005484:	bd80      	pop	{r7, pc}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	ffff8f8f 	.word	0xffff8f8f
 800548c:	ffff80c0 	.word	0xffff80c0
 8005490:	ffff8fbf 	.word	0xffff8fbf
 8005494:	ffff8080 	.word	0xffff8080
 8005498:	ffffc080 	.word	0xffffc080
 800549c:	ffffbf8f 	.word	0xffffbf8f

080054a0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	000a      	movs	r2, r1
 80054aa:	1cfb      	adds	r3, r7, #3
 80054ac:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80054ae:	1cfb      	adds	r3, r7, #3
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d103      	bne.n	80054be <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	224c      	movs	r2, #76	; 0x4c
 80054ba:	2180      	movs	r1, #128	; 0x80
 80054bc:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	0018      	movs	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b002      	add	sp, #8
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2258      	movs	r2, #88	; 0x58
 80054d4:	5a9b      	ldrh	r3, [r3, r2]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	4a05      	ldr	r2, [pc, #20]	; (80054f0 <USB_DevConnect+0x28>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	b299      	uxth	r1, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2258      	movs	r2, #88	; 0x58
 80054e2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	0018      	movs	r0, r3
 80054e8:	46bd      	mov	sp, r7
 80054ea:	b002      	add	sp, #8
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	ffff8000 	.word	0xffff8000

080054f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2244      	movs	r2, #68	; 0x44
 8005500:	5a9b      	ldrh	r3, [r3, r2]
 8005502:	b29b      	uxth	r3, r3
 8005504:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005506:	68fb      	ldr	r3, [r7, #12]
}
 8005508:	0018      	movs	r0, r3
 800550a:	46bd      	mov	sp, r7
 800550c:	b004      	add	sp, #16
 800550e:	bd80      	pop	{r7, pc}

08005510 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	; 0x28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	0019      	movs	r1, r3
 800551c:	1dbb      	adds	r3, r7, #6
 800551e:	801a      	strh	r2, [r3, #0]
 8005520:	1d3b      	adds	r3, r7, #4
 8005522:	1c0a      	adds	r2, r1, #0
 8005524:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005526:	1d3b      	adds	r3, r7, #4
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	3301      	adds	r3, #1
 800552c:	085b      	lsrs	r3, r3, #1
 800552e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005538:	1dbb      	adds	r3, r7, #6
 800553a:	881a      	ldrh	r2, [r3, #0]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	18d3      	adds	r3, r2, r3
 8005540:	2280      	movs	r2, #128	; 0x80
 8005542:	00d2      	lsls	r2, r2, #3
 8005544:	4694      	mov	ip, r2
 8005546:	4463      	add	r3, ip
 8005548:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	627b      	str	r3, [r7, #36]	; 0x24
 800554e:	e020      	b.n	8005592 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	781a      	ldrb	r2, [r3, #0]
 8005554:	2112      	movs	r1, #18
 8005556:	187b      	adds	r3, r7, r1
 8005558:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	3301      	adds	r3, #1
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	b21a      	sxth	r2, r3
 8005564:	187b      	adds	r3, r7, r1
 8005566:	2000      	movs	r0, #0
 8005568:	5e1b      	ldrsh	r3, [r3, r0]
 800556a:	4313      	orrs	r3, r2
 800556c:	b21a      	sxth	r2, r3
 800556e:	187b      	adds	r3, r7, r1
 8005570:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	187a      	adds	r2, r7, r1
 8005576:	8812      	ldrh	r2, [r2, #0]
 8005578:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	3302      	adds	r3, #2
 800557e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	3301      	adds	r3, #1
 8005584:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	3301      	adds	r3, #1
 800558a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	3b01      	subs	r3, #1
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1db      	bne.n	8005550 <USB_WritePMA+0x40>
  }
}
 8005598:	46c0      	nop			; (mov r8, r8)
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	46bd      	mov	sp, r7
 800559e:	b00a      	add	sp, #40	; 0x28
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b08a      	sub	sp, #40	; 0x28
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	0019      	movs	r1, r3
 80055ae:	1dbb      	adds	r3, r7, #6
 80055b0:	801a      	strh	r2, [r3, #0]
 80055b2:	1d3b      	adds	r3, r7, #4
 80055b4:	1c0a      	adds	r2, r1, #0
 80055b6:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80055b8:	1d3b      	adds	r3, r7, #4
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	085b      	lsrs	r3, r3, #1
 80055be:	b29b      	uxth	r3, r3
 80055c0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055ca:	1dbb      	adds	r3, r7, #6
 80055cc:	881a      	ldrh	r2, [r3, #0]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	18d3      	adds	r3, r2, r3
 80055d2:	2280      	movs	r2, #128	; 0x80
 80055d4:	00d2      	lsls	r2, r2, #3
 80055d6:	4694      	mov	ip, r2
 80055d8:	4463      	add	r3, ip
 80055da:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
 80055e0:	e018      	b.n	8005614 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	3302      	adds	r3, #2
 80055ee:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	3301      	adds	r3, #1
 80055fc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	0a1b      	lsrs	r3, r3, #8
 8005602:	b2da      	uxtb	r2, r3
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	3301      	adds	r3, #1
 800560c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	3b01      	subs	r3, #1
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e3      	bne.n	80055e2 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800561a:	1d3b      	adds	r3, r7, #4
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	2201      	movs	r2, #1
 8005620:	4013      	ands	r3, r2
 8005622:	b29b      	uxth	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d007      	beq.n	8005638 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	b29b      	uxth	r3, r3
 800562e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	b2da      	uxtb	r2, r3
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	701a      	strb	r2, [r3, #0]
  }
}
 8005638:	46c0      	nop			; (mov r8, r8)
 800563a:	46bd      	mov	sp, r7
 800563c:	b00a      	add	sp, #40	; 0x28
 800563e:	bd80      	pop	{r7, pc}

08005640 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	000a      	movs	r2, r1
 800564a:	1cfb      	adds	r3, r7, #3
 800564c:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	2304      	movs	r3, #4
 8005652:	2203      	movs	r2, #3
 8005654:	2181      	movs	r1, #129	; 0x81
 8005656:	f001 fe5a 	bl	800730e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005660:	2010      	movs	r0, #16
 8005662:	f001 ffd7 	bl	8007614 <USBD_static_malloc>
 8005666:	0001      	movs	r1, r0
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	23ae      	movs	r3, #174	; 0xae
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	23ae      	movs	r3, #174	; 0xae
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	58d3      	ldr	r3, [r2, r3]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 800567c:	2302      	movs	r3, #2
 800567e:	e006      	b.n	800568e <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	23ae      	movs	r3, #174	; 0xae
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	58d3      	ldr	r3, [r2, r3]
 8005688:	2200      	movs	r2, #0
 800568a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	0018      	movs	r0, r3
 8005690:	46bd      	mov	sp, r7
 8005692:	b002      	add	sp, #8
 8005694:	bd80      	pop	{r7, pc}

08005696 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	000a      	movs	r2, r1
 80056a0:	1cfb      	adds	r3, r7, #3
 80056a2:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2181      	movs	r1, #129	; 0x81
 80056a8:	0018      	movs	r0, r3
 80056aa:	f001 fe67 	bl	800737c <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	23ae      	movs	r3, #174	; 0xae
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	58d3      	ldr	r3, [r2, r3]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00b      	beq.n	80056d8 <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	23ae      	movs	r3, #174	; 0xae
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	58d3      	ldr	r3, [r2, r3]
 80056c8:	0018      	movs	r0, r3
 80056ca:	f001 ffaf 	bl	800762c <USBD_static_free>
    pdev->pClassData = NULL;
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	23ae      	movs	r3, #174	; 0xae
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	2100      	movs	r1, #0
 80056d6:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	0018      	movs	r0, r3
 80056dc:	46bd      	mov	sp, r7
 80056de:	b002      	add	sp, #8
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	23ae      	movs	r3, #174	; 0xae
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	58d3      	ldr	r3, [r2, r3]
 80056f6:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80056f8:	231e      	movs	r3, #30
 80056fa:	18fb      	adds	r3, r7, r3
 80056fc:	2200      	movs	r2, #0
 80056fe:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8005700:	2300      	movs	r3, #0
 8005702:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005704:	230e      	movs	r3, #14
 8005706:	18fb      	adds	r3, r7, r3
 8005708:	2200      	movs	r2, #0
 800570a:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800570c:	2317      	movs	r3, #23
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	2200      	movs	r2, #0
 8005712:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	001a      	movs	r2, r3
 800571a:	2360      	movs	r3, #96	; 0x60
 800571c:	4013      	ands	r3, r2
 800571e:	d03a      	beq.n	8005796 <USBD_HID_Setup+0xb2>
 8005720:	2b20      	cmp	r3, #32
 8005722:	d000      	beq.n	8005726 <USBD_HID_Setup+0x42>
 8005724:	e0d6      	b.n	80058d4 <USBD_HID_Setup+0x1f0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	785b      	ldrb	r3, [r3, #1]
 800572a:	2b0b      	cmp	r3, #11
 800572c:	d008      	beq.n	8005740 <USBD_HID_Setup+0x5c>
 800572e:	dc26      	bgt.n	800577e <USBD_HID_Setup+0x9a>
 8005730:	2b0a      	cmp	r3, #10
 8005732:	d013      	beq.n	800575c <USBD_HID_Setup+0x78>
 8005734:	dc23      	bgt.n	800577e <USBD_HID_Setup+0x9a>
 8005736:	2b02      	cmp	r3, #2
 8005738:	d019      	beq.n	800576e <USBD_HID_Setup+0x8a>
 800573a:	2b03      	cmp	r3, #3
 800573c:	d007      	beq.n	800574e <USBD_HID_Setup+0x6a>
 800573e:	e01e      	b.n	800577e <USBD_HID_Setup+0x9a>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	885b      	ldrh	r3, [r3, #2]
 8005744:	b2db      	uxtb	r3, r3
 8005746:	001a      	movs	r2, r3
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	601a      	str	r2, [r3, #0]
          break;
 800574c:	e022      	b.n	8005794 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800574e:	6939      	ldr	r1, [r7, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	0018      	movs	r0, r3
 8005756:	f001 fabf 	bl	8006cd8 <USBD_CtlSendData>
          break;
 800575a:	e01b      	b.n	8005794 <USBD_HID_Setup+0xb0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	885b      	ldrh	r3, [r3, #2]
 8005760:	0a1b      	lsrs	r3, r3, #8
 8005762:	b29b      	uxth	r3, r3
 8005764:	b2db      	uxtb	r3, r3
 8005766:	001a      	movs	r2, r3
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	605a      	str	r2, [r3, #4]
          break;
 800576c:	e012      	b.n	8005794 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1d19      	adds	r1, r3, #4
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	0018      	movs	r0, r3
 8005778:	f001 faae 	bl	8006cd8 <USBD_CtlSendData>
          break;
 800577c:	e00a      	b.n	8005794 <USBD_HID_Setup+0xb0>

        default:
          USBD_CtlError(pdev, req);
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	0011      	movs	r1, r2
 8005784:	0018      	movs	r0, r3
 8005786:	f001 fa29 	bl	8006bdc <USBD_CtlError>
          ret = USBD_FAIL;
 800578a:	2317      	movs	r3, #23
 800578c:	18fb      	adds	r3, r7, r3
 800578e:	2202      	movs	r2, #2
 8005790:	701a      	strb	r2, [r3, #0]
          break;
 8005792:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005794:	e0a9      	b.n	80058ea <USBD_HID_Setup+0x206>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	785b      	ldrb	r3, [r3, #1]
 800579a:	2b0b      	cmp	r3, #11
 800579c:	d100      	bne.n	80057a0 <USBD_HID_Setup+0xbc>
 800579e:	e075      	b.n	800588c <USBD_HID_Setup+0x1a8>
 80057a0:	dd00      	ble.n	80057a4 <USBD_HID_Setup+0xc0>
 80057a2:	e08b      	b.n	80058bc <USBD_HID_Setup+0x1d8>
 80057a4:	2b0a      	cmp	r3, #10
 80057a6:	d057      	beq.n	8005858 <USBD_HID_Setup+0x174>
 80057a8:	dd00      	ble.n	80057ac <USBD_HID_Setup+0xc8>
 80057aa:	e087      	b.n	80058bc <USBD_HID_Setup+0x1d8>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <USBD_HID_Setup+0xd2>
 80057b0:	2b06      	cmp	r3, #6
 80057b2:	d019      	beq.n	80057e8 <USBD_HID_Setup+0x104>
 80057b4:	e082      	b.n	80058bc <USBD_HID_Setup+0x1d8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	23a7      	movs	r3, #167	; 0xa7
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	5cd3      	ldrb	r3, [r2, r3]
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d107      	bne.n	80057d2 <USBD_HID_Setup+0xee>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80057c2:	230e      	movs	r3, #14
 80057c4:	18f9      	adds	r1, r7, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2202      	movs	r2, #2
 80057ca:	0018      	movs	r0, r3
 80057cc:	f001 fa84 	bl	8006cd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057d0:	e07f      	b.n	80058d2 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	0011      	movs	r1, r2
 80057d8:	0018      	movs	r0, r3
 80057da:	f001 f9ff 	bl	8006bdc <USBD_CtlError>
            ret = USBD_FAIL;
 80057de:	2317      	movs	r3, #23
 80057e0:	18fb      	adds	r3, r7, r3
 80057e2:	2202      	movs	r2, #2
 80057e4:	701a      	strb	r2, [r3, #0]
          break;
 80057e6:	e074      	b.n	80058d2 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	885b      	ldrh	r3, [r3, #2]
 80057ec:	0a1b      	lsrs	r3, r3, #8
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	2b22      	cmp	r3, #34	; 0x22
 80057f2:	d10b      	bne.n	800580c <USBD_HID_Setup+0x128>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	88db      	ldrh	r3, [r3, #6]
 80057f8:	221e      	movs	r2, #30
 80057fa:	18ba      	adds	r2, r7, r2
 80057fc:	b299      	uxth	r1, r3
 80057fe:	294a      	cmp	r1, #74	; 0x4a
 8005800:	d900      	bls.n	8005804 <USBD_HID_Setup+0x120>
 8005802:	234a      	movs	r3, #74	; 0x4a
 8005804:	8013      	strh	r3, [r2, #0]
            pbuf = HID_MOUSE_ReportDesc;
 8005806:	4b3c      	ldr	r3, [pc, #240]	; (80058f8 <USBD_HID_Setup+0x214>)
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	e01c      	b.n	8005846 <USBD_HID_Setup+0x162>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	885b      	ldrh	r3, [r3, #2]
 8005810:	0a1b      	lsrs	r3, r3, #8
 8005812:	b29b      	uxth	r3, r3
 8005814:	2b21      	cmp	r3, #33	; 0x21
 8005816:	d10b      	bne.n	8005830 <USBD_HID_Setup+0x14c>
          {
            pbuf = USBD_HID_Desc;
 8005818:	4b38      	ldr	r3, [pc, #224]	; (80058fc <USBD_HID_Setup+0x218>)
 800581a:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	88db      	ldrh	r3, [r3, #6]
 8005820:	221e      	movs	r2, #30
 8005822:	18ba      	adds	r2, r7, r2
 8005824:	b299      	uxth	r1, r3
 8005826:	2909      	cmp	r1, #9
 8005828:	d900      	bls.n	800582c <USBD_HID_Setup+0x148>
 800582a:	2309      	movs	r3, #9
 800582c:	8013      	strh	r3, [r2, #0]
 800582e:	e00a      	b.n	8005846 <USBD_HID_Setup+0x162>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	0011      	movs	r1, r2
 8005836:	0018      	movs	r0, r3
 8005838:	f001 f9d0 	bl	8006bdc <USBD_CtlError>
            ret = USBD_FAIL;
 800583c:	2317      	movs	r3, #23
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	2202      	movs	r2, #2
 8005842:	701a      	strb	r2, [r3, #0]
            break;
 8005844:	e045      	b.n	80058d2 <USBD_HID_Setup+0x1ee>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8005846:	231e      	movs	r3, #30
 8005848:	18fb      	adds	r3, r7, r3
 800584a:	881a      	ldrh	r2, [r3, #0]
 800584c:	69b9      	ldr	r1, [r7, #24]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	0018      	movs	r0, r3
 8005852:	f001 fa41 	bl	8006cd8 <USBD_CtlSendData>
          break;
 8005856:	e03c      	b.n	80058d2 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	23a7      	movs	r3, #167	; 0xa7
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	5cd3      	ldrb	r3, [r2, r3]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d108      	bne.n	8005876 <USBD_HID_Setup+0x192>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	3308      	adds	r3, #8
 8005868:	0019      	movs	r1, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	0018      	movs	r0, r3
 8005870:	f001 fa32 	bl	8006cd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005874:	e02d      	b.n	80058d2 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	0011      	movs	r1, r2
 800587c:	0018      	movs	r0, r3
 800587e:	f001 f9ad 	bl	8006bdc <USBD_CtlError>
            ret = USBD_FAIL;
 8005882:	2317      	movs	r3, #23
 8005884:	18fb      	adds	r3, r7, r3
 8005886:	2202      	movs	r2, #2
 8005888:	701a      	strb	r2, [r3, #0]
          break;
 800588a:	e022      	b.n	80058d2 <USBD_HID_Setup+0x1ee>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	23a7      	movs	r3, #167	; 0xa7
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	5cd3      	ldrb	r3, [r2, r3]
 8005894:	2b03      	cmp	r3, #3
 8005896:	d106      	bne.n	80058a6 <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	885b      	ldrh	r3, [r3, #2]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	001a      	movs	r2, r3
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058a4:	e015      	b.n	80058d2 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	0011      	movs	r1, r2
 80058ac:	0018      	movs	r0, r3
 80058ae:	f001 f995 	bl	8006bdc <USBD_CtlError>
            ret = USBD_FAIL;
 80058b2:	2317      	movs	r3, #23
 80058b4:	18fb      	adds	r3, r7, r3
 80058b6:	2202      	movs	r2, #2
 80058b8:	701a      	strb	r2, [r3, #0]
          break;
 80058ba:	e00a      	b.n	80058d2 <USBD_HID_Setup+0x1ee>

        default:
          USBD_CtlError(pdev, req);
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	0011      	movs	r1, r2
 80058c2:	0018      	movs	r0, r3
 80058c4:	f001 f98a 	bl	8006bdc <USBD_CtlError>
          ret = USBD_FAIL;
 80058c8:	2317      	movs	r3, #23
 80058ca:	18fb      	adds	r3, r7, r3
 80058cc:	2202      	movs	r2, #2
 80058ce:	701a      	strb	r2, [r3, #0]
          break;
 80058d0:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80058d2:	e00a      	b.n	80058ea <USBD_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	0011      	movs	r1, r2
 80058da:	0018      	movs	r0, r3
 80058dc:	f001 f97e 	bl	8006bdc <USBD_CtlError>
      ret = USBD_FAIL;
 80058e0:	2317      	movs	r3, #23
 80058e2:	18fb      	adds	r3, r7, r3
 80058e4:	2202      	movs	r2, #2
 80058e6:	701a      	strb	r2, [r3, #0]
      break;
 80058e8:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80058ea:	2317      	movs	r3, #23
 80058ec:	18fb      	adds	r3, r7, r3
 80058ee:	781b      	ldrb	r3, [r3, #0]
}
 80058f0:	0018      	movs	r0, r3
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b008      	add	sp, #32
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	200000c8 	.word	0x200000c8
 80058fc:	200000b0 	.word	0x200000b0

08005900 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	1dbb      	adds	r3, r7, #6
 800590c:	801a      	strh	r2, [r3, #0]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	23ae      	movs	r3, #174	; 0xae
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	58d3      	ldr	r3, [r2, r3]
 8005916:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	23a7      	movs	r3, #167	; 0xa7
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	5cd3      	ldrb	r3, [r2, r3]
 8005920:	2b03      	cmp	r3, #3
 8005922:	d10d      	bne.n	8005940 <USBD_HID_SendReport+0x40>
  {
    if (hhid->state == HID_IDLE)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	7b1b      	ldrb	r3, [r3, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d109      	bne.n	8005940 <USBD_HID_SendReport+0x40>
    {
      hhid->state = HID_BUSY;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2201      	movs	r2, #1
 8005930:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005932:	1dbb      	adds	r3, r7, #6
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	2181      	movs	r1, #129	; 0x81
 800593c:	f001 fdfb 	bl	8007536 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	0018      	movs	r0, r3
 8005944:	46bd      	mov	sp, r7
 8005946:	b006      	add	sp, #24
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2222      	movs	r2, #34	; 0x22
 8005958:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800595a:	4b02      	ldr	r3, [pc, #8]	; (8005964 <USBD_HID_GetFSCfgDesc+0x18>)
}
 800595c:	0018      	movs	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	b002      	add	sp, #8
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20000044 	.word	0x20000044

08005968 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2222      	movs	r2, #34	; 0x22
 8005974:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005976:	4b02      	ldr	r3, [pc, #8]	; (8005980 <USBD_HID_GetHSCfgDesc+0x18>)
}
 8005978:	0018      	movs	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	b002      	add	sp, #8
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20000068 	.word	0x20000068

08005984 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2222      	movs	r2, #34	; 0x22
 8005990:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005992:	4b02      	ldr	r3, [pc, #8]	; (800599c <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8005994:	0018      	movs	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	b002      	add	sp, #8
 800599a:	bd80      	pop	{r7, pc}
 800599c:	2000008c 	.word	0x2000008c

080059a0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	000a      	movs	r2, r1
 80059aa:	1cfb      	adds	r3, r7, #3
 80059ac:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	23ae      	movs	r3, #174	; 0xae
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	58d3      	ldr	r3, [r2, r3]
 80059b6:	2200      	movs	r2, #0
 80059b8:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	0018      	movs	r0, r3
 80059be:	46bd      	mov	sp, r7
 80059c0:	b002      	add	sp, #8
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	220a      	movs	r2, #10
 80059d0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80059d2:	4b02      	ldr	r3, [pc, #8]	; (80059dc <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 80059d4:	0018      	movs	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b002      	add	sp, #8
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	200000bc 	.word	0x200000bc

080059e0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	1dfb      	adds	r3, r7, #7
 80059ec:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80059f4:	2302      	movs	r3, #2
 80059f6:	e020      	b.n	8005a3a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	23ad      	movs	r3, #173	; 0xad
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	58d3      	ldr	r3, [r2, r3]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d004      	beq.n	8005a0e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	23ad      	movs	r3, #173	; 0xad
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d004      	beq.n	8005a1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	23ac      	movs	r3, #172	; 0xac
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	23a7      	movs	r3, #167	; 0xa7
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	2101      	movs	r1, #1
 8005a26:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	1dfa      	adds	r2, r7, #7
 8005a2c:	7812      	ldrb	r2, [r2, #0]
 8005a2e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	0018      	movs	r0, r3
 8005a34:	f001 fbf6 	bl	8007224 <USBD_LL_Init>

  return USBD_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	b004      	add	sp, #16
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005a4c:	200f      	movs	r0, #15
 8005a4e:	183b      	adds	r3, r7, r0
 8005a50:	2200      	movs	r2, #0
 8005a52:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	23ad      	movs	r3, #173	; 0xad
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8005a64:	183b      	adds	r3, r7, r0
 8005a66:	2200      	movs	r2, #0
 8005a68:	701a      	strb	r2, [r3, #0]
 8005a6a:	e003      	b.n	8005a74 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005a6c:	230f      	movs	r3, #15
 8005a6e:	18fb      	adds	r3, r7, r3
 8005a70:	2202      	movs	r2, #2
 8005a72:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005a74:	230f      	movs	r3, #15
 8005a76:	18fb      	adds	r3, r7, r3
 8005a78:	781b      	ldrb	r3, [r3, #0]
}
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	b004      	add	sp, #16
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b082      	sub	sp, #8
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f001 fc19 	bl	80072c4 <USBD_LL_Start>

  return USBD_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	0018      	movs	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	b002      	add	sp, #8
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	b002      	add	sp, #8
 8005aac:	bd80      	pop	{r7, pc}

08005aae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005aae:	b590      	push	{r4, r7, lr}
 8005ab0:	b085      	sub	sp, #20
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	000a      	movs	r2, r1
 8005ab8:	1cfb      	adds	r3, r7, #3
 8005aba:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005abc:	240f      	movs	r4, #15
 8005abe:	193b      	adds	r3, r7, r4
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	23ad      	movs	r3, #173	; 0xad
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	58d3      	ldr	r3, [r2, r3]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00e      	beq.n	8005aee <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	23ad      	movs	r3, #173	; 0xad
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	58d3      	ldr	r3, [r2, r3]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	1cfa      	adds	r2, r7, #3
 8005adc:	7811      	ldrb	r1, [r2, #0]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	0010      	movs	r0, r2
 8005ae2:	4798      	blx	r3
 8005ae4:	1e03      	subs	r3, r0, #0
 8005ae6:	d102      	bne.n	8005aee <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8005ae8:	193b      	adds	r3, r7, r4
 8005aea:	2200      	movs	r2, #0
 8005aec:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8005aee:	230f      	movs	r3, #15
 8005af0:	18fb      	adds	r3, r7, r3
 8005af2:	781b      	ldrb	r3, [r3, #0]
}
 8005af4:	0018      	movs	r0, r3
 8005af6:	46bd      	mov	sp, r7
 8005af8:	b005      	add	sp, #20
 8005afa:	bd90      	pop	{r4, r7, pc}

08005afc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	000a      	movs	r2, r1
 8005b06:	1cfb      	adds	r3, r7, #3
 8005b08:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	23ad      	movs	r3, #173	; 0xad
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	58d3      	ldr	r3, [r2, r3]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	1cfa      	adds	r2, r7, #3
 8005b16:	7811      	ldrb	r1, [r2, #0]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	0010      	movs	r0, r2
 8005b1c:	4798      	blx	r3

  return USBD_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	0018      	movs	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	b002      	add	sp, #8
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	22aa      	movs	r2, #170	; 0xaa
 8005b36:	0092      	lsls	r2, r2, #2
 8005b38:	4694      	mov	ip, r2
 8005b3a:	4463      	add	r3, ip
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	0011      	movs	r1, r2
 8005b40:	0018      	movs	r0, r3
 8005b42:	f001 f810 	bl	8006b66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	23a5      	movs	r3, #165	; 0xa5
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a23      	ldr	r2, [pc, #140]	; (8005be0 <USBD_LL_SetupStage+0xb8>)
 8005b54:	5a9b      	ldrh	r3, [r3, r2]
 8005b56:	0019      	movs	r1, r3
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	23a6      	movs	r3, #166	; 0xa6
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	23aa      	movs	r3, #170	; 0xaa
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	5cd3      	ldrb	r3, [r2, r3]
 8005b68:	001a      	movs	r2, r3
 8005b6a:	231f      	movs	r3, #31
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d019      	beq.n	8005ba6 <USBD_LL_SetupStage+0x7e>
 8005b72:	d822      	bhi.n	8005bba <USBD_LL_SetupStage+0x92>
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <USBD_LL_SetupStage+0x56>
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d00a      	beq.n	8005b92 <USBD_LL_SetupStage+0x6a>
 8005b7c:	e01d      	b.n	8005bba <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	22aa      	movs	r2, #170	; 0xaa
 8005b82:	0092      	lsls	r2, r2, #2
 8005b84:	189a      	adds	r2, r3, r2
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	0011      	movs	r1, r2
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	f000 fa10 	bl	8005fb0 <USBD_StdDevReq>
      break;
 8005b90:	e020      	b.n	8005bd4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	22aa      	movs	r2, #170	; 0xaa
 8005b96:	0092      	lsls	r2, r2, #2
 8005b98:	189a      	adds	r2, r3, r2
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	0011      	movs	r1, r2
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f000 fa78 	bl	8006094 <USBD_StdItfReq>
      break;
 8005ba4:	e016      	b.n	8005bd4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	22aa      	movs	r2, #170	; 0xaa
 8005baa:	0092      	lsls	r2, r2, #2
 8005bac:	189a      	adds	r2, r3, r2
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	0011      	movs	r1, r2
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	f000 fac5 	bl	8006142 <USBD_StdEPReq>
      break;
 8005bb8:	e00c      	b.n	8005bd4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	23aa      	movs	r3, #170	; 0xaa
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	5cd3      	ldrb	r3, [r2, r3]
 8005bc2:	227f      	movs	r2, #127	; 0x7f
 8005bc4:	4393      	bics	r3, r2
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	0011      	movs	r1, r2
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f001 fc00 	bl	80073d2 <USBD_LL_StallEP>
      break;
 8005bd2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	b002      	add	sp, #8
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	000002ae 	.word	0x000002ae

08005be4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	607a      	str	r2, [r7, #4]
 8005bee:	200b      	movs	r0, #11
 8005bf0:	183b      	adds	r3, r7, r0
 8005bf2:	1c0a      	adds	r2, r1, #0
 8005bf4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005bf6:	183b      	adds	r3, r7, r0
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d154      	bne.n	8005ca8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3355      	adds	r3, #85	; 0x55
 8005c02:	33ff      	adds	r3, #255	; 0xff
 8005c04:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	23a5      	movs	r3, #165	; 0xa5
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	58d3      	ldr	r3, [r2, r3]
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d139      	bne.n	8005c86 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d919      	bls.n	8005c52 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	1ad2      	subs	r2, r2, r3
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d203      	bcs.n	8005c40 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	e002      	b.n	8005c46 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	001a      	movs	r2, r3
 8005c4c:	f001 f877 	bl	8006d3e <USBD_CtlContinueRx>
 8005c50:	e045      	b.n	8005cde <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	23ad      	movs	r3, #173	; 0xad
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	58d3      	ldr	r3, [r2, r3]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00d      	beq.n	8005c7c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	23a7      	movs	r3, #167	; 0xa7
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d107      	bne.n	8005c7c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	23ad      	movs	r3, #173	; 0xad
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	58d3      	ldr	r3, [r2, r3]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	0010      	movs	r0, r2
 8005c7a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f001 f870 	bl	8006d64 <USBD_CtlSendStatus>
 8005c84:	e02b      	b.n	8005cde <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	23a5      	movs	r3, #165	; 0xa5
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	58d3      	ldr	r3, [r2, r3]
 8005c8e:	2b05      	cmp	r3, #5
 8005c90:	d125      	bne.n	8005cde <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	23a5      	movs	r3, #165	; 0xa5
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	2100      	movs	r1, #0
 8005c9a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f001 fb96 	bl	80073d2 <USBD_LL_StallEP>
 8005ca6:	e01a      	b.n	8005cde <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	23ad      	movs	r3, #173	; 0xad
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	58d3      	ldr	r3, [r2, r3]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d011      	beq.n	8005cda <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	23a7      	movs	r3, #167	; 0xa7
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d10b      	bne.n	8005cda <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	23ad      	movs	r3, #173	; 0xad
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	58d3      	ldr	r3, [r2, r3]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	220b      	movs	r2, #11
 8005cce:	18ba      	adds	r2, r7, r2
 8005cd0:	7811      	ldrb	r1, [r2, #0]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	0010      	movs	r0, r2
 8005cd6:	4798      	blx	r3
 8005cd8:	e001      	b.n	8005cde <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005cda:	2302      	movs	r3, #2
 8005cdc:	e000      	b.n	8005ce0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	b006      	add	sp, #24
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	607a      	str	r2, [r7, #4]
 8005cf2:	200b      	movs	r0, #11
 8005cf4:	183b      	adds	r3, r7, r0
 8005cf6:	1c0a      	adds	r2, r1, #0
 8005cf8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005cfa:	183b      	adds	r3, r7, r0
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d000      	beq.n	8005d04 <USBD_LL_DataInStage+0x1c>
 8005d02:	e08e      	b.n	8005e22 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3314      	adds	r3, #20
 8005d08:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	23a5      	movs	r3, #165	; 0xa5
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	58d3      	ldr	r3, [r2, r3]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d164      	bne.n	8005de0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d915      	bls.n	8005d4e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	1ad2      	subs	r2, r2, r3
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f000 ffec 	bl	8006d18 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	2300      	movs	r3, #0
 8005d44:	2200      	movs	r2, #0
 8005d46:	2100      	movs	r1, #0
 8005d48:	f001 fc2c 	bl	80075a4 <USBD_LL_PrepareReceive>
 8005d4c:	e059      	b.n	8005e02 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	0019      	movs	r1, r3
 8005d58:	0010      	movs	r0, r2
 8005d5a:	f7fa fa5b 	bl	8000214 <__aeabi_uidivmod>
 8005d5e:	1e0b      	subs	r3, r1, #0
 8005d60:	d11f      	bne.n	8005da2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d319      	bcc.n	8005da2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	68f9      	ldr	r1, [r7, #12]
 8005d74:	23a6      	movs	r3, #166	; 0xa6
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d211      	bcs.n	8005da2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	2100      	movs	r1, #0
 8005d84:	0018      	movs	r0, r3
 8005d86:	f000 ffc7 	bl	8006d18 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	23a6      	movs	r3, #166	; 0xa6
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	2100      	movs	r1, #0
 8005d92:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	2300      	movs	r3, #0
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	f001 fc02 	bl	80075a4 <USBD_LL_PrepareReceive>
 8005da0:	e02f      	b.n	8005e02 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	23ad      	movs	r3, #173	; 0xad
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	58d3      	ldr	r3, [r2, r3]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00d      	beq.n	8005dcc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	23a7      	movs	r3, #167	; 0xa7
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d107      	bne.n	8005dcc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	23ad      	movs	r3, #173	; 0xad
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	58d3      	ldr	r3, [r2, r3]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	0010      	movs	r0, r2
 8005dca:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2180      	movs	r1, #128	; 0x80
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f001 fafe 	bl	80073d2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f000 ffd7 	bl	8006d8c <USBD_CtlReceiveStatus>
 8005dde:	e010      	b.n	8005e02 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	23a5      	movs	r3, #165	; 0xa5
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	58d3      	ldr	r3, [r2, r3]
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d005      	beq.n	8005df8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	23a5      	movs	r3, #165	; 0xa5
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d104      	bne.n	8005e02 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2180      	movs	r1, #128	; 0x80
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f001 fae8 	bl	80073d2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	23a8      	movs	r3, #168	; 0xa8
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	5cd3      	ldrb	r3, [r2, r3]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d124      	bne.n	8005e58 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	0018      	movs	r0, r3
 8005e12:	f7ff fe43 	bl	8005a9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	23a8      	movs	r3, #168	; 0xa8
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	54d1      	strb	r1, [r2, r3]
 8005e20:	e01a      	b.n	8005e58 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	23ad      	movs	r3, #173	; 0xad
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	58d3      	ldr	r3, [r2, r3]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d011      	beq.n	8005e54 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	23a7      	movs	r3, #167	; 0xa7
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d10b      	bne.n	8005e54 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	23ad      	movs	r3, #173	; 0xad
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	58d3      	ldr	r3, [r2, r3]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	220b      	movs	r2, #11
 8005e48:	18ba      	adds	r2, r7, r2
 8005e4a:	7811      	ldrb	r1, [r2, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	0010      	movs	r0, r2
 8005e50:	4798      	blx	r3
 8005e52:	e001      	b.n	8005e58 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e54:	2302      	movs	r3, #2
 8005e56:	e000      	b.n	8005e5a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	b006      	add	sp, #24
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	2340      	movs	r3, #64	; 0x40
 8005e6e:	2200      	movs	r2, #0
 8005e70:	2100      	movs	r1, #0
 8005e72:	f001 fa4c 	bl	800730e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	23ac      	movs	r3, #172	; 0xac
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	23b2      	movs	r3, #178	; 0xb2
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	2140      	movs	r1, #64	; 0x40
 8005e88:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	2340      	movs	r3, #64	; 0x40
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2180      	movs	r1, #128	; 0x80
 8005e92:	f001 fa3c 	bl	800730e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2240      	movs	r2, #64	; 0x40
 8005ea0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	23a7      	movs	r3, #167	; 0xa7
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	23a5      	movs	r3, #165	; 0xa5
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	23a9      	movs	r3, #169	; 0xa9
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	23ae      	movs	r3, #174	; 0xae
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	58d3      	ldr	r3, [r2, r3]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	23ad      	movs	r3, #173	; 0xad
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	58d3      	ldr	r3, [r2, r3]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	b2d9      	uxtb	r1, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	4790      	blx	r2
  }

  return USBD_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	0018      	movs	r0, r3
 8005eec:	46bd      	mov	sp, r7
 8005eee:	b002      	add	sp, #8
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	000a      	movs	r2, r1
 8005efc:	1cfb      	adds	r3, r7, #3
 8005efe:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	1cfa      	adds	r2, r7, #3
 8005f04:	7812      	ldrb	r2, [r2, #0]
 8005f06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	b002      	add	sp, #8
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	23a7      	movs	r3, #167	; 0xa7
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	5cd1      	ldrb	r1, [r2, r3]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a06      	ldr	r2, [pc, #24]	; (8005f40 <USBD_LL_Suspend+0x2c>)
 8005f28:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	23a7      	movs	r3, #167	; 0xa7
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	2104      	movs	r1, #4
 8005f32:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	0018      	movs	r0, r3
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	b002      	add	sp, #8
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	0000029d 	.word	0x0000029d

08005f44 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	23a7      	movs	r3, #167	; 0xa7
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	5cd3      	ldrb	r3, [r2, r3]
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d106      	bne.n	8005f66 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a05      	ldr	r2, [pc, #20]	; (8005f70 <USBD_LL_Resume+0x2c>)
 8005f5c:	5c99      	ldrb	r1, [r3, r2]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	23a7      	movs	r3, #167	; 0xa7
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	0018      	movs	r0, r3
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b002      	add	sp, #8
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	0000029d 	.word	0x0000029d

08005f74 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	23a7      	movs	r3, #167	; 0xa7
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	5cd3      	ldrb	r3, [r2, r3]
 8005f84:	2b03      	cmp	r3, #3
 8005f86:	d10e      	bne.n	8005fa6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	23ad      	movs	r3, #173	; 0xad
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	58d3      	ldr	r3, [r2, r3]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d007      	beq.n	8005fa6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	23ad      	movs	r3, #173	; 0xad
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	58d3      	ldr	r3, [r2, r3]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	0010      	movs	r0, r2
 8005fa4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	0018      	movs	r0, r3
 8005faa:	46bd      	mov	sp, r7
 8005fac:	b002      	add	sp, #8
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fba:	230f      	movs	r3, #15
 8005fbc:	18fb      	adds	r3, r7, r3
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	001a      	movs	r2, r3
 8005fc8:	2360      	movs	r3, #96	; 0x60
 8005fca:	4013      	ands	r3, r2
 8005fcc:	2b40      	cmp	r3, #64	; 0x40
 8005fce:	d004      	beq.n	8005fda <USBD_StdDevReq+0x2a>
 8005fd0:	d84f      	bhi.n	8006072 <USBD_StdDevReq+0xc2>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00b      	beq.n	8005fee <USBD_StdDevReq+0x3e>
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	d14b      	bne.n	8006072 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	23ad      	movs	r3, #173	; 0xad
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	58d3      	ldr	r3, [r2, r3]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	0010      	movs	r0, r2
 8005fea:	4798      	blx	r3
      break;
 8005fec:	e048      	b.n	8006080 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	785b      	ldrb	r3, [r3, #1]
 8005ff2:	2b09      	cmp	r3, #9
 8005ff4:	d835      	bhi.n	8006062 <USBD_StdDevReq+0xb2>
 8005ff6:	009a      	lsls	r2, r3, #2
 8005ff8:	4b25      	ldr	r3, [pc, #148]	; (8006090 <USBD_StdDevReq+0xe0>)
 8005ffa:	18d3      	adds	r3, r2, r3
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	0011      	movs	r1, r2
 8006006:	0018      	movs	r0, r3
 8006008:	f000 fa52 	bl	80064b0 <USBD_GetDescriptor>
          break;
 800600c:	e030      	b.n	8006070 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	0011      	movs	r1, r2
 8006014:	0018      	movs	r0, r3
 8006016:	f000 fbfd 	bl	8006814 <USBD_SetAddress>
          break;
 800601a:	e029      	b.n	8006070 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	0011      	movs	r1, r2
 8006022:	0018      	movs	r0, r3
 8006024:	f000 fc4a 	bl	80068bc <USBD_SetConfig>
          break;
 8006028:	e022      	b.n	8006070 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	0011      	movs	r1, r2
 8006030:	0018      	movs	r0, r3
 8006032:	f000 fce7 	bl	8006a04 <USBD_GetConfig>
          break;
 8006036:	e01b      	b.n	8006070 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	0011      	movs	r1, r2
 800603e:	0018      	movs	r0, r3
 8006040:	f000 fd1b 	bl	8006a7a <USBD_GetStatus>
          break;
 8006044:	e014      	b.n	8006070 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	0011      	movs	r1, r2
 800604c:	0018      	movs	r0, r3
 800604e:	f000 fd4e 	bl	8006aee <USBD_SetFeature>
          break;
 8006052:	e00d      	b.n	8006070 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	0011      	movs	r1, r2
 800605a:	0018      	movs	r0, r3
 800605c:	f000 fd5d 	bl	8006b1a <USBD_ClrFeature>
          break;
 8006060:	e006      	b.n	8006070 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	0011      	movs	r1, r2
 8006068:	0018      	movs	r0, r3
 800606a:	f000 fdb7 	bl	8006bdc <USBD_CtlError>
          break;
 800606e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006070:	e006      	b.n	8006080 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	0011      	movs	r1, r2
 8006078:	0018      	movs	r0, r3
 800607a:	f000 fdaf 	bl	8006bdc <USBD_CtlError>
      break;
 800607e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006080:	230f      	movs	r3, #15
 8006082:	18fb      	adds	r3, r7, r3
 8006084:	781b      	ldrb	r3, [r3, #0]
}
 8006086:	0018      	movs	r0, r3
 8006088:	46bd      	mov	sp, r7
 800608a:	b004      	add	sp, #16
 800608c:	bd80      	pop	{r7, pc}
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	0800778c 	.word	0x0800778c

08006094 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006094:	b5b0      	push	{r4, r5, r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800609e:	230f      	movs	r3, #15
 80060a0:	18fb      	adds	r3, r7, r3
 80060a2:	2200      	movs	r2, #0
 80060a4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	001a      	movs	r2, r3
 80060ac:	2360      	movs	r3, #96	; 0x60
 80060ae:	4013      	ands	r3, r2
 80060b0:	2b40      	cmp	r3, #64	; 0x40
 80060b2:	d004      	beq.n	80060be <USBD_StdItfReq+0x2a>
 80060b4:	d839      	bhi.n	800612a <USBD_StdItfReq+0x96>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <USBD_StdItfReq+0x2a>
 80060ba:	2b20      	cmp	r3, #32
 80060bc:	d135      	bne.n	800612a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	23a7      	movs	r3, #167	; 0xa7
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	5cd3      	ldrb	r3, [r2, r3]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d825      	bhi.n	8006118 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	889b      	ldrh	r3, [r3, #4]
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d819      	bhi.n	800610a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	23ad      	movs	r3, #173	; 0xad
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	58d3      	ldr	r3, [r2, r3]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	250f      	movs	r5, #15
 80060e2:	197c      	adds	r4, r7, r5
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	0010      	movs	r0, r2
 80060ea:	4798      	blx	r3
 80060ec:	0003      	movs	r3, r0
 80060ee:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	88db      	ldrh	r3, [r3, #6]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d116      	bne.n	8006126 <USBD_StdItfReq+0x92>
 80060f8:	197b      	adds	r3, r7, r5
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d112      	bne.n	8006126 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	0018      	movs	r0, r3
 8006104:	f000 fe2e 	bl	8006d64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006108:	e00d      	b.n	8006126 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	0011      	movs	r1, r2
 8006110:	0018      	movs	r0, r3
 8006112:	f000 fd63 	bl	8006bdc <USBD_CtlError>
          break;
 8006116:	e006      	b.n	8006126 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	0011      	movs	r1, r2
 800611e:	0018      	movs	r0, r3
 8006120:	f000 fd5c 	bl	8006bdc <USBD_CtlError>
          break;
 8006124:	e000      	b.n	8006128 <USBD_StdItfReq+0x94>
          break;
 8006126:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006128:	e006      	b.n	8006138 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	0011      	movs	r1, r2
 8006130:	0018      	movs	r0, r3
 8006132:	f000 fd53 	bl	8006bdc <USBD_CtlError>
      break;
 8006136:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	0018      	movs	r0, r3
 800613c:	46bd      	mov	sp, r7
 800613e:	b004      	add	sp, #16
 8006140:	bdb0      	pop	{r4, r5, r7, pc}

08006142 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006142:	b5b0      	push	{r4, r5, r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800614c:	230f      	movs	r3, #15
 800614e:	18fb      	adds	r3, r7, r3
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	889a      	ldrh	r2, [r3, #4]
 8006158:	230e      	movs	r3, #14
 800615a:	18fb      	adds	r3, r7, r3
 800615c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	001a      	movs	r2, r3
 8006164:	2360      	movs	r3, #96	; 0x60
 8006166:	4013      	ands	r3, r2
 8006168:	2b40      	cmp	r3, #64	; 0x40
 800616a:	d006      	beq.n	800617a <USBD_StdEPReq+0x38>
 800616c:	d900      	bls.n	8006170 <USBD_StdEPReq+0x2e>
 800616e:	e190      	b.n	8006492 <USBD_StdEPReq+0x350>
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00c      	beq.n	800618e <USBD_StdEPReq+0x4c>
 8006174:	2b20      	cmp	r3, #32
 8006176:	d000      	beq.n	800617a <USBD_StdEPReq+0x38>
 8006178:	e18b      	b.n	8006492 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	23ad      	movs	r3, #173	; 0xad
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	58d3      	ldr	r3, [r2, r3]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	0010      	movs	r0, r2
 800618a:	4798      	blx	r3
      break;
 800618c:	e188      	b.n	80064a0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	001a      	movs	r2, r3
 8006194:	2360      	movs	r3, #96	; 0x60
 8006196:	4013      	ands	r3, r2
 8006198:	2b20      	cmp	r3, #32
 800619a:	d10f      	bne.n	80061bc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	23ad      	movs	r3, #173	; 0xad
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	58d3      	ldr	r3, [r2, r3]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	250f      	movs	r5, #15
 80061a8:	197c      	adds	r4, r7, r5
 80061aa:	6839      	ldr	r1, [r7, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	0010      	movs	r0, r2
 80061b0:	4798      	blx	r3
 80061b2:	0003      	movs	r3, r0
 80061b4:	7023      	strb	r3, [r4, #0]

        return ret;
 80061b6:	197b      	adds	r3, r7, r5
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	e174      	b.n	80064a6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	785b      	ldrb	r3, [r3, #1]
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d007      	beq.n	80061d4 <USBD_StdEPReq+0x92>
 80061c4:	dd00      	ble.n	80061c8 <USBD_StdEPReq+0x86>
 80061c6:	e15c      	b.n	8006482 <USBD_StdEPReq+0x340>
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d100      	bne.n	80061ce <USBD_StdEPReq+0x8c>
 80061cc:	e092      	b.n	80062f4 <USBD_StdEPReq+0x1b2>
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d04b      	beq.n	800626a <USBD_StdEPReq+0x128>
 80061d2:	e156      	b.n	8006482 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	23a7      	movs	r3, #167	; 0xa7
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	5cd3      	ldrb	r3, [r2, r3]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d002      	beq.n	80061e6 <USBD_StdEPReq+0xa4>
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	d01d      	beq.n	8006220 <USBD_StdEPReq+0xde>
 80061e4:	e039      	b.n	800625a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061e6:	220e      	movs	r2, #14
 80061e8:	18bb      	adds	r3, r7, r2
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d010      	beq.n	8006212 <USBD_StdEPReq+0xd0>
 80061f0:	18bb      	adds	r3, r7, r2
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	2b80      	cmp	r3, #128	; 0x80
 80061f6:	d00c      	beq.n	8006212 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80061f8:	18bb      	adds	r3, r7, r2
 80061fa:	781a      	ldrb	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	0011      	movs	r1, r2
 8006200:	0018      	movs	r0, r3
 8006202:	f001 f8e6 	bl	80073d2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2180      	movs	r1, #128	; 0x80
 800620a:	0018      	movs	r0, r3
 800620c:	f001 f8e1 	bl	80073d2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006210:	e02a      	b.n	8006268 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	0011      	movs	r1, r2
 8006218:	0018      	movs	r0, r3
 800621a:	f000 fcdf 	bl	8006bdc <USBD_CtlError>
              break;
 800621e:	e023      	b.n	8006268 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	885b      	ldrh	r3, [r3, #2]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d113      	bne.n	8006250 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006228:	220e      	movs	r2, #14
 800622a:	18bb      	adds	r3, r7, r2
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00e      	beq.n	8006250 <USBD_StdEPReq+0x10e>
 8006232:	18bb      	adds	r3, r7, r2
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b80      	cmp	r3, #128	; 0x80
 8006238:	d00a      	beq.n	8006250 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	88db      	ldrh	r3, [r3, #6]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006242:	18bb      	adds	r3, r7, r2
 8006244:	781a      	ldrb	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	0011      	movs	r1, r2
 800624a:	0018      	movs	r0, r3
 800624c:	f001 f8c1 	bl	80073d2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	0018      	movs	r0, r3
 8006254:	f000 fd86 	bl	8006d64 <USBD_CtlSendStatus>

              break;
 8006258:	e006      	b.n	8006268 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	0011      	movs	r1, r2
 8006260:	0018      	movs	r0, r3
 8006262:	f000 fcbb 	bl	8006bdc <USBD_CtlError>
              break;
 8006266:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006268:	e112      	b.n	8006490 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	23a7      	movs	r3, #167	; 0xa7
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	5cd3      	ldrb	r3, [r2, r3]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d002      	beq.n	800627c <USBD_StdEPReq+0x13a>
 8006276:	2b03      	cmp	r3, #3
 8006278:	d01d      	beq.n	80062b6 <USBD_StdEPReq+0x174>
 800627a:	e032      	b.n	80062e2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800627c:	220e      	movs	r2, #14
 800627e:	18bb      	adds	r3, r7, r2
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d010      	beq.n	80062a8 <USBD_StdEPReq+0x166>
 8006286:	18bb      	adds	r3, r7, r2
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	2b80      	cmp	r3, #128	; 0x80
 800628c:	d00c      	beq.n	80062a8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800628e:	18bb      	adds	r3, r7, r2
 8006290:	781a      	ldrb	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	0011      	movs	r1, r2
 8006296:	0018      	movs	r0, r3
 8006298:	f001 f89b 	bl	80073d2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2180      	movs	r1, #128	; 0x80
 80062a0:	0018      	movs	r0, r3
 80062a2:	f001 f896 	bl	80073d2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062a6:	e024      	b.n	80062f2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	0011      	movs	r1, r2
 80062ae:	0018      	movs	r0, r3
 80062b0:	f000 fc94 	bl	8006bdc <USBD_CtlError>
              break;
 80062b4:	e01d      	b.n	80062f2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	885b      	ldrh	r3, [r3, #2]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d118      	bne.n	80062f0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80062be:	210e      	movs	r1, #14
 80062c0:	187b      	adds	r3, r7, r1
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	227f      	movs	r2, #127	; 0x7f
 80062c6:	4013      	ands	r3, r2
 80062c8:	d006      	beq.n	80062d8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80062ca:	187b      	adds	r3, r7, r1
 80062cc:	781a      	ldrb	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	0011      	movs	r1, r2
 80062d2:	0018      	movs	r0, r3
 80062d4:	f001 f8a8 	bl	8007428 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	0018      	movs	r0, r3
 80062dc:	f000 fd42 	bl	8006d64 <USBD_CtlSendStatus>
              }
              break;
 80062e0:	e006      	b.n	80062f0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	0011      	movs	r1, r2
 80062e8:	0018      	movs	r0, r3
 80062ea:	f000 fc77 	bl	8006bdc <USBD_CtlError>
              break;
 80062ee:	e000      	b.n	80062f2 <USBD_StdEPReq+0x1b0>
              break;
 80062f0:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80062f2:	e0cd      	b.n	8006490 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	23a7      	movs	r3, #167	; 0xa7
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	5cd3      	ldrb	r3, [r2, r3]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d002      	beq.n	8006306 <USBD_StdEPReq+0x1c4>
 8006300:	2b03      	cmp	r3, #3
 8006302:	d03c      	beq.n	800637e <USBD_StdEPReq+0x23c>
 8006304:	e0b5      	b.n	8006472 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006306:	220e      	movs	r2, #14
 8006308:	18bb      	adds	r3, r7, r2
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00a      	beq.n	8006326 <USBD_StdEPReq+0x1e4>
 8006310:	18bb      	adds	r3, r7, r2
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b80      	cmp	r3, #128	; 0x80
 8006316:	d006      	beq.n	8006326 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	0011      	movs	r1, r2
 800631e:	0018      	movs	r0, r3
 8006320:	f000 fc5c 	bl	8006bdc <USBD_CtlError>
                break;
 8006324:	e0ac      	b.n	8006480 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006326:	220e      	movs	r2, #14
 8006328:	18bb      	adds	r3, r7, r2
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	b25b      	sxtb	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	da0c      	bge.n	800634c <USBD_StdEPReq+0x20a>
 8006332:	18bb      	adds	r3, r7, r2
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	227f      	movs	r2, #127	; 0x7f
 8006338:	401a      	ands	r2, r3
 800633a:	0013      	movs	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	189b      	adds	r3, r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	3310      	adds	r3, #16
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	18d3      	adds	r3, r2, r3
 8006348:	3304      	adds	r3, #4
 800634a:	e00d      	b.n	8006368 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800634c:	230e      	movs	r3, #14
 800634e:	18fb      	adds	r3, r7, r3
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	227f      	movs	r2, #127	; 0x7f
 8006354:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006356:	0013      	movs	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	189b      	adds	r3, r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	3351      	adds	r3, #81	; 0x51
 8006360:	33ff      	adds	r3, #255	; 0xff
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	18d3      	adds	r3, r2, r3
 8006366:	3304      	adds	r3, #4
 8006368:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	0018      	movs	r0, r3
 8006378:	f000 fcae 	bl	8006cd8 <USBD_CtlSendData>
              break;
 800637c:	e080      	b.n	8006480 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800637e:	220e      	movs	r2, #14
 8006380:	18bb      	adds	r3, r7, r2
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	b25b      	sxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	da14      	bge.n	80063b4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800638a:	18bb      	adds	r3, r7, r2
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	220f      	movs	r2, #15
 8006390:	401a      	ands	r2, r3
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	0013      	movs	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	189b      	adds	r3, r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	18cb      	adds	r3, r1, r3
 800639e:	3318      	adds	r3, #24
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d11e      	bne.n	80063e4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	0011      	movs	r1, r2
 80063ac:	0018      	movs	r0, r3
 80063ae:	f000 fc15 	bl	8006bdc <USBD_CtlError>
                  break;
 80063b2:	e065      	b.n	8006480 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80063b4:	230e      	movs	r3, #14
 80063b6:	18fb      	adds	r3, r7, r3
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	220f      	movs	r2, #15
 80063bc:	401a      	ands	r2, r3
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	23ac      	movs	r3, #172	; 0xac
 80063c2:	0059      	lsls	r1, r3, #1
 80063c4:	0013      	movs	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	189b      	adds	r3, r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	18c3      	adds	r3, r0, r3
 80063ce:	185b      	adds	r3, r3, r1
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	0011      	movs	r1, r2
 80063dc:	0018      	movs	r0, r3
 80063de:	f000 fbfd 	bl	8006bdc <USBD_CtlError>
                  break;
 80063e2:	e04d      	b.n	8006480 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063e4:	220e      	movs	r2, #14
 80063e6:	18bb      	adds	r3, r7, r2
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	b25b      	sxtb	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	da0c      	bge.n	800640a <USBD_StdEPReq+0x2c8>
 80063f0:	18bb      	adds	r3, r7, r2
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	227f      	movs	r2, #127	; 0x7f
 80063f6:	401a      	ands	r2, r3
 80063f8:	0013      	movs	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	189b      	adds	r3, r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	3310      	adds	r3, #16
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	18d3      	adds	r3, r2, r3
 8006406:	3304      	adds	r3, #4
 8006408:	e00d      	b.n	8006426 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800640a:	230e      	movs	r3, #14
 800640c:	18fb      	adds	r3, r7, r3
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	227f      	movs	r2, #127	; 0x7f
 8006412:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006414:	0013      	movs	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	189b      	adds	r3, r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	3351      	adds	r3, #81	; 0x51
 800641e:	33ff      	adds	r3, #255	; 0xff
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	18d3      	adds	r3, r2, r3
 8006424:	3304      	adds	r3, #4
 8006426:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006428:	220e      	movs	r2, #14
 800642a:	18bb      	adds	r3, r7, r2
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <USBD_StdEPReq+0x2f8>
 8006432:	18bb      	adds	r3, r7, r2
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b80      	cmp	r3, #128	; 0x80
 8006438:	d103      	bne.n	8006442 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	e010      	b.n	8006464 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006442:	230e      	movs	r3, #14
 8006444:	18fb      	adds	r3, r7, r3
 8006446:	781a      	ldrb	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	0011      	movs	r1, r2
 800644c:	0018      	movs	r0, r3
 800644e:	f001 f816 	bl	800747e <USBD_LL_IsStallEP>
 8006452:	1e03      	subs	r3, r0, #0
 8006454:	d003      	beq.n	800645e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2201      	movs	r2, #1
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	e002      	b.n	8006464 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006464:	68b9      	ldr	r1, [r7, #8]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2202      	movs	r2, #2
 800646a:	0018      	movs	r0, r3
 800646c:	f000 fc34 	bl	8006cd8 <USBD_CtlSendData>
              break;
 8006470:	e006      	b.n	8006480 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	0011      	movs	r1, r2
 8006478:	0018      	movs	r0, r3
 800647a:	f000 fbaf 	bl	8006bdc <USBD_CtlError>
              break;
 800647e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006480:	e006      	b.n	8006490 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	0011      	movs	r1, r2
 8006488:	0018      	movs	r0, r3
 800648a:	f000 fba7 	bl	8006bdc <USBD_CtlError>
          break;
 800648e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006490:	e006      	b.n	80064a0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	0011      	movs	r1, r2
 8006498:	0018      	movs	r0, r3
 800649a:	f000 fb9f 	bl	8006bdc <USBD_CtlError>
      break;
 800649e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80064a0:	230f      	movs	r3, #15
 80064a2:	18fb      	adds	r3, r7, r3
 80064a4:	781b      	ldrb	r3, [r3, #0]
}
 80064a6:	0018      	movs	r0, r3
 80064a8:	46bd      	mov	sp, r7
 80064aa:	b004      	add	sp, #16
 80064ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080064b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064ba:	2308      	movs	r3, #8
 80064bc:	18fb      	adds	r3, r7, r3
 80064be:	2200      	movs	r2, #0
 80064c0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80064c6:	230b      	movs	r3, #11
 80064c8:	18fb      	adds	r3, r7, r3
 80064ca:	2200      	movs	r2, #0
 80064cc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	885b      	ldrh	r3, [r3, #2]
 80064d2:	0a1b      	lsrs	r3, r3, #8
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2b07      	cmp	r3, #7
 80064d8:	d900      	bls.n	80064dc <USBD_GetDescriptor+0x2c>
 80064da:	e159      	b.n	8006790 <USBD_GetDescriptor+0x2e0>
 80064dc:	009a      	lsls	r2, r3, #2
 80064de:	4bcb      	ldr	r3, [pc, #812]	; (800680c <USBD_GetDescriptor+0x35c>)
 80064e0:	18d3      	adds	r3, r2, r3
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	23ac      	movs	r3, #172	; 0xac
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	58d3      	ldr	r3, [r2, r3]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	7c12      	ldrb	r2, [r2, #16]
 80064f4:	2108      	movs	r1, #8
 80064f6:	1879      	adds	r1, r7, r1
 80064f8:	0010      	movs	r0, r2
 80064fa:	4798      	blx	r3
 80064fc:	0003      	movs	r3, r0
 80064fe:	60fb      	str	r3, [r7, #12]
      break;
 8006500:	e153      	b.n	80067aa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	7c1b      	ldrb	r3, [r3, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10f      	bne.n	800652a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	23ad      	movs	r3, #173	; 0xad
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	58d3      	ldr	r3, [r2, r3]
 8006512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006514:	2208      	movs	r2, #8
 8006516:	18ba      	adds	r2, r7, r2
 8006518:	0010      	movs	r0, r2
 800651a:	4798      	blx	r3
 800651c:	0003      	movs	r3, r0
 800651e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3301      	adds	r3, #1
 8006524:	2202      	movs	r2, #2
 8006526:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006528:	e13f      	b.n	80067aa <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	23ad      	movs	r3, #173	; 0xad
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	58d3      	ldr	r3, [r2, r3]
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	2208      	movs	r2, #8
 8006536:	18ba      	adds	r2, r7, r2
 8006538:	0010      	movs	r0, r2
 800653a:	4798      	blx	r3
 800653c:	0003      	movs	r3, r0
 800653e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3301      	adds	r3, #1
 8006544:	2202      	movs	r2, #2
 8006546:	701a      	strb	r2, [r3, #0]
      break;
 8006548:	e12f      	b.n	80067aa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	885b      	ldrh	r3, [r3, #2]
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b05      	cmp	r3, #5
 8006552:	d900      	bls.n	8006556 <USBD_GetDescriptor+0xa6>
 8006554:	e0d0      	b.n	80066f8 <USBD_GetDescriptor+0x248>
 8006556:	009a      	lsls	r2, r3, #2
 8006558:	4bad      	ldr	r3, [pc, #692]	; (8006810 <USBD_GetDescriptor+0x360>)
 800655a:	18d3      	adds	r3, r2, r3
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	23ac      	movs	r3, #172	; 0xac
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	58d3      	ldr	r3, [r2, r3]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00d      	beq.n	800658a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	23ac      	movs	r3, #172	; 0xac
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	58d3      	ldr	r3, [r2, r3]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	7c12      	ldrb	r2, [r2, #16]
 800657c:	2108      	movs	r1, #8
 800657e:	1879      	adds	r1, r7, r1
 8006580:	0010      	movs	r0, r2
 8006582:	4798      	blx	r3
 8006584:	0003      	movs	r3, r0
 8006586:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006588:	e0c3      	b.n	8006712 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	0011      	movs	r1, r2
 8006590:	0018      	movs	r0, r3
 8006592:	f000 fb23 	bl	8006bdc <USBD_CtlError>
            err++;
 8006596:	210b      	movs	r1, #11
 8006598:	187b      	adds	r3, r7, r1
 800659a:	781a      	ldrb	r2, [r3, #0]
 800659c:	187b      	adds	r3, r7, r1
 800659e:	3201      	adds	r2, #1
 80065a0:	701a      	strb	r2, [r3, #0]
          break;
 80065a2:	e0b6      	b.n	8006712 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	23ac      	movs	r3, #172	; 0xac
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	58d3      	ldr	r3, [r2, r3]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00d      	beq.n	80065ce <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	23ac      	movs	r3, #172	; 0xac
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	58d3      	ldr	r3, [r2, r3]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	7c12      	ldrb	r2, [r2, #16]
 80065c0:	2108      	movs	r1, #8
 80065c2:	1879      	adds	r1, r7, r1
 80065c4:	0010      	movs	r0, r2
 80065c6:	4798      	blx	r3
 80065c8:	0003      	movs	r3, r0
 80065ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065cc:	e0a1      	b.n	8006712 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	0011      	movs	r1, r2
 80065d4:	0018      	movs	r0, r3
 80065d6:	f000 fb01 	bl	8006bdc <USBD_CtlError>
            err++;
 80065da:	210b      	movs	r1, #11
 80065dc:	187b      	adds	r3, r7, r1
 80065de:	781a      	ldrb	r2, [r3, #0]
 80065e0:	187b      	adds	r3, r7, r1
 80065e2:	3201      	adds	r2, #1
 80065e4:	701a      	strb	r2, [r3, #0]
          break;
 80065e6:	e094      	b.n	8006712 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	23ac      	movs	r3, #172	; 0xac
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	58d3      	ldr	r3, [r2, r3]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00d      	beq.n	8006612 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	23ac      	movs	r3, #172	; 0xac
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	58d3      	ldr	r3, [r2, r3]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	7c12      	ldrb	r2, [r2, #16]
 8006604:	2108      	movs	r1, #8
 8006606:	1879      	adds	r1, r7, r1
 8006608:	0010      	movs	r0, r2
 800660a:	4798      	blx	r3
 800660c:	0003      	movs	r3, r0
 800660e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006610:	e07f      	b.n	8006712 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	0011      	movs	r1, r2
 8006618:	0018      	movs	r0, r3
 800661a:	f000 fadf 	bl	8006bdc <USBD_CtlError>
            err++;
 800661e:	210b      	movs	r1, #11
 8006620:	187b      	adds	r3, r7, r1
 8006622:	781a      	ldrb	r2, [r3, #0]
 8006624:	187b      	adds	r3, r7, r1
 8006626:	3201      	adds	r2, #1
 8006628:	701a      	strb	r2, [r3, #0]
          break;
 800662a:	e072      	b.n	8006712 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	23ac      	movs	r3, #172	; 0xac
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	58d3      	ldr	r3, [r2, r3]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00d      	beq.n	8006656 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	23ac      	movs	r3, #172	; 0xac
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	58d3      	ldr	r3, [r2, r3]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	7c12      	ldrb	r2, [r2, #16]
 8006648:	2108      	movs	r1, #8
 800664a:	1879      	adds	r1, r7, r1
 800664c:	0010      	movs	r0, r2
 800664e:	4798      	blx	r3
 8006650:	0003      	movs	r3, r0
 8006652:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006654:	e05d      	b.n	8006712 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	0011      	movs	r1, r2
 800665c:	0018      	movs	r0, r3
 800665e:	f000 fabd 	bl	8006bdc <USBD_CtlError>
            err++;
 8006662:	210b      	movs	r1, #11
 8006664:	187b      	adds	r3, r7, r1
 8006666:	781a      	ldrb	r2, [r3, #0]
 8006668:	187b      	adds	r3, r7, r1
 800666a:	3201      	adds	r2, #1
 800666c:	701a      	strb	r2, [r3, #0]
          break;
 800666e:	e050      	b.n	8006712 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	23ac      	movs	r3, #172	; 0xac
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	58d3      	ldr	r3, [r2, r3]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00d      	beq.n	800669a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	23ac      	movs	r3, #172	; 0xac
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	58d3      	ldr	r3, [r2, r3]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	7c12      	ldrb	r2, [r2, #16]
 800668c:	2108      	movs	r1, #8
 800668e:	1879      	adds	r1, r7, r1
 8006690:	0010      	movs	r0, r2
 8006692:	4798      	blx	r3
 8006694:	0003      	movs	r3, r0
 8006696:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006698:	e03b      	b.n	8006712 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	0011      	movs	r1, r2
 80066a0:	0018      	movs	r0, r3
 80066a2:	f000 fa9b 	bl	8006bdc <USBD_CtlError>
            err++;
 80066a6:	210b      	movs	r1, #11
 80066a8:	187b      	adds	r3, r7, r1
 80066aa:	781a      	ldrb	r2, [r3, #0]
 80066ac:	187b      	adds	r3, r7, r1
 80066ae:	3201      	adds	r2, #1
 80066b0:	701a      	strb	r2, [r3, #0]
          break;
 80066b2:	e02e      	b.n	8006712 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	23ac      	movs	r3, #172	; 0xac
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	58d3      	ldr	r3, [r2, r3]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00d      	beq.n	80066de <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	23ac      	movs	r3, #172	; 0xac
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	58d3      	ldr	r3, [r2, r3]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	7c12      	ldrb	r2, [r2, #16]
 80066d0:	2108      	movs	r1, #8
 80066d2:	1879      	adds	r1, r7, r1
 80066d4:	0010      	movs	r0, r2
 80066d6:	4798      	blx	r3
 80066d8:	0003      	movs	r3, r0
 80066da:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066dc:	e019      	b.n	8006712 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	0011      	movs	r1, r2
 80066e4:	0018      	movs	r0, r3
 80066e6:	f000 fa79 	bl	8006bdc <USBD_CtlError>
            err++;
 80066ea:	210b      	movs	r1, #11
 80066ec:	187b      	adds	r3, r7, r1
 80066ee:	781a      	ldrb	r2, [r3, #0]
 80066f0:	187b      	adds	r3, r7, r1
 80066f2:	3201      	adds	r2, #1
 80066f4:	701a      	strb	r2, [r3, #0]
          break;
 80066f6:	e00c      	b.n	8006712 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	0011      	movs	r1, r2
 80066fe:	0018      	movs	r0, r3
 8006700:	f000 fa6c 	bl	8006bdc <USBD_CtlError>
          err++;
 8006704:	210b      	movs	r1, #11
 8006706:	187b      	adds	r3, r7, r1
 8006708:	781a      	ldrb	r2, [r3, #0]
 800670a:	187b      	adds	r3, r7, r1
 800670c:	3201      	adds	r2, #1
 800670e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006710:	e04b      	b.n	80067aa <USBD_GetDescriptor+0x2fa>
 8006712:	e04a      	b.n	80067aa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	7c1b      	ldrb	r3, [r3, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10b      	bne.n	8006734 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	23ad      	movs	r3, #173	; 0xad
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	58d3      	ldr	r3, [r2, r3]
 8006724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006726:	2208      	movs	r2, #8
 8006728:	18ba      	adds	r2, r7, r2
 800672a:	0010      	movs	r0, r2
 800672c:	4798      	blx	r3
 800672e:	0003      	movs	r3, r0
 8006730:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006732:	e03a      	b.n	80067aa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	0011      	movs	r1, r2
 800673a:	0018      	movs	r0, r3
 800673c:	f000 fa4e 	bl	8006bdc <USBD_CtlError>
        err++;
 8006740:	210b      	movs	r1, #11
 8006742:	187b      	adds	r3, r7, r1
 8006744:	781a      	ldrb	r2, [r3, #0]
 8006746:	187b      	adds	r3, r7, r1
 8006748:	3201      	adds	r2, #1
 800674a:	701a      	strb	r2, [r3, #0]
      break;
 800674c:	e02d      	b.n	80067aa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	7c1b      	ldrb	r3, [r3, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10f      	bne.n	8006776 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	23ad      	movs	r3, #173	; 0xad
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	58d3      	ldr	r3, [r2, r3]
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	2208      	movs	r2, #8
 8006762:	18ba      	adds	r2, r7, r2
 8006764:	0010      	movs	r0, r2
 8006766:	4798      	blx	r3
 8006768:	0003      	movs	r3, r0
 800676a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3301      	adds	r3, #1
 8006770:	2207      	movs	r2, #7
 8006772:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006774:	e019      	b.n	80067aa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	0011      	movs	r1, r2
 800677c:	0018      	movs	r0, r3
 800677e:	f000 fa2d 	bl	8006bdc <USBD_CtlError>
        err++;
 8006782:	210b      	movs	r1, #11
 8006784:	187b      	adds	r3, r7, r1
 8006786:	781a      	ldrb	r2, [r3, #0]
 8006788:	187b      	adds	r3, r7, r1
 800678a:	3201      	adds	r2, #1
 800678c:	701a      	strb	r2, [r3, #0]
      break;
 800678e:	e00c      	b.n	80067aa <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	0011      	movs	r1, r2
 8006796:	0018      	movs	r0, r3
 8006798:	f000 fa20 	bl	8006bdc <USBD_CtlError>
      err++;
 800679c:	210b      	movs	r1, #11
 800679e:	187b      	adds	r3, r7, r1
 80067a0:	781a      	ldrb	r2, [r3, #0]
 80067a2:	187b      	adds	r3, r7, r1
 80067a4:	3201      	adds	r2, #1
 80067a6:	701a      	strb	r2, [r3, #0]
      break;
 80067a8:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 80067aa:	230b      	movs	r3, #11
 80067ac:	18fb      	adds	r3, r7, r3
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d127      	bne.n	8006804 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80067b4:	2108      	movs	r1, #8
 80067b6:	187b      	adds	r3, r7, r1
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d019      	beq.n	80067f2 <USBD_GetDescriptor+0x342>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	88db      	ldrh	r3, [r3, #6]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d015      	beq.n	80067f2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	88da      	ldrh	r2, [r3, #6]
 80067ca:	187b      	adds	r3, r7, r1
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	1c18      	adds	r0, r3, #0
 80067d0:	1c11      	adds	r1, r2, #0
 80067d2:	b28a      	uxth	r2, r1
 80067d4:	b283      	uxth	r3, r0
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d900      	bls.n	80067dc <USBD_GetDescriptor+0x32c>
 80067da:	1c01      	adds	r1, r0, #0
 80067dc:	b28a      	uxth	r2, r1
 80067de:	2108      	movs	r1, #8
 80067e0:	187b      	adds	r3, r7, r1
 80067e2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80067e4:	187b      	adds	r3, r7, r1
 80067e6:	881a      	ldrh	r2, [r3, #0]
 80067e8:	68f9      	ldr	r1, [r7, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	0018      	movs	r0, r3
 80067ee:	f000 fa73 	bl	8006cd8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	88db      	ldrh	r3, [r3, #6]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d105      	bne.n	8006806 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	0018      	movs	r0, r3
 80067fe:	f000 fab1 	bl	8006d64 <USBD_CtlSendStatus>
 8006802:	e000      	b.n	8006806 <USBD_GetDescriptor+0x356>
    return;
 8006804:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006806:	46bd      	mov	sp, r7
 8006808:	b004      	add	sp, #16
 800680a:	bd80      	pop	{r7, pc}
 800680c:	080077b4 	.word	0x080077b4
 8006810:	080077d4 	.word	0x080077d4

08006814 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006814:	b590      	push	{r4, r7, lr}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	889b      	ldrh	r3, [r3, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d13d      	bne.n	80068a2 <USBD_SetAddress+0x8e>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	88db      	ldrh	r3, [r3, #6]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d139      	bne.n	80068a2 <USBD_SetAddress+0x8e>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	885b      	ldrh	r3, [r3, #2]
 8006832:	2b7f      	cmp	r3, #127	; 0x7f
 8006834:	d835      	bhi.n	80068a2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	885b      	ldrh	r3, [r3, #2]
 800683a:	b2da      	uxtb	r2, r3
 800683c:	230f      	movs	r3, #15
 800683e:	18fb      	adds	r3, r7, r3
 8006840:	217f      	movs	r1, #127	; 0x7f
 8006842:	400a      	ands	r2, r1
 8006844:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	23a7      	movs	r3, #167	; 0xa7
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	5cd3      	ldrb	r3, [r2, r3]
 800684e:	2b03      	cmp	r3, #3
 8006850:	d106      	bne.n	8006860 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	0011      	movs	r1, r2
 8006858:	0018      	movs	r0, r3
 800685a:	f000 f9bf 	bl	8006bdc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800685e:	e027      	b.n	80068b0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	240f      	movs	r4, #15
 8006864:	193a      	adds	r2, r7, r4
 8006866:	4914      	ldr	r1, [pc, #80]	; (80068b8 <USBD_SetAddress+0xa4>)
 8006868:	7812      	ldrb	r2, [r2, #0]
 800686a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800686c:	193b      	adds	r3, r7, r4
 800686e:	781a      	ldrb	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	0011      	movs	r1, r2
 8006874:	0018      	movs	r0, r3
 8006876:	f000 fe33 	bl	80074e0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	0018      	movs	r0, r3
 800687e:	f000 fa71 	bl	8006d64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006882:	193b      	adds	r3, r7, r4
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	23a7      	movs	r3, #167	; 0xa7
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	2102      	movs	r1, #2
 8006892:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006894:	e00c      	b.n	80068b0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	23a7      	movs	r3, #167	; 0xa7
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	2101      	movs	r1, #1
 800689e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068a0:	e006      	b.n	80068b0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	0011      	movs	r1, r2
 80068a8:	0018      	movs	r0, r3
 80068aa:	f000 f997 	bl	8006bdc <USBD_CtlError>
  }
}
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	46c0      	nop			; (mov r8, r8)
 80068b2:	46bd      	mov	sp, r7
 80068b4:	b005      	add	sp, #20
 80068b6:	bd90      	pop	{r4, r7, pc}
 80068b8:	0000029e 	.word	0x0000029e

080068bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	885b      	ldrh	r3, [r3, #2]
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	4b4c      	ldr	r3, [pc, #304]	; (8006a00 <USBD_SetConfig+0x144>)
 80068ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068d0:	4b4b      	ldr	r3, [pc, #300]	; (8006a00 <USBD_SetConfig+0x144>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d906      	bls.n	80068e6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	0011      	movs	r1, r2
 80068de:	0018      	movs	r0, r3
 80068e0:	f000 f97c 	bl	8006bdc <USBD_CtlError>
 80068e4:	e088      	b.n	80069f8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	23a7      	movs	r3, #167	; 0xa7
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	5cd3      	ldrb	r3, [r2, r3]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d002      	beq.n	80068f8 <USBD_SetConfig+0x3c>
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d029      	beq.n	800694a <USBD_SetConfig+0x8e>
 80068f6:	e071      	b.n	80069dc <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80068f8:	4b41      	ldr	r3, [pc, #260]	; (8006a00 <USBD_SetConfig+0x144>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01f      	beq.n	8006940 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8006900:	4b3f      	ldr	r3, [pc, #252]	; (8006a00 <USBD_SetConfig+0x144>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	001a      	movs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	23a7      	movs	r3, #167	; 0xa7
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	2103      	movs	r1, #3
 8006912:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006914:	4b3a      	ldr	r3, [pc, #232]	; (8006a00 <USBD_SetConfig+0x144>)
 8006916:	781a      	ldrb	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	0011      	movs	r1, r2
 800691c:	0018      	movs	r0, r3
 800691e:	f7ff f8c6 	bl	8005aae <USBD_SetClassConfig>
 8006922:	0003      	movs	r3, r0
 8006924:	2b02      	cmp	r3, #2
 8006926:	d106      	bne.n	8006936 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	0011      	movs	r1, r2
 800692e:	0018      	movs	r0, r3
 8006930:	f000 f954 	bl	8006bdc <USBD_CtlError>
            return;
 8006934:	e060      	b.n	80069f8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	0018      	movs	r0, r3
 800693a:	f000 fa13 	bl	8006d64 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800693e:	e05b      	b.n	80069f8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	0018      	movs	r0, r3
 8006944:	f000 fa0e 	bl	8006d64 <USBD_CtlSendStatus>
        break;
 8006948:	e056      	b.n	80069f8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800694a:	4b2d      	ldr	r3, [pc, #180]	; (8006a00 <USBD_SetConfig+0x144>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d115      	bne.n	800697e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	23a7      	movs	r3, #167	; 0xa7
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	2102      	movs	r1, #2
 800695a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800695c:	4b28      	ldr	r3, [pc, #160]	; (8006a00 <USBD_SetConfig+0x144>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	001a      	movs	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006966:	4b26      	ldr	r3, [pc, #152]	; (8006a00 <USBD_SetConfig+0x144>)
 8006968:	781a      	ldrb	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	0011      	movs	r1, r2
 800696e:	0018      	movs	r0, r3
 8006970:	f7ff f8c4 	bl	8005afc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	0018      	movs	r0, r3
 8006978:	f000 f9f4 	bl	8006d64 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800697c:	e03c      	b.n	80069f8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800697e:	4b20      	ldr	r3, [pc, #128]	; (8006a00 <USBD_SetConfig+0x144>)
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	001a      	movs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	429a      	cmp	r2, r3
 800698a:	d022      	beq.n	80069d2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	b2da      	uxtb	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	0011      	movs	r1, r2
 8006996:	0018      	movs	r0, r3
 8006998:	f7ff f8b0 	bl	8005afc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800699c:	4b18      	ldr	r3, [pc, #96]	; (8006a00 <USBD_SetConfig+0x144>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	001a      	movs	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069a6:	4b16      	ldr	r3, [pc, #88]	; (8006a00 <USBD_SetConfig+0x144>)
 80069a8:	781a      	ldrb	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	0011      	movs	r1, r2
 80069ae:	0018      	movs	r0, r3
 80069b0:	f7ff f87d 	bl	8005aae <USBD_SetClassConfig>
 80069b4:	0003      	movs	r3, r0
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d106      	bne.n	80069c8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	0011      	movs	r1, r2
 80069c0:	0018      	movs	r0, r3
 80069c2:	f000 f90b 	bl	8006bdc <USBD_CtlError>
            return;
 80069c6:	e017      	b.n	80069f8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	0018      	movs	r0, r3
 80069cc:	f000 f9ca 	bl	8006d64 <USBD_CtlSendStatus>
        break;
 80069d0:	e012      	b.n	80069f8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	0018      	movs	r0, r3
 80069d6:	f000 f9c5 	bl	8006d64 <USBD_CtlSendStatus>
        break;
 80069da:	e00d      	b.n	80069f8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	0011      	movs	r1, r2
 80069e2:	0018      	movs	r0, r3
 80069e4:	f000 f8fa 	bl	8006bdc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80069e8:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <USBD_SetConfig+0x144>)
 80069ea:	781a      	ldrb	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	0011      	movs	r1, r2
 80069f0:	0018      	movs	r0, r3
 80069f2:	f7ff f883 	bl	8005afc <USBD_ClrClassConfig>
        break;
 80069f6:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80069f8:	46bd      	mov	sp, r7
 80069fa:	b002      	add	sp, #8
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	20000188 	.word	0x20000188

08006a04 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	88db      	ldrh	r3, [r3, #6]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d006      	beq.n	8006a24 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	0011      	movs	r1, r2
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f000 f8dd 	bl	8006bdc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a22:	e026      	b.n	8006a72 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	23a7      	movs	r3, #167	; 0xa7
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	5cd3      	ldrb	r3, [r2, r3]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	dc02      	bgt.n	8006a36 <USBD_GetConfig+0x32>
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	dc03      	bgt.n	8006a3c <USBD_GetConfig+0x38>
 8006a34:	e016      	b.n	8006a64 <USBD_GetConfig+0x60>
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d00c      	beq.n	8006a54 <USBD_GetConfig+0x50>
 8006a3a:	e013      	b.n	8006a64 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3308      	adds	r3, #8
 8006a46:	0019      	movs	r1, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	f000 f943 	bl	8006cd8 <USBD_CtlSendData>
        break;
 8006a52:	e00e      	b.n	8006a72 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	1d19      	adds	r1, r3, #4
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	f000 f93b 	bl	8006cd8 <USBD_CtlSendData>
        break;
 8006a62:	e006      	b.n	8006a72 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	0011      	movs	r1, r2
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f000 f8b6 	bl	8006bdc <USBD_CtlError>
        break;
 8006a70:	46c0      	nop			; (mov r8, r8)
}
 8006a72:	46c0      	nop			; (mov r8, r8)
 8006a74:	46bd      	mov	sp, r7
 8006a76:	b002      	add	sp, #8
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	23a7      	movs	r3, #167	; 0xa7
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	5cd3      	ldrb	r3, [r2, r3]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d822      	bhi.n	8006ad8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	88db      	ldrh	r3, [r3, #6]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d006      	beq.n	8006aa8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	0011      	movs	r1, r2
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	f000 f89b 	bl	8006bdc <USBD_CtlError>
        break;
 8006aa6:	e01e      	b.n	8006ae6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	23a9      	movs	r3, #169	; 0xa9
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	58d3      	ldr	r3, [r2, r3]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	0019      	movs	r1, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f000 f901 	bl	8006cd8 <USBD_CtlSendData>
      break;
 8006ad6:	e006      	b.n	8006ae6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	0011      	movs	r1, r2
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f000 f87c 	bl	8006bdc <USBD_CtlError>
      break;
 8006ae4:	46c0      	nop			; (mov r8, r8)
  }
}
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	b002      	add	sp, #8
 8006aec:	bd80      	pop	{r7, pc}

08006aee <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b082      	sub	sp, #8
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	885b      	ldrh	r3, [r3, #2]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d108      	bne.n	8006b12 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	23a9      	movs	r3, #169	; 0xa9
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	2101      	movs	r1, #1
 8006b08:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f000 f929 	bl	8006d64 <USBD_CtlSendStatus>
  }
}
 8006b12:	46c0      	nop			; (mov r8, r8)
 8006b14:	46bd      	mov	sp, r7
 8006b16:	b002      	add	sp, #8
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	23a7      	movs	r3, #167	; 0xa7
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	5cd3      	ldrb	r3, [r2, r3]
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d80d      	bhi.n	8006b4e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	885b      	ldrh	r3, [r3, #2]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d110      	bne.n	8006b5c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	23a9      	movs	r3, #169	; 0xa9
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	2100      	movs	r1, #0
 8006b42:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	0018      	movs	r0, r3
 8006b48:	f000 f90c 	bl	8006d64 <USBD_CtlSendStatus>
      }
      break;
 8006b4c:	e006      	b.n	8006b5c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	0011      	movs	r1, r2
 8006b54:	0018      	movs	r0, r3
 8006b56:	f000 f841 	bl	8006bdc <USBD_CtlError>
      break;
 8006b5a:	e000      	b.n	8006b5e <USBD_ClrFeature+0x44>
      break;
 8006b5c:	46c0      	nop			; (mov r8, r8)
  }
}
 8006b5e:	46c0      	nop			; (mov r8, r8)
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b002      	add	sp, #8
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781a      	ldrb	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	785a      	ldrb	r2, [r3, #1]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	3302      	adds	r3, #2
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	3303      	adds	r3, #3
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	18d3      	adds	r3, r2, r3
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	3305      	adds	r3, #5
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	021b      	lsls	r3, r3, #8
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	18d3      	adds	r3, r2, r3
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	3306      	adds	r3, #6
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	3307      	adds	r3, #7
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	021b      	lsls	r3, r3, #8
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	18d3      	adds	r3, r2, r3
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	80da      	strh	r2, [r3, #6]

}
 8006bd4:	46c0      	nop			; (mov r8, r8)
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	b002      	add	sp, #8
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2180      	movs	r1, #128	; 0x80
 8006bea:	0018      	movs	r0, r3
 8006bec:	f000 fbf1 	bl	80073d2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	f000 fbec 	bl	80073d2 <USBD_LL_StallEP>
}
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	b002      	add	sp, #8
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c02:	b590      	push	{r4, r7, lr}
 8006c04:	b087      	sub	sp, #28
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c0e:	2417      	movs	r4, #23
 8006c10:	193b      	adds	r3, r7, r4
 8006c12:	2200      	movs	r2, #0
 8006c14:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d03c      	beq.n	8006c96 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f000 f83d 	bl	8006c9e <USBD_GetLen>
 8006c24:	0003      	movs	r3, r0
 8006c26:	3301      	adds	r3, #1
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	18db      	adds	r3, r3, r3
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006c32:	193b      	adds	r3, r7, r4
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	193a      	adds	r2, r7, r4
 8006c38:	1c59      	adds	r1, r3, #1
 8006c3a:	7011      	strb	r1, [r2, #0]
 8006c3c:	001a      	movs	r2, r3
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	189b      	adds	r3, r3, r2
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	7812      	ldrb	r2, [r2, #0]
 8006c46:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006c48:	193b      	adds	r3, r7, r4
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	193a      	adds	r2, r7, r4
 8006c4e:	1c59      	adds	r1, r3, #1
 8006c50:	7011      	strb	r1, [r2, #0]
 8006c52:	001a      	movs	r2, r3
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	189b      	adds	r3, r3, r2
 8006c58:	2203      	movs	r2, #3
 8006c5a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006c5c:	e017      	b.n	8006c8e <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	60fa      	str	r2, [r7, #12]
 8006c64:	2417      	movs	r4, #23
 8006c66:	193a      	adds	r2, r7, r4
 8006c68:	7812      	ldrb	r2, [r2, #0]
 8006c6a:	1939      	adds	r1, r7, r4
 8006c6c:	1c50      	adds	r0, r2, #1
 8006c6e:	7008      	strb	r0, [r1, #0]
 8006c70:	0011      	movs	r1, r2
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	1852      	adds	r2, r2, r1
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006c7a:	193b      	adds	r3, r7, r4
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	193a      	adds	r2, r7, r4
 8006c80:	1c59      	adds	r1, r3, #1
 8006c82:	7011      	strb	r1, [r2, #0]
 8006c84:	001a      	movs	r2, r3
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	189b      	adds	r3, r3, r2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e3      	bne.n	8006c5e <USBD_GetString+0x5c>
    }
  }
}
 8006c96:	46c0      	nop			; (mov r8, r8)
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	b007      	add	sp, #28
 8006c9c:	bd90      	pop	{r4, r7, pc}

08006c9e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ca6:	230f      	movs	r3, #15
 8006ca8:	18fb      	adds	r3, r7, r3
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8006cae:	e008      	b.n	8006cc2 <USBD_GetLen+0x24>
  {
    len++;
 8006cb0:	210f      	movs	r1, #15
 8006cb2:	187b      	adds	r3, r7, r1
 8006cb4:	781a      	ldrb	r2, [r3, #0]
 8006cb6:	187b      	adds	r3, r7, r1
 8006cb8:	3201      	adds	r2, #1
 8006cba:	701a      	strb	r2, [r3, #0]
    buf++;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1f2      	bne.n	8006cb0 <USBD_GetLen+0x12>
  }

  return len;
 8006cca:	230f      	movs	r3, #15
 8006ccc:	18fb      	adds	r3, r7, r3
 8006cce:	781b      	ldrb	r3, [r3, #0]
}
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	b004      	add	sp, #16
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	1dbb      	adds	r3, r7, #6
 8006ce4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	23a5      	movs	r3, #165	; 0xa5
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	2102      	movs	r1, #2
 8006cee:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8006cf0:	1dbb      	adds	r3, r7, #6
 8006cf2:	881a      	ldrh	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006cf8:	1dbb      	adds	r3, r7, #6
 8006cfa:	881a      	ldrh	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d00:	1dbb      	adds	r3, r7, #6
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	2100      	movs	r1, #0
 8006d0a:	f000 fc14 	bl	8007536 <USBD_LL_Transmit>

  return USBD_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	0018      	movs	r0, r3
 8006d12:	46bd      	mov	sp, r7
 8006d14:	b004      	add	sp, #16
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	1dbb      	adds	r3, r7, #6
 8006d24:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d26:	1dbb      	adds	r3, r7, #6
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	2100      	movs	r1, #0
 8006d30:	f000 fc01 	bl	8007536 <USBD_LL_Transmit>

  return USBD_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	0018      	movs	r0, r3
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	b004      	add	sp, #16
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b084      	sub	sp, #16
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	1dbb      	adds	r3, r7, #6
 8006d4a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d4c:	1dbb      	adds	r3, r7, #6
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	2100      	movs	r1, #0
 8006d56:	f000 fc25 	bl	80075a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	b004      	add	sp, #16
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	23a5      	movs	r3, #165	; 0xa5
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	2104      	movs	r1, #4
 8006d74:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	f000 fbda 	bl	8007536 <USBD_LL_Transmit>

  return USBD_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	0018      	movs	r0, r3
 8006d86:	46bd      	mov	sp, r7
 8006d88:	b002      	add	sp, #8
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	23a5      	movs	r3, #165	; 0xa5
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	2105      	movs	r1, #5
 8006d9c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	2300      	movs	r3, #0
 8006da2:	2200      	movs	r2, #0
 8006da4:	2100      	movs	r1, #0
 8006da6:	f000 fbfd 	bl	80075a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	0018      	movs	r0, r3
 8006dae:	46bd      	mov	sp, r7
 8006db0:	b002      	add	sp, #8
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006db8:	490f      	ldr	r1, [pc, #60]	; (8006df8 <MX_USB_DEVICE_Init+0x44>)
 8006dba:	4b10      	ldr	r3, [pc, #64]	; (8006dfc <MX_USB_DEVICE_Init+0x48>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	0018      	movs	r0, r3
 8006dc0:	f7fe fe0e 	bl	80059e0 <USBD_Init>
 8006dc4:	1e03      	subs	r3, r0, #0
 8006dc6:	d001      	beq.n	8006dcc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006dc8:	f7f9 fc1e 	bl	8000608 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006dcc:	4a0c      	ldr	r2, [pc, #48]	; (8006e00 <MX_USB_DEVICE_Init+0x4c>)
 8006dce:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <MX_USB_DEVICE_Init+0x48>)
 8006dd0:	0011      	movs	r1, r2
 8006dd2:	0018      	movs	r0, r3
 8006dd4:	f7fe fe35 	bl	8005a42 <USBD_RegisterClass>
 8006dd8:	1e03      	subs	r3, r0, #0
 8006dda:	d001      	beq.n	8006de0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8006ddc:	f7f9 fc14 	bl	8000608 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006de0:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <MX_USB_DEVICE_Init+0x48>)
 8006de2:	0018      	movs	r0, r3
 8006de4:	f7fe fe4d 	bl	8005a82 <USBD_Start>
 8006de8:	1e03      	subs	r3, r0, #0
 8006dea:	d001      	beq.n	8006df0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006dec:	f7f9 fc0c 	bl	8000608 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006df0:	46c0      	nop			; (mov r8, r8)
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	46c0      	nop			; (mov r8, r8)
 8006df8:	20000114 	.word	0x20000114
 8006dfc:	2000018c 	.word	0x2000018c
 8006e00:	2000000c 	.word	0x2000000c

08006e04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	0002      	movs	r2, r0
 8006e0c:	6039      	str	r1, [r7, #0]
 8006e0e:	1dfb      	adds	r3, r7, #7
 8006e10:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2212      	movs	r2, #18
 8006e16:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e18:	4b02      	ldr	r3, [pc, #8]	; (8006e24 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	b002      	add	sp, #8
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	46c0      	nop			; (mov r8, r8)
 8006e24:	20000130 	.word	0x20000130

08006e28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	0002      	movs	r2, r0
 8006e30:	6039      	str	r1, [r7, #0]
 8006e32:	1dfb      	adds	r3, r7, #7
 8006e34:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2204      	movs	r2, #4
 8006e3a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e3c:	4b02      	ldr	r3, [pc, #8]	; (8006e48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e3e:	0018      	movs	r0, r3
 8006e40:	46bd      	mov	sp, r7
 8006e42:	b002      	add	sp, #8
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	46c0      	nop			; (mov r8, r8)
 8006e48:	20000144 	.word	0x20000144

08006e4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	0002      	movs	r2, r0
 8006e54:	6039      	str	r1, [r7, #0]
 8006e56:	1dfb      	adds	r3, r7, #7
 8006e58:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8006e5a:	1dfb      	adds	r3, r7, #7
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	4908      	ldr	r1, [pc, #32]	; (8006e88 <USBD_FS_ProductStrDescriptor+0x3c>)
 8006e66:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <USBD_FS_ProductStrDescriptor+0x40>)
 8006e68:	0018      	movs	r0, r3
 8006e6a:	f7ff feca 	bl	8006c02 <USBD_GetString>
 8006e6e:	e005      	b.n	8006e7c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	4905      	ldr	r1, [pc, #20]	; (8006e88 <USBD_FS_ProductStrDescriptor+0x3c>)
 8006e74:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <USBD_FS_ProductStrDescriptor+0x40>)
 8006e76:	0018      	movs	r0, r3
 8006e78:	f7ff fec3 	bl	8006c02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e7c:	4b02      	ldr	r3, [pc, #8]	; (8006e88 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8006e7e:	0018      	movs	r0, r3
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b002      	add	sp, #8
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	20000450 	.word	0x20000450
 8006e8c:	08007728 	.word	0x08007728

08006e90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	0002      	movs	r2, r0
 8006e98:	6039      	str	r1, [r7, #0]
 8006e9a:	1dfb      	adds	r3, r7, #7
 8006e9c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	4904      	ldr	r1, [pc, #16]	; (8006eb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ea2:	4b05      	ldr	r3, [pc, #20]	; (8006eb8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	f7ff feac 	bl	8006c02 <USBD_GetString>
  return USBD_StrDesc;
 8006eaa:	4b02      	ldr	r3, [pc, #8]	; (8006eb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8006eac:	0018      	movs	r0, r3
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	b002      	add	sp, #8
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	20000450 	.word	0x20000450
 8006eb8:	08007740 	.word	0x08007740

08006ebc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	0002      	movs	r2, r0
 8006ec4:	6039      	str	r1, [r7, #0]
 8006ec6:	1dfb      	adds	r3, r7, #7
 8006ec8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	221a      	movs	r2, #26
 8006ece:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006ed0:	f000 f84c 	bl	8006f6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006ed4:	4b02      	ldr	r3, [pc, #8]	; (8006ee0 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	b002      	add	sp, #8
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	46c0      	nop			; (mov r8, r8)
 8006ee0:	20000148 	.word	0x20000148

08006ee4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	0002      	movs	r2, r0
 8006eec:	6039      	str	r1, [r7, #0]
 8006eee:	1dfb      	adds	r3, r7, #7
 8006ef0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8006ef2:	1dfb      	adds	r3, r7, #7
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d106      	bne.n	8006f08 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	4908      	ldr	r1, [pc, #32]	; (8006f20 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8006efe:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <USBD_FS_ConfigStrDescriptor+0x40>)
 8006f00:	0018      	movs	r0, r3
 8006f02:	f7ff fe7e 	bl	8006c02 <USBD_GetString>
 8006f06:	e005      	b.n	8006f14 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	4905      	ldr	r1, [pc, #20]	; (8006f20 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8006f0c:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <USBD_FS_ConfigStrDescriptor+0x40>)
 8006f0e:	0018      	movs	r0, r3
 8006f10:	f7ff fe77 	bl	8006c02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f14:	4b02      	ldr	r3, [pc, #8]	; (8006f20 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8006f16:	0018      	movs	r0, r3
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	b002      	add	sp, #8
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	20000450 	.word	0x20000450
 8006f24:	08007754 	.word	0x08007754

08006f28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	0002      	movs	r2, r0
 8006f30:	6039      	str	r1, [r7, #0]
 8006f32:	1dfb      	adds	r3, r7, #7
 8006f34:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8006f36:	1dfb      	adds	r3, r7, #7
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	4908      	ldr	r1, [pc, #32]	; (8006f64 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8006f42:	4b09      	ldr	r3, [pc, #36]	; (8006f68 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8006f44:	0018      	movs	r0, r3
 8006f46:	f7ff fe5c 	bl	8006c02 <USBD_GetString>
 8006f4a:	e005      	b.n	8006f58 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	4905      	ldr	r1, [pc, #20]	; (8006f64 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8006f50:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8006f52:	0018      	movs	r0, r3
 8006f54:	f7ff fe55 	bl	8006c02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f58:	4b02      	ldr	r3, [pc, #8]	; (8006f64 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8006f5a:	0018      	movs	r0, r3
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	b002      	add	sp, #8
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	46c0      	nop			; (mov r8, r8)
 8006f64:	20000450 	.word	0x20000450
 8006f68:	08007760 	.word	0x08007760

08006f6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f72:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <Get_SerialNum+0x48>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f78:	4b0f      	ldr	r3, [pc, #60]	; (8006fb8 <Get_SerialNum+0x4c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f7e:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <Get_SerialNum+0x50>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	18d3      	adds	r3, r2, r3
 8006f8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00b      	beq.n	8006faa <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f92:	490b      	ldr	r1, [pc, #44]	; (8006fc0 <Get_SerialNum+0x54>)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2208      	movs	r2, #8
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f000 f815 	bl	8006fc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f9e:	4909      	ldr	r1, [pc, #36]	; (8006fc4 <Get_SerialNum+0x58>)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2204      	movs	r2, #4
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	f000 f80f 	bl	8006fc8 <IntToUnicode>
  }
}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	46bd      	mov	sp, r7
 8006fae:	b004      	add	sp, #16
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	46c0      	nop			; (mov r8, r8)
 8006fb4:	1ff80050 	.word	0x1ff80050
 8006fb8:	1ff80054 	.word	0x1ff80054
 8006fbc:	1ff80058 	.word	0x1ff80058
 8006fc0:	2000014a 	.word	0x2000014a
 8006fc4:	2000015a 	.word	0x2000015a

08006fc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	1dfb      	adds	r3, r7, #7
 8006fd4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8006fd6:	2117      	movs	r1, #23
 8006fd8:	187b      	adds	r3, r7, r1
 8006fda:	2200      	movs	r2, #0
 8006fdc:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8006fde:	187b      	adds	r3, r7, r1
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	701a      	strb	r2, [r3, #0]
 8006fe4:	e02f      	b.n	8007046 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	0f1b      	lsrs	r3, r3, #28
 8006fea:	2b09      	cmp	r3, #9
 8006fec:	d80d      	bhi.n	800700a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	0f1b      	lsrs	r3, r3, #28
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	2317      	movs	r3, #23
 8006ff6:	18fb      	adds	r3, r7, r3
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	0019      	movs	r1, r3
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	185b      	adds	r3, r3, r1
 8007002:	3230      	adds	r2, #48	; 0x30
 8007004:	b2d2      	uxtb	r2, r2
 8007006:	701a      	strb	r2, [r3, #0]
 8007008:	e00c      	b.n	8007024 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	0f1b      	lsrs	r3, r3, #28
 800700e:	b2da      	uxtb	r2, r3
 8007010:	2317      	movs	r3, #23
 8007012:	18fb      	adds	r3, r7, r3
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	0019      	movs	r1, r3
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	185b      	adds	r3, r3, r1
 800701e:	3237      	adds	r2, #55	; 0x37
 8007020:	b2d2      	uxtb	r2, r2
 8007022:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800702a:	2117      	movs	r1, #23
 800702c:	187b      	adds	r3, r7, r1
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	3301      	adds	r3, #1
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	18d3      	adds	r3, r2, r3
 8007038:	2200      	movs	r2, #0
 800703a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800703c:	187b      	adds	r3, r7, r1
 800703e:	781a      	ldrb	r2, [r3, #0]
 8007040:	187b      	adds	r3, r7, r1
 8007042:	3201      	adds	r2, #1
 8007044:	701a      	strb	r2, [r3, #0]
 8007046:	2317      	movs	r3, #23
 8007048:	18fa      	adds	r2, r7, r3
 800704a:	1dfb      	adds	r3, r7, #7
 800704c:	7812      	ldrb	r2, [r2, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	429a      	cmp	r2, r3
 8007052:	d3c8      	bcc.n	8006fe6 <IntToUnicode+0x1e>
  }
}
 8007054:	46c0      	nop			; (mov r8, r8)
 8007056:	46c0      	nop			; (mov r8, r8)
 8007058:	46bd      	mov	sp, r7
 800705a:	b006      	add	sp, #24
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a0a      	ldr	r2, [pc, #40]	; (8007098 <HAL_PCD_MspInit+0x38>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d10e      	bne.n	8007090 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007072:	4b0a      	ldr	r3, [pc, #40]	; (800709c <HAL_PCD_MspInit+0x3c>)
 8007074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007076:	4b09      	ldr	r3, [pc, #36]	; (800709c <HAL_PCD_MspInit+0x3c>)
 8007078:	2180      	movs	r1, #128	; 0x80
 800707a:	0409      	lsls	r1, r1, #16
 800707c:	430a      	orrs	r2, r1
 800707e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007080:	2200      	movs	r2, #0
 8007082:	2100      	movs	r1, #0
 8007084:	201f      	movs	r0, #31
 8007086:	f7f9 fc6d 	bl	8000964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800708a:	201f      	movs	r0, #31
 800708c:	f7f9 fc7f 	bl	800098e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007090:	46c0      	nop			; (mov r8, r8)
 8007092:	46bd      	mov	sp, r7
 8007094:	b002      	add	sp, #8
 8007096:	bd80      	pop	{r7, pc}
 8007098:	40005c00 	.word	0x40005c00
 800709c:	40021000 	.word	0x40021000

080070a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	23bc      	movs	r3, #188	; 0xbc
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	58d2      	ldr	r2, [r2, r3]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	21ac      	movs	r1, #172	; 0xac
 80070b4:	0089      	lsls	r1, r1, #2
 80070b6:	468c      	mov	ip, r1
 80070b8:	4463      	add	r3, ip
 80070ba:	0019      	movs	r1, r3
 80070bc:	0010      	movs	r0, r2
 80070be:	f7fe fd33 	bl	8005b28 <USBD_LL_SetupStage>
}
 80070c2:	46c0      	nop			; (mov r8, r8)
 80070c4:	46bd      	mov	sp, r7
 80070c6:	b002      	add	sp, #8
 80070c8:	bd80      	pop	{r7, pc}

080070ca <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070ca:	b590      	push	{r4, r7, lr}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	000a      	movs	r2, r1
 80070d4:	1cfb      	adds	r3, r7, #3
 80070d6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	23bc      	movs	r3, #188	; 0xbc
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	58d4      	ldr	r4, [r2, r3]
 80070e0:	1cfb      	adds	r3, r7, #3
 80070e2:	781a      	ldrb	r2, [r3, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	23be      	movs	r3, #190	; 0xbe
 80070e8:	0059      	lsls	r1, r3, #1
 80070ea:	0013      	movs	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	189b      	adds	r3, r3, r2
 80070f0:	00db      	lsls	r3, r3, #3
 80070f2:	18c3      	adds	r3, r0, r3
 80070f4:	185b      	adds	r3, r3, r1
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	1cfb      	adds	r3, r7, #3
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	0019      	movs	r1, r3
 80070fe:	0020      	movs	r0, r4
 8007100:	f7fe fd70 	bl	8005be4 <USBD_LL_DataOutStage>
}
 8007104:	46c0      	nop			; (mov r8, r8)
 8007106:	46bd      	mov	sp, r7
 8007108:	b003      	add	sp, #12
 800710a:	bd90      	pop	{r4, r7, pc}

0800710c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	000a      	movs	r2, r1
 8007116:	1cfb      	adds	r3, r7, #3
 8007118:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	23bc      	movs	r3, #188	; 0xbc
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	58d0      	ldr	r0, [r2, r3]
 8007122:	1cfb      	adds	r3, r7, #3
 8007124:	781a      	ldrb	r2, [r3, #0]
 8007126:	6879      	ldr	r1, [r7, #4]
 8007128:	0013      	movs	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	189b      	adds	r3, r3, r2
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	18cb      	adds	r3, r1, r3
 8007132:	333c      	adds	r3, #60	; 0x3c
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	1cfb      	adds	r3, r7, #3
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	0019      	movs	r1, r3
 800713c:	f7fe fdd4 	bl	8005ce8 <USBD_LL_DataInStage>
}
 8007140:	46c0      	nop			; (mov r8, r8)
 8007142:	46bd      	mov	sp, r7
 8007144:	b002      	add	sp, #8
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	23bc      	movs	r3, #188	; 0xbc
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	58d3      	ldr	r3, [r2, r3]
 8007158:	0018      	movs	r0, r3
 800715a:	f7fe ff0b 	bl	8005f74 <USBD_LL_SOF>
}
 800715e:	46c0      	nop			; (mov r8, r8)
 8007160:	46bd      	mov	sp, r7
 8007162:	b002      	add	sp, #8
 8007164:	bd80      	pop	{r7, pc}

08007166 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800716e:	230f      	movs	r3, #15
 8007170:	18fb      	adds	r3, r7, r3
 8007172:	2201      	movs	r2, #1
 8007174:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	2b02      	cmp	r3, #2
 800717c:	d001      	beq.n	8007182 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800717e:	f7f9 fa43 	bl	8000608 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	23bc      	movs	r3, #188	; 0xbc
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	58d2      	ldr	r2, [r2, r3]
 800718a:	230f      	movs	r3, #15
 800718c:	18fb      	adds	r3, r7, r3
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	0019      	movs	r1, r3
 8007192:	0010      	movs	r0, r2
 8007194:	f7fe fead 	bl	8005ef2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	23bc      	movs	r3, #188	; 0xbc
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	58d3      	ldr	r3, [r2, r3]
 80071a0:	0018      	movs	r0, r3
 80071a2:	f7fe fe5e 	bl	8005e62 <USBD_LL_Reset>
}
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	46bd      	mov	sp, r7
 80071aa:	b004      	add	sp, #16
 80071ac:	bd80      	pop	{r7, pc}
	...

080071b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	23bc      	movs	r3, #188	; 0xbc
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	58d3      	ldr	r3, [r2, r3]
 80071c0:	0018      	movs	r0, r3
 80071c2:	f7fe fea7 	bl	8005f14 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d005      	beq.n	80071da <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <HAL_PCD_SuspendCallback+0x34>)
 80071d0:	691a      	ldr	r2, [r3, #16]
 80071d2:	4b04      	ldr	r3, [pc, #16]	; (80071e4 <HAL_PCD_SuspendCallback+0x34>)
 80071d4:	2106      	movs	r1, #6
 80071d6:	430a      	orrs	r2, r1
 80071d8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80071da:	46c0      	nop			; (mov r8, r8)
 80071dc:	46bd      	mov	sp, r7
 80071de:	b002      	add	sp, #8
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	46c0      	nop			; (mov r8, r8)
 80071e4:	e000ed00 	.word	0xe000ed00

080071e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d007      	beq.n	8007208 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071f8:	4b09      	ldr	r3, [pc, #36]	; (8007220 <HAL_PCD_ResumeCallback+0x38>)
 80071fa:	691a      	ldr	r2, [r3, #16]
 80071fc:	4b08      	ldr	r3, [pc, #32]	; (8007220 <HAL_PCD_ResumeCallback+0x38>)
 80071fe:	2106      	movs	r1, #6
 8007200:	438a      	bics	r2, r1
 8007202:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007204:	f000 fa1a 	bl	800763c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	23bc      	movs	r3, #188	; 0xbc
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	58d3      	ldr	r3, [r2, r3]
 8007210:	0018      	movs	r0, r3
 8007212:	f7fe fe97 	bl	8005f44 <USBD_LL_Resume>
}
 8007216:	46c0      	nop			; (mov r8, r8)
 8007218:	46bd      	mov	sp, r7
 800721a:	b002      	add	sp, #8
 800721c:	bd80      	pop	{r7, pc}
 800721e:	46c0      	nop			; (mov r8, r8)
 8007220:	e000ed00 	.word	0xe000ed00

08007224 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800722c:	4a23      	ldr	r2, [pc, #140]	; (80072bc <USBD_LL_Init+0x98>)
 800722e:	23bc      	movs	r3, #188	; 0xbc
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	6879      	ldr	r1, [r7, #4]
 8007234:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	23b0      	movs	r3, #176	; 0xb0
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	491f      	ldr	r1, [pc, #124]	; (80072bc <USBD_LL_Init+0x98>)
 800723e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007240:	4b1e      	ldr	r3, [pc, #120]	; (80072bc <USBD_LL_Init+0x98>)
 8007242:	4a1f      	ldr	r2, [pc, #124]	; (80072c0 <USBD_LL_Init+0x9c>)
 8007244:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007246:	4b1d      	ldr	r3, [pc, #116]	; (80072bc <USBD_LL_Init+0x98>)
 8007248:	2208      	movs	r2, #8
 800724a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800724c:	4b1b      	ldr	r3, [pc, #108]	; (80072bc <USBD_LL_Init+0x98>)
 800724e:	2202      	movs	r2, #2
 8007250:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007252:	4b1a      	ldr	r3, [pc, #104]	; (80072bc <USBD_LL_Init+0x98>)
 8007254:	2202      	movs	r2, #2
 8007256:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007258:	4b18      	ldr	r3, [pc, #96]	; (80072bc <USBD_LL_Init+0x98>)
 800725a:	2200      	movs	r2, #0
 800725c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800725e:	4b17      	ldr	r3, [pc, #92]	; (80072bc <USBD_LL_Init+0x98>)
 8007260:	2200      	movs	r2, #0
 8007262:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007264:	4b15      	ldr	r3, [pc, #84]	; (80072bc <USBD_LL_Init+0x98>)
 8007266:	2200      	movs	r2, #0
 8007268:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800726a:	4b14      	ldr	r3, [pc, #80]	; (80072bc <USBD_LL_Init+0x98>)
 800726c:	0018      	movs	r0, r3
 800726e:	f7f9 fbab 	bl	80009c8 <HAL_PCD_Init>
 8007272:	1e03      	subs	r3, r0, #0
 8007274:	d001      	beq.n	800727a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8007276:	f7f9 f9c7 	bl	8000608 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	23b0      	movs	r3, #176	; 0xb0
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	58d0      	ldr	r0, [r2, r3]
 8007282:	2318      	movs	r3, #24
 8007284:	2200      	movs	r2, #0
 8007286:	2100      	movs	r1, #0
 8007288:	f7fb f952 	bl	8002530 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	23b0      	movs	r3, #176	; 0xb0
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	58d0      	ldr	r0, [r2, r3]
 8007294:	2358      	movs	r3, #88	; 0x58
 8007296:	2200      	movs	r2, #0
 8007298:	2180      	movs	r1, #128	; 0x80
 800729a:	f7fb f949 	bl	8002530 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	23b0      	movs	r3, #176	; 0xb0
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	58d0      	ldr	r0, [r2, r3]
 80072a6:	2380      	movs	r3, #128	; 0x80
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	2200      	movs	r2, #0
 80072ac:	2181      	movs	r1, #129	; 0x81
 80072ae:	f7fb f93f 	bl	8002530 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	0018      	movs	r0, r3
 80072b6:	46bd      	mov	sp, r7
 80072b8:	b002      	add	sp, #8
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	20000650 	.word	0x20000650
 80072c0:	40005c00 	.word	0x40005c00

080072c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80072c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072cc:	210f      	movs	r1, #15
 80072ce:	187b      	adds	r3, r7, r1
 80072d0:	2200      	movs	r2, #0
 80072d2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072d4:	260e      	movs	r6, #14
 80072d6:	19bb      	adds	r3, r7, r6
 80072d8:	2200      	movs	r2, #0
 80072da:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	23b0      	movs	r3, #176	; 0xb0
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	58d3      	ldr	r3, [r2, r3]
 80072e4:	000d      	movs	r5, r1
 80072e6:	187c      	adds	r4, r7, r1
 80072e8:	0018      	movs	r0, r3
 80072ea:	f7f9 fc6d 	bl	8000bc8 <HAL_PCD_Start>
 80072ee:	0003      	movs	r3, r0
 80072f0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072f2:	19bc      	adds	r4, r7, r6
 80072f4:	197b      	adds	r3, r7, r5
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	0018      	movs	r0, r3
 80072fa:	f000 f9a6 	bl	800764a <USBD_Get_USB_Status>
 80072fe:	0003      	movs	r3, r0
 8007300:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007302:	19bb      	adds	r3, r7, r6
 8007304:	781b      	ldrb	r3, [r3, #0]
}
 8007306:	0018      	movs	r0, r3
 8007308:	46bd      	mov	sp, r7
 800730a:	b005      	add	sp, #20
 800730c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800730e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800730e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007310:	b085      	sub	sp, #20
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	000c      	movs	r4, r1
 8007318:	0010      	movs	r0, r2
 800731a:	0019      	movs	r1, r3
 800731c:	1cfb      	adds	r3, r7, #3
 800731e:	1c22      	adds	r2, r4, #0
 8007320:	701a      	strb	r2, [r3, #0]
 8007322:	1cbb      	adds	r3, r7, #2
 8007324:	1c02      	adds	r2, r0, #0
 8007326:	701a      	strb	r2, [r3, #0]
 8007328:	003b      	movs	r3, r7
 800732a:	1c0a      	adds	r2, r1, #0
 800732c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800732e:	260f      	movs	r6, #15
 8007330:	19bb      	adds	r3, r7, r6
 8007332:	2200      	movs	r2, #0
 8007334:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007336:	250e      	movs	r5, #14
 8007338:	197b      	adds	r3, r7, r5
 800733a:	2200      	movs	r2, #0
 800733c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	23b0      	movs	r3, #176	; 0xb0
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	58d0      	ldr	r0, [r2, r3]
 8007346:	19bc      	adds	r4, r7, r6
 8007348:	1cbb      	adds	r3, r7, #2
 800734a:	781d      	ldrb	r5, [r3, #0]
 800734c:	003b      	movs	r3, r7
 800734e:	881a      	ldrh	r2, [r3, #0]
 8007350:	1cfb      	adds	r3, r7, #3
 8007352:	7819      	ldrb	r1, [r3, #0]
 8007354:	002b      	movs	r3, r5
 8007356:	f7f9 fdcc 	bl	8000ef2 <HAL_PCD_EP_Open>
 800735a:	0003      	movs	r3, r0
 800735c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800735e:	250e      	movs	r5, #14
 8007360:	197c      	adds	r4, r7, r5
 8007362:	19bb      	adds	r3, r7, r6
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	0018      	movs	r0, r3
 8007368:	f000 f96f 	bl	800764a <USBD_Get_USB_Status>
 800736c:	0003      	movs	r3, r0
 800736e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007370:	197b      	adds	r3, r7, r5
 8007372:	781b      	ldrb	r3, [r3, #0]
}
 8007374:	0018      	movs	r0, r3
 8007376:	46bd      	mov	sp, r7
 8007378:	b005      	add	sp, #20
 800737a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800737c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800737c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	000a      	movs	r2, r1
 8007386:	1cfb      	adds	r3, r7, #3
 8007388:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800738a:	210f      	movs	r1, #15
 800738c:	187b      	adds	r3, r7, r1
 800738e:	2200      	movs	r2, #0
 8007390:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007392:	260e      	movs	r6, #14
 8007394:	19bb      	adds	r3, r7, r6
 8007396:	2200      	movs	r2, #0
 8007398:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	23b0      	movs	r3, #176	; 0xb0
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	58d2      	ldr	r2, [r2, r3]
 80073a2:	000d      	movs	r5, r1
 80073a4:	187c      	adds	r4, r7, r1
 80073a6:	1cfb      	adds	r3, r7, #3
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	0019      	movs	r1, r3
 80073ac:	0010      	movs	r0, r2
 80073ae:	f7f9 fe0f 	bl	8000fd0 <HAL_PCD_EP_Close>
 80073b2:	0003      	movs	r3, r0
 80073b4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073b6:	19bc      	adds	r4, r7, r6
 80073b8:	197b      	adds	r3, r7, r5
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	0018      	movs	r0, r3
 80073be:	f000 f944 	bl	800764a <USBD_Get_USB_Status>
 80073c2:	0003      	movs	r3, r0
 80073c4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80073c6:	19bb      	adds	r3, r7, r6
 80073c8:	781b      	ldrb	r3, [r3, #0]
}
 80073ca:	0018      	movs	r0, r3
 80073cc:	46bd      	mov	sp, r7
 80073ce:	b005      	add	sp, #20
 80073d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073d2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073d4:	b085      	sub	sp, #20
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	000a      	movs	r2, r1
 80073dc:	1cfb      	adds	r3, r7, #3
 80073de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073e0:	210f      	movs	r1, #15
 80073e2:	187b      	adds	r3, r7, r1
 80073e4:	2200      	movs	r2, #0
 80073e6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073e8:	260e      	movs	r6, #14
 80073ea:	19bb      	adds	r3, r7, r6
 80073ec:	2200      	movs	r2, #0
 80073ee:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	23b0      	movs	r3, #176	; 0xb0
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	58d2      	ldr	r2, [r2, r3]
 80073f8:	000d      	movs	r5, r1
 80073fa:	187c      	adds	r4, r7, r1
 80073fc:	1cfb      	adds	r3, r7, #3
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	0019      	movs	r1, r3
 8007402:	0010      	movs	r0, r2
 8007404:	f7f9 fea8 	bl	8001158 <HAL_PCD_EP_SetStall>
 8007408:	0003      	movs	r3, r0
 800740a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800740c:	19bc      	adds	r4, r7, r6
 800740e:	197b      	adds	r3, r7, r5
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	0018      	movs	r0, r3
 8007414:	f000 f919 	bl	800764a <USBD_Get_USB_Status>
 8007418:	0003      	movs	r3, r0
 800741a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800741c:	19bb      	adds	r3, r7, r6
 800741e:	781b      	ldrb	r3, [r3, #0]
}
 8007420:	0018      	movs	r0, r3
 8007422:	46bd      	mov	sp, r7
 8007424:	b005      	add	sp, #20
 8007426:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007428 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	000a      	movs	r2, r1
 8007432:	1cfb      	adds	r3, r7, #3
 8007434:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007436:	210f      	movs	r1, #15
 8007438:	187b      	adds	r3, r7, r1
 800743a:	2200      	movs	r2, #0
 800743c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800743e:	260e      	movs	r6, #14
 8007440:	19bb      	adds	r3, r7, r6
 8007442:	2200      	movs	r2, #0
 8007444:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	23b0      	movs	r3, #176	; 0xb0
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	58d2      	ldr	r2, [r2, r3]
 800744e:	000d      	movs	r5, r1
 8007450:	187c      	adds	r4, r7, r1
 8007452:	1cfb      	adds	r3, r7, #3
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	0019      	movs	r1, r3
 8007458:	0010      	movs	r0, r2
 800745a:	f7f9 fed9 	bl	8001210 <HAL_PCD_EP_ClrStall>
 800745e:	0003      	movs	r3, r0
 8007460:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007462:	19bc      	adds	r4, r7, r6
 8007464:	197b      	adds	r3, r7, r5
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	0018      	movs	r0, r3
 800746a:	f000 f8ee 	bl	800764a <USBD_Get_USB_Status>
 800746e:	0003      	movs	r3, r0
 8007470:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007472:	19bb      	adds	r3, r7, r6
 8007474:	781b      	ldrb	r3, [r3, #0]
}
 8007476:	0018      	movs	r0, r3
 8007478:	46bd      	mov	sp, r7
 800747a:	b005      	add	sp, #20
 800747c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800747e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b084      	sub	sp, #16
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	000a      	movs	r2, r1
 8007488:	1cfb      	adds	r3, r7, #3
 800748a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	23b0      	movs	r3, #176	; 0xb0
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	58d3      	ldr	r3, [r2, r3]
 8007494:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007496:	1cfb      	adds	r3, r7, #3
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	b25b      	sxtb	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	da0d      	bge.n	80074bc <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80074a0:	1cfb      	adds	r3, r7, #3
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	227f      	movs	r2, #127	; 0x7f
 80074a6:	4013      	ands	r3, r2
 80074a8:	68f9      	ldr	r1, [r7, #12]
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	0013      	movs	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	189b      	adds	r3, r3, r2
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	18cb      	adds	r3, r1, r3
 80074b6:	3302      	adds	r3, #2
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	e00d      	b.n	80074d8 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80074bc:	1cfb      	adds	r3, r7, #3
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	227f      	movs	r2, #127	; 0x7f
 80074c2:	401a      	ands	r2, r3
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	23b5      	movs	r3, #181	; 0xb5
 80074c8:	0059      	lsls	r1, r3, #1
 80074ca:	0013      	movs	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	189b      	adds	r3, r3, r2
 80074d0:	00db      	lsls	r3, r3, #3
 80074d2:	18c3      	adds	r3, r0, r3
 80074d4:	185b      	adds	r3, r3, r1
 80074d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074d8:	0018      	movs	r0, r3
 80074da:	46bd      	mov	sp, r7
 80074dc:	b004      	add	sp, #16
 80074de:	bd80      	pop	{r7, pc}

080074e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	000a      	movs	r2, r1
 80074ea:	1cfb      	adds	r3, r7, #3
 80074ec:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ee:	210f      	movs	r1, #15
 80074f0:	187b      	adds	r3, r7, r1
 80074f2:	2200      	movs	r2, #0
 80074f4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074f6:	260e      	movs	r6, #14
 80074f8:	19bb      	adds	r3, r7, r6
 80074fa:	2200      	movs	r2, #0
 80074fc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	23b0      	movs	r3, #176	; 0xb0
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	58d2      	ldr	r2, [r2, r3]
 8007506:	000d      	movs	r5, r1
 8007508:	187c      	adds	r4, r7, r1
 800750a:	1cfb      	adds	r3, r7, #3
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	0019      	movs	r1, r3
 8007510:	0010      	movs	r0, r2
 8007512:	f7f9 fcc3 	bl	8000e9c <HAL_PCD_SetAddress>
 8007516:	0003      	movs	r3, r0
 8007518:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800751a:	19bc      	adds	r4, r7, r6
 800751c:	197b      	adds	r3, r7, r5
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	0018      	movs	r0, r3
 8007522:	f000 f892 	bl	800764a <USBD_Get_USB_Status>
 8007526:	0003      	movs	r3, r0
 8007528:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800752a:	19bb      	adds	r3, r7, r6
 800752c:	781b      	ldrb	r3, [r3, #0]
}
 800752e:	0018      	movs	r0, r3
 8007530:	46bd      	mov	sp, r7
 8007532:	b005      	add	sp, #20
 8007534:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007536 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007536:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007538:	b087      	sub	sp, #28
 800753a:	af00      	add	r7, sp, #0
 800753c:	60f8      	str	r0, [r7, #12]
 800753e:	0008      	movs	r0, r1
 8007540:	607a      	str	r2, [r7, #4]
 8007542:	0019      	movs	r1, r3
 8007544:	230b      	movs	r3, #11
 8007546:	18fb      	adds	r3, r7, r3
 8007548:	1c02      	adds	r2, r0, #0
 800754a:	701a      	strb	r2, [r3, #0]
 800754c:	2408      	movs	r4, #8
 800754e:	193b      	adds	r3, r7, r4
 8007550:	1c0a      	adds	r2, r1, #0
 8007552:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007554:	2117      	movs	r1, #23
 8007556:	187b      	adds	r3, r7, r1
 8007558:	2200      	movs	r2, #0
 800755a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800755c:	2516      	movs	r5, #22
 800755e:	197b      	adds	r3, r7, r5
 8007560:	2200      	movs	r2, #0
 8007562:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	23b0      	movs	r3, #176	; 0xb0
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	58d0      	ldr	r0, [r2, r3]
 800756c:	193b      	adds	r3, r7, r4
 800756e:	881d      	ldrh	r5, [r3, #0]
 8007570:	000e      	movs	r6, r1
 8007572:	187c      	adds	r4, r7, r1
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	230b      	movs	r3, #11
 8007578:	18fb      	adds	r3, r7, r3
 800757a:	7819      	ldrb	r1, [r3, #0]
 800757c:	002b      	movs	r3, r5
 800757e:	f7f9 fdaf 	bl	80010e0 <HAL_PCD_EP_Transmit>
 8007582:	0003      	movs	r3, r0
 8007584:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007586:	2516      	movs	r5, #22
 8007588:	197c      	adds	r4, r7, r5
 800758a:	19bb      	adds	r3, r7, r6
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	0018      	movs	r0, r3
 8007590:	f000 f85b 	bl	800764a <USBD_Get_USB_Status>
 8007594:	0003      	movs	r3, r0
 8007596:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007598:	197b      	adds	r3, r7, r5
 800759a:	781b      	ldrb	r3, [r3, #0]
}
 800759c:	0018      	movs	r0, r3
 800759e:	46bd      	mov	sp, r7
 80075a0:	b007      	add	sp, #28
 80075a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80075a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	0008      	movs	r0, r1
 80075ae:	607a      	str	r2, [r7, #4]
 80075b0:	0019      	movs	r1, r3
 80075b2:	230b      	movs	r3, #11
 80075b4:	18fb      	adds	r3, r7, r3
 80075b6:	1c02      	adds	r2, r0, #0
 80075b8:	701a      	strb	r2, [r3, #0]
 80075ba:	2408      	movs	r4, #8
 80075bc:	193b      	adds	r3, r7, r4
 80075be:	1c0a      	adds	r2, r1, #0
 80075c0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075c2:	2117      	movs	r1, #23
 80075c4:	187b      	adds	r3, r7, r1
 80075c6:	2200      	movs	r2, #0
 80075c8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ca:	2516      	movs	r5, #22
 80075cc:	197b      	adds	r3, r7, r5
 80075ce:	2200      	movs	r2, #0
 80075d0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	23b0      	movs	r3, #176	; 0xb0
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	58d0      	ldr	r0, [r2, r3]
 80075da:	193b      	adds	r3, r7, r4
 80075dc:	881d      	ldrh	r5, [r3, #0]
 80075de:	000e      	movs	r6, r1
 80075e0:	187c      	adds	r4, r7, r1
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	230b      	movs	r3, #11
 80075e6:	18fb      	adds	r3, r7, r3
 80075e8:	7819      	ldrb	r1, [r3, #0]
 80075ea:	002b      	movs	r3, r5
 80075ec:	f7f9 fd41 	bl	8001072 <HAL_PCD_EP_Receive>
 80075f0:	0003      	movs	r3, r0
 80075f2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075f4:	2516      	movs	r5, #22
 80075f6:	197c      	adds	r4, r7, r5
 80075f8:	19bb      	adds	r3, r7, r6
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	0018      	movs	r0, r3
 80075fe:	f000 f824 	bl	800764a <USBD_Get_USB_Status>
 8007602:	0003      	movs	r3, r0
 8007604:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007606:	197b      	adds	r3, r7, r5
 8007608:	781b      	ldrb	r3, [r3, #0]
}
 800760a:	0018      	movs	r0, r3
 800760c:	46bd      	mov	sp, r7
 800760e:	b007      	add	sp, #28
 8007610:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007614 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800761c:	4b02      	ldr	r3, [pc, #8]	; (8007628 <USBD_static_malloc+0x14>)
}
 800761e:	0018      	movs	r0, r3
 8007620:	46bd      	mov	sp, r7
 8007622:	b002      	add	sp, #8
 8007624:	bd80      	pop	{r7, pc}
 8007626:	46c0      	nop			; (mov r8, r8)
 8007628:	20000944 	.word	0x20000944

0800762c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]

}
 8007634:	46c0      	nop			; (mov r8, r8)
 8007636:	46bd      	mov	sp, r7
 8007638:	b002      	add	sp, #8
 800763a:	bd80      	pop	{r7, pc}

0800763c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007640:	f7f8 ff56 	bl	80004f0 <SystemClock_Config>
}
 8007644:	46c0      	nop			; (mov r8, r8)
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	0002      	movs	r2, r0
 8007652:	1dfb      	adds	r3, r7, #7
 8007654:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007656:	230f      	movs	r3, #15
 8007658:	18fb      	adds	r3, r7, r3
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800765e:	1dfb      	adds	r3, r7, #7
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	2b03      	cmp	r3, #3
 8007664:	d017      	beq.n	8007696 <USBD_Get_USB_Status+0x4c>
 8007666:	dc1b      	bgt.n	80076a0 <USBD_Get_USB_Status+0x56>
 8007668:	2b02      	cmp	r3, #2
 800766a:	d00f      	beq.n	800768c <USBD_Get_USB_Status+0x42>
 800766c:	dc18      	bgt.n	80076a0 <USBD_Get_USB_Status+0x56>
 800766e:	2b00      	cmp	r3, #0
 8007670:	d002      	beq.n	8007678 <USBD_Get_USB_Status+0x2e>
 8007672:	2b01      	cmp	r3, #1
 8007674:	d005      	beq.n	8007682 <USBD_Get_USB_Status+0x38>
 8007676:	e013      	b.n	80076a0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007678:	230f      	movs	r3, #15
 800767a:	18fb      	adds	r3, r7, r3
 800767c:	2200      	movs	r2, #0
 800767e:	701a      	strb	r2, [r3, #0]
    break;
 8007680:	e013      	b.n	80076aa <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007682:	230f      	movs	r3, #15
 8007684:	18fb      	adds	r3, r7, r3
 8007686:	2202      	movs	r2, #2
 8007688:	701a      	strb	r2, [r3, #0]
    break;
 800768a:	e00e      	b.n	80076aa <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800768c:	230f      	movs	r3, #15
 800768e:	18fb      	adds	r3, r7, r3
 8007690:	2201      	movs	r2, #1
 8007692:	701a      	strb	r2, [r3, #0]
    break;
 8007694:	e009      	b.n	80076aa <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007696:	230f      	movs	r3, #15
 8007698:	18fb      	adds	r3, r7, r3
 800769a:	2202      	movs	r2, #2
 800769c:	701a      	strb	r2, [r3, #0]
    break;
 800769e:	e004      	b.n	80076aa <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80076a0:	230f      	movs	r3, #15
 80076a2:	18fb      	adds	r3, r7, r3
 80076a4:	2202      	movs	r2, #2
 80076a6:	701a      	strb	r2, [r3, #0]
    break;
 80076a8:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80076aa:	230f      	movs	r3, #15
 80076ac:	18fb      	adds	r3, r7, r3
 80076ae:	781b      	ldrb	r3, [r3, #0]
}
 80076b0:	0018      	movs	r0, r3
 80076b2:	46bd      	mov	sp, r7
 80076b4:	b004      	add	sp, #16
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <memset>:
 80076b8:	0003      	movs	r3, r0
 80076ba:	1882      	adds	r2, r0, r2
 80076bc:	4293      	cmp	r3, r2
 80076be:	d100      	bne.n	80076c2 <memset+0xa>
 80076c0:	4770      	bx	lr
 80076c2:	7019      	strb	r1, [r3, #0]
 80076c4:	3301      	adds	r3, #1
 80076c6:	e7f9      	b.n	80076bc <memset+0x4>

080076c8 <__libc_init_array>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	2600      	movs	r6, #0
 80076cc:	4c0c      	ldr	r4, [pc, #48]	; (8007700 <__libc_init_array+0x38>)
 80076ce:	4d0d      	ldr	r5, [pc, #52]	; (8007704 <__libc_init_array+0x3c>)
 80076d0:	1b64      	subs	r4, r4, r5
 80076d2:	10a4      	asrs	r4, r4, #2
 80076d4:	42a6      	cmp	r6, r4
 80076d6:	d109      	bne.n	80076ec <__libc_init_array+0x24>
 80076d8:	2600      	movs	r6, #0
 80076da:	f000 f819 	bl	8007710 <_init>
 80076de:	4c0a      	ldr	r4, [pc, #40]	; (8007708 <__libc_init_array+0x40>)
 80076e0:	4d0a      	ldr	r5, [pc, #40]	; (800770c <__libc_init_array+0x44>)
 80076e2:	1b64      	subs	r4, r4, r5
 80076e4:	10a4      	asrs	r4, r4, #2
 80076e6:	42a6      	cmp	r6, r4
 80076e8:	d105      	bne.n	80076f6 <__libc_init_array+0x2e>
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	00b3      	lsls	r3, r6, #2
 80076ee:	58eb      	ldr	r3, [r5, r3]
 80076f0:	4798      	blx	r3
 80076f2:	3601      	adds	r6, #1
 80076f4:	e7ee      	b.n	80076d4 <__libc_init_array+0xc>
 80076f6:	00b3      	lsls	r3, r6, #2
 80076f8:	58eb      	ldr	r3, [r5, r3]
 80076fa:	4798      	blx	r3
 80076fc:	3601      	adds	r6, #1
 80076fe:	e7f2      	b.n	80076e6 <__libc_init_array+0x1e>
 8007700:	080077f4 	.word	0x080077f4
 8007704:	080077f4 	.word	0x080077f4
 8007708:	080077f8 	.word	0x080077f8
 800770c:	080077f4 	.word	0x080077f4

08007710 <_init>:
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007716:	bc08      	pop	{r3}
 8007718:	469e      	mov	lr, r3
 800771a:	4770      	bx	lr

0800771c <_fini>:
 800771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771e:	46c0      	nop			; (mov r8, r8)
 8007720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007722:	bc08      	pop	{r3}
 8007724:	469e      	mov	lr, r3
 8007726:	4770      	bx	lr
