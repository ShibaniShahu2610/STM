
7_UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003998  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003a58  08003a58  00013a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ac4  08003ac4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003acc  08003acc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003acc  08003acc  00013acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ad0  08003ad0  00013ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08003ae0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003ae0  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009a24  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a3b  00000000  00000000  00029a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b8  00000000  00000000  0002b4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ed  00000000  00000000  0002bc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012db4  00000000  00000000  0002c27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a625  00000000  00000000  0003f031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00073ea9  00000000  00000000  00049656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a94  00000000  00000000  000bd500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000bef94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a40 	.word	0x08003a40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003a40 	.word	0x08003a40

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fa2a 	bl	8000904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f818 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8d6 	bl	8000664 <MX_GPIO_Init>
  MX_DMA_Init();
 80004b8:	f000 f8b6 	bl	8000628 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004bc:	f000 f884 	bl	80005c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit(&huart1, tx_data, sizeof(tx_data), 100);
  HAL_UART_Receive_DMA(&huart1, rx_data, sizeof(rx_data));
 80004c0:	4906      	ldr	r1, [pc, #24]	; (80004dc <main+0x34>)
 80004c2:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <main+0x38>)
 80004c4:	2205      	movs	r2, #5
 80004c6:	0018      	movs	r0, r3
 80004c8:	f002 f872 	bl	80025b0 <HAL_UART_Receive_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_UART_Transmit_DMA(&huart1, tx_data, 11);
//	  HAL_Delay(1000);
	  HAL_UART_Receive(&huart1, rx_data, sizeof(rx_data), 1000);
 80004cc:	23fa      	movs	r3, #250	; 0xfa
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	4902      	ldr	r1, [pc, #8]	; (80004dc <main+0x34>)
 80004d2:	4803      	ldr	r0, [pc, #12]	; (80004e0 <main+0x38>)
 80004d4:	2205      	movs	r2, #5
 80004d6:	f001 ff85 	bl	80023e4 <HAL_UART_Receive>
 80004da:	e7f7      	b.n	80004cc <main+0x24>
 80004dc:	20000140 	.word	0x20000140
 80004e0:	20000028 	.word	0x20000028

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b09d      	sub	sp, #116	; 0x74
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	2438      	movs	r4, #56	; 0x38
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	0018      	movs	r0, r3
 80004f0:	2338      	movs	r3, #56	; 0x38
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f003 fa76 	bl	80039e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fa:	2324      	movs	r3, #36	; 0x24
 80004fc:	18fb      	adds	r3, r7, r3
 80004fe:	0018      	movs	r0, r3
 8000500:	2314      	movs	r3, #20
 8000502:	001a      	movs	r2, r3
 8000504:	2100      	movs	r1, #0
 8000506:	f003 fa6e 	bl	80039e6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050a:	003b      	movs	r3, r7
 800050c:	0018      	movs	r0, r3
 800050e:	2324      	movs	r3, #36	; 0x24
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f003 fa67 	bl	80039e6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000518:	4b29      	ldr	r3, [pc, #164]	; (80005c0 <SystemClock_Config+0xdc>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a29      	ldr	r2, [pc, #164]	; (80005c4 <SystemClock_Config+0xe0>)
 800051e:	401a      	ands	r2, r3
 8000520:	4b27      	ldr	r3, [pc, #156]	; (80005c0 <SystemClock_Config+0xdc>)
 8000522:	2180      	movs	r1, #128	; 0x80
 8000524:	0109      	lsls	r1, r1, #4
 8000526:	430a      	orrs	r2, r1
 8000528:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052a:	0021      	movs	r1, r4
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2202      	movs	r2, #2
 8000530:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2201      	movs	r2, #1
 8000536:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2210      	movs	r2, #16
 800053c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2202      	movs	r2, #2
 8000542:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	0412      	lsls	r2, r2, #16
 8000556:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000558:	187b      	adds	r3, r7, r1
 800055a:	0018      	movs	r0, r3
 800055c:	f000 fed8 	bl	8001310 <HAL_RCC_OscConfig>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000564:	f000 f8a6 	bl	80006b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	2124      	movs	r1, #36	; 0x24
 800056a:	187b      	adds	r3, r7, r1
 800056c:	220f      	movs	r2, #15
 800056e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2203      	movs	r2, #3
 8000574:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2100      	movs	r1, #0
 800058c:	0018      	movs	r0, r3
 800058e:	f001 fa83 	bl	8001a98 <HAL_RCC_ClockConfig>
 8000592:	1e03      	subs	r3, r0, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000596:	f000 f88d 	bl	80006b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800059a:	003b      	movs	r3, r7
 800059c:	2201      	movs	r2, #1
 800059e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005a0:	003b      	movs	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a6:	003b      	movs	r3, r7
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fc99 	bl	8001ee0 <HAL_RCCEx_PeriphCLKConfig>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005b2:	f000 f87f 	bl	80006b4 <Error_Handler>
  }
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b01d      	add	sp, #116	; 0x74
 80005bc:	bd90      	pop	{r4, r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	40007000 	.word	0x40007000
 80005c4:	ffffe7ff 	.word	0xffffe7ff

080005c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <MX_USART1_UART_Init+0x58>)
 80005ce:	4a15      	ldr	r2, [pc, #84]	; (8000624 <MX_USART1_UART_Init+0x5c>)
 80005d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <MX_USART1_UART_Init+0x58>)
 80005d4:	22e1      	movs	r2, #225	; 0xe1
 80005d6:	0252      	lsls	r2, r2, #9
 80005d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_USART1_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_USART1_UART_Init+0x58>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_USART1_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_USART1_UART_Init+0x58>)
 80005ee:	220c      	movs	r2, #12
 80005f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <MX_USART1_UART_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_USART1_UART_Init+0x58>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <MX_USART1_UART_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_USART1_UART_Init+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <MX_USART1_UART_Init+0x58>)
 800060c:	0018      	movs	r0, r3
 800060e:	f001 fdf5 	bl	80021fc <HAL_UART_Init>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d001      	beq.n	800061a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000616:	f000 f84d 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000028 	.word	0x20000028
 8000624:	40013800 	.word	0x40013800

08000628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_DMA_Init+0x38>)
 8000630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_DMA_Init+0x38>)
 8000634:	2101      	movs	r1, #1
 8000636:	430a      	orrs	r2, r1
 8000638:	631a      	str	r2, [r3, #48]	; 0x30
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_DMA_Init+0x38>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	2201      	movs	r2, #1
 8000640:	4013      	ands	r3, r2
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	200a      	movs	r0, #10
 800064c:	f000 fa76 	bl	8000b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000650:	200a      	movs	r0, #10
 8000652:	f000 fa88 	bl	8000b66 <HAL_NVIC_EnableIRQ>

}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b002      	add	sp, #8
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	40021000 	.word	0x40021000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_GPIO_Init+0x28>)
 800066c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_GPIO_Init+0x28>)
 8000670:	2101      	movs	r1, #1
 8000672:	430a      	orrs	r2, r1
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <MX_GPIO_Init+0x28>)
 8000678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067a:	2201      	movs	r2, #1
 800067c:	4013      	ands	r3, r2
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	40021000 	.word	0x40021000

08000690 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
  HAL_UART_Transmit(&huart1, rx_data, sizeof(rx_data), 100);
 8000698:	4904      	ldr	r1, [pc, #16]	; (80006ac <HAL_UART_RxCpltCallback+0x1c>)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <HAL_UART_RxCpltCallback+0x20>)
 800069c:	2364      	movs	r3, #100	; 0x64
 800069e:	2205      	movs	r2, #5
 80006a0:	f001 fe00 	bl	80022a4 <HAL_UART_Transmit>
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b002      	add	sp, #8
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000140 	.word	0x20000140
 80006b0:	20000028 	.word	0x20000028

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	e7fe      	b.n	80006bc <Error_Handler+0x8>
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <HAL_MspInit+0x24>)
 80006c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_MspInit+0x24>)
 80006ca:	2101      	movs	r1, #1
 80006cc:	430a      	orrs	r2, r1
 80006ce:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <HAL_MspInit+0x24>)
 80006d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <HAL_MspInit+0x24>)
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	0549      	lsls	r1, r1, #21
 80006da:	430a      	orrs	r2, r1
 80006dc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000

080006e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	240c      	movs	r4, #12
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	0018      	movs	r0, r3
 80006f6:	2314      	movs	r3, #20
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f003 f973 	bl	80039e6 <memset>
  if(huart->Instance==USART1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a46      	ldr	r2, [pc, #280]	; (8000820 <HAL_UART_MspInit+0x138>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d000      	beq.n	800070c <HAL_UART_MspInit+0x24>
 800070a:	e084      	b.n	8000816 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800070c:	4b45      	ldr	r3, [pc, #276]	; (8000824 <HAL_UART_MspInit+0x13c>)
 800070e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000710:	4b44      	ldr	r3, [pc, #272]	; (8000824 <HAL_UART_MspInit+0x13c>)
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	01c9      	lsls	r1, r1, #7
 8000716:	430a      	orrs	r2, r1
 8000718:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b42      	ldr	r3, [pc, #264]	; (8000824 <HAL_UART_MspInit+0x13c>)
 800071c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800071e:	4b41      	ldr	r3, [pc, #260]	; (8000824 <HAL_UART_MspInit+0x13c>)
 8000720:	2101      	movs	r1, #1
 8000722:	430a      	orrs	r2, r1
 8000724:	62da      	str	r2, [r3, #44]	; 0x2c
 8000726:	4b3f      	ldr	r3, [pc, #252]	; (8000824 <HAL_UART_MspInit+0x13c>)
 8000728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072a:	2201      	movs	r2, #1
 800072c:	4013      	ands	r3, r2
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 8000732:	193b      	adds	r3, r7, r4
 8000734:	22c0      	movs	r2, #192	; 0xc0
 8000736:	00d2      	lsls	r2, r2, #3
 8000738:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	0021      	movs	r1, r4
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2202      	movs	r2, #2
 8000740:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2203      	movs	r2, #3
 800074c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2204      	movs	r2, #4
 8000752:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	187a      	adds	r2, r7, r1
 8000756:	23a0      	movs	r3, #160	; 0xa0
 8000758:	05db      	lsls	r3, r3, #23
 800075a:	0011      	movs	r1, r2
 800075c:	0018      	movs	r0, r3
 800075e:	f000 fc61 	bl	8001024 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000762:	4b31      	ldr	r3, [pc, #196]	; (8000828 <HAL_UART_MspInit+0x140>)
 8000764:	4a31      	ldr	r2, [pc, #196]	; (800082c <HAL_UART_MspInit+0x144>)
 8000766:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8000768:	4b2f      	ldr	r3, [pc, #188]	; (8000828 <HAL_UART_MspInit+0x140>)
 800076a:	2203      	movs	r2, #3
 800076c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800076e:	4b2e      	ldr	r3, [pc, #184]	; (8000828 <HAL_UART_MspInit+0x140>)
 8000770:	2210      	movs	r2, #16
 8000772:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000774:	4b2c      	ldr	r3, [pc, #176]	; (8000828 <HAL_UART_MspInit+0x140>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800077a:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <HAL_UART_MspInit+0x140>)
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000780:	4b29      	ldr	r3, [pc, #164]	; (8000828 <HAL_UART_MspInit+0x140>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000786:	4b28      	ldr	r3, [pc, #160]	; (8000828 <HAL_UART_MspInit+0x140>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800078c:	4b26      	ldr	r3, [pc, #152]	; (8000828 <HAL_UART_MspInit+0x140>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000792:	4b25      	ldr	r3, [pc, #148]	; (8000828 <HAL_UART_MspInit+0x140>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000798:	4b23      	ldr	r3, [pc, #140]	; (8000828 <HAL_UART_MspInit+0x140>)
 800079a:	0018      	movs	r0, r3
 800079c:	f000 fa00 	bl	8000ba0 <HAL_DMA_Init>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80007a4:	f7ff ff86 	bl	80006b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a1f      	ldr	r2, [pc, #124]	; (8000828 <HAL_UART_MspInit+0x140>)
 80007ac:	671a      	str	r2, [r3, #112]	; 0x70
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <HAL_UART_MspInit+0x140>)
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80007b4:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <HAL_UART_MspInit+0x148>)
 80007b6:	4a1f      	ldr	r2, [pc, #124]	; (8000834 <HAL_UART_MspInit+0x14c>)
 80007b8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 80007ba:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <HAL_UART_MspInit+0x148>)
 80007bc:	2203      	movs	r2, #3
 80007be:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <HAL_UART_MspInit+0x148>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <HAL_UART_MspInit+0x148>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <HAL_UART_MspInit+0x148>)
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <HAL_UART_MspInit+0x148>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <HAL_UART_MspInit+0x148>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <HAL_UART_MspInit+0x148>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_UART_MspInit+0x148>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <HAL_UART_MspInit+0x148>)
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 f9d7 	bl	8000ba0 <HAL_DMA_Init>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80007f6:	f7ff ff5d 	bl	80006b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <HAL_UART_MspInit+0x148>)
 80007fe:	675a      	str	r2, [r3, #116]	; 0x74
 8000800:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <HAL_UART_MspInit+0x148>)
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	201b      	movs	r0, #27
 800080c:	f000 f996 	bl	8000b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000810:	201b      	movs	r0, #27
 8000812:	f000 f9a8 	bl	8000b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b009      	add	sp, #36	; 0x24
 800081c:	bd90      	pop	{r4, r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	40013800 	.word	0x40013800
 8000824:	40021000 	.word	0x40021000
 8000828:	200000b0 	.word	0x200000b0
 800082c:	4002001c 	.word	0x4002001c
 8000830:	200000f8 	.word	0x200000f8
 8000834:	40020030 	.word	0x40020030

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800083c:	e7fe      	b.n	800083c <NMI_Handler+0x4>

0800083e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <HardFault_Handler+0x4>

08000844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085c:	f000 f8a6 	bl	80009ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800086e:	0018      	movs	r0, r3
 8000870:	f000 fafb 	bl	8000e6a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000876:	0018      	movs	r0, r3
 8000878:	f000 faf7 	bl	8000e6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	200000b0 	.word	0x200000b0
 8000888:	200000f8 	.word	0x200000f8

0800088c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <USART1_IRQHandler+0x14>)
 8000892:	0018      	movs	r0, r3
 8000894:	f001 feea 	bl	800266c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	20000028 	.word	0x20000028

080008a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008b2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b4:	f7ff fff6 	bl	80008a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <LoopForever+0x6>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	; (80008f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <LoopForever+0xe>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	; (80008fc <LoopForever+0x16>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008de:	f003 f88b 	bl	80039f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e2:	f7ff fde1 	bl	80004a8 <main>

080008e6 <LoopForever>:

LoopForever:
    b LoopForever
 80008e6:	e7fe      	b.n	80008e6 <LoopForever>
  ldr   r0, =_estack
 80008e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008f4:	08003ad4 	.word	0x08003ad4
  ldr r2, =_sbss
 80008f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008fc:	2000014c 	.word	0x2000014c

08000900 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_COMP_IRQHandler>
	...

08000904 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_Init+0x3c>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_Init+0x3c>)
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	430a      	orrs	r2, r1
 800091a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800091c:	2000      	movs	r0, #0
 800091e:	f000 f811 	bl	8000944 <HAL_InitTick>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d003      	beq.n	800092e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]
 800092c:	e001      	b.n	8000932 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800092e:	f7ff fec7 	bl	80006c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
}
 8000936:	0018      	movs	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	b002      	add	sp, #8
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <HAL_InitTick+0x5c>)
 800094e:	681c      	ldr	r4, [r3, #0]
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <HAL_InitTick+0x60>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	0019      	movs	r1, r3
 8000956:	23fa      	movs	r3, #250	; 0xfa
 8000958:	0098      	lsls	r0, r3, #2
 800095a:	f7ff fbd5 	bl	8000108 <__udivsi3>
 800095e:	0003      	movs	r3, r0
 8000960:	0019      	movs	r1, r3
 8000962:	0020      	movs	r0, r4
 8000964:	f7ff fbd0 	bl	8000108 <__udivsi3>
 8000968:	0003      	movs	r3, r0
 800096a:	0018      	movs	r0, r3
 800096c:	f000 f90b 	bl	8000b86 <HAL_SYSTICK_Config>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	e00f      	b.n	8000998 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b03      	cmp	r3, #3
 800097c:	d80b      	bhi.n	8000996 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	2301      	movs	r3, #1
 8000982:	425b      	negs	r3, r3
 8000984:	2200      	movs	r2, #0
 8000986:	0018      	movs	r0, r3
 8000988:	f000 f8d8 	bl	8000b3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_InitTick+0x64>)
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	b003      	add	sp, #12
 800099e:	bd90      	pop	{r4, r7, pc}
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20000004 	.word	0x20000004

080009ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_IncTick+0x1c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	001a      	movs	r2, r3
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_IncTick+0x20>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	18d2      	adds	r2, r2, r3
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <HAL_IncTick+0x20>)
 80009be:	601a      	str	r2, [r3, #0]
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000148 	.word	0x20000148

080009d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <HAL_GetTick+0x10>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	20000148 	.word	0x20000148

080009e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	0002      	movs	r2, r0
 80009ec:	1dfb      	adds	r3, r7, #7
 80009ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b7f      	cmp	r3, #127	; 0x7f
 80009f6:	d809      	bhi.n	8000a0c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	001a      	movs	r2, r3
 80009fe:	231f      	movs	r3, #31
 8000a00:	401a      	ands	r2, r3
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <__NVIC_EnableIRQ+0x30>)
 8000a04:	2101      	movs	r1, #1
 8000a06:	4091      	lsls	r1, r2
 8000a08:	000a      	movs	r2, r1
 8000a0a:	601a      	str	r2, [r3, #0]
  }
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b002      	add	sp, #8
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	e000e100 	.word	0xe000e100

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	0002      	movs	r2, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a2c:	d828      	bhi.n	8000a80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a2e:	4a2f      	ldr	r2, [pc, #188]	; (8000aec <__NVIC_SetPriority+0xd4>)
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	089b      	lsrs	r3, r3, #2
 8000a38:	33c0      	adds	r3, #192	; 0xc0
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	589b      	ldr	r3, [r3, r2]
 8000a3e:	1dfa      	adds	r2, r7, #7
 8000a40:	7812      	ldrb	r2, [r2, #0]
 8000a42:	0011      	movs	r1, r2
 8000a44:	2203      	movs	r2, #3
 8000a46:	400a      	ands	r2, r1
 8000a48:	00d2      	lsls	r2, r2, #3
 8000a4a:	21ff      	movs	r1, #255	; 0xff
 8000a4c:	4091      	lsls	r1, r2
 8000a4e:	000a      	movs	r2, r1
 8000a50:	43d2      	mvns	r2, r2
 8000a52:	401a      	ands	r2, r3
 8000a54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	019b      	lsls	r3, r3, #6
 8000a5a:	22ff      	movs	r2, #255	; 0xff
 8000a5c:	401a      	ands	r2, r3
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	0018      	movs	r0, r3
 8000a64:	2303      	movs	r3, #3
 8000a66:	4003      	ands	r3, r0
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a6c:	481f      	ldr	r0, [pc, #124]	; (8000aec <__NVIC_SetPriority+0xd4>)
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	b25b      	sxtb	r3, r3
 8000a74:	089b      	lsrs	r3, r3, #2
 8000a76:	430a      	orrs	r2, r1
 8000a78:	33c0      	adds	r3, #192	; 0xc0
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a7e:	e031      	b.n	8000ae4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a80:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <__NVIC_SetPriority+0xd8>)
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	0019      	movs	r1, r3
 8000a88:	230f      	movs	r3, #15
 8000a8a:	400b      	ands	r3, r1
 8000a8c:	3b08      	subs	r3, #8
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	3306      	adds	r3, #6
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	18d3      	adds	r3, r2, r3
 8000a96:	3304      	adds	r3, #4
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	1dfa      	adds	r2, r7, #7
 8000a9c:	7812      	ldrb	r2, [r2, #0]
 8000a9e:	0011      	movs	r1, r2
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	400a      	ands	r2, r1
 8000aa4:	00d2      	lsls	r2, r2, #3
 8000aa6:	21ff      	movs	r1, #255	; 0xff
 8000aa8:	4091      	lsls	r1, r2
 8000aaa:	000a      	movs	r2, r1
 8000aac:	43d2      	mvns	r2, r2
 8000aae:	401a      	ands	r2, r3
 8000ab0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	019b      	lsls	r3, r3, #6
 8000ab6:	22ff      	movs	r2, #255	; 0xff
 8000ab8:	401a      	ands	r2, r3
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	0018      	movs	r0, r3
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	4003      	ands	r3, r0
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac8:	4809      	ldr	r0, [pc, #36]	; (8000af0 <__NVIC_SetPriority+0xd8>)
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	001c      	movs	r4, r3
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	4023      	ands	r3, r4
 8000ad4:	3b08      	subs	r3, #8
 8000ad6:	089b      	lsrs	r3, r3, #2
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	3306      	adds	r3, #6
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	18c3      	adds	r3, r0, r3
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	601a      	str	r2, [r3, #0]
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b003      	add	sp, #12
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	e000e100 	.word	0xe000e100
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	1e5a      	subs	r2, r3, #1
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	045b      	lsls	r3, r3, #17
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d301      	bcc.n	8000b0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e010      	b.n	8000b2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <SysTick_Config+0x44>)
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	3a01      	subs	r2, #1
 8000b12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b14:	2301      	movs	r3, #1
 8000b16:	425b      	negs	r3, r3
 8000b18:	2103      	movs	r1, #3
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f7ff ff7c 	bl	8000a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <SysTick_Config+0x44>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b26:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <SysTick_Config+0x44>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	0018      	movs	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	e000e010 	.word	0xe000e010

08000b3c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	210f      	movs	r1, #15
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	1c02      	adds	r2, r0, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	0011      	movs	r1, r2
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff ff5d 	bl	8000a18 <__NVIC_SetPriority>
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b004      	add	sp, #16
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	0002      	movs	r2, r0
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b25b      	sxtb	r3, r3
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff ff33 	bl	80009e4 <__NVIC_EnableIRQ>
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b002      	add	sp, #8
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff ffaf 	bl	8000af4 <SysTick_Config>
 8000b96:	0003      	movs	r3, r0
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e061      	b.n	8000c76 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a32      	ldr	r2, [pc, #200]	; (8000c80 <HAL_DMA_Init+0xe0>)
 8000bb8:	4694      	mov	ip, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	2114      	movs	r1, #20
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f7ff faa2 	bl	8000108 <__udivsi3>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	009a      	lsls	r2, r3, #2
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a2d      	ldr	r2, [pc, #180]	; (8000c84 <HAL_DMA_Init+0xe4>)
 8000bd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2225      	movs	r2, #37	; 0x25
 8000bd6:	2102      	movs	r1, #2
 8000bd8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4a28      	ldr	r2, [pc, #160]	; (8000c88 <HAL_DMA_Init+0xe8>)
 8000be6:	4013      	ands	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	691b      	ldr	r3, [r3, #16]
 8000bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	01db      	lsls	r3, r3, #7
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d018      	beq.n	8000c5e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <HAL_DMA_Init+0xec>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c34:	211c      	movs	r1, #28
 8000c36:	400b      	ands	r3, r1
 8000c38:	210f      	movs	r1, #15
 8000c3a:	4099      	lsls	r1, r3
 8000c3c:	000b      	movs	r3, r1
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_DMA_Init+0xec>)
 8000c42:	400a      	ands	r2, r1
 8000c44:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_DMA_Init+0xec>)
 8000c48:	6819      	ldr	r1, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	201c      	movs	r0, #28
 8000c54:	4003      	ands	r3, r0
 8000c56:	409a      	lsls	r2, r3
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_DMA_Init+0xec>)
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2225      	movs	r2, #37	; 0x25
 8000c68:	2101      	movs	r1, #1
 8000c6a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2224      	movs	r2, #36	; 0x24
 8000c70:	2100      	movs	r1, #0
 8000c72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	0018      	movs	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b004      	add	sp, #16
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	bffdfff8 	.word	0xbffdfff8
 8000c84:	40020000 	.word	0x40020000
 8000c88:	ffff800f 	.word	0xffff800f
 8000c8c:	400200a8 	.word	0x400200a8

08000c90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c9e:	2317      	movs	r3, #23
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2224      	movs	r2, #36	; 0x24
 8000caa:	5c9b      	ldrb	r3, [r3, r2]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d101      	bne.n	8000cb4 <HAL_DMA_Start_IT+0x24>
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	e04f      	b.n	8000d54 <HAL_DMA_Start_IT+0xc4>
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2224      	movs	r2, #36	; 0x24
 8000cb8:	2101      	movs	r1, #1
 8000cba:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2225      	movs	r2, #37	; 0x25
 8000cc0:	5c9b      	ldrb	r3, [r3, r2]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d13a      	bne.n	8000d3e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2225      	movs	r2, #37	; 0x25
 8000ccc:	2102      	movs	r1, #2
 8000cce:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	438a      	bics	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	68b9      	ldr	r1, [r7, #8]
 8000cec:	68f8      	ldr	r0, [r7, #12]
 8000cee:	f000 f96a 	bl	8000fc6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d008      	beq.n	8000d0c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	210e      	movs	r1, #14
 8000d06:	430a      	orrs	r2, r1
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	e00f      	b.n	8000d2c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2104      	movs	r1, #4
 8000d18:	438a      	bics	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	210a      	movs	r1, #10
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2101      	movs	r1, #1
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	e007      	b.n	8000d4e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2224      	movs	r2, #36	; 0x24
 8000d42:	2100      	movs	r1, #0
 8000d44:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d46:	2317      	movs	r3, #23
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000d4e:	2317      	movs	r3, #23
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	781b      	ldrb	r3, [r3, #0]
}
 8000d54:	0018      	movs	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b006      	add	sp, #24
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d64:	230f      	movs	r3, #15
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2225      	movs	r2, #37	; 0x25
 8000d70:	5c9b      	ldrb	r3, [r3, r2]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d008      	beq.n	8000d8a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2224      	movs	r2, #36	; 0x24
 8000d82:	2100      	movs	r1, #0
 8000d84:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e024      	b.n	8000dd4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	210e      	movs	r1, #14
 8000d96:	438a      	bics	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2101      	movs	r1, #1
 8000da6:	438a      	bics	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	221c      	movs	r2, #28
 8000db0:	401a      	ands	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	2101      	movs	r1, #1
 8000db8:	4091      	lsls	r1, r2
 8000dba:	000a      	movs	r2, r1
 8000dbc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2225      	movs	r2, #37	; 0x25
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2224      	movs	r2, #36	; 0x24
 8000dca:	2100      	movs	r1, #0
 8000dcc:	5499      	strb	r1, [r3, r2]

    return status;
 8000dce:	230f      	movs	r3, #15
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b004      	add	sp, #16
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000de4:	210f      	movs	r1, #15
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2225      	movs	r2, #37	; 0x25
 8000df0:	5c9b      	ldrb	r3, [r3, r2]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d006      	beq.n	8000e06 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]
 8000e04:	e02a      	b.n	8000e5c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	210e      	movs	r1, #14
 8000e12:	438a      	bics	r2, r1
 8000e14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2101      	movs	r1, #1
 8000e22:	438a      	bics	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	221c      	movs	r2, #28
 8000e2c:	401a      	ands	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	2101      	movs	r1, #1
 8000e34:	4091      	lsls	r1, r2
 8000e36:	000a      	movs	r2, r1
 8000e38:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2225      	movs	r2, #37	; 0x25
 8000e3e:	2101      	movs	r1, #1
 8000e40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2224      	movs	r2, #36	; 0x24
 8000e46:	2100      	movs	r1, #0
 8000e48:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d004      	beq.n	8000e5c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	0010      	movs	r0, r2
 8000e5a:	4798      	blx	r3
    }
  }
  return status;
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	781b      	ldrb	r3, [r3, #0]
}
 8000e62:	0018      	movs	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b004      	add	sp, #16
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	221c      	movs	r2, #28
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	409a      	lsls	r2, r3
 8000e8e:	0013      	movs	r3, r2
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	4013      	ands	r3, r2
 8000e94:	d026      	beq.n	8000ee4 <HAL_DMA_IRQHandler+0x7a>
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	2204      	movs	r2, #4
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d022      	beq.n	8000ee4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2220      	movs	r2, #32
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	d107      	bne.n	8000eba <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	438a      	bics	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	221c      	movs	r2, #28
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	4091      	lsls	r1, r2
 8000eca:	000a      	movs	r2, r1
 8000ecc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d100      	bne.n	8000ed8 <HAL_DMA_IRQHandler+0x6e>
 8000ed6:	e071      	b.n	8000fbc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	0010      	movs	r0, r2
 8000ee0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8000ee2:	e06b      	b.n	8000fbc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee8:	221c      	movs	r2, #28
 8000eea:	4013      	ands	r3, r2
 8000eec:	2202      	movs	r2, #2
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d02d      	beq.n	8000f54 <HAL_DMA_IRQHandler+0xea>
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	2202      	movs	r2, #2
 8000efc:	4013      	ands	r3, r2
 8000efe:	d029      	beq.n	8000f54 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2220      	movs	r2, #32
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d10b      	bne.n	8000f24 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	210a      	movs	r1, #10
 8000f18:	438a      	bics	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2225      	movs	r2, #37	; 0x25
 8000f20:	2101      	movs	r1, #1
 8000f22:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f28:	221c      	movs	r2, #28
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	2102      	movs	r1, #2
 8000f32:	4091      	lsls	r1, r2
 8000f34:	000a      	movs	r2, r1
 8000f36:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2224      	movs	r2, #36	; 0x24
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d039      	beq.n	8000fbc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	0010      	movs	r0, r2
 8000f50:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f52:	e033      	b.n	8000fbc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f58:	221c      	movs	r2, #28
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	0013      	movs	r3, r2
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4013      	ands	r3, r2
 8000f66:	d02a      	beq.n	8000fbe <HAL_DMA_IRQHandler+0x154>
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	2208      	movs	r2, #8
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d026      	beq.n	8000fbe <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	210e      	movs	r1, #14
 8000f7c:	438a      	bics	r2, r1
 8000f7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f84:	221c      	movs	r2, #28
 8000f86:	401a      	ands	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4091      	lsls	r1, r2
 8000f90:	000a      	movs	r2, r1
 8000f92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2225      	movs	r2, #37	; 0x25
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2224      	movs	r2, #36	; 0x24
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	0010      	movs	r0, r2
 8000fba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46c0      	nop			; (mov r8, r8)
}
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b004      	add	sp, #16
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd8:	221c      	movs	r2, #28
 8000fda:	401a      	ands	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	4091      	lsls	r1, r2
 8000fe4:	000a      	movs	r2, r1
 8000fe6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	2b10      	cmp	r3, #16
 8000ff6:	d108      	bne.n	800100a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68ba      	ldr	r2, [r7, #8]
 8001006:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001008:	e007      	b.n	800101a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	60da      	str	r2, [r3, #12]
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b004      	add	sp, #16
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800103a:	e14f      	b.n	80012dc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2101      	movs	r1, #1
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	4091      	lsls	r1, r2
 8001046:	000a      	movs	r2, r1
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <HAL_GPIO_Init+0x30>
 8001052:	e140      	b.n	80012d6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2203      	movs	r2, #3
 800105a:	4013      	ands	r3, r2
 800105c:	2b01      	cmp	r3, #1
 800105e:	d005      	beq.n	800106c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2203      	movs	r2, #3
 8001066:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001068:	2b02      	cmp	r3, #2
 800106a:	d130      	bne.n	80010ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	409a      	lsls	r2, r3
 800107a:	0013      	movs	r3, r2
 800107c:	43da      	mvns	r2, r3
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68da      	ldr	r2, [r3, #12]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	409a      	lsls	r2, r3
 800108e:	0013      	movs	r3, r2
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a2:	2201      	movs	r2, #1
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	409a      	lsls	r2, r3
 80010a8:	0013      	movs	r3, r2
 80010aa:	43da      	mvns	r2, r3
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	091b      	lsrs	r3, r3, #4
 80010b8:	2201      	movs	r2, #1
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2203      	movs	r2, #3
 80010d4:	4013      	ands	r3, r2
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d017      	beq.n	800110a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	409a      	lsls	r2, r3
 80010e8:	0013      	movs	r3, r2
 80010ea:	43da      	mvns	r2, r3
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	409a      	lsls	r2, r3
 80010fc:	0013      	movs	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2203      	movs	r2, #3
 8001110:	4013      	ands	r3, r2
 8001112:	2b02      	cmp	r3, #2
 8001114:	d123      	bne.n	800115e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	58d3      	ldr	r3, [r2, r3]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	2207      	movs	r2, #7
 8001128:	4013      	ands	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	43da      	mvns	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	691a      	ldr	r2, [r3, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2107      	movs	r1, #7
 8001142:	400b      	ands	r3, r1
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	409a      	lsls	r2, r3
 8001148:	0013      	movs	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	0092      	lsls	r2, r2, #2
 800115a:	6939      	ldr	r1, [r7, #16]
 800115c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	409a      	lsls	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	43da      	mvns	r2, r3
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2203      	movs	r2, #3
 800117c:	401a      	ands	r2, r3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	409a      	lsls	r2, r3
 8001184:	0013      	movs	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	23c0      	movs	r3, #192	; 0xc0
 8001198:	029b      	lsls	r3, r3, #10
 800119a:	4013      	ands	r3, r2
 800119c:	d100      	bne.n	80011a0 <HAL_GPIO_Init+0x17c>
 800119e:	e09a      	b.n	80012d6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a0:	4b54      	ldr	r3, [pc, #336]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 80011a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a4:	4b53      	ldr	r3, [pc, #332]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 80011a6:	2101      	movs	r1, #1
 80011a8:	430a      	orrs	r2, r1
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ac:	4a52      	ldr	r2, [pc, #328]	; (80012f8 <HAL_GPIO_Init+0x2d4>)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	589b      	ldr	r3, [r3, r2]
 80011b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	2203      	movs	r2, #3
 80011be:	4013      	ands	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	409a      	lsls	r2, r3
 80011c6:	0013      	movs	r3, r2
 80011c8:	43da      	mvns	r2, r3
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	23a0      	movs	r3, #160	; 0xa0
 80011d4:	05db      	lsls	r3, r3, #23
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d019      	beq.n	800120e <HAL_GPIO_Init+0x1ea>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a47      	ldr	r2, [pc, #284]	; (80012fc <HAL_GPIO_Init+0x2d8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d013      	beq.n	800120a <HAL_GPIO_Init+0x1e6>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a46      	ldr	r2, [pc, #280]	; (8001300 <HAL_GPIO_Init+0x2dc>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d00d      	beq.n	8001206 <HAL_GPIO_Init+0x1e2>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a45      	ldr	r2, [pc, #276]	; (8001304 <HAL_GPIO_Init+0x2e0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d007      	beq.n	8001202 <HAL_GPIO_Init+0x1de>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a44      	ldr	r2, [pc, #272]	; (8001308 <HAL_GPIO_Init+0x2e4>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d101      	bne.n	80011fe <HAL_GPIO_Init+0x1da>
 80011fa:	2305      	movs	r3, #5
 80011fc:	e008      	b.n	8001210 <HAL_GPIO_Init+0x1ec>
 80011fe:	2306      	movs	r3, #6
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x1ec>
 8001202:	2303      	movs	r3, #3
 8001204:	e004      	b.n	8001210 <HAL_GPIO_Init+0x1ec>
 8001206:	2302      	movs	r3, #2
 8001208:	e002      	b.n	8001210 <HAL_GPIO_Init+0x1ec>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <HAL_GPIO_Init+0x1ec>
 800120e:	2300      	movs	r3, #0
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	2103      	movs	r1, #3
 8001214:	400a      	ands	r2, r1
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	4093      	lsls	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001220:	4935      	ldr	r1, [pc, #212]	; (80012f8 <HAL_GPIO_Init+0x2d4>)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122e:	4b37      	ldr	r3, [pc, #220]	; (800130c <HAL_GPIO_Init+0x2e8>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43da      	mvns	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	035b      	lsls	r3, r3, #13
 8001246:	4013      	ands	r3, r2
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001252:	4b2e      	ldr	r3, [pc, #184]	; (800130c <HAL_GPIO_Init+0x2e8>)
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001258:	4b2c      	ldr	r3, [pc, #176]	; (800130c <HAL_GPIO_Init+0x2e8>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43da      	mvns	r2, r3
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	039b      	lsls	r3, r3, #14
 8001270:	4013      	ands	r3, r2
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800127c:	4b23      	ldr	r3, [pc, #140]	; (800130c <HAL_GPIO_Init+0x2e8>)
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <HAL_GPIO_Init+0x2e8>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43da      	mvns	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	029b      	lsls	r3, r3, #10
 800129a:	4013      	ands	r3, r2
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <HAL_GPIO_Init+0x2e8>)
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <HAL_GPIO_Init+0x2e8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43da      	mvns	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	025b      	lsls	r3, r3, #9
 80012c4:	4013      	ands	r3, r2
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_GPIO_Init+0x2e8>)
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3301      	adds	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	40da      	lsrs	r2, r3
 80012e4:	1e13      	subs	r3, r2, #0
 80012e6:	d000      	beq.n	80012ea <HAL_GPIO_Init+0x2c6>
 80012e8:	e6a8      	b.n	800103c <HAL_GPIO_Init+0x18>
  }
}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b006      	add	sp, #24
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010000 	.word	0x40010000
 80012fc:	50000400 	.word	0x50000400
 8001300:	50000800 	.word	0x50000800
 8001304:	50000c00 	.word	0x50000c00
 8001308:	50001c00 	.word	0x50001c00
 800130c:	40010400 	.word	0x40010400

08001310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	f000 fbaf 	bl	8001a82 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001324:	4bcf      	ldr	r3, [pc, #828]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	220c      	movs	r2, #12
 800132a:	4013      	ands	r3, r2
 800132c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800132e:	4bcd      	ldr	r3, [pc, #820]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	025b      	lsls	r3, r3, #9
 8001336:	4013      	ands	r3, r2
 8001338:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2201      	movs	r2, #1
 8001340:	4013      	ands	r3, r2
 8001342:	d100      	bne.n	8001346 <HAL_RCC_OscConfig+0x36>
 8001344:	e07e      	b.n	8001444 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	2b08      	cmp	r3, #8
 800134a:	d007      	beq.n	800135c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	2b0c      	cmp	r3, #12
 8001350:	d112      	bne.n	8001378 <HAL_RCC_OscConfig+0x68>
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	025b      	lsls	r3, r3, #9
 8001358:	429a      	cmp	r2, r3
 800135a:	d10d      	bne.n	8001378 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	4bc1      	ldr	r3, [pc, #772]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	029b      	lsls	r3, r3, #10
 8001364:	4013      	ands	r3, r2
 8001366:	d100      	bne.n	800136a <HAL_RCC_OscConfig+0x5a>
 8001368:	e06b      	b.n	8001442 <HAL_RCC_OscConfig+0x132>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d167      	bne.n	8001442 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	f000 fb85 	bl	8001a82 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	025b      	lsls	r3, r3, #9
 8001380:	429a      	cmp	r2, r3
 8001382:	d107      	bne.n	8001394 <HAL_RCC_OscConfig+0x84>
 8001384:	4bb7      	ldr	r3, [pc, #732]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4bb6      	ldr	r3, [pc, #728]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	0249      	lsls	r1, r1, #9
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e027      	b.n	80013e4 <HAL_RCC_OscConfig+0xd4>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	23a0      	movs	r3, #160	; 0xa0
 800139a:	02db      	lsls	r3, r3, #11
 800139c:	429a      	cmp	r2, r3
 800139e:	d10e      	bne.n	80013be <HAL_RCC_OscConfig+0xae>
 80013a0:	4bb0      	ldr	r3, [pc, #704]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4baf      	ldr	r3, [pc, #700]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	02c9      	lsls	r1, r1, #11
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	4bad      	ldr	r3, [pc, #692]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4bac      	ldr	r3, [pc, #688]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	0249      	lsls	r1, r1, #9
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	e012      	b.n	80013e4 <HAL_RCC_OscConfig+0xd4>
 80013be:	4ba9      	ldr	r3, [pc, #676]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4ba8      	ldr	r3, [pc, #672]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80013c4:	49a8      	ldr	r1, [pc, #672]	; (8001668 <HAL_RCC_OscConfig+0x358>)
 80013c6:	400a      	ands	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	4ba6      	ldr	r3, [pc, #664]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	025b      	lsls	r3, r3, #9
 80013d2:	4013      	ands	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4ba2      	ldr	r3, [pc, #648]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4ba1      	ldr	r3, [pc, #644]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80013de:	49a3      	ldr	r1, [pc, #652]	; (800166c <HAL_RCC_OscConfig+0x35c>)
 80013e0:	400a      	ands	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d015      	beq.n	8001418 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff faf0 	bl	80009d0 <HAL_GetTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013f4:	e009      	b.n	800140a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f6:	f7ff faeb 	bl	80009d0 <HAL_GetTick>
 80013fa:	0002      	movs	r2, r0
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b64      	cmp	r3, #100	; 0x64
 8001402:	d902      	bls.n	800140a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	f000 fb3c 	bl	8001a82 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800140a:	4b96      	ldr	r3, [pc, #600]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	029b      	lsls	r3, r3, #10
 8001412:	4013      	ands	r3, r2
 8001414:	d0ef      	beq.n	80013f6 <HAL_RCC_OscConfig+0xe6>
 8001416:	e015      	b.n	8001444 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fada 	bl	80009d0 <HAL_GetTick>
 800141c:	0003      	movs	r3, r0
 800141e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001422:	f7ff fad5 	bl	80009d0 <HAL_GetTick>
 8001426:	0002      	movs	r2, r0
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b64      	cmp	r3, #100	; 0x64
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e326      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001434:	4b8b      	ldr	r3, [pc, #556]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	029b      	lsls	r3, r3, #10
 800143c:	4013      	ands	r3, r2
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0x112>
 8001440:	e000      	b.n	8001444 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001442:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2202      	movs	r2, #2
 800144a:	4013      	ands	r3, r2
 800144c:	d100      	bne.n	8001450 <HAL_RCC_OscConfig+0x140>
 800144e:	e08b      	b.n	8001568 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d005      	beq.n	8001468 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	2b0c      	cmp	r3, #12
 8001460:	d13e      	bne.n	80014e0 <HAL_RCC_OscConfig+0x1d0>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d13b      	bne.n	80014e0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001468:	4b7e      	ldr	r3, [pc, #504]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2204      	movs	r2, #4
 800146e:	4013      	ands	r3, r2
 8001470:	d004      	beq.n	800147c <HAL_RCC_OscConfig+0x16c>
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e302      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147c:	4b79      	ldr	r3, [pc, #484]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4a7b      	ldr	r2, [pc, #492]	; (8001670 <HAL_RCC_OscConfig+0x360>)
 8001482:	4013      	ands	r3, r2
 8001484:	0019      	movs	r1, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	021a      	lsls	r2, r3, #8
 800148c:	4b75      	ldr	r3, [pc, #468]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 800148e:	430a      	orrs	r2, r1
 8001490:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001492:	4b74      	ldr	r3, [pc, #464]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2209      	movs	r2, #9
 8001498:	4393      	bics	r3, r2
 800149a:	0019      	movs	r1, r3
 800149c:	4b71      	ldr	r3, [pc, #452]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014a4:	f000 fc40 	bl	8001d28 <HAL_RCC_GetSysClockFreq>
 80014a8:	0001      	movs	r1, r0
 80014aa:	4b6e      	ldr	r3, [pc, #440]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	220f      	movs	r2, #15
 80014b2:	4013      	ands	r3, r2
 80014b4:	4a6f      	ldr	r2, [pc, #444]	; (8001674 <HAL_RCC_OscConfig+0x364>)
 80014b6:	5cd3      	ldrb	r3, [r2, r3]
 80014b8:	000a      	movs	r2, r1
 80014ba:	40da      	lsrs	r2, r3
 80014bc:	4b6e      	ldr	r3, [pc, #440]	; (8001678 <HAL_RCC_OscConfig+0x368>)
 80014be:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80014c0:	4b6e      	ldr	r3, [pc, #440]	; (800167c <HAL_RCC_OscConfig+0x36c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2513      	movs	r5, #19
 80014c6:	197c      	adds	r4, r7, r5
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff fa3b 	bl	8000944 <HAL_InitTick>
 80014ce:	0003      	movs	r3, r0
 80014d0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80014d2:	197b      	adds	r3, r7, r5
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d046      	beq.n	8001568 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80014da:	197b      	adds	r3, r7, r5
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	e2d0      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d027      	beq.n	8001536 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014e6:	4b5f      	ldr	r3, [pc, #380]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2209      	movs	r2, #9
 80014ec:	4393      	bics	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	4b5c      	ldr	r3, [pc, #368]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fa6a 	bl	80009d0 <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001502:	f7ff fa65 	bl	80009d0 <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e2b6      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001514:	4b53      	ldr	r3, [pc, #332]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2204      	movs	r2, #4
 800151a:	4013      	ands	r3, r2
 800151c:	d0f1      	beq.n	8001502 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	4b51      	ldr	r3, [pc, #324]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4a53      	ldr	r2, [pc, #332]	; (8001670 <HAL_RCC_OscConfig+0x360>)
 8001524:	4013      	ands	r3, r2
 8001526:	0019      	movs	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	021a      	lsls	r2, r3, #8
 800152e:	4b4d      	ldr	r3, [pc, #308]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 8001530:	430a      	orrs	r2, r1
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	e018      	b.n	8001568 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001536:	4b4b      	ldr	r3, [pc, #300]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b4a      	ldr	r3, [pc, #296]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 800153c:	2101      	movs	r1, #1
 800153e:	438a      	bics	r2, r1
 8001540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001542:	f7ff fa45 	bl	80009d0 <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154c:	f7ff fa40 	bl	80009d0 <HAL_GetTick>
 8001550:	0002      	movs	r2, r0
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e291      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800155e:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2204      	movs	r2, #4
 8001564:	4013      	ands	r3, r2
 8001566:	d1f1      	bne.n	800154c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2210      	movs	r2, #16
 800156e:	4013      	ands	r3, r2
 8001570:	d100      	bne.n	8001574 <HAL_RCC_OscConfig+0x264>
 8001572:	e0a1      	b.n	80016b8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d140      	bne.n	80015fc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800157a:	4b3a      	ldr	r3, [pc, #232]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	2380      	movs	r3, #128	; 0x80
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4013      	ands	r3, r2
 8001584:	d005      	beq.n	8001592 <HAL_RCC_OscConfig+0x282>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e277      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001592:	4b34      	ldr	r3, [pc, #208]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4a3a      	ldr	r2, [pc, #232]	; (8001680 <HAL_RCC_OscConfig+0x370>)
 8001598:	4013      	ands	r3, r2
 800159a:	0019      	movs	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a0:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80015a2:	430a      	orrs	r2, r1
 80015a4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a6:	4b2f      	ldr	r3, [pc, #188]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	0a19      	lsrs	r1, r3, #8
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	061a      	lsls	r2, r3, #24
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80015b6:	430a      	orrs	r2, r1
 80015b8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	0b5b      	lsrs	r3, r3, #13
 80015c0:	3301      	adds	r3, #1
 80015c2:	2280      	movs	r2, #128	; 0x80
 80015c4:	0212      	lsls	r2, r2, #8
 80015c6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80015c8:	4b26      	ldr	r3, [pc, #152]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	091b      	lsrs	r3, r3, #4
 80015ce:	210f      	movs	r1, #15
 80015d0:	400b      	ands	r3, r1
 80015d2:	4928      	ldr	r1, [pc, #160]	; (8001674 <HAL_RCC_OscConfig+0x364>)
 80015d4:	5ccb      	ldrb	r3, [r1, r3]
 80015d6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80015d8:	4b27      	ldr	r3, [pc, #156]	; (8001678 <HAL_RCC_OscConfig+0x368>)
 80015da:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80015dc:	4b27      	ldr	r3, [pc, #156]	; (800167c <HAL_RCC_OscConfig+0x36c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2513      	movs	r5, #19
 80015e2:	197c      	adds	r4, r7, r5
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff f9ad 	bl	8000944 <HAL_InitTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80015ee:	197b      	adds	r3, r7, r5
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d060      	beq.n	80016b8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80015f6:	197b      	adds	r3, r7, r5
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	e242      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d03f      	beq.n	8001684 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	0049      	lsls	r1, r1, #1
 800160e:	430a      	orrs	r2, r1
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff f9dd 	bl	80009d0 <HAL_GetTick>
 8001616:	0003      	movs	r3, r0
 8001618:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800161c:	f7ff f9d8 	bl	80009d0 <HAL_GetTick>
 8001620:	0002      	movs	r2, r0
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e229      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4013      	ands	r3, r2
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_RCC_OscConfig+0x370>)
 8001640:	4013      	ands	r3, r2
 8001642:	0019      	movs	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 800164a:	430a      	orrs	r2, r1
 800164c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	0a19      	lsrs	r1, r3, #8
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	061a      	lsls	r2, r3, #24
 800165c:	4b01      	ldr	r3, [pc, #4]	; (8001664 <HAL_RCC_OscConfig+0x354>)
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	e029      	b.n	80016b8 <HAL_RCC_OscConfig+0x3a8>
 8001664:	40021000 	.word	0x40021000
 8001668:	fffeffff 	.word	0xfffeffff
 800166c:	fffbffff 	.word	0xfffbffff
 8001670:	ffffe0ff 	.word	0xffffe0ff
 8001674:	08003a58 	.word	0x08003a58
 8001678:	20000000 	.word	0x20000000
 800167c:	20000004 	.word	0x20000004
 8001680:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001684:	4bbd      	ldr	r3, [pc, #756]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4bbc      	ldr	r3, [pc, #752]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 800168a:	49bd      	ldr	r1, [pc, #756]	; (8001980 <HAL_RCC_OscConfig+0x670>)
 800168c:	400a      	ands	r2, r1
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff f99e 	bl	80009d0 <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169a:	f7ff f999 	bl	80009d0 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e1ea      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016ac:	4bb3      	ldr	r3, [pc, #716]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4013      	ands	r3, r2
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2208      	movs	r2, #8
 80016be:	4013      	ands	r3, r2
 80016c0:	d036      	beq.n	8001730 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d019      	beq.n	80016fe <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ca:	4bac      	ldr	r3, [pc, #688]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80016cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ce:	4bab      	ldr	r3, [pc, #684]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80016d0:	2101      	movs	r1, #1
 80016d2:	430a      	orrs	r2, r1
 80016d4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff f97b 	bl	80009d0 <HAL_GetTick>
 80016da:	0003      	movs	r3, r0
 80016dc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e0:	f7ff f976 	bl	80009d0 <HAL_GetTick>
 80016e4:	0002      	movs	r2, r0
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e1c7      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016f2:	4ba2      	ldr	r3, [pc, #648]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80016f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016f6:	2202      	movs	r2, #2
 80016f8:	4013      	ands	r3, r2
 80016fa:	d0f1      	beq.n	80016e0 <HAL_RCC_OscConfig+0x3d0>
 80016fc:	e018      	b.n	8001730 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fe:	4b9f      	ldr	r3, [pc, #636]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001702:	4b9e      	ldr	r3, [pc, #632]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001704:	2101      	movs	r1, #1
 8001706:	438a      	bics	r2, r1
 8001708:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170a:	f7ff f961 	bl	80009d0 <HAL_GetTick>
 800170e:	0003      	movs	r3, r0
 8001710:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001714:	f7ff f95c 	bl	80009d0 <HAL_GetTick>
 8001718:	0002      	movs	r2, r0
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e1ad      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001726:	4b95      	ldr	r3, [pc, #596]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800172a:	2202      	movs	r2, #2
 800172c:	4013      	ands	r3, r2
 800172e:	d1f1      	bne.n	8001714 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2204      	movs	r2, #4
 8001736:	4013      	ands	r3, r2
 8001738:	d100      	bne.n	800173c <HAL_RCC_OscConfig+0x42c>
 800173a:	e0ae      	b.n	800189a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173c:	2027      	movs	r0, #39	; 0x27
 800173e:	183b      	adds	r3, r7, r0
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001744:	4b8d      	ldr	r3, [pc, #564]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	055b      	lsls	r3, r3, #21
 800174c:	4013      	ands	r3, r2
 800174e:	d109      	bne.n	8001764 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001750:	4b8a      	ldr	r3, [pc, #552]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001754:	4b89      	ldr	r3, [pc, #548]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001756:	2180      	movs	r1, #128	; 0x80
 8001758:	0549      	lsls	r1, r1, #21
 800175a:	430a      	orrs	r2, r1
 800175c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800175e:	183b      	adds	r3, r7, r0
 8001760:	2201      	movs	r2, #1
 8001762:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001764:	4b87      	ldr	r3, [pc, #540]	; (8001984 <HAL_RCC_OscConfig+0x674>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4013      	ands	r3, r2
 800176e:	d11a      	bne.n	80017a6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001770:	4b84      	ldr	r3, [pc, #528]	; (8001984 <HAL_RCC_OscConfig+0x674>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b83      	ldr	r3, [pc, #524]	; (8001984 <HAL_RCC_OscConfig+0x674>)
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	0049      	lsls	r1, r1, #1
 800177a:	430a      	orrs	r2, r1
 800177c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177e:	f7ff f927 	bl	80009d0 <HAL_GetTick>
 8001782:	0003      	movs	r3, r0
 8001784:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001788:	f7ff f922 	bl	80009d0 <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e173      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179a:	4b7a      	ldr	r3, [pc, #488]	; (8001984 <HAL_RCC_OscConfig+0x674>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4013      	ands	r3, r2
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_OscConfig+0x4b2>
 80017b2:	4b72      	ldr	r3, [pc, #456]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80017b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017b6:	4b71      	ldr	r3, [pc, #452]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	0049      	lsls	r1, r1, #1
 80017bc:	430a      	orrs	r2, r1
 80017be:	651a      	str	r2, [r3, #80]	; 0x50
 80017c0:	e031      	b.n	8001826 <HAL_RCC_OscConfig+0x516>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x4d4>
 80017ca:	4b6c      	ldr	r3, [pc, #432]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80017cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ce:	4b6b      	ldr	r3, [pc, #428]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80017d0:	496b      	ldr	r1, [pc, #428]	; (8001980 <HAL_RCC_OscConfig+0x670>)
 80017d2:	400a      	ands	r2, r1
 80017d4:	651a      	str	r2, [r3, #80]	; 0x50
 80017d6:	4b69      	ldr	r3, [pc, #420]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80017d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017da:	4b68      	ldr	r3, [pc, #416]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80017dc:	496a      	ldr	r1, [pc, #424]	; (8001988 <HAL_RCC_OscConfig+0x678>)
 80017de:	400a      	ands	r2, r1
 80017e0:	651a      	str	r2, [r3, #80]	; 0x50
 80017e2:	e020      	b.n	8001826 <HAL_RCC_OscConfig+0x516>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	23a0      	movs	r3, #160	; 0xa0
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d10e      	bne.n	800180e <HAL_RCC_OscConfig+0x4fe>
 80017f0:	4b62      	ldr	r3, [pc, #392]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80017f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017f4:	4b61      	ldr	r3, [pc, #388]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	00c9      	lsls	r1, r1, #3
 80017fa:	430a      	orrs	r2, r1
 80017fc:	651a      	str	r2, [r3, #80]	; 0x50
 80017fe:	4b5f      	ldr	r3, [pc, #380]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001802:	4b5e      	ldr	r3, [pc, #376]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001804:	2180      	movs	r1, #128	; 0x80
 8001806:	0049      	lsls	r1, r1, #1
 8001808:	430a      	orrs	r2, r1
 800180a:	651a      	str	r2, [r3, #80]	; 0x50
 800180c:	e00b      	b.n	8001826 <HAL_RCC_OscConfig+0x516>
 800180e:	4b5b      	ldr	r3, [pc, #364]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001810:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001812:	4b5a      	ldr	r3, [pc, #360]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001814:	495a      	ldr	r1, [pc, #360]	; (8001980 <HAL_RCC_OscConfig+0x670>)
 8001816:	400a      	ands	r2, r1
 8001818:	651a      	str	r2, [r3, #80]	; 0x50
 800181a:	4b58      	ldr	r3, [pc, #352]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 800181c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800181e:	4b57      	ldr	r3, [pc, #348]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001820:	4959      	ldr	r1, [pc, #356]	; (8001988 <HAL_RCC_OscConfig+0x678>)
 8001822:	400a      	ands	r2, r1
 8001824:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d015      	beq.n	800185a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182e:	f7ff f8cf 	bl	80009d0 <HAL_GetTick>
 8001832:	0003      	movs	r3, r0
 8001834:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001836:	e009      	b.n	800184c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001838:	f7ff f8ca 	bl	80009d0 <HAL_GetTick>
 800183c:	0002      	movs	r2, r0
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	4a52      	ldr	r2, [pc, #328]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e11a      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800184c:	4b4b      	ldr	r3, [pc, #300]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 800184e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4013      	ands	r3, r2
 8001856:	d0ef      	beq.n	8001838 <HAL_RCC_OscConfig+0x528>
 8001858:	e014      	b.n	8001884 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185a:	f7ff f8b9 	bl	80009d0 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001862:	e009      	b.n	8001878 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001864:	f7ff f8b4 	bl	80009d0 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	4a47      	ldr	r2, [pc, #284]	; (800198c <HAL_RCC_OscConfig+0x67c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e104      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001878:	4b40      	ldr	r3, [pc, #256]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 800187a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4013      	ands	r3, r2
 8001882:	d1ef      	bne.n	8001864 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001884:	2327      	movs	r3, #39	; 0x27
 8001886:	18fb      	adds	r3, r7, r3
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d105      	bne.n	800189a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800188e:	4b3b      	ldr	r3, [pc, #236]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001892:	4b3a      	ldr	r3, [pc, #232]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001894:	493e      	ldr	r1, [pc, #248]	; (8001990 <HAL_RCC_OscConfig+0x680>)
 8001896:	400a      	ands	r2, r1
 8001898:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2220      	movs	r2, #32
 80018a0:	4013      	ands	r3, r2
 80018a2:	d049      	beq.n	8001938 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d026      	beq.n	80018fa <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80018ac:	4b33      	ldr	r3, [pc, #204]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	4b32      	ldr	r3, [pc, #200]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80018b2:	2101      	movs	r1, #1
 80018b4:	430a      	orrs	r2, r1
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	4b30      	ldr	r3, [pc, #192]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80018ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018bc:	4b2f      	ldr	r3, [pc, #188]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80018be:	2101      	movs	r1, #1
 80018c0:	430a      	orrs	r2, r1
 80018c2:	635a      	str	r2, [r3, #52]	; 0x34
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <HAL_RCC_OscConfig+0x684>)
 80018c6:	6a1a      	ldr	r2, [r3, #32]
 80018c8:	4b32      	ldr	r3, [pc, #200]	; (8001994 <HAL_RCC_OscConfig+0x684>)
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	0189      	lsls	r1, r1, #6
 80018ce:	430a      	orrs	r2, r1
 80018d0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff f87d 	bl	80009d0 <HAL_GetTick>
 80018d6:	0003      	movs	r3, r0
 80018d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018dc:	f7ff f878 	bl	80009d0 <HAL_GetTick>
 80018e0:	0002      	movs	r2, r0
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e0c9      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018ee:	4b23      	ldr	r3, [pc, #140]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2202      	movs	r2, #2
 80018f4:	4013      	ands	r3, r2
 80018f6:	d0f1      	beq.n	80018dc <HAL_RCC_OscConfig+0x5cc>
 80018f8:	e01e      	b.n	8001938 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	4b1f      	ldr	r3, [pc, #124]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001900:	2101      	movs	r1, #1
 8001902:	438a      	bics	r2, r1
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	4b23      	ldr	r3, [pc, #140]	; (8001994 <HAL_RCC_OscConfig+0x684>)
 8001908:	6a1a      	ldr	r2, [r3, #32]
 800190a:	4b22      	ldr	r3, [pc, #136]	; (8001994 <HAL_RCC_OscConfig+0x684>)
 800190c:	4922      	ldr	r1, [pc, #136]	; (8001998 <HAL_RCC_OscConfig+0x688>)
 800190e:	400a      	ands	r2, r1
 8001910:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001912:	f7ff f85d 	bl	80009d0 <HAL_GetTick>
 8001916:	0003      	movs	r3, r0
 8001918:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800191c:	f7ff f858 	bl	80009d0 <HAL_GetTick>
 8001920:	0002      	movs	r2, r0
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e0a9      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2202      	movs	r2, #2
 8001934:	4013      	ands	r3, r2
 8001936:	d1f1      	bne.n	800191c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	2b00      	cmp	r3, #0
 800193e:	d100      	bne.n	8001942 <HAL_RCC_OscConfig+0x632>
 8001940:	e09e      	b.n	8001a80 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	2b0c      	cmp	r3, #12
 8001946:	d100      	bne.n	800194a <HAL_RCC_OscConfig+0x63a>
 8001948:	e077      	b.n	8001a3a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	2b02      	cmp	r3, #2
 8001950:	d158      	bne.n	8001a04 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_RCC_OscConfig+0x66c>)
 8001958:	4910      	ldr	r1, [pc, #64]	; (800199c <HAL_RCC_OscConfig+0x68c>)
 800195a:	400a      	ands	r2, r1
 800195c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195e:	f7ff f837 	bl	80009d0 <HAL_GetTick>
 8001962:	0003      	movs	r3, r0
 8001964:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001966:	e01b      	b.n	80019a0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff f832 	bl	80009d0 <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d914      	bls.n	80019a0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e083      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	40021000 	.word	0x40021000
 8001980:	fffffeff 	.word	0xfffffeff
 8001984:	40007000 	.word	0x40007000
 8001988:	fffffbff 	.word	0xfffffbff
 800198c:	00001388 	.word	0x00001388
 8001990:	efffffff 	.word	0xefffffff
 8001994:	40010000 	.word	0x40010000
 8001998:	ffffdfff 	.word	0xffffdfff
 800199c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019a0:	4b3a      	ldr	r3, [pc, #232]	; (8001a8c <HAL_RCC_OscConfig+0x77c>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	049b      	lsls	r3, r3, #18
 80019a8:	4013      	ands	r3, r2
 80019aa:	d1dd      	bne.n	8001968 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ac:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <HAL_RCC_OscConfig+0x77c>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4a37      	ldr	r2, [pc, #220]	; (8001a90 <HAL_RCC_OscConfig+0x780>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	0019      	movs	r1, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c4:	431a      	orrs	r2, r3
 80019c6:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <HAL_RCC_OscConfig+0x77c>)
 80019c8:	430a      	orrs	r2, r1
 80019ca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019cc:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <HAL_RCC_OscConfig+0x77c>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <HAL_RCC_OscConfig+0x77c>)
 80019d2:	2180      	movs	r1, #128	; 0x80
 80019d4:	0449      	lsls	r1, r1, #17
 80019d6:	430a      	orrs	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7fe fff9 	bl	80009d0 <HAL_GetTick>
 80019de:	0003      	movs	r3, r0
 80019e0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e4:	f7fe fff4 	bl	80009d0 <HAL_GetTick>
 80019e8:	0002      	movs	r2, r0
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e045      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019f6:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <HAL_RCC_OscConfig+0x77c>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	049b      	lsls	r3, r3, #18
 80019fe:	4013      	ands	r3, r2
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x6d4>
 8001a02:	e03d      	b.n	8001a80 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a04:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <HAL_RCC_OscConfig+0x77c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_RCC_OscConfig+0x77c>)
 8001a0a:	4922      	ldr	r1, [pc, #136]	; (8001a94 <HAL_RCC_OscConfig+0x784>)
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7fe ffde 	bl	80009d0 <HAL_GetTick>
 8001a14:	0003      	movs	r3, r0
 8001a16:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a1a:	f7fe ffd9 	bl	80009d0 <HAL_GetTick>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e02a      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_RCC_OscConfig+0x77c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	049b      	lsls	r3, r3, #18
 8001a34:	4013      	ands	r3, r2
 8001a36:	d1f0      	bne.n	8001a1a <HAL_RCC_OscConfig+0x70a>
 8001a38:	e022      	b.n	8001a80 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e01d      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_RCC_OscConfig+0x77c>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4c:	69fa      	ldr	r2, [r7, #28]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	025b      	lsls	r3, r3, #9
 8001a52:	401a      	ands	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d10f      	bne.n	8001a7c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	23f0      	movs	r3, #240	; 0xf0
 8001a60:	039b      	lsls	r3, r3, #14
 8001a62:	401a      	ands	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	23c0      	movs	r3, #192	; 0xc0
 8001a70:	041b      	lsls	r3, r3, #16
 8001a72:	401a      	ands	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	0018      	movs	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b00a      	add	sp, #40	; 0x28
 8001a88:	bdb0      	pop	{r4, r5, r7, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	ff02ffff 	.word	0xff02ffff
 8001a94:	feffffff 	.word	0xfeffffff

08001a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a98:	b5b0      	push	{r4, r5, r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e128      	b.n	8001cfe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aac:	4b96      	ldr	r3, [pc, #600]	; (8001d08 <HAL_RCC_ClockConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d91e      	bls.n	8001af8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b93      	ldr	r3, [pc, #588]	; (8001d08 <HAL_RCC_ClockConfig+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4393      	bics	r3, r2
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	4b90      	ldr	r3, [pc, #576]	; (8001d08 <HAL_RCC_ClockConfig+0x270>)
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001acc:	f7fe ff80 	bl	80009d0 <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad4:	e009      	b.n	8001aea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad6:	f7fe ff7b 	bl	80009d0 <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	4a8a      	ldr	r2, [pc, #552]	; (8001d0c <HAL_RCC_ClockConfig+0x274>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e109      	b.n	8001cfe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	4b87      	ldr	r3, [pc, #540]	; (8001d08 <HAL_RCC_ClockConfig+0x270>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2201      	movs	r2, #1
 8001af0:	4013      	ands	r3, r2
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d1ee      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2202      	movs	r2, #2
 8001afe:	4013      	ands	r3, r2
 8001b00:	d009      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b02:	4b83      	ldr	r3, [pc, #524]	; (8001d10 <HAL_RCC_ClockConfig+0x278>)
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	22f0      	movs	r2, #240	; 0xf0
 8001b08:	4393      	bics	r3, r2
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	4b7f      	ldr	r3, [pc, #508]	; (8001d10 <HAL_RCC_ClockConfig+0x278>)
 8001b12:	430a      	orrs	r2, r1
 8001b14:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d100      	bne.n	8001b22 <HAL_RCC_ClockConfig+0x8a>
 8001b20:	e089      	b.n	8001c36 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b2a:	4b79      	ldr	r3, [pc, #484]	; (8001d10 <HAL_RCC_ClockConfig+0x278>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	029b      	lsls	r3, r3, #10
 8001b32:	4013      	ands	r3, r2
 8001b34:	d120      	bne.n	8001b78 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0e1      	b.n	8001cfe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b42:	4b73      	ldr	r3, [pc, #460]	; (8001d10 <HAL_RCC_ClockConfig+0x278>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	049b      	lsls	r3, r3, #18
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d114      	bne.n	8001b78 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e0d5      	b.n	8001cfe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d106      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b5a:	4b6d      	ldr	r3, [pc, #436]	; (8001d10 <HAL_RCC_ClockConfig+0x278>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2204      	movs	r2, #4
 8001b60:	4013      	ands	r3, r2
 8001b62:	d109      	bne.n	8001b78 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0ca      	b.n	8001cfe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b68:	4b69      	ldr	r3, [pc, #420]	; (8001d10 <HAL_RCC_ClockConfig+0x278>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4013      	ands	r3, r2
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0c2      	b.n	8001cfe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b78:	4b65      	ldr	r3, [pc, #404]	; (8001d10 <HAL_RCC_ClockConfig+0x278>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	4393      	bics	r3, r2
 8001b80:	0019      	movs	r1, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4b62      	ldr	r3, [pc, #392]	; (8001d10 <HAL_RCC_ClockConfig+0x278>)
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b8c:	f7fe ff20 	bl	80009d0 <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d111      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b9c:	e009      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9e:	f7fe ff17 	bl	80009d0 <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	4a58      	ldr	r2, [pc, #352]	; (8001d0c <HAL_RCC_ClockConfig+0x274>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e0a5      	b.n	8001cfe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb2:	4b57      	ldr	r3, [pc, #348]	; (8001d10 <HAL_RCC_ClockConfig+0x278>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d1ef      	bne.n	8001b9e <HAL_RCC_ClockConfig+0x106>
 8001bbe:	e03a      	b.n	8001c36 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d111      	bne.n	8001bec <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc8:	e009      	b.n	8001bde <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bca:	f7fe ff01 	bl	80009d0 <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	4a4d      	ldr	r2, [pc, #308]	; (8001d0c <HAL_RCC_ClockConfig+0x274>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e08f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bde:	4b4c      	ldr	r3, [pc, #304]	; (8001d10 <HAL_RCC_ClockConfig+0x278>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	220c      	movs	r2, #12
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b0c      	cmp	r3, #12
 8001be8:	d1ef      	bne.n	8001bca <HAL_RCC_ClockConfig+0x132>
 8001bea:	e024      	b.n	8001c36 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d11b      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf4:	e009      	b.n	8001c0a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf6:	f7fe feeb 	bl	80009d0 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	4a42      	ldr	r2, [pc, #264]	; (8001d0c <HAL_RCC_ClockConfig+0x274>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e079      	b.n	8001cfe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c0a:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <HAL_RCC_ClockConfig+0x278>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	220c      	movs	r2, #12
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d1ef      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0x15e>
 8001c16:	e00e      	b.n	8001c36 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c18:	f7fe feda 	bl	80009d0 <HAL_GetTick>
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	4a3a      	ldr	r2, [pc, #232]	; (8001d0c <HAL_RCC_ClockConfig+0x274>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e068      	b.n	8001cfe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c2c:	4b38      	ldr	r3, [pc, #224]	; (8001d10 <HAL_RCC_ClockConfig+0x278>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	220c      	movs	r2, #12
 8001c32:	4013      	ands	r3, r2
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c36:	4b34      	ldr	r3, [pc, #208]	; (8001d08 <HAL_RCC_ClockConfig+0x270>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d21e      	bcs.n	8001c82 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c44:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <HAL_RCC_ClockConfig+0x270>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4393      	bics	r3, r2
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <HAL_RCC_ClockConfig+0x270>)
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c56:	f7fe febb 	bl	80009d0 <HAL_GetTick>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	e009      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c60:	f7fe feb6 	bl	80009d0 <HAL_GetTick>
 8001c64:	0002      	movs	r2, r0
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	4a28      	ldr	r2, [pc, #160]	; (8001d0c <HAL_RCC_ClockConfig+0x274>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e044      	b.n	8001cfe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c74:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <HAL_RCC_ClockConfig+0x270>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d1ee      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2204      	movs	r2, #4
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d009      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c8c:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_RCC_ClockConfig+0x278>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4a20      	ldr	r2, [pc, #128]	; (8001d14 <HAL_RCC_ClockConfig+0x27c>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	0019      	movs	r1, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <HAL_RCC_ClockConfig+0x278>)
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d00a      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001caa:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_RCC_ClockConfig+0x278>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	4a1a      	ldr	r2, [pc, #104]	; (8001d18 <HAL_RCC_ClockConfig+0x280>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	00da      	lsls	r2, r3, #3
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_RCC_ClockConfig+0x278>)
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cc0:	f000 f832 	bl	8001d28 <HAL_RCC_GetSysClockFreq>
 8001cc4:	0001      	movs	r1, r0
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_RCC_ClockConfig+0x278>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	091b      	lsrs	r3, r3, #4
 8001ccc:	220f      	movs	r2, #15
 8001cce:	4013      	ands	r3, r2
 8001cd0:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <HAL_RCC_ClockConfig+0x284>)
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	000a      	movs	r2, r1
 8001cd6:	40da      	lsrs	r2, r3
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_RCC_ClockConfig+0x288>)
 8001cda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_RCC_ClockConfig+0x28c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	250b      	movs	r5, #11
 8001ce2:	197c      	adds	r4, r7, r5
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f7fe fe2d 	bl	8000944 <HAL_InitTick>
 8001cea:	0003      	movs	r3, r0
 8001cec:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001cee:	197b      	adds	r3, r7, r5
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001cf6:	197b      	adds	r3, r7, r5
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b004      	add	sp, #16
 8001d04:	bdb0      	pop	{r4, r5, r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	00001388 	.word	0x00001388
 8001d10:	40021000 	.word	0x40021000
 8001d14:	fffff8ff 	.word	0xfffff8ff
 8001d18:	ffffc7ff 	.word	0xffffc7ff
 8001d1c:	08003a58 	.word	0x08003a58
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000004 	.word	0x20000004

08001d28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d28:	b5b0      	push	{r4, r5, r7, lr}
 8001d2a:	b08e      	sub	sp, #56	; 0x38
 8001d2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d2e:	4b4c      	ldr	r3, [pc, #304]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d36:	230c      	movs	r3, #12
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b0c      	cmp	r3, #12
 8001d3c:	d014      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x40>
 8001d3e:	d900      	bls.n	8001d42 <HAL_RCC_GetSysClockFreq+0x1a>
 8001d40:	e07b      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x112>
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d002      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0x24>
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d00b      	beq.n	8001d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d4a:	e076      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d4c:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2210      	movs	r2, #16
 8001d52:	4013      	ands	r3, r2
 8001d54:	d002      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d56:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d5a:	e07c      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001d5c:	4b42      	ldr	r3, [pc, #264]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d60:	e079      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d62:	4b42      	ldr	r3, [pc, #264]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x144>)
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d66:	e076      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6a:	0c9a      	lsrs	r2, r3, #18
 8001d6c:	230f      	movs	r3, #15
 8001d6e:	401a      	ands	r2, r3
 8001d70:	4b3f      	ldr	r3, [pc, #252]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x148>)
 8001d72:	5c9b      	ldrb	r3, [r3, r2]
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d78:	0d9a      	lsrs	r2, r3, #22
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	3301      	adds	r3, #1
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d82:	4b37      	ldr	r3, [pc, #220]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	025b      	lsls	r3, r3, #9
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d01a      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	4a35      	ldr	r2, [pc, #212]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x144>)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	69b8      	ldr	r0, [r7, #24]
 8001d9c:	69f9      	ldr	r1, [r7, #28]
 8001d9e:	f7fe fa5f 	bl	8000260 <__aeabi_lmul>
 8001da2:	0002      	movs	r2, r0
 8001da4:	000b      	movs	r3, r1
 8001da6:	0010      	movs	r0, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f7fe fa33 	bl	8000220 <__aeabi_uldivmod>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	000b      	movs	r3, r1
 8001dbe:	0013      	movs	r3, r2
 8001dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001dc2:	e037      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001dc4:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x138>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2210      	movs	r2, #16
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d01a      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4a23      	ldr	r2, [pc, #140]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	68b8      	ldr	r0, [r7, #8]
 8001ddc:	68f9      	ldr	r1, [r7, #12]
 8001dde:	f7fe fa3f 	bl	8000260 <__aeabi_lmul>
 8001de2:	0002      	movs	r2, r0
 8001de4:	000b      	movs	r3, r1
 8001de6:	0010      	movs	r0, r2
 8001de8:	0019      	movs	r1, r3
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f7fe fa13 	bl	8000220 <__aeabi_uldivmod>
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	000b      	movs	r3, r1
 8001dfe:	0013      	movs	r3, r2
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
 8001e02:	e017      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e06:	0018      	movs	r0, r3
 8001e08:	2300      	movs	r3, #0
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	4a16      	ldr	r2, [pc, #88]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x140>)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f7fe fa26 	bl	8000260 <__aeabi_lmul>
 8001e14:	0002      	movs	r2, r0
 8001e16:	000b      	movs	r3, r1
 8001e18:	0010      	movs	r0, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	001c      	movs	r4, r3
 8001e20:	2300      	movs	r3, #0
 8001e22:	001d      	movs	r5, r3
 8001e24:	0022      	movs	r2, r4
 8001e26:	002b      	movs	r3, r5
 8001e28:	f7fe f9fa 	bl	8000220 <__aeabi_uldivmod>
 8001e2c:	0002      	movs	r2, r0
 8001e2e:	000b      	movs	r3, r1
 8001e30:	0013      	movs	r3, r2
 8001e32:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e38:	e00d      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	0b5b      	lsrs	r3, r3, #13
 8001e40:	2207      	movs	r2, #7
 8001e42:	4013      	ands	r3, r2
 8001e44:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	2280      	movs	r2, #128	; 0x80
 8001e4c:	0212      	lsls	r2, r2, #8
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	0013      	movs	r3, r2
 8001e52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e54:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b00e      	add	sp, #56	; 0x38
 8001e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	003d0900 	.word	0x003d0900
 8001e68:	00f42400 	.word	0x00f42400
 8001e6c:	007a1200 	.word	0x007a1200
 8001e70:	08003a70 	.word	0x08003a70

08001e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e78:	4b02      	ldr	r3, [pc, #8]	; (8001e84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	20000000 	.word	0x20000000

08001e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e8c:	f7ff fff2 	bl	8001e74 <HAL_RCC_GetHCLKFreq>
 8001e90:	0001      	movs	r1, r0
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	0a1b      	lsrs	r3, r3, #8
 8001e98:	2207      	movs	r2, #7
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	40d9      	lsrs	r1, r3
 8001ea2:	000b      	movs	r3, r1
}
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	08003a68 	.word	0x08003a68

08001eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eb8:	f7ff ffdc 	bl	8001e74 <HAL_RCC_GetHCLKFreq>
 8001ebc:	0001      	movs	r1, r0
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	0adb      	lsrs	r3, r3, #11
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eca:	5cd3      	ldrb	r3, [r2, r3]
 8001ecc:	40d9      	lsrs	r1, r3
 8001ece:	000b      	movs	r3, r1
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	08003a68 	.word	0x08003a68

08001ee0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001ee8:	2317      	movs	r3, #23
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d106      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	4013      	ands	r3, r2
 8001f04:	d100      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001f06:	e104      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f08:	4bb1      	ldr	r3, [pc, #708]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	055b      	lsls	r3, r3, #21
 8001f10:	4013      	ands	r3, r2
 8001f12:	d10a      	bne.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f14:	4bae      	ldr	r3, [pc, #696]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f18:	4bad      	ldr	r3, [pc, #692]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f1a:	2180      	movs	r1, #128	; 0x80
 8001f1c:	0549      	lsls	r1, r1, #21
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f22:	2317      	movs	r3, #23
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	2201      	movs	r2, #1
 8001f28:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	4baa      	ldr	r3, [pc, #680]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4013      	ands	r3, r2
 8001f34:	d11a      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f36:	4ba7      	ldr	r3, [pc, #668]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4ba6      	ldr	r3, [pc, #664]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f3c:	2180      	movs	r1, #128	; 0x80
 8001f3e:	0049      	lsls	r1, r1, #1
 8001f40:	430a      	orrs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f44:	f7fe fd44 	bl	80009d0 <HAL_GetTick>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4c:	e008      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4e:	f7fe fd3f 	bl	80009d0 <HAL_GetTick>
 8001f52:	0002      	movs	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b64      	cmp	r3, #100	; 0x64
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e133      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f60:	4b9c      	ldr	r3, [pc, #624]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f6c:	4b98      	ldr	r3, [pc, #608]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	23c0      	movs	r3, #192	; 0xc0
 8001f72:	039b      	lsls	r3, r3, #14
 8001f74:	4013      	ands	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	23c0      	movs	r3, #192	; 0xc0
 8001f7e:	039b      	lsls	r3, r3, #14
 8001f80:	4013      	ands	r3, r2
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d107      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	23c0      	movs	r3, #192	; 0xc0
 8001f8e:	039b      	lsls	r3, r3, #14
 8001f90:	4013      	ands	r3, r2
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d013      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	23c0      	movs	r3, #192	; 0xc0
 8001f9e:	029b      	lsls	r3, r3, #10
 8001fa0:	401a      	ands	r2, r3
 8001fa2:	23c0      	movs	r3, #192	; 0xc0
 8001fa4:	029b      	lsls	r3, r3, #10
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d10a      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001faa:	4b89      	ldr	r3, [pc, #548]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	029b      	lsls	r3, r3, #10
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	029b      	lsls	r3, r3, #10
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e103      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001fc0:	4b83      	ldr	r3, [pc, #524]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fc4:	23c0      	movs	r3, #192	; 0xc0
 8001fc6:	029b      	lsls	r3, r3, #10
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d049      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	23c0      	movs	r3, #192	; 0xc0
 8001fd8:	029b      	lsls	r3, r3, #10
 8001fda:	4013      	ands	r3, r2
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d004      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d10d      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	23c0      	movs	r3, #192	; 0xc0
 8001ff2:	029b      	lsls	r3, r3, #10
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d034      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	4013      	ands	r3, r2
 8002006:	d02e      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002008:	4b71      	ldr	r3, [pc, #452]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800200a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200c:	4a72      	ldr	r2, [pc, #456]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800200e:	4013      	ands	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002012:	4b6f      	ldr	r3, [pc, #444]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002014:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002016:	4b6e      	ldr	r3, [pc, #440]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002018:	2180      	movs	r1, #128	; 0x80
 800201a:	0309      	lsls	r1, r1, #12
 800201c:	430a      	orrs	r2, r1
 800201e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002020:	4b6b      	ldr	r3, [pc, #428]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002022:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002024:	4b6a      	ldr	r3, [pc, #424]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002026:	496d      	ldr	r1, [pc, #436]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002028:	400a      	ands	r2, r1
 800202a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800202c:	4b68      	ldr	r3, [pc, #416]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4013      	ands	r3, r2
 800203a:	d014      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7fe fcc8 	bl	80009d0 <HAL_GetTick>
 8002040:	0003      	movs	r3, r0
 8002042:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002044:	e009      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7fe fcc3 	bl	80009d0 <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	4a63      	ldr	r2, [pc, #396]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e0b6      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800205a:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800205c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4013      	ands	r3, r2
 8002064:	d0ef      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	4013      	ands	r3, r2
 8002070:	d01f      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	23c0      	movs	r3, #192	; 0xc0
 8002078:	029b      	lsls	r3, r3, #10
 800207a:	401a      	ands	r2, r3
 800207c:	23c0      	movs	r3, #192	; 0xc0
 800207e:	029b      	lsls	r3, r3, #10
 8002080:	429a      	cmp	r2, r3
 8002082:	d10c      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002084:	4b52      	ldr	r3, [pc, #328]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a56      	ldr	r2, [pc, #344]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800208a:	4013      	ands	r3, r2
 800208c:	0019      	movs	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	23c0      	movs	r3, #192	; 0xc0
 8002094:	039b      	lsls	r3, r3, #14
 8002096:	401a      	ands	r2, r3
 8002098:	4b4d      	ldr	r3, [pc, #308]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800209a:	430a      	orrs	r2, r1
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	4b4c      	ldr	r3, [pc, #304]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	23c0      	movs	r3, #192	; 0xc0
 80020a8:	029b      	lsls	r3, r3, #10
 80020aa:	401a      	ands	r2, r3
 80020ac:	4b48      	ldr	r3, [pc, #288]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ae:	430a      	orrs	r2, r1
 80020b0:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2220      	movs	r2, #32
 80020b8:	4013      	ands	r3, r2
 80020ba:	d01f      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	23c0      	movs	r3, #192	; 0xc0
 80020c2:	029b      	lsls	r3, r3, #10
 80020c4:	401a      	ands	r2, r3
 80020c6:	23c0      	movs	r3, #192	; 0xc0
 80020c8:	029b      	lsls	r3, r3, #10
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80020ce:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a44      	ldr	r2, [pc, #272]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	23c0      	movs	r3, #192	; 0xc0
 80020de:	039b      	lsls	r3, r3, #14
 80020e0:	401a      	ands	r2, r3
 80020e2:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ea:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	23c0      	movs	r3, #192	; 0xc0
 80020f2:	029b      	lsls	r3, r3, #10
 80020f4:	401a      	ands	r2, r3
 80020f6:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020fc:	2317      	movs	r3, #23
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d105      	bne.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002106:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800210a:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800210c:	4936      	ldr	r1, [pc, #216]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800210e:	400a      	ands	r2, r1
 8002110:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2201      	movs	r2, #1
 8002118:	4013      	ands	r3, r2
 800211a:	d009      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800211c:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	2203      	movs	r2, #3
 8002122:	4393      	bics	r3, r2
 8002124:	0019      	movs	r1, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	4b29      	ldr	r3, [pc, #164]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800212c:	430a      	orrs	r2, r1
 800212e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2202      	movs	r2, #2
 8002136:	4013      	ands	r3, r2
 8002138:	d009      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800213a:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	220c      	movs	r2, #12
 8002140:	4393      	bics	r3, r2
 8002142:	0019      	movs	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800214a:	430a      	orrs	r2, r1
 800214c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2204      	movs	r2, #4
 8002154:	4013      	ands	r3, r2
 8002156:	d009      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002158:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	4a23      	ldr	r2, [pc, #140]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800215e:	4013      	ands	r3, r2
 8002160:	0019      	movs	r1, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002168:	430a      	orrs	r2, r1
 800216a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2208      	movs	r2, #8
 8002172:	4013      	ands	r3, r2
 8002174:	d009      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800217c:	4013      	ands	r3, r2
 800217e:	0019      	movs	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699a      	ldr	r2, [r3, #24]
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002186:	430a      	orrs	r2, r1
 8002188:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2240      	movs	r2, #64	; 0x40
 8002190:	4013      	ands	r3, r2
 8002192:	d009      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002198:	4a16      	ldr	r2, [pc, #88]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800219a:	4013      	ands	r3, r2
 800219c:	0019      	movs	r1, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1a      	ldr	r2, [r3, #32]
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021a4:	430a      	orrs	r2, r1
 80021a6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2280      	movs	r2, #128	; 0x80
 80021ae:	4013      	ands	r3, r2
 80021b0:	d009      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69da      	ldr	r2, [r3, #28]
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021c2:	430a      	orrs	r2, r1
 80021c4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b006      	add	sp, #24
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40007000 	.word	0x40007000
 80021d8:	fffcffff 	.word	0xfffcffff
 80021dc:	fff7ffff 	.word	0xfff7ffff
 80021e0:	00001388 	.word	0x00001388
 80021e4:	ffcfffff 	.word	0xffcfffff
 80021e8:	efffffff 	.word	0xefffffff
 80021ec:	fffff3ff 	.word	0xfffff3ff
 80021f0:	ffffcfff 	.word	0xffffcfff
 80021f4:	fbffffff 	.word	0xfbffffff
 80021f8:	fff3ffff 	.word	0xfff3ffff

080021fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e044      	b.n	8002298 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d107      	bne.n	8002226 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2278      	movs	r2, #120	; 0x78
 800221a:	2100      	movs	r1, #0
 800221c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	0018      	movs	r0, r3
 8002222:	f7fe fa61 	bl	80006e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2224      	movs	r2, #36	; 0x24
 800222a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2101      	movs	r1, #1
 8002238:	438a      	bics	r2, r1
 800223a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	0018      	movs	r0, r3
 8002240:	f000 fd1a 	bl	8002c78 <UART_SetConfig>
 8002244:	0003      	movs	r3, r0
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e024      	b.n	8002298 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	0018      	movs	r0, r3
 800225a:	f000 ff91 	bl	8003180 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	490d      	ldr	r1, [pc, #52]	; (80022a0 <HAL_UART_Init+0xa4>)
 800226a:	400a      	ands	r2, r1
 800226c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	212a      	movs	r1, #42	; 0x2a
 800227a:	438a      	bics	r2, r1
 800227c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	430a      	orrs	r2, r1
 800228c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	0018      	movs	r0, r3
 8002292:	f001 f829 	bl	80032e8 <UART_CheckIdleState>
 8002296:	0003      	movs	r3, r0
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	b002      	add	sp, #8
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	ffffb7ff 	.word	0xffffb7ff

080022a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	1dbb      	adds	r3, r7, #6
 80022b2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d000      	beq.n	80022be <HAL_UART_Transmit+0x1a>
 80022bc:	e08c      	b.n	80023d8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_UART_Transmit+0x28>
 80022c4:	1dbb      	adds	r3, r7, #6
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e084      	b.n	80023da <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	015b      	lsls	r3, r3, #5
 80022d8:	429a      	cmp	r2, r3
 80022da:	d109      	bne.n	80022f0 <HAL_UART_Transmit+0x4c>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d105      	bne.n	80022f0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2201      	movs	r2, #1
 80022e8:	4013      	ands	r3, r2
 80022ea:	d001      	beq.n	80022f0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e074      	b.n	80023da <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2284      	movs	r2, #132	; 0x84
 80022f4:	2100      	movs	r1, #0
 80022f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2221      	movs	r2, #33	; 0x21
 80022fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022fe:	f7fe fb67 	bl	80009d0 <HAL_GetTick>
 8002302:	0003      	movs	r3, r0
 8002304:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1dba      	adds	r2, r7, #6
 800230a:	2150      	movs	r1, #80	; 0x50
 800230c:	8812      	ldrh	r2, [r2, #0]
 800230e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1dba      	adds	r2, r7, #6
 8002314:	2152      	movs	r1, #82	; 0x52
 8002316:	8812      	ldrh	r2, [r2, #0]
 8002318:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	015b      	lsls	r3, r3, #5
 8002322:	429a      	cmp	r2, r3
 8002324:	d108      	bne.n	8002338 <HAL_UART_Transmit+0x94>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d104      	bne.n	8002338 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	e003      	b.n	8002340 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002340:	e02f      	b.n	80023a2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	0013      	movs	r3, r2
 800234c:	2200      	movs	r2, #0
 800234e:	2180      	movs	r1, #128	; 0x80
 8002350:	f001 f872 	bl	8003438 <UART_WaitOnFlagUntilTimeout>
 8002354:	1e03      	subs	r3, r0, #0
 8002356:	d004      	beq.n	8002362 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e03b      	b.n	80023da <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10b      	bne.n	8002380 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	001a      	movs	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	05d2      	lsls	r2, r2, #23
 8002374:	0dd2      	lsrs	r2, r2, #23
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	3302      	adds	r3, #2
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	e007      	b.n	8002390 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	781a      	ldrb	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3301      	adds	r3, #1
 800238e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2252      	movs	r2, #82	; 0x52
 8002394:	5a9b      	ldrh	r3, [r3, r2]
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b299      	uxth	r1, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2252      	movs	r2, #82	; 0x52
 80023a0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2252      	movs	r2, #82	; 0x52
 80023a6:	5a9b      	ldrh	r3, [r3, r2]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1c9      	bne.n	8002342 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	0013      	movs	r3, r2
 80023b8:	2200      	movs	r2, #0
 80023ba:	2140      	movs	r1, #64	; 0x40
 80023bc:	f001 f83c 	bl	8003438 <UART_WaitOnFlagUntilTimeout>
 80023c0:	1e03      	subs	r3, r0, #0
 80023c2:	d004      	beq.n	80023ce <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e005      	b.n	80023da <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2220      	movs	r2, #32
 80023d2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	e000      	b.n	80023da <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80023d8:	2302      	movs	r3, #2
  }
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b008      	add	sp, #32
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	1dbb      	adds	r3, r7, #6
 80023f2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	589b      	ldr	r3, [r3, r2]
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	d000      	beq.n	8002400 <HAL_UART_Receive+0x1c>
 80023fe:	e0d0      	b.n	80025a2 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_UART_Receive+0x2a>
 8002406:	1dbb      	adds	r3, r7, #6
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e0c8      	b.n	80025a4 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	015b      	lsls	r3, r3, #5
 800241a:	429a      	cmp	r2, r3
 800241c:	d109      	bne.n	8002432 <HAL_UART_Receive+0x4e>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d105      	bne.n	8002432 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2201      	movs	r2, #1
 800242a:	4013      	ands	r3, r2
 800242c:	d001      	beq.n	8002432 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e0b8      	b.n	80025a4 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2284      	movs	r2, #132	; 0x84
 8002436:	2100      	movs	r1, #0
 8002438:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2280      	movs	r2, #128	; 0x80
 800243e:	2122      	movs	r1, #34	; 0x22
 8002440:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002448:	f7fe fac2 	bl	80009d0 <HAL_GetTick>
 800244c:	0003      	movs	r3, r0
 800244e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1dba      	adds	r2, r7, #6
 8002454:	2158      	movs	r1, #88	; 0x58
 8002456:	8812      	ldrh	r2, [r2, #0]
 8002458:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1dba      	adds	r2, r7, #6
 800245e:	215a      	movs	r1, #90	; 0x5a
 8002460:	8812      	ldrh	r2, [r2, #0]
 8002462:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	015b      	lsls	r3, r3, #5
 800246c:	429a      	cmp	r2, r3
 800246e:	d10d      	bne.n	800248c <HAL_UART_Receive+0xa8>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <HAL_UART_Receive+0x9e>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	225c      	movs	r2, #92	; 0x5c
 800247c:	494b      	ldr	r1, [pc, #300]	; (80025ac <HAL_UART_Receive+0x1c8>)
 800247e:	5299      	strh	r1, [r3, r2]
 8002480:	e02e      	b.n	80024e0 <HAL_UART_Receive+0xfc>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	225c      	movs	r2, #92	; 0x5c
 8002486:	21ff      	movs	r1, #255	; 0xff
 8002488:	5299      	strh	r1, [r3, r2]
 800248a:	e029      	b.n	80024e0 <HAL_UART_Receive+0xfc>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10d      	bne.n	80024b0 <HAL_UART_Receive+0xcc>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d104      	bne.n	80024a6 <HAL_UART_Receive+0xc2>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	225c      	movs	r2, #92	; 0x5c
 80024a0:	21ff      	movs	r1, #255	; 0xff
 80024a2:	5299      	strh	r1, [r3, r2]
 80024a4:	e01c      	b.n	80024e0 <HAL_UART_Receive+0xfc>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	225c      	movs	r2, #92	; 0x5c
 80024aa:	217f      	movs	r1, #127	; 0x7f
 80024ac:	5299      	strh	r1, [r3, r2]
 80024ae:	e017      	b.n	80024e0 <HAL_UART_Receive+0xfc>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	055b      	lsls	r3, r3, #21
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d10d      	bne.n	80024d8 <HAL_UART_Receive+0xf4>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d104      	bne.n	80024ce <HAL_UART_Receive+0xea>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	225c      	movs	r2, #92	; 0x5c
 80024c8:	217f      	movs	r1, #127	; 0x7f
 80024ca:	5299      	strh	r1, [r3, r2]
 80024cc:	e008      	b.n	80024e0 <HAL_UART_Receive+0xfc>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	225c      	movs	r2, #92	; 0x5c
 80024d2:	213f      	movs	r1, #63	; 0x3f
 80024d4:	5299      	strh	r1, [r3, r2]
 80024d6:	e003      	b.n	80024e0 <HAL_UART_Receive+0xfc>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	225c      	movs	r2, #92	; 0x5c
 80024dc:	2100      	movs	r1, #0
 80024de:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80024e0:	2312      	movs	r3, #18
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	215c      	movs	r1, #92	; 0x5c
 80024e8:	5a52      	ldrh	r2, [r2, r1]
 80024ea:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	015b      	lsls	r3, r3, #5
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d108      	bne.n	800250a <HAL_UART_Receive+0x126>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d104      	bne.n	800250a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002500:	2300      	movs	r3, #0
 8002502:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	61bb      	str	r3, [r7, #24]
 8002508:	e003      	b.n	8002512 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002512:	e03a      	b.n	800258a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	0013      	movs	r3, r2
 800251e:	2200      	movs	r2, #0
 8002520:	2120      	movs	r1, #32
 8002522:	f000 ff89 	bl	8003438 <UART_WaitOnFlagUntilTimeout>
 8002526:	1e03      	subs	r3, r0, #0
 8002528:	d005      	beq.n	8002536 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	2120      	movs	r1, #32
 8002530:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e036      	b.n	80025a4 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10e      	bne.n	800255a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	b29b      	uxth	r3, r3
 8002544:	2212      	movs	r2, #18
 8002546:	18ba      	adds	r2, r7, r2
 8002548:	8812      	ldrh	r2, [r2, #0]
 800254a:	4013      	ands	r3, r2
 800254c:	b29a      	uxth	r2, r3
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	3302      	adds	r3, #2
 8002556:	61bb      	str	r3, [r7, #24]
 8002558:	e00e      	b.n	8002578 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2212      	movs	r2, #18
 8002564:	18ba      	adds	r2, r7, r2
 8002566:	8812      	ldrh	r2, [r2, #0]
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	4013      	ands	r3, r2
 800256c:	b2da      	uxtb	r2, r3
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3301      	adds	r3, #1
 8002576:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	225a      	movs	r2, #90	; 0x5a
 800257c:	5a9b      	ldrh	r3, [r3, r2]
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b299      	uxth	r1, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	225a      	movs	r2, #90	; 0x5a
 8002588:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	225a      	movs	r2, #90	; 0x5a
 800258e:	5a9b      	ldrh	r3, [r3, r2]
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1be      	bne.n	8002514 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2280      	movs	r2, #128	; 0x80
 800259a:	2120      	movs	r1, #32
 800259c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	e000      	b.n	80025a4 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80025a2:	2302      	movs	r3, #2
  }
}
 80025a4:	0018      	movs	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b008      	add	sp, #32
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	000001ff 	.word	0x000001ff

080025b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	1dbb      	adds	r3, r7, #6
 80025bc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2280      	movs	r2, #128	; 0x80
 80025c2:	589b      	ldr	r3, [r3, r2]
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d14a      	bne.n	800265e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_UART_Receive_DMA+0x26>
 80025ce:	1dbb      	adds	r3, r7, #6
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e042      	b.n	8002660 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	015b      	lsls	r3, r3, #5
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d109      	bne.n	80025fa <HAL_UART_Receive_DMA+0x4a>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d105      	bne.n	80025fa <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2201      	movs	r2, #1
 80025f2:	4013      	ands	r3, r2
 80025f4:	d001      	beq.n	80025fa <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e032      	b.n	8002660 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a18      	ldr	r2, [pc, #96]	; (8002668 <HAL_UART_Receive_DMA+0xb8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d020      	beq.n	800264c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	041b      	lsls	r3, r3, #16
 8002614:	4013      	ands	r3, r2
 8002616:	d019      	beq.n	800264c <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002618:	f3ef 8310 	mrs	r3, PRIMASK
 800261c:	613b      	str	r3, [r7, #16]
  return(result);
 800261e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	2301      	movs	r3, #1
 8002624:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f383 8810 	msr	PRIMASK, r3
}
 800262c:	46c0      	nop			; (mov r8, r8)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2180      	movs	r1, #128	; 0x80
 800263a:	04c9      	lsls	r1, r1, #19
 800263c:	430a      	orrs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	f383 8810 	msr	PRIMASK, r3
}
 800264a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800264c:	1dbb      	adds	r3, r7, #6
 800264e:	881a      	ldrh	r2, [r3, #0]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	0018      	movs	r0, r3
 8002656:	f000 ff59 	bl	800350c <UART_Start_Receive_DMA>
 800265a:	0003      	movs	r3, r0
 800265c:	e000      	b.n	8002660 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800265e:	2302      	movs	r3, #2
  }
}
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	b008      	add	sp, #32
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40004800 	.word	0x40004800

0800266c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b0ab      	sub	sp, #172	; 0xac
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	22a4      	movs	r2, #164	; 0xa4
 800267c:	18b9      	adds	r1, r7, r2
 800267e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	20a0      	movs	r0, #160	; 0xa0
 8002688:	1839      	adds	r1, r7, r0
 800268a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	219c      	movs	r1, #156	; 0x9c
 8002694:	1879      	adds	r1, r7, r1
 8002696:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002698:	0011      	movs	r1, r2
 800269a:	18bb      	adds	r3, r7, r2
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a99      	ldr	r2, [pc, #612]	; (8002904 <HAL_UART_IRQHandler+0x298>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	2298      	movs	r2, #152	; 0x98
 80026a4:	18bc      	adds	r4, r7, r2
 80026a6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80026a8:	18bb      	adds	r3, r7, r2
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d114      	bne.n	80026da <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80026b0:	187b      	adds	r3, r7, r1
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2220      	movs	r2, #32
 80026b6:	4013      	ands	r3, r2
 80026b8:	d00f      	beq.n	80026da <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80026ba:	183b      	adds	r3, r7, r0
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2220      	movs	r2, #32
 80026c0:	4013      	ands	r3, r2
 80026c2:	d00a      	beq.n	80026da <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d100      	bne.n	80026ce <HAL_UART_IRQHandler+0x62>
 80026cc:	e2a0      	b.n	8002c10 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	0010      	movs	r0, r2
 80026d6:	4798      	blx	r3
      }
      return;
 80026d8:	e29a      	b.n	8002c10 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80026da:	2398      	movs	r3, #152	; 0x98
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d100      	bne.n	80026e6 <HAL_UART_IRQHandler+0x7a>
 80026e4:	e114      	b.n	8002910 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80026e6:	239c      	movs	r3, #156	; 0x9c
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2201      	movs	r2, #1
 80026ee:	4013      	ands	r3, r2
 80026f0:	d106      	bne.n	8002700 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80026f2:	23a0      	movs	r3, #160	; 0xa0
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a83      	ldr	r2, [pc, #524]	; (8002908 <HAL_UART_IRQHandler+0x29c>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	d100      	bne.n	8002700 <HAL_UART_IRQHandler+0x94>
 80026fe:	e107      	b.n	8002910 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002700:	23a4      	movs	r3, #164	; 0xa4
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	4013      	ands	r3, r2
 800270a:	d012      	beq.n	8002732 <HAL_UART_IRQHandler+0xc6>
 800270c:	23a0      	movs	r3, #160	; 0xa0
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4013      	ands	r3, r2
 8002718:	d00b      	beq.n	8002732 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2201      	movs	r2, #1
 8002720:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2284      	movs	r2, #132	; 0x84
 8002726:	589b      	ldr	r3, [r3, r2]
 8002728:	2201      	movs	r2, #1
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2184      	movs	r1, #132	; 0x84
 8002730:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002732:	23a4      	movs	r3, #164	; 0xa4
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2202      	movs	r2, #2
 800273a:	4013      	ands	r3, r2
 800273c:	d011      	beq.n	8002762 <HAL_UART_IRQHandler+0xf6>
 800273e:	239c      	movs	r3, #156	; 0x9c
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2201      	movs	r2, #1
 8002746:	4013      	ands	r3, r2
 8002748:	d00b      	beq.n	8002762 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2202      	movs	r2, #2
 8002750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2284      	movs	r2, #132	; 0x84
 8002756:	589b      	ldr	r3, [r3, r2]
 8002758:	2204      	movs	r2, #4
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2184      	movs	r1, #132	; 0x84
 8002760:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002762:	23a4      	movs	r3, #164	; 0xa4
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2204      	movs	r2, #4
 800276a:	4013      	ands	r3, r2
 800276c:	d011      	beq.n	8002792 <HAL_UART_IRQHandler+0x126>
 800276e:	239c      	movs	r3, #156	; 0x9c
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2201      	movs	r2, #1
 8002776:	4013      	ands	r3, r2
 8002778:	d00b      	beq.n	8002792 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2204      	movs	r2, #4
 8002780:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2284      	movs	r2, #132	; 0x84
 8002786:	589b      	ldr	r3, [r3, r2]
 8002788:	2202      	movs	r2, #2
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2184      	movs	r1, #132	; 0x84
 8002790:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002792:	23a4      	movs	r3, #164	; 0xa4
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2208      	movs	r2, #8
 800279a:	4013      	ands	r3, r2
 800279c:	d017      	beq.n	80027ce <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800279e:	23a0      	movs	r3, #160	; 0xa0
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2220      	movs	r2, #32
 80027a6:	4013      	ands	r3, r2
 80027a8:	d105      	bne.n	80027b6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80027aa:	239c      	movs	r3, #156	; 0x9c
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2201      	movs	r2, #1
 80027b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027b4:	d00b      	beq.n	80027ce <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2208      	movs	r2, #8
 80027bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2284      	movs	r2, #132	; 0x84
 80027c2:	589b      	ldr	r3, [r3, r2]
 80027c4:	2208      	movs	r2, #8
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2184      	movs	r1, #132	; 0x84
 80027cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027ce:	23a4      	movs	r3, #164	; 0xa4
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	4013      	ands	r3, r2
 80027da:	d013      	beq.n	8002804 <HAL_UART_IRQHandler+0x198>
 80027dc:	23a0      	movs	r3, #160	; 0xa0
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	04db      	lsls	r3, r3, #19
 80027e6:	4013      	ands	r3, r2
 80027e8:	d00c      	beq.n	8002804 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2280      	movs	r2, #128	; 0x80
 80027f0:	0112      	lsls	r2, r2, #4
 80027f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2284      	movs	r2, #132	; 0x84
 80027f8:	589b      	ldr	r3, [r3, r2]
 80027fa:	2220      	movs	r2, #32
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2184      	movs	r1, #132	; 0x84
 8002802:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2284      	movs	r2, #132	; 0x84
 8002808:	589b      	ldr	r3, [r3, r2]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d100      	bne.n	8002810 <HAL_UART_IRQHandler+0x1a4>
 800280e:	e201      	b.n	8002c14 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002810:	23a4      	movs	r3, #164	; 0xa4
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2220      	movs	r2, #32
 8002818:	4013      	ands	r3, r2
 800281a:	d00e      	beq.n	800283a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800281c:	23a0      	movs	r3, #160	; 0xa0
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2220      	movs	r2, #32
 8002824:	4013      	ands	r3, r2
 8002826:	d008      	beq.n	800283a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800282c:	2b00      	cmp	r3, #0
 800282e:	d004      	beq.n	800283a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	0010      	movs	r0, r2
 8002838:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2284      	movs	r2, #132	; 0x84
 800283e:	589b      	ldr	r3, [r3, r2]
 8002840:	2194      	movs	r1, #148	; 0x94
 8002842:	187a      	adds	r2, r7, r1
 8002844:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2240      	movs	r2, #64	; 0x40
 800284e:	4013      	ands	r3, r2
 8002850:	2b40      	cmp	r3, #64	; 0x40
 8002852:	d004      	beq.n	800285e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002854:	187b      	adds	r3, r7, r1
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2228      	movs	r2, #40	; 0x28
 800285a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800285c:	d047      	beq.n	80028ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0018      	movs	r0, r3
 8002862:	f000 ff17 	bl	8003694 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2240      	movs	r2, #64	; 0x40
 800286e:	4013      	ands	r3, r2
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d137      	bne.n	80028e4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002874:	f3ef 8310 	mrs	r3, PRIMASK
 8002878:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800287a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800287c:	2090      	movs	r0, #144	; 0x90
 800287e:	183a      	adds	r2, r7, r0
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	2301      	movs	r3, #1
 8002884:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002888:	f383 8810 	msr	PRIMASK, r3
}
 800288c:	46c0      	nop			; (mov r8, r8)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2140      	movs	r1, #64	; 0x40
 800289a:	438a      	bics	r2, r1
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	183b      	adds	r3, r7, r0
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028a6:	f383 8810 	msr	PRIMASK, r3
}
 80028aa:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d012      	beq.n	80028da <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <HAL_UART_IRQHandler+0x2a0>)
 80028ba:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c0:	0018      	movs	r0, r3
 80028c2:	f7fe fa8b 	bl	8000ddc <HAL_DMA_Abort_IT>
 80028c6:	1e03      	subs	r3, r0, #0
 80028c8:	d01a      	beq.n	8002900 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d4:	0018      	movs	r0, r3
 80028d6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d8:	e012      	b.n	8002900 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f000 f9b7 	bl	8002c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e2:	e00d      	b.n	8002900 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f000 f9b2 	bl	8002c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ec:	e008      	b.n	8002900 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f000 f9ad 	bl	8002c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2284      	movs	r2, #132	; 0x84
 80028fa:	2100      	movs	r1, #0
 80028fc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80028fe:	e189      	b.n	8002c14 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002900:	46c0      	nop			; (mov r8, r8)
    return;
 8002902:	e187      	b.n	8002c14 <HAL_UART_IRQHandler+0x5a8>
 8002904:	0000080f 	.word	0x0000080f
 8002908:	04000120 	.word	0x04000120
 800290c:	08003953 	.word	0x08003953

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002914:	2b01      	cmp	r3, #1
 8002916:	d000      	beq.n	800291a <HAL_UART_IRQHandler+0x2ae>
 8002918:	e13b      	b.n	8002b92 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800291a:	23a4      	movs	r3, #164	; 0xa4
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2210      	movs	r2, #16
 8002922:	4013      	ands	r3, r2
 8002924:	d100      	bne.n	8002928 <HAL_UART_IRQHandler+0x2bc>
 8002926:	e134      	b.n	8002b92 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002928:	23a0      	movs	r3, #160	; 0xa0
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2210      	movs	r2, #16
 8002930:	4013      	ands	r3, r2
 8002932:	d100      	bne.n	8002936 <HAL_UART_IRQHandler+0x2ca>
 8002934:	e12d      	b.n	8002b92 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2210      	movs	r2, #16
 800293c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2240      	movs	r2, #64	; 0x40
 8002946:	4013      	ands	r3, r2
 8002948:	2b40      	cmp	r3, #64	; 0x40
 800294a:	d000      	beq.n	800294e <HAL_UART_IRQHandler+0x2e2>
 800294c:	e0a1      	b.n	8002a92 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	217e      	movs	r1, #126	; 0x7e
 8002958:	187b      	adds	r3, r7, r1
 800295a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800295c:	187b      	adds	r3, r7, r1
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d100      	bne.n	8002966 <HAL_UART_IRQHandler+0x2fa>
 8002964:	e158      	b.n	8002c18 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2258      	movs	r2, #88	; 0x58
 800296a:	5a9b      	ldrh	r3, [r3, r2]
 800296c:	187a      	adds	r2, r7, r1
 800296e:	8812      	ldrh	r2, [r2, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d300      	bcc.n	8002976 <HAL_UART_IRQHandler+0x30a>
 8002974:	e150      	b.n	8002c18 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	187a      	adds	r2, r7, r1
 800297a:	215a      	movs	r1, #90	; 0x5a
 800297c:	8812      	ldrh	r2, [r2, #0]
 800297e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2220      	movs	r2, #32
 800298a:	4013      	ands	r3, r2
 800298c:	d16f      	bne.n	8002a6e <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800298e:	f3ef 8310 	mrs	r3, PRIMASK
 8002992:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002996:	67bb      	str	r3, [r7, #120]	; 0x78
 8002998:	2301      	movs	r3, #1
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299e:	f383 8810 	msr	PRIMASK, r3
}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	499e      	ldr	r1, [pc, #632]	; (8002c28 <HAL_UART_IRQHandler+0x5bc>)
 80029b0:	400a      	ands	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ba:	f383 8810 	msr	PRIMASK, r3
}
 80029be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029c0:	f3ef 8310 	mrs	r3, PRIMASK
 80029c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80029c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c8:	677b      	str	r3, [r7, #116]	; 0x74
 80029ca:	2301      	movs	r3, #1
 80029cc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029d0:	f383 8810 	msr	PRIMASK, r3
}
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2101      	movs	r1, #1
 80029e2:	438a      	bics	r2, r1
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ec:	f383 8810 	msr	PRIMASK, r3
}
 80029f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029f2:	f3ef 8310 	mrs	r3, PRIMASK
 80029f6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80029f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029fa:	673b      	str	r3, [r7, #112]	; 0x70
 80029fc:	2301      	movs	r3, #1
 80029fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a02:	f383 8810 	msr	PRIMASK, r3
}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2140      	movs	r1, #64	; 0x40
 8002a14:	438a      	bics	r2, r1
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a1a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a1e:	f383 8810 	msr	PRIMASK, r3
}
 8002a22:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	2120      	movs	r1, #32
 8002a2a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a32:	f3ef 8310 	mrs	r3, PRIMASK
 8002a36:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a42:	f383 8810 	msr	PRIMASK, r3
}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2110      	movs	r1, #16
 8002a54:	438a      	bics	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a5e:	f383 8810 	msr	PRIMASK, r3
}
 8002a62:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7fe f977 	bl	8000d5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2202      	movs	r2, #2
 8002a72:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2258      	movs	r2, #88	; 0x58
 8002a78:	5a9a      	ldrh	r2, [r3, r2]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	215a      	movs	r1, #90	; 0x5a
 8002a7e:	5a5b      	ldrh	r3, [r3, r1]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	0011      	movs	r1, r2
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f000 f8e8 	bl	8002c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a90:	e0c2      	b.n	8002c18 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2258      	movs	r2, #88	; 0x58
 8002a96:	5a99      	ldrh	r1, [r3, r2]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	225a      	movs	r2, #90	; 0x5a
 8002a9c:	5a9b      	ldrh	r3, [r3, r2]
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	208e      	movs	r0, #142	; 0x8e
 8002aa2:	183b      	adds	r3, r7, r0
 8002aa4:	1a8a      	subs	r2, r1, r2
 8002aa6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	225a      	movs	r2, #90	; 0x5a
 8002aac:	5a9b      	ldrh	r3, [r3, r2]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d100      	bne.n	8002ab6 <HAL_UART_IRQHandler+0x44a>
 8002ab4:	e0b2      	b.n	8002c1c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002ab6:	183b      	adds	r3, r7, r0
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d100      	bne.n	8002ac0 <HAL_UART_IRQHandler+0x454>
 8002abe:	e0ad      	b.n	8002c1c <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ac8:	2488      	movs	r4, #136	; 0x88
 8002aca:	193a      	adds	r2, r7, r4
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	2301      	movs	r3, #1
 8002ad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f383 8810 	msr	PRIMASK, r3
}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4951      	ldr	r1, [pc, #324]	; (8002c2c <HAL_UART_IRQHandler+0x5c0>)
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	193b      	adds	r3, r7, r4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f383 8810 	msr	PRIMASK, r3
}
 8002af6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af8:	f3ef 8310 	mrs	r3, PRIMASK
 8002afc:	61bb      	str	r3, [r7, #24]
  return(result);
 8002afe:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b00:	2484      	movs	r4, #132	; 0x84
 8002b02:	193a      	adds	r2, r7, r4
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	2301      	movs	r3, #1
 8002b08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f383 8810 	msr	PRIMASK, r3
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	438a      	bics	r2, r1
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	193b      	adds	r3, r7, r4
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	f383 8810 	msr	PRIMASK, r3
}
 8002b2e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2280      	movs	r2, #128	; 0x80
 8002b34:	2120      	movs	r1, #32
 8002b36:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b44:	f3ef 8310 	mrs	r3, PRIMASK
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b4c:	2480      	movs	r4, #128	; 0x80
 8002b4e:	193a      	adds	r2, r7, r4
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	2301      	movs	r3, #1
 8002b54:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b58:	f383 8810 	msr	PRIMASK, r3
}
 8002b5c:	46c0      	nop			; (mov r8, r8)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2110      	movs	r1, #16
 8002b6a:	438a      	bics	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	193b      	adds	r3, r7, r4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b76:	f383 8810 	msr	PRIMASK, r3
}
 8002b7a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b82:	183b      	adds	r3, r7, r0
 8002b84:	881a      	ldrh	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	0011      	movs	r1, r2
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f000 f868 	bl	8002c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b90:	e044      	b.n	8002c1c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b92:	23a4      	movs	r3, #164	; 0xa4
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	035b      	lsls	r3, r3, #13
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d010      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x556>
 8002ba0:	239c      	movs	r3, #156	; 0x9c
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	03db      	lsls	r3, r3, #15
 8002baa:	4013      	ands	r3, r2
 8002bac:	d009      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2280      	movs	r2, #128	; 0x80
 8002bb4:	0352      	lsls	r2, r2, #13
 8002bb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f000 ff0b 	bl	80039d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002bc0:	e02f      	b.n	8002c22 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002bc2:	23a4      	movs	r3, #164	; 0xa4
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2280      	movs	r2, #128	; 0x80
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d00f      	beq.n	8002bee <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002bce:	23a0      	movs	r3, #160	; 0xa0
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2280      	movs	r2, #128	; 0x80
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d009      	beq.n	8002bee <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d01e      	beq.n	8002c20 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	0010      	movs	r0, r2
 8002bea:	4798      	blx	r3
    }
    return;
 8002bec:	e018      	b.n	8002c20 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002bee:	23a4      	movs	r3, #164	; 0xa4
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2240      	movs	r2, #64	; 0x40
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d013      	beq.n	8002c22 <HAL_UART_IRQHandler+0x5b6>
 8002bfa:	23a0      	movs	r3, #160	; 0xa0
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2240      	movs	r2, #64	; 0x40
 8002c02:	4013      	ands	r3, r2
 8002c04:	d00d      	beq.n	8002c22 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f000 feb9 	bl	8003980 <UART_EndTransmit_IT>
    return;
 8002c0e:	e008      	b.n	8002c22 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	e006      	b.n	8002c22 <HAL_UART_IRQHandler+0x5b6>
    return;
 8002c14:	46c0      	nop			; (mov r8, r8)
 8002c16:	e004      	b.n	8002c22 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002c18:	46c0      	nop			; (mov r8, r8)
 8002c1a:	e002      	b.n	8002c22 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002c1c:	46c0      	nop			; (mov r8, r8)
 8002c1e:	e000      	b.n	8002c22 <HAL_UART_IRQHandler+0x5b6>
    return;
 8002c20:	46c0      	nop			; (mov r8, r8)
  }

}
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b02b      	add	sp, #172	; 0xac
 8002c26:	bd90      	pop	{r4, r7, pc}
 8002c28:	fffffeff 	.word	0xfffffeff
 8002c2c:	fffffedf 	.word	0xfffffedf

08002c30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b002      	add	sp, #8
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002c48:	46c0      	nop			; (mov r8, r8)
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b002      	add	sp, #8
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	000a      	movs	r2, r1
 8002c6a:	1cbb      	adds	r3, r7, #2
 8002c6c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b002      	add	sp, #8
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c78:	b5b0      	push	{r4, r5, r7, lr}
 8002c7a:	b08e      	sub	sp, #56	; 0x38
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c80:	231a      	movs	r3, #26
 8002c82:	2218      	movs	r2, #24
 8002c84:	189b      	adds	r3, r3, r2
 8002c86:	19db      	adds	r3, r3, r7
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4ac6      	ldr	r2, [pc, #792]	; (8002fc4 <UART_SetConfig+0x34c>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	0019      	movs	r1, r3
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4ac1      	ldr	r2, [pc, #772]	; (8002fc8 <UART_SetConfig+0x350>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4abb      	ldr	r2, [pc, #748]	; (8002fcc <UART_SetConfig+0x354>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d004      	beq.n	8002cec <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4ab7      	ldr	r2, [pc, #732]	; (8002fd0 <UART_SetConfig+0x358>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4ab3      	ldr	r2, [pc, #716]	; (8002fd4 <UART_SetConfig+0x35c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d131      	bne.n	8002d70 <UART_SetConfig+0xf8>
 8002d0c:	4bb2      	ldr	r3, [pc, #712]	; (8002fd8 <UART_SetConfig+0x360>)
 8002d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d10:	2203      	movs	r2, #3
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d01d      	beq.n	8002d54 <UART_SetConfig+0xdc>
 8002d18:	d823      	bhi.n	8002d62 <UART_SetConfig+0xea>
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d00c      	beq.n	8002d38 <UART_SetConfig+0xc0>
 8002d1e:	d820      	bhi.n	8002d62 <UART_SetConfig+0xea>
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <UART_SetConfig+0xb2>
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d00e      	beq.n	8002d46 <UART_SetConfig+0xce>
 8002d28:	e01b      	b.n	8002d62 <UART_SetConfig+0xea>
 8002d2a:	231b      	movs	r3, #27
 8002d2c:	2218      	movs	r2, #24
 8002d2e:	189b      	adds	r3, r3, r2
 8002d30:	19db      	adds	r3, r3, r7
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e09c      	b.n	8002e72 <UART_SetConfig+0x1fa>
 8002d38:	231b      	movs	r3, #27
 8002d3a:	2218      	movs	r2, #24
 8002d3c:	189b      	adds	r3, r3, r2
 8002d3e:	19db      	adds	r3, r3, r7
 8002d40:	2202      	movs	r2, #2
 8002d42:	701a      	strb	r2, [r3, #0]
 8002d44:	e095      	b.n	8002e72 <UART_SetConfig+0x1fa>
 8002d46:	231b      	movs	r3, #27
 8002d48:	2218      	movs	r2, #24
 8002d4a:	189b      	adds	r3, r3, r2
 8002d4c:	19db      	adds	r3, r3, r7
 8002d4e:	2204      	movs	r2, #4
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e08e      	b.n	8002e72 <UART_SetConfig+0x1fa>
 8002d54:	231b      	movs	r3, #27
 8002d56:	2218      	movs	r2, #24
 8002d58:	189b      	adds	r3, r3, r2
 8002d5a:	19db      	adds	r3, r3, r7
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	e087      	b.n	8002e72 <UART_SetConfig+0x1fa>
 8002d62:	231b      	movs	r3, #27
 8002d64:	2218      	movs	r2, #24
 8002d66:	189b      	adds	r3, r3, r2
 8002d68:	19db      	adds	r3, r3, r7
 8002d6a:	2210      	movs	r2, #16
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	e080      	b.n	8002e72 <UART_SetConfig+0x1fa>
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a99      	ldr	r2, [pc, #612]	; (8002fdc <UART_SetConfig+0x364>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d131      	bne.n	8002dde <UART_SetConfig+0x166>
 8002d7a:	4b97      	ldr	r3, [pc, #604]	; (8002fd8 <UART_SetConfig+0x360>)
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7e:	220c      	movs	r2, #12
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d01d      	beq.n	8002dc2 <UART_SetConfig+0x14a>
 8002d86:	d823      	bhi.n	8002dd0 <UART_SetConfig+0x158>
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d00c      	beq.n	8002da6 <UART_SetConfig+0x12e>
 8002d8c:	d820      	bhi.n	8002dd0 <UART_SetConfig+0x158>
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <UART_SetConfig+0x120>
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d00e      	beq.n	8002db4 <UART_SetConfig+0x13c>
 8002d96:	e01b      	b.n	8002dd0 <UART_SetConfig+0x158>
 8002d98:	231b      	movs	r3, #27
 8002d9a:	2218      	movs	r2, #24
 8002d9c:	189b      	adds	r3, r3, r2
 8002d9e:	19db      	adds	r3, r3, r7
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
 8002da4:	e065      	b.n	8002e72 <UART_SetConfig+0x1fa>
 8002da6:	231b      	movs	r3, #27
 8002da8:	2218      	movs	r2, #24
 8002daa:	189b      	adds	r3, r3, r2
 8002dac:	19db      	adds	r3, r3, r7
 8002dae:	2202      	movs	r2, #2
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	e05e      	b.n	8002e72 <UART_SetConfig+0x1fa>
 8002db4:	231b      	movs	r3, #27
 8002db6:	2218      	movs	r2, #24
 8002db8:	189b      	adds	r3, r3, r2
 8002dba:	19db      	adds	r3, r3, r7
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	e057      	b.n	8002e72 <UART_SetConfig+0x1fa>
 8002dc2:	231b      	movs	r3, #27
 8002dc4:	2218      	movs	r2, #24
 8002dc6:	189b      	adds	r3, r3, r2
 8002dc8:	19db      	adds	r3, r3, r7
 8002dca:	2208      	movs	r2, #8
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e050      	b.n	8002e72 <UART_SetConfig+0x1fa>
 8002dd0:	231b      	movs	r3, #27
 8002dd2:	2218      	movs	r2, #24
 8002dd4:	189b      	adds	r3, r3, r2
 8002dd6:	19db      	adds	r3, r3, r7
 8002dd8:	2210      	movs	r2, #16
 8002dda:	701a      	strb	r2, [r3, #0]
 8002ddc:	e049      	b.n	8002e72 <UART_SetConfig+0x1fa>
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a7a      	ldr	r2, [pc, #488]	; (8002fcc <UART_SetConfig+0x354>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d13e      	bne.n	8002e66 <UART_SetConfig+0x1ee>
 8002de8:	4b7b      	ldr	r3, [pc, #492]	; (8002fd8 <UART_SetConfig+0x360>)
 8002dea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dec:	23c0      	movs	r3, #192	; 0xc0
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	4013      	ands	r3, r2
 8002df2:	22c0      	movs	r2, #192	; 0xc0
 8002df4:	0112      	lsls	r2, r2, #4
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d027      	beq.n	8002e4a <UART_SetConfig+0x1d2>
 8002dfa:	22c0      	movs	r2, #192	; 0xc0
 8002dfc:	0112      	lsls	r2, r2, #4
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d82a      	bhi.n	8002e58 <UART_SetConfig+0x1e0>
 8002e02:	2280      	movs	r2, #128	; 0x80
 8002e04:	0112      	lsls	r2, r2, #4
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d011      	beq.n	8002e2e <UART_SetConfig+0x1b6>
 8002e0a:	2280      	movs	r2, #128	; 0x80
 8002e0c:	0112      	lsls	r2, r2, #4
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d822      	bhi.n	8002e58 <UART_SetConfig+0x1e0>
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d004      	beq.n	8002e20 <UART_SetConfig+0x1a8>
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	00d2      	lsls	r2, r2, #3
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00e      	beq.n	8002e3c <UART_SetConfig+0x1c4>
 8002e1e:	e01b      	b.n	8002e58 <UART_SetConfig+0x1e0>
 8002e20:	231b      	movs	r3, #27
 8002e22:	2218      	movs	r2, #24
 8002e24:	189b      	adds	r3, r3, r2
 8002e26:	19db      	adds	r3, r3, r7
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
 8002e2c:	e021      	b.n	8002e72 <UART_SetConfig+0x1fa>
 8002e2e:	231b      	movs	r3, #27
 8002e30:	2218      	movs	r2, #24
 8002e32:	189b      	adds	r3, r3, r2
 8002e34:	19db      	adds	r3, r3, r7
 8002e36:	2202      	movs	r2, #2
 8002e38:	701a      	strb	r2, [r3, #0]
 8002e3a:	e01a      	b.n	8002e72 <UART_SetConfig+0x1fa>
 8002e3c:	231b      	movs	r3, #27
 8002e3e:	2218      	movs	r2, #24
 8002e40:	189b      	adds	r3, r3, r2
 8002e42:	19db      	adds	r3, r3, r7
 8002e44:	2204      	movs	r2, #4
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	e013      	b.n	8002e72 <UART_SetConfig+0x1fa>
 8002e4a:	231b      	movs	r3, #27
 8002e4c:	2218      	movs	r2, #24
 8002e4e:	189b      	adds	r3, r3, r2
 8002e50:	19db      	adds	r3, r3, r7
 8002e52:	2208      	movs	r2, #8
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e00c      	b.n	8002e72 <UART_SetConfig+0x1fa>
 8002e58:	231b      	movs	r3, #27
 8002e5a:	2218      	movs	r2, #24
 8002e5c:	189b      	adds	r3, r3, r2
 8002e5e:	19db      	adds	r3, r3, r7
 8002e60:	2210      	movs	r2, #16
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	e005      	b.n	8002e72 <UART_SetConfig+0x1fa>
 8002e66:	231b      	movs	r3, #27
 8002e68:	2218      	movs	r2, #24
 8002e6a:	189b      	adds	r3, r3, r2
 8002e6c:	19db      	adds	r3, r3, r7
 8002e6e:	2210      	movs	r2, #16
 8002e70:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a55      	ldr	r2, [pc, #340]	; (8002fcc <UART_SetConfig+0x354>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d000      	beq.n	8002e7e <UART_SetConfig+0x206>
 8002e7c:	e084      	b.n	8002f88 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e7e:	231b      	movs	r3, #27
 8002e80:	2218      	movs	r2, #24
 8002e82:	189b      	adds	r3, r3, r2
 8002e84:	19db      	adds	r3, r3, r7
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d01d      	beq.n	8002ec8 <UART_SetConfig+0x250>
 8002e8c:	dc20      	bgt.n	8002ed0 <UART_SetConfig+0x258>
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d015      	beq.n	8002ebe <UART_SetConfig+0x246>
 8002e92:	dc1d      	bgt.n	8002ed0 <UART_SetConfig+0x258>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <UART_SetConfig+0x226>
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d005      	beq.n	8002ea8 <UART_SetConfig+0x230>
 8002e9c:	e018      	b.n	8002ed0 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e9e:	f7fe fff3 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ea6:	e01c      	b.n	8002ee2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ea8:	4b4b      	ldr	r3, [pc, #300]	; (8002fd8 <UART_SetConfig+0x360>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2210      	movs	r2, #16
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d002      	beq.n	8002eb8 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002eb2:	4b4b      	ldr	r3, [pc, #300]	; (8002fe0 <UART_SetConfig+0x368>)
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002eb6:	e014      	b.n	8002ee2 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002eb8:	4b4a      	ldr	r3, [pc, #296]	; (8002fe4 <UART_SetConfig+0x36c>)
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ebc:	e011      	b.n	8002ee2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ebe:	f7fe ff33 	bl	8001d28 <HAL_RCC_GetSysClockFreq>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ec6:	e00c      	b.n	8002ee2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ece:	e008      	b.n	8002ee2 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ed4:	231a      	movs	r3, #26
 8002ed6:	2218      	movs	r2, #24
 8002ed8:	189b      	adds	r3, r3, r2
 8002eda:	19db      	adds	r3, r3, r7
 8002edc:	2201      	movs	r2, #1
 8002ede:	701a      	strb	r2, [r3, #0]
        break;
 8002ee0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d100      	bne.n	8002eea <UART_SetConfig+0x272>
 8002ee8:	e132      	b.n	8003150 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	0013      	movs	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	189b      	adds	r3, r3, r2
 8002ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d305      	bcc.n	8002f06 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d906      	bls.n	8002f14 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002f06:	231a      	movs	r3, #26
 8002f08:	2218      	movs	r2, #24
 8002f0a:	189b      	adds	r3, r3, r2
 8002f0c:	19db      	adds	r3, r3, r7
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	e11d      	b.n	8003150 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	6939      	ldr	r1, [r7, #16]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	000b      	movs	r3, r1
 8002f22:	0e1b      	lsrs	r3, r3, #24
 8002f24:	0010      	movs	r0, r2
 8002f26:	0205      	lsls	r5, r0, #8
 8002f28:	431d      	orrs	r5, r3
 8002f2a:	000b      	movs	r3, r1
 8002f2c:	021c      	lsls	r4, r3, #8
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	085b      	lsrs	r3, r3, #1
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	68b8      	ldr	r0, [r7, #8]
 8002f3c:	68f9      	ldr	r1, [r7, #12]
 8002f3e:	1900      	adds	r0, r0, r4
 8002f40:	4169      	adcs	r1, r5
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	607b      	str	r3, [r7, #4]
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f7fd f966 	bl	8000220 <__aeabi_uldivmod>
 8002f54:	0002      	movs	r2, r0
 8002f56:	000b      	movs	r3, r1
 8002f58:	0013      	movs	r3, r2
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5e:	23c0      	movs	r3, #192	; 0xc0
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d309      	bcc.n	8002f7a <UART_SetConfig+0x302>
 8002f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	035b      	lsls	r3, r3, #13
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d204      	bcs.n	8002f7a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f76:	60da      	str	r2, [r3, #12]
 8002f78:	e0ea      	b.n	8003150 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002f7a:	231a      	movs	r3, #26
 8002f7c:	2218      	movs	r2, #24
 8002f7e:	189b      	adds	r3, r3, r2
 8002f80:	19db      	adds	r3, r3, r7
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	e0e3      	b.n	8003150 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	69da      	ldr	r2, [r3, #28]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d000      	beq.n	8002f96 <UART_SetConfig+0x31e>
 8002f94:	e085      	b.n	80030a2 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002f96:	231b      	movs	r3, #27
 8002f98:	2218      	movs	r2, #24
 8002f9a:	189b      	adds	r3, r3, r2
 8002f9c:	19db      	adds	r3, r3, r7
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d837      	bhi.n	8003014 <UART_SetConfig+0x39c>
 8002fa4:	009a      	lsls	r2, r3, #2
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <UART_SetConfig+0x370>)
 8002fa8:	18d3      	adds	r3, r2, r3
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fae:	f7fe ff6b 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fb6:	e036      	b.n	8003026 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fb8:	f7fe ff7c 	bl	8001eb4 <HAL_RCC_GetPCLK2Freq>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fc0:	e031      	b.n	8003026 <UART_SetConfig+0x3ae>
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	efff69f3 	.word	0xefff69f3
 8002fc8:	ffffcfff 	.word	0xffffcfff
 8002fcc:	40004800 	.word	0x40004800
 8002fd0:	fffff4ff 	.word	0xfffff4ff
 8002fd4:	40013800 	.word	0x40013800
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40004400 	.word	0x40004400
 8002fe0:	003d0900 	.word	0x003d0900
 8002fe4:	00f42400 	.word	0x00f42400
 8002fe8:	08003a7c 	.word	0x08003a7c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fec:	4b60      	ldr	r3, [pc, #384]	; (8003170 <UART_SetConfig+0x4f8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d002      	beq.n	8002ffc <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ff6:	4b5f      	ldr	r3, [pc, #380]	; (8003174 <UART_SetConfig+0x4fc>)
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ffa:	e014      	b.n	8003026 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002ffc:	4b5e      	ldr	r3, [pc, #376]	; (8003178 <UART_SetConfig+0x500>)
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003000:	e011      	b.n	8003026 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003002:	f7fe fe91 	bl	8001d28 <HAL_RCC_GetSysClockFreq>
 8003006:	0003      	movs	r3, r0
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800300a:	e00c      	b.n	8003026 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003012:	e008      	b.n	8003026 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003018:	231a      	movs	r3, #26
 800301a:	2218      	movs	r2, #24
 800301c:	189b      	adds	r3, r3, r2
 800301e:	19db      	adds	r3, r3, r7
 8003020:	2201      	movs	r2, #1
 8003022:	701a      	strb	r2, [r3, #0]
        break;
 8003024:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d100      	bne.n	800302e <UART_SetConfig+0x3b6>
 800302c:	e090      	b.n	8003150 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003030:	005a      	lsls	r2, r3, #1
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	085b      	lsrs	r3, r3, #1
 8003038:	18d2      	adds	r2, r2, r3
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	0019      	movs	r1, r3
 8003040:	0010      	movs	r0, r2
 8003042:	f7fd f861 	bl	8000108 <__udivsi3>
 8003046:	0003      	movs	r3, r0
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304c:	2b0f      	cmp	r3, #15
 800304e:	d921      	bls.n	8003094 <UART_SetConfig+0x41c>
 8003050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	025b      	lsls	r3, r3, #9
 8003056:	429a      	cmp	r2, r3
 8003058:	d21c      	bcs.n	8003094 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	b29a      	uxth	r2, r3
 800305e:	200e      	movs	r0, #14
 8003060:	2418      	movs	r4, #24
 8003062:	1903      	adds	r3, r0, r4
 8003064:	19db      	adds	r3, r3, r7
 8003066:	210f      	movs	r1, #15
 8003068:	438a      	bics	r2, r1
 800306a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306e:	085b      	lsrs	r3, r3, #1
 8003070:	b29b      	uxth	r3, r3
 8003072:	2207      	movs	r2, #7
 8003074:	4013      	ands	r3, r2
 8003076:	b299      	uxth	r1, r3
 8003078:	1903      	adds	r3, r0, r4
 800307a:	19db      	adds	r3, r3, r7
 800307c:	1902      	adds	r2, r0, r4
 800307e:	19d2      	adds	r2, r2, r7
 8003080:	8812      	ldrh	r2, [r2, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	1902      	adds	r2, r0, r4
 800308c:	19d2      	adds	r2, r2, r7
 800308e:	8812      	ldrh	r2, [r2, #0]
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	e05d      	b.n	8003150 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003094:	231a      	movs	r3, #26
 8003096:	2218      	movs	r2, #24
 8003098:	189b      	adds	r3, r3, r2
 800309a:	19db      	adds	r3, r3, r7
 800309c:	2201      	movs	r2, #1
 800309e:	701a      	strb	r2, [r3, #0]
 80030a0:	e056      	b.n	8003150 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030a2:	231b      	movs	r3, #27
 80030a4:	2218      	movs	r2, #24
 80030a6:	189b      	adds	r3, r3, r2
 80030a8:	19db      	adds	r3, r3, r7
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d822      	bhi.n	80030f6 <UART_SetConfig+0x47e>
 80030b0:	009a      	lsls	r2, r3, #2
 80030b2:	4b32      	ldr	r3, [pc, #200]	; (800317c <UART_SetConfig+0x504>)
 80030b4:	18d3      	adds	r3, r2, r3
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030ba:	f7fe fee5 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 80030be:	0003      	movs	r3, r0
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030c2:	e021      	b.n	8003108 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030c4:	f7fe fef6 	bl	8001eb4 <HAL_RCC_GetPCLK2Freq>
 80030c8:	0003      	movs	r3, r0
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030cc:	e01c      	b.n	8003108 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030ce:	4b28      	ldr	r3, [pc, #160]	; (8003170 <UART_SetConfig+0x4f8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2210      	movs	r2, #16
 80030d4:	4013      	ands	r3, r2
 80030d6:	d002      	beq.n	80030de <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80030d8:	4b26      	ldr	r3, [pc, #152]	; (8003174 <UART_SetConfig+0x4fc>)
 80030da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80030dc:	e014      	b.n	8003108 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80030de:	4b26      	ldr	r3, [pc, #152]	; (8003178 <UART_SetConfig+0x500>)
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030e2:	e011      	b.n	8003108 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030e4:	f7fe fe20 	bl	8001d28 <HAL_RCC_GetSysClockFreq>
 80030e8:	0003      	movs	r3, r0
 80030ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030ec:	e00c      	b.n	8003108 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80030f4:	e008      	b.n	8003108 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80030fa:	231a      	movs	r3, #26
 80030fc:	2218      	movs	r2, #24
 80030fe:	189b      	adds	r3, r3, r2
 8003100:	19db      	adds	r3, r3, r7
 8003102:	2201      	movs	r2, #1
 8003104:	701a      	strb	r2, [r3, #0]
        break;
 8003106:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d020      	beq.n	8003150 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	085a      	lsrs	r2, r3, #1
 8003114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003116:	18d2      	adds	r2, r2, r3
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	0019      	movs	r1, r3
 800311e:	0010      	movs	r0, r2
 8003120:	f7fc fff2 	bl	8000108 <__udivsi3>
 8003124:	0003      	movs	r3, r0
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312a:	2b0f      	cmp	r3, #15
 800312c:	d90a      	bls.n	8003144 <UART_SetConfig+0x4cc>
 800312e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	025b      	lsls	r3, r3, #9
 8003134:	429a      	cmp	r2, r3
 8003136:	d205      	bcs.n	8003144 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313a:	b29a      	uxth	r2, r3
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	e005      	b.n	8003150 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003144:	231a      	movs	r3, #26
 8003146:	2218      	movs	r2, #24
 8003148:	189b      	adds	r3, r3, r2
 800314a:	19db      	adds	r3, r3, r7
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	2200      	movs	r2, #0
 8003154:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	2200      	movs	r2, #0
 800315a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800315c:	231a      	movs	r3, #26
 800315e:	2218      	movs	r2, #24
 8003160:	189b      	adds	r3, r3, r2
 8003162:	19db      	adds	r3, r3, r7
 8003164:	781b      	ldrb	r3, [r3, #0]
}
 8003166:	0018      	movs	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	b00e      	add	sp, #56	; 0x38
 800316c:	bdb0      	pop	{r4, r5, r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	40021000 	.word	0x40021000
 8003174:	003d0900 	.word	0x003d0900
 8003178:	00f42400 	.word	0x00f42400
 800317c:	08003aa0 	.word	0x08003aa0

08003180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	2201      	movs	r2, #1
 800318e:	4013      	ands	r3, r2
 8003190:	d00b      	beq.n	80031aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a4a      	ldr	r2, [pc, #296]	; (80032c4 <UART_AdvFeatureConfig+0x144>)
 800319a:	4013      	ands	r3, r2
 800319c:	0019      	movs	r1, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	2202      	movs	r2, #2
 80031b0:	4013      	ands	r3, r2
 80031b2:	d00b      	beq.n	80031cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4a43      	ldr	r2, [pc, #268]	; (80032c8 <UART_AdvFeatureConfig+0x148>)
 80031bc:	4013      	ands	r3, r2
 80031be:	0019      	movs	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	2204      	movs	r2, #4
 80031d2:	4013      	ands	r3, r2
 80031d4:	d00b      	beq.n	80031ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4a3b      	ldr	r2, [pc, #236]	; (80032cc <UART_AdvFeatureConfig+0x14c>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	2208      	movs	r2, #8
 80031f4:	4013      	ands	r3, r2
 80031f6:	d00b      	beq.n	8003210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4a34      	ldr	r2, [pc, #208]	; (80032d0 <UART_AdvFeatureConfig+0x150>)
 8003200:	4013      	ands	r3, r2
 8003202:	0019      	movs	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	2210      	movs	r2, #16
 8003216:	4013      	ands	r3, r2
 8003218:	d00b      	beq.n	8003232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4a2c      	ldr	r2, [pc, #176]	; (80032d4 <UART_AdvFeatureConfig+0x154>)
 8003222:	4013      	ands	r3, r2
 8003224:	0019      	movs	r1, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	2220      	movs	r2, #32
 8003238:	4013      	ands	r3, r2
 800323a:	d00b      	beq.n	8003254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	4a25      	ldr	r2, [pc, #148]	; (80032d8 <UART_AdvFeatureConfig+0x158>)
 8003244:	4013      	ands	r3, r2
 8003246:	0019      	movs	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	2240      	movs	r2, #64	; 0x40
 800325a:	4013      	ands	r3, r2
 800325c:	d01d      	beq.n	800329a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <UART_AdvFeatureConfig+0x15c>)
 8003266:	4013      	ands	r3, r2
 8003268:	0019      	movs	r1, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	035b      	lsls	r3, r3, #13
 800327e:	429a      	cmp	r2, r3
 8003280:	d10b      	bne.n	800329a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4a15      	ldr	r2, [pc, #84]	; (80032e0 <UART_AdvFeatureConfig+0x160>)
 800328a:	4013      	ands	r3, r2
 800328c:	0019      	movs	r1, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	2280      	movs	r2, #128	; 0x80
 80032a0:	4013      	ands	r3, r2
 80032a2:	d00b      	beq.n	80032bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4a0e      	ldr	r2, [pc, #56]	; (80032e4 <UART_AdvFeatureConfig+0x164>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	0019      	movs	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	605a      	str	r2, [r3, #4]
  }
}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	46bd      	mov	sp, r7
 80032c0:	b002      	add	sp, #8
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	fffdffff 	.word	0xfffdffff
 80032c8:	fffeffff 	.word	0xfffeffff
 80032cc:	fffbffff 	.word	0xfffbffff
 80032d0:	ffff7fff 	.word	0xffff7fff
 80032d4:	ffffefff 	.word	0xffffefff
 80032d8:	ffffdfff 	.word	0xffffdfff
 80032dc:	ffefffff 	.word	0xffefffff
 80032e0:	ff9fffff 	.word	0xff9fffff
 80032e4:	fff7ffff 	.word	0xfff7ffff

080032e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b092      	sub	sp, #72	; 0x48
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2284      	movs	r2, #132	; 0x84
 80032f4:	2100      	movs	r1, #0
 80032f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032f8:	f7fd fb6a 	bl	80009d0 <HAL_GetTick>
 80032fc:	0003      	movs	r3, r0
 80032fe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2208      	movs	r2, #8
 8003308:	4013      	ands	r3, r2
 800330a:	2b08      	cmp	r3, #8
 800330c:	d12c      	bne.n	8003368 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800330e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003310:	2280      	movs	r2, #128	; 0x80
 8003312:	0391      	lsls	r1, r2, #14
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4a46      	ldr	r2, [pc, #280]	; (8003430 <UART_CheckIdleState+0x148>)
 8003318:	9200      	str	r2, [sp, #0]
 800331a:	2200      	movs	r2, #0
 800331c:	f000 f88c 	bl	8003438 <UART_WaitOnFlagUntilTimeout>
 8003320:	1e03      	subs	r3, r0, #0
 8003322:	d021      	beq.n	8003368 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003324:	f3ef 8310 	mrs	r3, PRIMASK
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800332c:	63bb      	str	r3, [r7, #56]	; 0x38
 800332e:	2301      	movs	r3, #1
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003334:	f383 8810 	msr	PRIMASK, r3
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	438a      	bics	r2, r1
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	f383 8810 	msr	PRIMASK, r3
}
 8003354:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2220      	movs	r2, #32
 800335a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2278      	movs	r2, #120	; 0x78
 8003360:	2100      	movs	r1, #0
 8003362:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e05f      	b.n	8003428 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2204      	movs	r2, #4
 8003370:	4013      	ands	r3, r2
 8003372:	2b04      	cmp	r3, #4
 8003374:	d146      	bne.n	8003404 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003378:	2280      	movs	r2, #128	; 0x80
 800337a:	03d1      	lsls	r1, r2, #15
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4a2c      	ldr	r2, [pc, #176]	; (8003430 <UART_CheckIdleState+0x148>)
 8003380:	9200      	str	r2, [sp, #0]
 8003382:	2200      	movs	r2, #0
 8003384:	f000 f858 	bl	8003438 <UART_WaitOnFlagUntilTimeout>
 8003388:	1e03      	subs	r3, r0, #0
 800338a:	d03b      	beq.n	8003404 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800338c:	f3ef 8310 	mrs	r3, PRIMASK
 8003390:	60fb      	str	r3, [r7, #12]
  return(result);
 8003392:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003394:	637b      	str	r3, [r7, #52]	; 0x34
 8003396:	2301      	movs	r3, #1
 8003398:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f383 8810 	msr	PRIMASK, r3
}
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4921      	ldr	r1, [pc, #132]	; (8003434 <UART_CheckIdleState+0x14c>)
 80033ae:	400a      	ands	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f383 8810 	msr	PRIMASK, r3
}
 80033bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033be:	f3ef 8310 	mrs	r3, PRIMASK
 80033c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80033c4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c6:	633b      	str	r3, [r7, #48]	; 0x30
 80033c8:	2301      	movs	r3, #1
 80033ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f383 8810 	msr	PRIMASK, r3
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2101      	movs	r1, #1
 80033e0:	438a      	bics	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	f383 8810 	msr	PRIMASK, r3
}
 80033ee:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	2120      	movs	r1, #32
 80033f6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2278      	movs	r2, #120	; 0x78
 80033fc:	2100      	movs	r1, #0
 80033fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e011      	b.n	8003428 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2280      	movs	r2, #128	; 0x80
 800340e:	2120      	movs	r1, #32
 8003410:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2278      	movs	r2, #120	; 0x78
 8003422:	2100      	movs	r1, #0
 8003424:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b010      	add	sp, #64	; 0x40
 800342e:	bd80      	pop	{r7, pc}
 8003430:	01ffffff 	.word	0x01ffffff
 8003434:	fffffedf 	.word	0xfffffedf

08003438 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	1dfb      	adds	r3, r7, #7
 8003446:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003448:	e04b      	b.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	3301      	adds	r3, #1
 800344e:	d048      	beq.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003450:	f7fd fabe 	bl	80009d0 <HAL_GetTick>
 8003454:	0002      	movs	r2, r0
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	429a      	cmp	r2, r3
 800345e:	d302      	bcc.n	8003466 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e04b      	b.n	8003502 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2204      	movs	r2, #4
 8003472:	4013      	ands	r3, r2
 8003474:	d035      	beq.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	2208      	movs	r2, #8
 800347e:	4013      	ands	r3, r2
 8003480:	2b08      	cmp	r3, #8
 8003482:	d111      	bne.n	80034a8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2208      	movs	r2, #8
 800348a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	0018      	movs	r0, r3
 8003490:	f000 f900 	bl	8003694 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2284      	movs	r2, #132	; 0x84
 8003498:	2108      	movs	r1, #8
 800349a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2278      	movs	r2, #120	; 0x78
 80034a0:	2100      	movs	r1, #0
 80034a2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e02c      	b.n	8003502 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	401a      	ands	r2, r3
 80034b4:	2380      	movs	r3, #128	; 0x80
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d112      	bne.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2280      	movs	r2, #128	; 0x80
 80034c2:	0112      	lsls	r2, r2, #4
 80034c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	0018      	movs	r0, r3
 80034ca:	f000 f8e3 	bl	8003694 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2284      	movs	r2, #132	; 0x84
 80034d2:	2120      	movs	r1, #32
 80034d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2278      	movs	r2, #120	; 0x78
 80034da:	2100      	movs	r1, #0
 80034dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e00f      	b.n	8003502 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	4013      	ands	r3, r2
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	425a      	negs	r2, r3
 80034f2:	4153      	adcs	r3, r2
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	001a      	movs	r2, r3
 80034f8:	1dfb      	adds	r3, r7, #7
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d0a4      	beq.n	800344a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	0018      	movs	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	b004      	add	sp, #16
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b090      	sub	sp, #64	; 0x40
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	1dbb      	adds	r3, r7, #6
 8003518:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1dba      	adds	r2, r7, #6
 8003524:	2158      	movs	r1, #88	; 0x58
 8003526:	8812      	ldrh	r2, [r2, #0]
 8003528:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2284      	movs	r2, #132	; 0x84
 800352e:	2100      	movs	r1, #0
 8003530:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2280      	movs	r2, #128	; 0x80
 8003536:	2122      	movs	r1, #34	; 0x22
 8003538:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353e:	2b00      	cmp	r3, #0
 8003540:	d028      	beq.n	8003594 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003546:	4a3e      	ldr	r2, [pc, #248]	; (8003640 <UART_Start_Receive_DMA+0x134>)
 8003548:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354e:	4a3d      	ldr	r2, [pc, #244]	; (8003644 <UART_Start_Receive_DMA+0x138>)
 8003550:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003556:	4a3c      	ldr	r2, [pc, #240]	; (8003648 <UART_Start_Receive_DMA+0x13c>)
 8003558:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355e:	2200      	movs	r2, #0
 8003560:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3324      	adds	r3, #36	; 0x24
 800356c:	0019      	movs	r1, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	001a      	movs	r2, r3
 8003574:	1dbb      	adds	r3, r7, #6
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	f7fd fb8a 	bl	8000c90 <HAL_DMA_Start_IT>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d009      	beq.n	8003594 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2284      	movs	r2, #132	; 0x84
 8003584:	2110      	movs	r1, #16
 8003586:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2280      	movs	r2, #128	; 0x80
 800358c:	2120      	movs	r1, #32
 800358e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e050      	b.n	8003636 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d019      	beq.n	80035d0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800359c:	f3ef 8310 	mrs	r3, PRIMASK
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a6:	2301      	movs	r3, #1
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ac:	f383 8810 	msr	PRIMASK, r3
}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2180      	movs	r1, #128	; 0x80
 80035be:	0049      	lsls	r1, r1, #1
 80035c0:	430a      	orrs	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ca:	f383 8810 	msr	PRIMASK, r3
}
 80035ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d0:	f3ef 8310 	mrs	r3, PRIMASK
 80035d4:	613b      	str	r3, [r7, #16]
  return(result);
 80035d6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80035da:	2301      	movs	r3, #1
 80035dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f383 8810 	msr	PRIMASK, r3
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2101      	movs	r1, #1
 80035f2:	430a      	orrs	r2, r1
 80035f4:	609a      	str	r2, [r3, #8]
 80035f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f383 8810 	msr	PRIMASK, r3
}
 8003600:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003602:	f3ef 8310 	mrs	r3, PRIMASK
 8003606:	61fb      	str	r3, [r7, #28]
  return(result);
 8003608:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800360a:	637b      	str	r3, [r7, #52]	; 0x34
 800360c:	2301      	movs	r3, #1
 800360e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	f383 8810 	msr	PRIMASK, r3
}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2140      	movs	r1, #64	; 0x40
 8003624:	430a      	orrs	r2, r1
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	f383 8810 	msr	PRIMASK, r3
}
 8003632:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	0018      	movs	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	b010      	add	sp, #64	; 0x40
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	0800375d 	.word	0x0800375d
 8003644:	0800388d 	.word	0x0800388d
 8003648:	080038cf 	.word	0x080038cf

0800364c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003654:	f3ef 8310 	mrs	r3, PRIMASK
 8003658:	60bb      	str	r3, [r7, #8]
  return(result);
 800365a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	2301      	movs	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f383 8810 	msr	PRIMASK, r3
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	21c0      	movs	r1, #192	; 0xc0
 8003676:	438a      	bics	r2, r1
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f383 8810 	msr	PRIMASK, r3
}
 8003684:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800368c:	46c0      	nop			; (mov r8, r8)
 800368e:	46bd      	mov	sp, r7
 8003690:	b006      	add	sp, #24
 8003692:	bd80      	pop	{r7, pc}

08003694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08e      	sub	sp, #56	; 0x38
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800369c:	f3ef 8310 	mrs	r3, PRIMASK
 80036a0:	617b      	str	r3, [r7, #20]
  return(result);
 80036a2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036a4:	637b      	str	r3, [r7, #52]	; 0x34
 80036a6:	2301      	movs	r3, #1
 80036a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f383 8810 	msr	PRIMASK, r3
}
 80036b0:	46c0      	nop			; (mov r8, r8)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4926      	ldr	r1, [pc, #152]	; (8003758 <UART_EndRxTransfer+0xc4>)
 80036be:	400a      	ands	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f383 8810 	msr	PRIMASK, r3
}
 80036cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ce:	f3ef 8310 	mrs	r3, PRIMASK
 80036d2:	623b      	str	r3, [r7, #32]
  return(result);
 80036d4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d6:	633b      	str	r3, [r7, #48]	; 0x30
 80036d8:	2301      	movs	r3, #1
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	f383 8810 	msr	PRIMASK, r3
}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2101      	movs	r1, #1
 80036f0:	438a      	bics	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fa:	f383 8810 	msr	PRIMASK, r3
}
 80036fe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003704:	2b01      	cmp	r3, #1
 8003706:	d118      	bne.n	800373a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003708:	f3ef 8310 	mrs	r3, PRIMASK
 800370c:	60bb      	str	r3, [r7, #8]
  return(result);
 800370e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003712:	2301      	movs	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f383 8810 	msr	PRIMASK, r3
}
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2110      	movs	r1, #16
 800372a:	438a      	bics	r2, r1
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f383 8810 	msr	PRIMASK, r3
}
 8003738:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2280      	movs	r2, #128	; 0x80
 800373e:	2120      	movs	r1, #32
 8003740:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	46bd      	mov	sp, r7
 8003752:	b00e      	add	sp, #56	; 0x38
 8003754:	bd80      	pop	{r7, pc}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	fffffedf 	.word	0xfffffedf

0800375c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b094      	sub	sp, #80	; 0x50
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2220      	movs	r2, #32
 8003772:	4013      	ands	r3, r2
 8003774:	d16f      	bne.n	8003856 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003778:	225a      	movs	r2, #90	; 0x5a
 800377a:	2100      	movs	r1, #0
 800377c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800377e:	f3ef 8310 	mrs	r3, PRIMASK
 8003782:	61bb      	str	r3, [r7, #24]
  return(result);
 8003784:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003786:	64bb      	str	r3, [r7, #72]	; 0x48
 8003788:	2301      	movs	r3, #1
 800378a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f383 8810 	msr	PRIMASK, r3
}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	493a      	ldr	r1, [pc, #232]	; (8003888 <UART_DMAReceiveCplt+0x12c>)
 80037a0:	400a      	ands	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	f383 8810 	msr	PRIMASK, r3
}
 80037ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b0:	f3ef 8310 	mrs	r3, PRIMASK
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b8:	647b      	str	r3, [r7, #68]	; 0x44
 80037ba:	2301      	movs	r3, #1
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	f383 8810 	msr	PRIMASK, r3
}
 80037c4:	46c0      	nop			; (mov r8, r8)
 80037c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2101      	movs	r1, #1
 80037d2:	438a      	bics	r2, r1
 80037d4:	609a      	str	r2, [r3, #8]
 80037d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037dc:	f383 8810 	msr	PRIMASK, r3
}
 80037e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e2:	f3ef 8310 	mrs	r3, PRIMASK
 80037e6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ea:	643b      	str	r3, [r7, #64]	; 0x40
 80037ec:	2301      	movs	r3, #1
 80037ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f2:	f383 8810 	msr	PRIMASK, r3
}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2140      	movs	r1, #64	; 0x40
 8003804:	438a      	bics	r2, r1
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800380a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380e:	f383 8810 	msr	PRIMASK, r3
}
 8003812:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003816:	2280      	movs	r2, #128	; 0x80
 8003818:	2120      	movs	r1, #32
 800381a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800381c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800381e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003820:	2b01      	cmp	r3, #1
 8003822:	d118      	bne.n	8003856 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003824:	f3ef 8310 	mrs	r3, PRIMASK
 8003828:	60fb      	str	r3, [r7, #12]
  return(result);
 800382a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800382c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800382e:	2301      	movs	r3, #1
 8003830:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f383 8810 	msr	PRIMASK, r3
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2110      	movs	r1, #16
 8003846:	438a      	bics	r2, r1
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800384c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f383 8810 	msr	PRIMASK, r3
}
 8003854:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003858:	2200      	movs	r2, #0
 800385a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800385c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003860:	2b01      	cmp	r3, #1
 8003862:	d108      	bne.n	8003876 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003866:	2258      	movs	r2, #88	; 0x58
 8003868:	5a9a      	ldrh	r2, [r3, r2]
 800386a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800386c:	0011      	movs	r1, r2
 800386e:	0018      	movs	r0, r3
 8003870:	f7ff f9f6 	bl	8002c60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003874:	e003      	b.n	800387e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8003876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003878:	0018      	movs	r0, r3
 800387a:	f7fc ff09 	bl	8000690 <HAL_UART_RxCpltCallback>
}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	46bd      	mov	sp, r7
 8003882:	b014      	add	sp, #80	; 0x50
 8003884:	bd80      	pop	{r7, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	fffffeff 	.word	0xfffffeff

0800388c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d10a      	bne.n	80038be <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2258      	movs	r2, #88	; 0x58
 80038ac:	5a9b      	ldrh	r3, [r3, r2]
 80038ae:	085b      	lsrs	r3, r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	0011      	movs	r1, r2
 80038b6:	0018      	movs	r0, r3
 80038b8:	f7ff f9d2 	bl	8002c60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80038bc:	e003      	b.n	80038c6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	0018      	movs	r0, r3
 80038c2:	f7ff f9bd 	bl	8002c40 <HAL_UART_RxHalfCpltCallback>
}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b004      	add	sp, #16
 80038cc:	bd80      	pop	{r7, pc}

080038ce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b086      	sub	sp, #24
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038e0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2280      	movs	r2, #128	; 0x80
 80038e6:	589b      	ldr	r3, [r3, r2]
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2280      	movs	r2, #128	; 0x80
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b80      	cmp	r3, #128	; 0x80
 80038f6:	d10a      	bne.n	800390e <UART_DMAError+0x40>
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b21      	cmp	r3, #33	; 0x21
 80038fc:	d107      	bne.n	800390e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2252      	movs	r2, #82	; 0x52
 8003902:	2100      	movs	r1, #0
 8003904:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	0018      	movs	r0, r3
 800390a:	f7ff fe9f 	bl	800364c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2240      	movs	r2, #64	; 0x40
 8003916:	4013      	ands	r3, r2
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d10a      	bne.n	8003932 <UART_DMAError+0x64>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b22      	cmp	r3, #34	; 0x22
 8003920:	d107      	bne.n	8003932 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	225a      	movs	r2, #90	; 0x5a
 8003926:	2100      	movs	r1, #0
 8003928:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	0018      	movs	r0, r3
 800392e:	f7ff feb1 	bl	8003694 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2284      	movs	r2, #132	; 0x84
 8003936:	589b      	ldr	r3, [r3, r2]
 8003938:	2210      	movs	r2, #16
 800393a:	431a      	orrs	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2184      	movs	r1, #132	; 0x84
 8003940:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	0018      	movs	r0, r3
 8003946:	f7ff f983 	bl	8002c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	46bd      	mov	sp, r7
 800394e:	b006      	add	sp, #24
 8003950:	bd80      	pop	{r7, pc}

08003952 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	225a      	movs	r2, #90	; 0x5a
 8003964:	2100      	movs	r1, #0
 8003966:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2252      	movs	r2, #82	; 0x52
 800396c:	2100      	movs	r1, #0
 800396e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	0018      	movs	r0, r3
 8003974:	f7ff f96c 	bl	8002c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b004      	add	sp, #16
 800397e:	bd80      	pop	{r7, pc}

08003980 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003988:	f3ef 8310 	mrs	r3, PRIMASK
 800398c:	60bb      	str	r3, [r7, #8]
  return(result);
 800398e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	2301      	movs	r3, #1
 8003994:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f383 8810 	msr	PRIMASK, r3
}
 800399c:	46c0      	nop			; (mov r8, r8)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2140      	movs	r1, #64	; 0x40
 80039aa:	438a      	bics	r2, r1
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f383 8810 	msr	PRIMASK, r3
}
 80039b8:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	0018      	movs	r0, r3
 80039ca:	f7ff f931 	bl	8002c30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b006      	add	sp, #24
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b002      	add	sp, #8
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <memset>:
 80039e6:	0003      	movs	r3, r0
 80039e8:	1882      	adds	r2, r0, r2
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d100      	bne.n	80039f0 <memset+0xa>
 80039ee:	4770      	bx	lr
 80039f0:	7019      	strb	r1, [r3, #0]
 80039f2:	3301      	adds	r3, #1
 80039f4:	e7f9      	b.n	80039ea <memset+0x4>
	...

080039f8 <__libc_init_array>:
 80039f8:	b570      	push	{r4, r5, r6, lr}
 80039fa:	2600      	movs	r6, #0
 80039fc:	4c0c      	ldr	r4, [pc, #48]	; (8003a30 <__libc_init_array+0x38>)
 80039fe:	4d0d      	ldr	r5, [pc, #52]	; (8003a34 <__libc_init_array+0x3c>)
 8003a00:	1b64      	subs	r4, r4, r5
 8003a02:	10a4      	asrs	r4, r4, #2
 8003a04:	42a6      	cmp	r6, r4
 8003a06:	d109      	bne.n	8003a1c <__libc_init_array+0x24>
 8003a08:	2600      	movs	r6, #0
 8003a0a:	f000 f819 	bl	8003a40 <_init>
 8003a0e:	4c0a      	ldr	r4, [pc, #40]	; (8003a38 <__libc_init_array+0x40>)
 8003a10:	4d0a      	ldr	r5, [pc, #40]	; (8003a3c <__libc_init_array+0x44>)
 8003a12:	1b64      	subs	r4, r4, r5
 8003a14:	10a4      	asrs	r4, r4, #2
 8003a16:	42a6      	cmp	r6, r4
 8003a18:	d105      	bne.n	8003a26 <__libc_init_array+0x2e>
 8003a1a:	bd70      	pop	{r4, r5, r6, pc}
 8003a1c:	00b3      	lsls	r3, r6, #2
 8003a1e:	58eb      	ldr	r3, [r5, r3]
 8003a20:	4798      	blx	r3
 8003a22:	3601      	adds	r6, #1
 8003a24:	e7ee      	b.n	8003a04 <__libc_init_array+0xc>
 8003a26:	00b3      	lsls	r3, r6, #2
 8003a28:	58eb      	ldr	r3, [r5, r3]
 8003a2a:	4798      	blx	r3
 8003a2c:	3601      	adds	r6, #1
 8003a2e:	e7f2      	b.n	8003a16 <__libc_init_array+0x1e>
 8003a30:	08003acc 	.word	0x08003acc
 8003a34:	08003acc 	.word	0x08003acc
 8003a38:	08003ad0 	.word	0x08003ad0
 8003a3c:	08003acc 	.word	0x08003acc

08003a40 <_init>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a46:	bc08      	pop	{r3}
 8003a48:	469e      	mov	lr, r3
 8003a4a:	4770      	bx	lr

08003a4c <_fini>:
 8003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a52:	bc08      	pop	{r3}
 8003a54:	469e      	mov	lr, r3
 8003a56:	4770      	bx	lr
