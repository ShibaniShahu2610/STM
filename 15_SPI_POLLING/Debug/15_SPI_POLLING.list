
15_SPI_POLLING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002dfc  08002dfc  00012dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e68  08002e68  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08002e68  08002e68  00012e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e70  08002e70  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e70  08002e70  00012e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000014  08002e8c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08002e8c  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000097b1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001692  00000000  00000000  00029830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  0002aec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000694  00000000  00000000  0002b748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012ecd  00000000  00000000  0002bddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa64  00000000  00000000  0003eca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007572f  00000000  00000000  0004970d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e04  00000000  00000000  000bee3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000c0c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002de4 	.word	0x08002de4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002de4 	.word	0x08002de4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fa03 	bl	80008b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f81b 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 f8f3 	bl	80006a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004ba:	f000 f8c1 	bl	8000640 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80004be:	f000 f887 	bl	80005d0 <MX_SPI2_Init>
//  HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, sizeof(tx_data), 100);
//  HAL_SPI_Transmit(&hspi2, tx_data, sizeof(tx_data), 1000);
//  HAL_Delay(1000);
//  HAL_SPI_Receive(&hspi2, rx_data, sizeof(rx_data), 1000);
//  HAL_Delay(1000);
HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)tx_data, (uint8_t *)rx_data, 5 , 1000);
 80004c2:	4a07      	ldr	r2, [pc, #28]	; (80004e0 <main+0x38>)
 80004c4:	4907      	ldr	r1, [pc, #28]	; (80004e4 <main+0x3c>)
 80004c6:	4808      	ldr	r0, [pc, #32]	; (80004e8 <main+0x40>)
 80004c8:	23fa      	movs	r3, #250	; 0xfa
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	2305      	movs	r3, #5
 80004d0:	f001 fcba 	bl	8001e48 <HAL_SPI_TransmitReceive>
HAL_Delay(500);
 80004d4:	23fa      	movs	r3, #250	; 0xfa
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 fa5d 	bl	8000998 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004de:	e7fe      	b.n	80004de <main+0x36>
 80004e0:	20000110 	.word	0x20000110
 80004e4:	20000000 	.word	0x20000000
 80004e8:	20000030 	.word	0x20000030

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b09d      	sub	sp, #116	; 0x74
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	2438      	movs	r4, #56	; 0x38
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	0018      	movs	r0, r3
 80004f8:	2338      	movs	r3, #56	; 0x38
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f002 fc45 	bl	8002d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000502:	2324      	movs	r3, #36	; 0x24
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	0018      	movs	r0, r3
 8000508:	2314      	movs	r3, #20
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f002 fc3d 	bl	8002d8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000512:	003b      	movs	r3, r7
 8000514:	0018      	movs	r0, r3
 8000516:	2324      	movs	r3, #36	; 0x24
 8000518:	001a      	movs	r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	f002 fc36 	bl	8002d8c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000520:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <SystemClock_Config+0xdc>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a29      	ldr	r2, [pc, #164]	; (80005cc <SystemClock_Config+0xe0>)
 8000526:	401a      	ands	r2, r3
 8000528:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <SystemClock_Config+0xdc>)
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	0109      	lsls	r1, r1, #4
 800052e:	430a      	orrs	r2, r1
 8000530:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000532:	0021      	movs	r1, r4
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2202      	movs	r2, #2
 8000538:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2201      	movs	r2, #1
 800053e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2210      	movs	r2, #16
 8000544:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2202      	movs	r2, #2
 800054a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	0412      	lsls	r2, r2, #16
 800055e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000560:	187b      	adds	r3, r7, r1
 8000562:	0018      	movs	r0, r3
 8000564:	f000 fc66 	bl	8000e34 <HAL_RCC_OscConfig>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800056c:	f000 f8ba 	bl	80006e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	2124      	movs	r1, #36	; 0x24
 8000572:	187b      	adds	r3, r7, r1
 8000574:	220f      	movs	r2, #15
 8000576:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2203      	movs	r2, #3
 800057c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	00d2      	lsls	r2, r2, #3
 8000590:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2100      	movs	r1, #0
 8000596:	0018      	movs	r0, r3
 8000598:	f001 f810 	bl	80015bc <HAL_RCC_ClockConfig>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005a0:	f000 f8a0 	bl	80006e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005a4:	003b      	movs	r3, r7
 80005a6:	2201      	movs	r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005aa:	003b      	movs	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b0:	003b      	movs	r3, r7
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 fa26 	bl	8001a04 <HAL_RCCEx_PeriphCLKConfig>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80005bc:	f000 f892 	bl	80006e4 <Error_Handler>
  }
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b01d      	add	sp, #116	; 0x74
 80005c6:	bd90      	pop	{r4, r7, pc}
 80005c8:	40007000 	.word	0x40007000
 80005cc:	ffffe7ff 	.word	0xffffe7ff

080005d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_SPI2_Init+0x68>)
 80005d6:	4a19      	ldr	r2, [pc, #100]	; (800063c <MX_SPI2_Init+0x6c>)
 80005d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005da:	4b17      	ldr	r3, [pc, #92]	; (8000638 <MX_SPI2_Init+0x68>)
 80005dc:	2282      	movs	r2, #130	; 0x82
 80005de:	0052      	lsls	r2, r2, #1
 80005e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_SPI2_Init+0x68>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_SPI2_Init+0x68>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MX_SPI2_Init+0x68>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005f4:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_SPI2_Init+0x68>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_SPI2_Init+0x68>)
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	0092      	lsls	r2, r2, #2
 8000600:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MX_SPI2_Init+0x68>)
 8000604:	2210      	movs	r2, #16
 8000606:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <MX_SPI2_Init+0x68>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <MX_SPI2_Init+0x68>)
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <MX_SPI2_Init+0x68>)
 8000616:	2200      	movs	r2, #0
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <MX_SPI2_Init+0x68>)
 800061c:	2207      	movs	r2, #7
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <MX_SPI2_Init+0x68>)
 8000622:	0018      	movs	r0, r3
 8000624:	f001 fb7c 	bl	8001d20 <HAL_SPI_Init>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800062c:	f000 f85a 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	20000030 	.word	0x20000030
 800063c:	40003800 	.word	0x40003800

08000640 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000646:	4a15      	ldr	r2, [pc, #84]	; (800069c <MX_USART1_UART_Init+0x5c>)
 8000648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800064c:	22e1      	movs	r2, #225	; 0xe1
 800064e:	0252      	lsls	r2, r2, #9
 8000650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000684:	0018      	movs	r0, r3
 8000686:	f001 fe7f 	bl	8002388 <HAL_UART_Init>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800068e:	f000 f829 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000088 	.word	0x20000088
 800069c:	40013800 	.word	0x40013800

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_GPIO_Init+0x40>)
 80006a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <MX_GPIO_Init+0x40>)
 80006ac:	2102      	movs	r1, #2
 80006ae:	430a      	orrs	r2, r1
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_GPIO_Init+0x40>)
 80006b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b6:	2202      	movs	r2, #2
 80006b8:	4013      	ands	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_GPIO_Init+0x40>)
 80006c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_GPIO_Init+0x40>)
 80006c4:	2101      	movs	r1, #1
 80006c6:	430a      	orrs	r2, r1
 80006c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ca:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <MX_GPIO_Init+0x40>)
 80006cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ce:	2201      	movs	r2, #1
 80006d0:	4013      	ands	r3, r2
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b002      	add	sp, #8
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	40021000 	.word	0x40021000

080006e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ec:	e7fe      	b.n	80006ec <Error_Handler+0x8>
	...

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <HAL_MspInit+0x24>)
 80006f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x24>)
 80006fa:	2101      	movs	r1, #1
 80006fc:	430a      	orrs	r2, r1
 80006fe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <HAL_MspInit+0x24>)
 8000702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <HAL_MspInit+0x24>)
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	0549      	lsls	r1, r1, #21
 800070a:	430a      	orrs	r2, r1
 800070c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000

08000718 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b089      	sub	sp, #36	; 0x24
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	240c      	movs	r4, #12
 8000722:	193b      	adds	r3, r7, r4
 8000724:	0018      	movs	r0, r3
 8000726:	2314      	movs	r3, #20
 8000728:	001a      	movs	r2, r3
 800072a:	2100      	movs	r1, #0
 800072c:	f002 fb2e 	bl	8002d8c <memset>
  if(hspi->Instance==SPI2)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a18      	ldr	r2, [pc, #96]	; (8000798 <HAL_SPI_MspInit+0x80>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d129      	bne.n	800078e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <HAL_SPI_MspInit+0x84>)
 800073c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <HAL_SPI_MspInit+0x84>)
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	01c9      	lsls	r1, r1, #7
 8000744:	430a      	orrs	r2, r1
 8000746:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <HAL_SPI_MspInit+0x84>)
 800074a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <HAL_SPI_MspInit+0x84>)
 800074e:	2102      	movs	r1, #2
 8000750:	430a      	orrs	r2, r1
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <HAL_SPI_MspInit+0x84>)
 8000756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000758:	2202      	movs	r2, #2
 800075a:	4013      	ands	r3, r2
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = BSP_SPI2_SCK_Pin|BSP_SPI2_MISO_Pin|BSP_SPI2_MOSI_Pin;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	22e0      	movs	r2, #224	; 0xe0
 8000764:	0212      	lsls	r2, r2, #8
 8000766:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	0021      	movs	r1, r4
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2202      	movs	r2, #2
 800076e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2203      	movs	r2, #3
 800077a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000782:	187b      	adds	r3, r7, r1
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <HAL_SPI_MspInit+0x88>)
 8000786:	0019      	movs	r1, r3
 8000788:	0010      	movs	r0, r2
 800078a:	f000 f9dd 	bl	8000b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b009      	add	sp, #36	; 0x24
 8000794:	bd90      	pop	{r4, r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40003800 	.word	0x40003800
 800079c:	40021000 	.word	0x40021000
 80007a0:	50000400 	.word	0x50000400

080007a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	240c      	movs	r4, #12
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	0018      	movs	r0, r3
 80007b2:	2314      	movs	r3, #20
 80007b4:	001a      	movs	r2, r3
 80007b6:	2100      	movs	r1, #0
 80007b8:	f002 fae8 	bl	8002d8c <memset>
  if(huart->Instance==USART1)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a18      	ldr	r2, [pc, #96]	; (8000824 <HAL_UART_MspInit+0x80>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d12a      	bne.n	800081c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <HAL_UART_MspInit+0x84>)
 80007c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <HAL_UART_MspInit+0x84>)
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	01c9      	lsls	r1, r1, #7
 80007d0:	430a      	orrs	r2, r1
 80007d2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <HAL_UART_MspInit+0x84>)
 80007d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <HAL_UART_MspInit+0x84>)
 80007da:	2101      	movs	r1, #1
 80007dc:	430a      	orrs	r2, r1
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_UART_MspInit+0x84>)
 80007e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e4:	2201      	movs	r2, #1
 80007e6:	4013      	ands	r3, r2
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BSP_USART1_TX_Pin|BSP_USART1_RX_Pin;
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	22c0      	movs	r2, #192	; 0xc0
 80007f0:	00d2      	lsls	r2, r2, #3
 80007f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	0021      	movs	r1, r4
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2202      	movs	r2, #2
 80007fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2203      	movs	r2, #3
 8000806:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2204      	movs	r2, #4
 800080c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	187a      	adds	r2, r7, r1
 8000810:	23a0      	movs	r3, #160	; 0xa0
 8000812:	05db      	lsls	r3, r3, #23
 8000814:	0011      	movs	r1, r2
 8000816:	0018      	movs	r0, r3
 8000818:	f000 f996 	bl	8000b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b009      	add	sp, #36	; 0x24
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	40013800 	.word	0x40013800
 8000828:	40021000 	.word	0x40021000

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000830:	e7fe      	b.n	8000830 <NMI_Handler+0x4>

08000832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <HardFault_Handler+0x4>

08000838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f000 f886 	bl	8000960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000866:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000868:	f7ff fff7 	bl	800085a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800086e:	490d      	ldr	r1, [pc, #52]	; (80008a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <LoopForever+0xe>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000874:	e002      	b.n	800087c <LoopCopyDataInit>

08000876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087a:	3304      	adds	r3, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800087c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000880:	d3f9      	bcc.n	8000876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000884:	4c0a      	ldr	r4, [pc, #40]	; (80008b0 <LoopForever+0x16>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000888:	e001      	b.n	800088e <LoopFillZerobss>

0800088a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800088c:	3204      	adds	r2, #4

0800088e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000890:	d3fb      	bcc.n	800088a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000892:	f002 fa83 	bl	8002d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000896:	f7ff fe07 	bl	80004a8 <main>

0800089a <LoopForever>:

LoopForever:
    b LoopForever
 800089a:	e7fe      	b.n	800089a <LoopForever>
  ldr   r0, =_estack
 800089c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008a8:	08002e78 	.word	0x08002e78
  ldr r2, =_sbss
 80008ac:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80008b0:	2000011c 	.word	0x2000011c

080008b4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC1_COMP_IRQHandler>
	...

080008b8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_Init+0x3c>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_Init+0x3c>)
 80008ca:	2140      	movs	r1, #64	; 0x40
 80008cc:	430a      	orrs	r2, r1
 80008ce:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f000 f811 	bl	80008f8 <HAL_InitTick>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d003      	beq.n	80008e2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	2201      	movs	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	e001      	b.n	80008e6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008e2:	f7ff ff05 	bl	80006f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	781b      	ldrb	r3, [r3, #0]
}
 80008ea:	0018      	movs	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b002      	add	sp, #8
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	40022000 	.word	0x40022000

080008f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_InitTick+0x5c>)
 8000902:	681c      	ldr	r4, [r3, #0]
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_InitTick+0x60>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	0019      	movs	r1, r3
 800090a:	23fa      	movs	r3, #250	; 0xfa
 800090c:	0098      	lsls	r0, r3, #2
 800090e:	f7ff fbfb 	bl	8000108 <__udivsi3>
 8000912:	0003      	movs	r3, r0
 8000914:	0019      	movs	r1, r3
 8000916:	0020      	movs	r0, r4
 8000918:	f7ff fbf6 	bl	8000108 <__udivsi3>
 800091c:	0003      	movs	r3, r0
 800091e:	0018      	movs	r0, r3
 8000920:	f000 f905 	bl	8000b2e <HAL_SYSTICK_Config>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000928:	2301      	movs	r3, #1
 800092a:	e00f      	b.n	800094c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b03      	cmp	r3, #3
 8000930:	d80b      	bhi.n	800094a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	2301      	movs	r3, #1
 8000936:	425b      	negs	r3, r3
 8000938:	2200      	movs	r2, #0
 800093a:	0018      	movs	r0, r3
 800093c:	f000 f8e2 	bl	8000b04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_InitTick+0x64>)
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	e000      	b.n	800094c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
}
 800094c:	0018      	movs	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	b003      	add	sp, #12
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	20000008 	.word	0x20000008
 8000958:	20000010 	.word	0x20000010
 800095c:	2000000c 	.word	0x2000000c

08000960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x1c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	001a      	movs	r2, r3
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x20>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	18d2      	adds	r2, r2, r3
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <HAL_IncTick+0x20>)
 8000972:	601a      	str	r2, [r3, #0]
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	20000010 	.word	0x20000010
 8000980:	20000118 	.word	0x20000118

08000984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <HAL_GetTick+0x10>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	20000118 	.word	0x20000118

08000998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a0:	f7ff fff0 	bl	8000984 <HAL_GetTick>
 80009a4:	0003      	movs	r3, r0
 80009a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	3301      	adds	r3, #1
 80009b0:	d005      	beq.n	80009be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_Delay+0x44>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	001a      	movs	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	189b      	adds	r3, r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	f7ff ffe0 	bl	8000984 <HAL_GetTick>
 80009c4:	0002      	movs	r2, r0
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d8f7      	bhi.n	80009c0 <HAL_Delay+0x28>
  {
  }
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b004      	add	sp, #16
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	20000010 	.word	0x20000010

080009e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	0002      	movs	r2, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b7f      	cmp	r3, #127	; 0x7f
 80009f4:	d828      	bhi.n	8000a48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f6:	4a2f      	ldr	r2, [pc, #188]	; (8000ab4 <__NVIC_SetPriority+0xd4>)
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	089b      	lsrs	r3, r3, #2
 8000a00:	33c0      	adds	r3, #192	; 0xc0
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	589b      	ldr	r3, [r3, r2]
 8000a06:	1dfa      	adds	r2, r7, #7
 8000a08:	7812      	ldrb	r2, [r2, #0]
 8000a0a:	0011      	movs	r1, r2
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	400a      	ands	r2, r1
 8000a10:	00d2      	lsls	r2, r2, #3
 8000a12:	21ff      	movs	r1, #255	; 0xff
 8000a14:	4091      	lsls	r1, r2
 8000a16:	000a      	movs	r2, r1
 8000a18:	43d2      	mvns	r2, r2
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	019b      	lsls	r3, r3, #6
 8000a22:	22ff      	movs	r2, #255	; 0xff
 8000a24:	401a      	ands	r2, r3
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	4003      	ands	r3, r0
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a34:	481f      	ldr	r0, [pc, #124]	; (8000ab4 <__NVIC_SetPriority+0xd4>)
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	089b      	lsrs	r3, r3, #2
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	33c0      	adds	r3, #192	; 0xc0
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a46:	e031      	b.n	8000aac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a48:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <__NVIC_SetPriority+0xd8>)
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	0019      	movs	r1, r3
 8000a50:	230f      	movs	r3, #15
 8000a52:	400b      	ands	r3, r1
 8000a54:	3b08      	subs	r3, #8
 8000a56:	089b      	lsrs	r3, r3, #2
 8000a58:	3306      	adds	r3, #6
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	18d3      	adds	r3, r2, r3
 8000a5e:	3304      	adds	r3, #4
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	1dfa      	adds	r2, r7, #7
 8000a64:	7812      	ldrb	r2, [r2, #0]
 8000a66:	0011      	movs	r1, r2
 8000a68:	2203      	movs	r2, #3
 8000a6a:	400a      	ands	r2, r1
 8000a6c:	00d2      	lsls	r2, r2, #3
 8000a6e:	21ff      	movs	r1, #255	; 0xff
 8000a70:	4091      	lsls	r1, r2
 8000a72:	000a      	movs	r2, r1
 8000a74:	43d2      	mvns	r2, r2
 8000a76:	401a      	ands	r2, r3
 8000a78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	22ff      	movs	r2, #255	; 0xff
 8000a80:	401a      	ands	r2, r3
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	0018      	movs	r0, r3
 8000a88:	2303      	movs	r3, #3
 8000a8a:	4003      	ands	r3, r0
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <__NVIC_SetPriority+0xd8>)
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	001c      	movs	r4, r3
 8000a98:	230f      	movs	r3, #15
 8000a9a:	4023      	ands	r3, r4
 8000a9c:	3b08      	subs	r3, #8
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	3306      	adds	r3, #6
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	18c3      	adds	r3, r0, r3
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b003      	add	sp, #12
 8000ab2:	bd90      	pop	{r4, r7, pc}
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	1e5a      	subs	r2, r3, #1
 8000ac8:	2380      	movs	r3, #128	; 0x80
 8000aca:	045b      	lsls	r3, r3, #17
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d301      	bcc.n	8000ad4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e010      	b.n	8000af6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <SysTick_Config+0x44>)
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	3a01      	subs	r2, #1
 8000ada:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000adc:	2301      	movs	r3, #1
 8000ade:	425b      	negs	r3, r3
 8000ae0:	2103      	movs	r1, #3
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f7ff ff7c 	bl	80009e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <SysTick_Config+0x44>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <SysTick_Config+0x44>)
 8000af0:	2207      	movs	r2, #7
 8000af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	0018      	movs	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b002      	add	sp, #8
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	e000e010 	.word	0xe000e010

08000b04 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	210f      	movs	r1, #15
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	1c02      	adds	r2, r0, #0
 8000b14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b25b      	sxtb	r3, r3
 8000b1e:	0011      	movs	r1, r2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff ff5d 	bl	80009e0 <__NVIC_SetPriority>
}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b004      	add	sp, #16
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff ffbf 	bl	8000abc <SysTick_Config>
 8000b3e:	0003      	movs	r3, r0
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b5e:	e14f      	b.n	8000e00 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2101      	movs	r1, #1
 8000b66:	697a      	ldr	r2, [r7, #20]
 8000b68:	4091      	lsls	r1, r2
 8000b6a:	000a      	movs	r2, r1
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d100      	bne.n	8000b78 <HAL_GPIO_Init+0x30>
 8000b76:	e140      	b.n	8000dfa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	4013      	ands	r3, r2
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d005      	beq.n	8000b90 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	2203      	movs	r2, #3
 8000b8a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d130      	bne.n	8000bf2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	409a      	lsls	r2, r3
 8000b9e:	0013      	movs	r3, r2
 8000ba0:	43da      	mvns	r2, r3
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	409a      	lsls	r2, r3
 8000bb2:	0013      	movs	r3, r2
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	0013      	movs	r3, r2
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	091b      	lsrs	r3, r3, #4
 8000bdc:	2201      	movs	r2, #1
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
 8000be4:	0013      	movs	r3, r2
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d017      	beq.n	8000c2e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2203      	movs	r2, #3
 8000c0a:	409a      	lsls	r2, r3
 8000c0c:	0013      	movs	r3, r2
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	409a      	lsls	r2, r3
 8000c20:	0013      	movs	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2203      	movs	r2, #3
 8000c34:	4013      	ands	r3, r2
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d123      	bne.n	8000c82 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	08da      	lsrs	r2, r3, #3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3208      	adds	r2, #8
 8000c42:	0092      	lsls	r2, r2, #2
 8000c44:	58d3      	ldr	r3, [r2, r3]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	2207      	movs	r2, #7
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	220f      	movs	r2, #15
 8000c52:	409a      	lsls	r2, r3
 8000c54:	0013      	movs	r3, r2
 8000c56:	43da      	mvns	r2, r3
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	691a      	ldr	r2, [r3, #16]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	2107      	movs	r1, #7
 8000c66:	400b      	ands	r3, r1
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	0013      	movs	r3, r2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	08da      	lsrs	r2, r3, #3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3208      	adds	r2, #8
 8000c7c:	0092      	lsls	r2, r2, #2
 8000c7e:	6939      	ldr	r1, [r7, #16]
 8000c80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	0013      	movs	r3, r2
 8000c92:	43da      	mvns	r2, r3
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	401a      	ands	r2, r3
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	23c0      	movs	r3, #192	; 0xc0
 8000cbc:	029b      	lsls	r3, r3, #10
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d100      	bne.n	8000cc4 <HAL_GPIO_Init+0x17c>
 8000cc2:	e09a      	b.n	8000dfa <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc4:	4b54      	ldr	r3, [pc, #336]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cc8:	4b53      	ldr	r3, [pc, #332]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000cca:	2101      	movs	r1, #1
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cd0:	4a52      	ldr	r2, [pc, #328]	; (8000e1c <HAL_GPIO_Init+0x2d4>)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	589b      	ldr	r3, [r3, r2]
 8000cdc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	0013      	movs	r3, r2
 8000cec:	43da      	mvns	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	23a0      	movs	r3, #160	; 0xa0
 8000cf8:	05db      	lsls	r3, r3, #23
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d019      	beq.n	8000d32 <HAL_GPIO_Init+0x1ea>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a47      	ldr	r2, [pc, #284]	; (8000e20 <HAL_GPIO_Init+0x2d8>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d013      	beq.n	8000d2e <HAL_GPIO_Init+0x1e6>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a46      	ldr	r2, [pc, #280]	; (8000e24 <HAL_GPIO_Init+0x2dc>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d00d      	beq.n	8000d2a <HAL_GPIO_Init+0x1e2>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a45      	ldr	r2, [pc, #276]	; (8000e28 <HAL_GPIO_Init+0x2e0>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d007      	beq.n	8000d26 <HAL_GPIO_Init+0x1de>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a44      	ldr	r2, [pc, #272]	; (8000e2c <HAL_GPIO_Init+0x2e4>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d101      	bne.n	8000d22 <HAL_GPIO_Init+0x1da>
 8000d1e:	2305      	movs	r3, #5
 8000d20:	e008      	b.n	8000d34 <HAL_GPIO_Init+0x1ec>
 8000d22:	2306      	movs	r3, #6
 8000d24:	e006      	b.n	8000d34 <HAL_GPIO_Init+0x1ec>
 8000d26:	2303      	movs	r3, #3
 8000d28:	e004      	b.n	8000d34 <HAL_GPIO_Init+0x1ec>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	e002      	b.n	8000d34 <HAL_GPIO_Init+0x1ec>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e000      	b.n	8000d34 <HAL_GPIO_Init+0x1ec>
 8000d32:	2300      	movs	r3, #0
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	2103      	movs	r1, #3
 8000d38:	400a      	ands	r2, r1
 8000d3a:	0092      	lsls	r2, r2, #2
 8000d3c:	4093      	lsls	r3, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d44:	4935      	ldr	r1, [pc, #212]	; (8000e1c <HAL_GPIO_Init+0x2d4>)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d52:	4b37      	ldr	r3, [pc, #220]	; (8000e30 <HAL_GPIO_Init+0x2e8>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	035b      	lsls	r3, r3, #13
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d76:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <HAL_GPIO_Init+0x2e8>)
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d7c:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <HAL_GPIO_Init+0x2e8>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	43da      	mvns	r2, r3
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	039b      	lsls	r3, r3, #14
 8000d94:	4013      	ands	r3, r2
 8000d96:	d003      	beq.n	8000da0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <HAL_GPIO_Init+0x2e8>)
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000da6:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <HAL_GPIO_Init+0x2e8>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	43da      	mvns	r2, r3
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	029b      	lsls	r3, r3, #10
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_GPIO_Init+0x2e8>)
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_GPIO_Init+0x2e8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	43da      	mvns	r2, r3
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	025b      	lsls	r3, r3, #9
 8000de8:	4013      	ands	r3, r2
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_GPIO_Init+0x2e8>)
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	40da      	lsrs	r2, r3
 8000e08:	1e13      	subs	r3, r2, #0
 8000e0a:	d000      	beq.n	8000e0e <HAL_GPIO_Init+0x2c6>
 8000e0c:	e6a8      	b.n	8000b60 <HAL_GPIO_Init+0x18>
  }
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b006      	add	sp, #24
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010000 	.word	0x40010000
 8000e20:	50000400 	.word	0x50000400
 8000e24:	50000800 	.word	0x50000800
 8000e28:	50000c00 	.word	0x50000c00
 8000e2c:	50001c00 	.word	0x50001c00
 8000e30:	40010400 	.word	0x40010400

08000e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e34:	b5b0      	push	{r4, r5, r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d102      	bne.n	8000e48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	f000 fbaf 	bl	80015a6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e48:	4bcf      	ldr	r3, [pc, #828]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	220c      	movs	r2, #12
 8000e4e:	4013      	ands	r3, r2
 8000e50:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e52:	4bcd      	ldr	r3, [pc, #820]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000e54:	68da      	ldr	r2, [r3, #12]
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	025b      	lsls	r3, r3, #9
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2201      	movs	r2, #1
 8000e64:	4013      	ands	r3, r2
 8000e66:	d100      	bne.n	8000e6a <HAL_RCC_OscConfig+0x36>
 8000e68:	e07e      	b.n	8000f68 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e6a:	6a3b      	ldr	r3, [r7, #32]
 8000e6c:	2b08      	cmp	r3, #8
 8000e6e:	d007      	beq.n	8000e80 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e70:	6a3b      	ldr	r3, [r7, #32]
 8000e72:	2b0c      	cmp	r3, #12
 8000e74:	d112      	bne.n	8000e9c <HAL_RCC_OscConfig+0x68>
 8000e76:	69fa      	ldr	r2, [r7, #28]
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	025b      	lsls	r3, r3, #9
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d10d      	bne.n	8000e9c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e80:	4bc1      	ldr	r3, [pc, #772]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	029b      	lsls	r3, r3, #10
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d100      	bne.n	8000e8e <HAL_RCC_OscConfig+0x5a>
 8000e8c:	e06b      	b.n	8000f66 <HAL_RCC_OscConfig+0x132>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d167      	bne.n	8000f66 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	f000 fb85 	bl	80015a6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	025b      	lsls	r3, r3, #9
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d107      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x84>
 8000ea8:	4bb7      	ldr	r3, [pc, #732]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4bb6      	ldr	r3, [pc, #728]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	0249      	lsls	r1, r1, #9
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	e027      	b.n	8000f08 <HAL_RCC_OscConfig+0xd4>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	23a0      	movs	r3, #160	; 0xa0
 8000ebe:	02db      	lsls	r3, r3, #11
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d10e      	bne.n	8000ee2 <HAL_RCC_OscConfig+0xae>
 8000ec4:	4bb0      	ldr	r3, [pc, #704]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4baf      	ldr	r3, [pc, #700]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000eca:	2180      	movs	r1, #128	; 0x80
 8000ecc:	02c9      	lsls	r1, r1, #11
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	4bad      	ldr	r3, [pc, #692]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4bac      	ldr	r3, [pc, #688]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000ed8:	2180      	movs	r1, #128	; 0x80
 8000eda:	0249      	lsls	r1, r1, #9
 8000edc:	430a      	orrs	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	e012      	b.n	8000f08 <HAL_RCC_OscConfig+0xd4>
 8000ee2:	4ba9      	ldr	r3, [pc, #676]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4ba8      	ldr	r3, [pc, #672]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000ee8:	49a8      	ldr	r1, [pc, #672]	; (800118c <HAL_RCC_OscConfig+0x358>)
 8000eea:	400a      	ands	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	4ba6      	ldr	r3, [pc, #664]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	025b      	lsls	r3, r3, #9
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4ba2      	ldr	r3, [pc, #648]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4ba1      	ldr	r3, [pc, #644]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000f02:	49a3      	ldr	r1, [pc, #652]	; (8001190 <HAL_RCC_OscConfig+0x35c>)
 8000f04:	400a      	ands	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d015      	beq.n	8000f3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fd38 	bl	8000984 <HAL_GetTick>
 8000f14:	0003      	movs	r3, r0
 8000f16:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f18:	e009      	b.n	8000f2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f1a:	f7ff fd33 	bl	8000984 <HAL_GetTick>
 8000f1e:	0002      	movs	r2, r0
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b64      	cmp	r3, #100	; 0x64
 8000f26:	d902      	bls.n	8000f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	f000 fb3c 	bl	80015a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f2e:	4b96      	ldr	r3, [pc, #600]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	029b      	lsls	r3, r3, #10
 8000f36:	4013      	ands	r3, r2
 8000f38:	d0ef      	beq.n	8000f1a <HAL_RCC_OscConfig+0xe6>
 8000f3a:	e015      	b.n	8000f68 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fd22 	bl	8000984 <HAL_GetTick>
 8000f40:	0003      	movs	r3, r0
 8000f42:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f44:	e008      	b.n	8000f58 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f46:	f7ff fd1d 	bl	8000984 <HAL_GetTick>
 8000f4a:	0002      	movs	r2, r0
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b64      	cmp	r3, #100	; 0x64
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e326      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f58:	4b8b      	ldr	r3, [pc, #556]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	029b      	lsls	r3, r3, #10
 8000f60:	4013      	ands	r3, r2
 8000f62:	d1f0      	bne.n	8000f46 <HAL_RCC_OscConfig+0x112>
 8000f64:	e000      	b.n	8000f68 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f66:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d100      	bne.n	8000f74 <HAL_RCC_OscConfig+0x140>
 8000f72:	e08b      	b.n	800108c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f7a:	6a3b      	ldr	r3, [r7, #32]
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d005      	beq.n	8000f8c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f80:	6a3b      	ldr	r3, [r7, #32]
 8000f82:	2b0c      	cmp	r3, #12
 8000f84:	d13e      	bne.n	8001004 <HAL_RCC_OscConfig+0x1d0>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d13b      	bne.n	8001004 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000f8c:	4b7e      	ldr	r3, [pc, #504]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2204      	movs	r2, #4
 8000f92:	4013      	ands	r3, r2
 8000f94:	d004      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x16c>
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e302      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa0:	4b79      	ldr	r3, [pc, #484]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	4a7b      	ldr	r2, [pc, #492]	; (8001194 <HAL_RCC_OscConfig+0x360>)
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	0019      	movs	r1, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	021a      	lsls	r2, r3, #8
 8000fb0:	4b75      	ldr	r3, [pc, #468]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fb6:	4b74      	ldr	r3, [pc, #464]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2209      	movs	r2, #9
 8000fbc:	4393      	bics	r3, r2
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	4b71      	ldr	r3, [pc, #452]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fc8:	f000 fc40 	bl	800184c <HAL_RCC_GetSysClockFreq>
 8000fcc:	0001      	movs	r1, r0
 8000fce:	4b6e      	ldr	r3, [pc, #440]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	091b      	lsrs	r3, r3, #4
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	4a6f      	ldr	r2, [pc, #444]	; (8001198 <HAL_RCC_OscConfig+0x364>)
 8000fda:	5cd3      	ldrb	r3, [r2, r3]
 8000fdc:	000a      	movs	r2, r1
 8000fde:	40da      	lsrs	r2, r3
 8000fe0:	4b6e      	ldr	r3, [pc, #440]	; (800119c <HAL_RCC_OscConfig+0x368>)
 8000fe2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000fe4:	4b6e      	ldr	r3, [pc, #440]	; (80011a0 <HAL_RCC_OscConfig+0x36c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2513      	movs	r5, #19
 8000fea:	197c      	adds	r4, r7, r5
 8000fec:	0018      	movs	r0, r3
 8000fee:	f7ff fc83 	bl	80008f8 <HAL_InitTick>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000ff6:	197b      	adds	r3, r7, r5
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d046      	beq.n	800108c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8000ffe:	197b      	adds	r3, r7, r5
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	e2d0      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d027      	beq.n	800105a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800100a:	4b5f      	ldr	r3, [pc, #380]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2209      	movs	r2, #9
 8001010:	4393      	bics	r3, r2
 8001012:	0019      	movs	r1, r3
 8001014:	4b5c      	ldr	r3, [pc, #368]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	430a      	orrs	r2, r1
 800101a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fcb2 	bl	8000984 <HAL_GetTick>
 8001020:	0003      	movs	r3, r0
 8001022:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001026:	f7ff fcad 	bl	8000984 <HAL_GetTick>
 800102a:	0002      	movs	r2, r0
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e2b6      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001038:	4b53      	ldr	r3, [pc, #332]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2204      	movs	r2, #4
 800103e:	4013      	ands	r3, r2
 8001040:	d0f1      	beq.n	8001026 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001042:	4b51      	ldr	r3, [pc, #324]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4a53      	ldr	r2, [pc, #332]	; (8001194 <HAL_RCC_OscConfig+0x360>)
 8001048:	4013      	ands	r3, r2
 800104a:	0019      	movs	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	021a      	lsls	r2, r3, #8
 8001052:	4b4d      	ldr	r3, [pc, #308]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8001054:	430a      	orrs	r2, r1
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	e018      	b.n	800108c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800105a:	4b4b      	ldr	r3, [pc, #300]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4b4a      	ldr	r3, [pc, #296]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8001060:	2101      	movs	r1, #1
 8001062:	438a      	bics	r2, r1
 8001064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001066:	f7ff fc8d 	bl	8000984 <HAL_GetTick>
 800106a:	0003      	movs	r3, r0
 800106c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001070:	f7ff fc88 	bl	8000984 <HAL_GetTick>
 8001074:	0002      	movs	r2, r0
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e291      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001082:	4b41      	ldr	r3, [pc, #260]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2204      	movs	r2, #4
 8001088:	4013      	ands	r3, r2
 800108a:	d1f1      	bne.n	8001070 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2210      	movs	r2, #16
 8001092:	4013      	ands	r3, r2
 8001094:	d100      	bne.n	8001098 <HAL_RCC_OscConfig+0x264>
 8001096:	e0a1      	b.n	80011dc <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001098:	6a3b      	ldr	r3, [r7, #32]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d140      	bne.n	8001120 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800109e:	4b3a      	ldr	r3, [pc, #232]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4013      	ands	r3, r2
 80010a8:	d005      	beq.n	80010b6 <HAL_RCC_OscConfig+0x282>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e277      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010b6:	4b34      	ldr	r3, [pc, #208]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	4a3a      	ldr	r2, [pc, #232]	; (80011a4 <HAL_RCC_OscConfig+0x370>)
 80010bc:	4013      	ands	r3, r2
 80010be:	0019      	movs	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010c4:	4b30      	ldr	r3, [pc, #192]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 80010c6:	430a      	orrs	r2, r1
 80010c8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ca:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	0a19      	lsrs	r1, r3, #8
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	061a      	lsls	r2, r3, #24
 80010d8:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 80010da:	430a      	orrs	r2, r1
 80010dc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	0b5b      	lsrs	r3, r3, #13
 80010e4:	3301      	adds	r3, #1
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	0212      	lsls	r2, r2, #8
 80010ea:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	210f      	movs	r1, #15
 80010f4:	400b      	ands	r3, r1
 80010f6:	4928      	ldr	r1, [pc, #160]	; (8001198 <HAL_RCC_OscConfig+0x364>)
 80010f8:	5ccb      	ldrb	r3, [r1, r3]
 80010fa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010fc:	4b27      	ldr	r3, [pc, #156]	; (800119c <HAL_RCC_OscConfig+0x368>)
 80010fe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001100:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <HAL_RCC_OscConfig+0x36c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2513      	movs	r5, #19
 8001106:	197c      	adds	r4, r7, r5
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff fbf5 	bl	80008f8 <HAL_InitTick>
 800110e:	0003      	movs	r3, r0
 8001110:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001112:	197b      	adds	r3, r7, r5
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d060      	beq.n	80011dc <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800111a:	197b      	adds	r3, r7, r5
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	e242      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d03f      	beq.n	80011a8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	0049      	lsls	r1, r1, #1
 8001132:	430a      	orrs	r2, r1
 8001134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001136:	f7ff fc25 	bl	8000984 <HAL_GetTick>
 800113a:	0003      	movs	r3, r0
 800113c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001140:	f7ff fc20 	bl	8000984 <HAL_GetTick>
 8001144:	0002      	movs	r2, r0
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e229      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4013      	ands	r3, r2
 800115c:	d0f0      	beq.n	8001140 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <HAL_RCC_OscConfig+0x370>)
 8001164:	4013      	ands	r3, r2
 8001166:	0019      	movs	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 800116e:	430a      	orrs	r2, r1
 8001170:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	0a19      	lsrs	r1, r3, #8
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	061a      	lsls	r2, r3, #24
 8001180:	4b01      	ldr	r3, [pc, #4]	; (8001188 <HAL_RCC_OscConfig+0x354>)
 8001182:	430a      	orrs	r2, r1
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	e029      	b.n	80011dc <HAL_RCC_OscConfig+0x3a8>
 8001188:	40021000 	.word	0x40021000
 800118c:	fffeffff 	.word	0xfffeffff
 8001190:	fffbffff 	.word	0xfffbffff
 8001194:	ffffe0ff 	.word	0xffffe0ff
 8001198:	08002dfc 	.word	0x08002dfc
 800119c:	20000008 	.word	0x20000008
 80011a0:	2000000c 	.word	0x2000000c
 80011a4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011a8:	4bbd      	ldr	r3, [pc, #756]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4bbc      	ldr	r3, [pc, #752]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 80011ae:	49bd      	ldr	r1, [pc, #756]	; (80014a4 <HAL_RCC_OscConfig+0x670>)
 80011b0:	400a      	ands	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fbe6 	bl	8000984 <HAL_GetTick>
 80011b8:	0003      	movs	r3, r0
 80011ba:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011be:	f7ff fbe1 	bl	8000984 <HAL_GetTick>
 80011c2:	0002      	movs	r2, r0
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e1ea      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011d0:	4bb3      	ldr	r3, [pc, #716]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4013      	ands	r3, r2
 80011da:	d1f0      	bne.n	80011be <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2208      	movs	r2, #8
 80011e2:	4013      	ands	r3, r2
 80011e4:	d036      	beq.n	8001254 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d019      	beq.n	8001222 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ee:	4bac      	ldr	r3, [pc, #688]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 80011f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011f2:	4bab      	ldr	r3, [pc, #684]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 80011f4:	2101      	movs	r1, #1
 80011f6:	430a      	orrs	r2, r1
 80011f8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fbc3 	bl	8000984 <HAL_GetTick>
 80011fe:	0003      	movs	r3, r0
 8001200:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001204:	f7ff fbbe 	bl	8000984 <HAL_GetTick>
 8001208:	0002      	movs	r2, r0
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e1c7      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001216:	4ba2      	ldr	r3, [pc, #648]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800121a:	2202      	movs	r2, #2
 800121c:	4013      	ands	r3, r2
 800121e:	d0f1      	beq.n	8001204 <HAL_RCC_OscConfig+0x3d0>
 8001220:	e018      	b.n	8001254 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001222:	4b9f      	ldr	r3, [pc, #636]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001224:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001226:	4b9e      	ldr	r3, [pc, #632]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001228:	2101      	movs	r1, #1
 800122a:	438a      	bics	r2, r1
 800122c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fba9 	bl	8000984 <HAL_GetTick>
 8001232:	0003      	movs	r3, r0
 8001234:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fba4 	bl	8000984 <HAL_GetTick>
 800123c:	0002      	movs	r2, r0
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e1ad      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800124a:	4b95      	ldr	r3, [pc, #596]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 800124c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800124e:	2202      	movs	r2, #2
 8001250:	4013      	ands	r3, r2
 8001252:	d1f1      	bne.n	8001238 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2204      	movs	r2, #4
 800125a:	4013      	ands	r3, r2
 800125c:	d100      	bne.n	8001260 <HAL_RCC_OscConfig+0x42c>
 800125e:	e0ae      	b.n	80013be <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001260:	2027      	movs	r0, #39	; 0x27
 8001262:	183b      	adds	r3, r7, r0
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001268:	4b8d      	ldr	r3, [pc, #564]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 800126a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	055b      	lsls	r3, r3, #21
 8001270:	4013      	ands	r3, r2
 8001272:	d109      	bne.n	8001288 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001274:	4b8a      	ldr	r3, [pc, #552]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001278:	4b89      	ldr	r3, [pc, #548]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 800127a:	2180      	movs	r1, #128	; 0x80
 800127c:	0549      	lsls	r1, r1, #21
 800127e:	430a      	orrs	r2, r1
 8001280:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001282:	183b      	adds	r3, r7, r0
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001288:	4b87      	ldr	r3, [pc, #540]	; (80014a8 <HAL_RCC_OscConfig+0x674>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4013      	ands	r3, r2
 8001292:	d11a      	bne.n	80012ca <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001294:	4b84      	ldr	r3, [pc, #528]	; (80014a8 <HAL_RCC_OscConfig+0x674>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b83      	ldr	r3, [pc, #524]	; (80014a8 <HAL_RCC_OscConfig+0x674>)
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	0049      	lsls	r1, r1, #1
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012a2:	f7ff fb6f 	bl	8000984 <HAL_GetTick>
 80012a6:	0003      	movs	r3, r0
 80012a8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ac:	f7ff fb6a 	bl	8000984 <HAL_GetTick>
 80012b0:	0002      	movs	r2, r0
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b64      	cmp	r3, #100	; 0x64
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e173      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012be:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <HAL_RCC_OscConfig+0x674>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4013      	ands	r3, r2
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d107      	bne.n	80012e6 <HAL_RCC_OscConfig+0x4b2>
 80012d6:	4b72      	ldr	r3, [pc, #456]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 80012d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012da:	4b71      	ldr	r3, [pc, #452]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	0049      	lsls	r1, r1, #1
 80012e0:	430a      	orrs	r2, r1
 80012e2:	651a      	str	r2, [r3, #80]	; 0x50
 80012e4:	e031      	b.n	800134a <HAL_RCC_OscConfig+0x516>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10c      	bne.n	8001308 <HAL_RCC_OscConfig+0x4d4>
 80012ee:	4b6c      	ldr	r3, [pc, #432]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 80012f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012f2:	4b6b      	ldr	r3, [pc, #428]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 80012f4:	496b      	ldr	r1, [pc, #428]	; (80014a4 <HAL_RCC_OscConfig+0x670>)
 80012f6:	400a      	ands	r2, r1
 80012f8:	651a      	str	r2, [r3, #80]	; 0x50
 80012fa:	4b69      	ldr	r3, [pc, #420]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 80012fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012fe:	4b68      	ldr	r3, [pc, #416]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001300:	496a      	ldr	r1, [pc, #424]	; (80014ac <HAL_RCC_OscConfig+0x678>)
 8001302:	400a      	ands	r2, r1
 8001304:	651a      	str	r2, [r3, #80]	; 0x50
 8001306:	e020      	b.n	800134a <HAL_RCC_OscConfig+0x516>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	23a0      	movs	r3, #160	; 0xa0
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	429a      	cmp	r2, r3
 8001312:	d10e      	bne.n	8001332 <HAL_RCC_OscConfig+0x4fe>
 8001314:	4b62      	ldr	r3, [pc, #392]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001318:	4b61      	ldr	r3, [pc, #388]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	00c9      	lsls	r1, r1, #3
 800131e:	430a      	orrs	r2, r1
 8001320:	651a      	str	r2, [r3, #80]	; 0x50
 8001322:	4b5f      	ldr	r3, [pc, #380]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001324:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001326:	4b5e      	ldr	r3, [pc, #376]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	0049      	lsls	r1, r1, #1
 800132c:	430a      	orrs	r2, r1
 800132e:	651a      	str	r2, [r3, #80]	; 0x50
 8001330:	e00b      	b.n	800134a <HAL_RCC_OscConfig+0x516>
 8001332:	4b5b      	ldr	r3, [pc, #364]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001334:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001336:	4b5a      	ldr	r3, [pc, #360]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001338:	495a      	ldr	r1, [pc, #360]	; (80014a4 <HAL_RCC_OscConfig+0x670>)
 800133a:	400a      	ands	r2, r1
 800133c:	651a      	str	r2, [r3, #80]	; 0x50
 800133e:	4b58      	ldr	r3, [pc, #352]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001340:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001342:	4b57      	ldr	r3, [pc, #348]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001344:	4959      	ldr	r1, [pc, #356]	; (80014ac <HAL_RCC_OscConfig+0x678>)
 8001346:	400a      	ands	r2, r1
 8001348:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d015      	beq.n	800137e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001352:	f7ff fb17 	bl	8000984 <HAL_GetTick>
 8001356:	0003      	movs	r3, r0
 8001358:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800135a:	e009      	b.n	8001370 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135c:	f7ff fb12 	bl	8000984 <HAL_GetTick>
 8001360:	0002      	movs	r2, r0
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	4a52      	ldr	r2, [pc, #328]	; (80014b0 <HAL_RCC_OscConfig+0x67c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e11a      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001370:	4b4b      	ldr	r3, [pc, #300]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001372:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4013      	ands	r3, r2
 800137a:	d0ef      	beq.n	800135c <HAL_RCC_OscConfig+0x528>
 800137c:	e014      	b.n	80013a8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137e:	f7ff fb01 	bl	8000984 <HAL_GetTick>
 8001382:	0003      	movs	r3, r0
 8001384:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001386:	e009      	b.n	800139c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001388:	f7ff fafc 	bl	8000984 <HAL_GetTick>
 800138c:	0002      	movs	r2, r0
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	4a47      	ldr	r2, [pc, #284]	; (80014b0 <HAL_RCC_OscConfig+0x67c>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e104      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800139c:	4b40      	ldr	r3, [pc, #256]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 800139e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4013      	ands	r3, r2
 80013a6:	d1ef      	bne.n	8001388 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013a8:	2327      	movs	r3, #39	; 0x27
 80013aa:	18fb      	adds	r3, r7, r3
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d105      	bne.n	80013be <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b2:	4b3b      	ldr	r3, [pc, #236]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 80013b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013b6:	4b3a      	ldr	r3, [pc, #232]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 80013b8:	493e      	ldr	r1, [pc, #248]	; (80014b4 <HAL_RCC_OscConfig+0x680>)
 80013ba:	400a      	ands	r2, r1
 80013bc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2220      	movs	r2, #32
 80013c4:	4013      	ands	r3, r2
 80013c6:	d049      	beq.n	800145c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d026      	beq.n	800141e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80013d0:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 80013d6:	2101      	movs	r1, #1
 80013d8:	430a      	orrs	r2, r1
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	4b30      	ldr	r3, [pc, #192]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 80013de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013e0:	4b2f      	ldr	r3, [pc, #188]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 80013e2:	2101      	movs	r1, #1
 80013e4:	430a      	orrs	r2, r1
 80013e6:	635a      	str	r2, [r3, #52]	; 0x34
 80013e8:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <HAL_RCC_OscConfig+0x684>)
 80013ea:	6a1a      	ldr	r2, [r3, #32]
 80013ec:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <HAL_RCC_OscConfig+0x684>)
 80013ee:	2180      	movs	r1, #128	; 0x80
 80013f0:	0189      	lsls	r1, r1, #6
 80013f2:	430a      	orrs	r2, r1
 80013f4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f6:	f7ff fac5 	bl	8000984 <HAL_GetTick>
 80013fa:	0003      	movs	r3, r0
 80013fc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001400:	f7ff fac0 	bl	8000984 <HAL_GetTick>
 8001404:	0002      	movs	r2, r0
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e0c9      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2202      	movs	r2, #2
 8001418:	4013      	ands	r3, r2
 800141a:	d0f1      	beq.n	8001400 <HAL_RCC_OscConfig+0x5cc>
 800141c:	e01e      	b.n	800145c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001424:	2101      	movs	r1, #1
 8001426:	438a      	bics	r2, r1
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <HAL_RCC_OscConfig+0x684>)
 800142c:	6a1a      	ldr	r2, [r3, #32]
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <HAL_RCC_OscConfig+0x684>)
 8001430:	4922      	ldr	r1, [pc, #136]	; (80014bc <HAL_RCC_OscConfig+0x688>)
 8001432:	400a      	ands	r2, r1
 8001434:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff faa5 	bl	8000984 <HAL_GetTick>
 800143a:	0003      	movs	r3, r0
 800143c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001440:	f7ff faa0 	bl	8000984 <HAL_GetTick>
 8001444:	0002      	movs	r2, r0
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e0a9      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2202      	movs	r2, #2
 8001458:	4013      	ands	r3, r2
 800145a:	d1f1      	bne.n	8001440 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	2b00      	cmp	r3, #0
 8001462:	d100      	bne.n	8001466 <HAL_RCC_OscConfig+0x632>
 8001464:	e09e      	b.n	80015a4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001466:	6a3b      	ldr	r3, [r7, #32]
 8001468:	2b0c      	cmp	r3, #12
 800146a:	d100      	bne.n	800146e <HAL_RCC_OscConfig+0x63a>
 800146c:	e077      	b.n	800155e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001472:	2b02      	cmp	r3, #2
 8001474:	d158      	bne.n	8001528 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_RCC_OscConfig+0x66c>)
 800147c:	4910      	ldr	r1, [pc, #64]	; (80014c0 <HAL_RCC_OscConfig+0x68c>)
 800147e:	400a      	ands	r2, r1
 8001480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001482:	f7ff fa7f 	bl	8000984 <HAL_GetTick>
 8001486:	0003      	movs	r3, r0
 8001488:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800148a:	e01b      	b.n	80014c4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800148c:	f7ff fa7a 	bl	8000984 <HAL_GetTick>
 8001490:	0002      	movs	r2, r0
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d914      	bls.n	80014c4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e083      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	40021000 	.word	0x40021000
 80014a4:	fffffeff 	.word	0xfffffeff
 80014a8:	40007000 	.word	0x40007000
 80014ac:	fffffbff 	.word	0xfffffbff
 80014b0:	00001388 	.word	0x00001388
 80014b4:	efffffff 	.word	0xefffffff
 80014b8:	40010000 	.word	0x40010000
 80014bc:	ffffdfff 	.word	0xffffdfff
 80014c0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014c4:	4b3a      	ldr	r3, [pc, #232]	; (80015b0 <HAL_RCC_OscConfig+0x77c>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	049b      	lsls	r3, r3, #18
 80014cc:	4013      	ands	r3, r2
 80014ce:	d1dd      	bne.n	800148c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d0:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <HAL_RCC_OscConfig+0x77c>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4a37      	ldr	r2, [pc, #220]	; (80015b4 <HAL_RCC_OscConfig+0x780>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	0019      	movs	r1, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e8:	431a      	orrs	r2, r3
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <HAL_RCC_OscConfig+0x77c>)
 80014ec:	430a      	orrs	r2, r1
 80014ee:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <HAL_RCC_OscConfig+0x77c>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <HAL_RCC_OscConfig+0x77c>)
 80014f6:	2180      	movs	r1, #128	; 0x80
 80014f8:	0449      	lsls	r1, r1, #17
 80014fa:	430a      	orrs	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fa41 	bl	8000984 <HAL_GetTick>
 8001502:	0003      	movs	r3, r0
 8001504:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001508:	f7ff fa3c 	bl	8000984 <HAL_GetTick>
 800150c:	0002      	movs	r2, r0
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e045      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800151a:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <HAL_RCC_OscConfig+0x77c>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	049b      	lsls	r3, r3, #18
 8001522:	4013      	ands	r3, r2
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0x6d4>
 8001526:	e03d      	b.n	80015a4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_RCC_OscConfig+0x77c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_RCC_OscConfig+0x77c>)
 800152e:	4922      	ldr	r1, [pc, #136]	; (80015b8 <HAL_RCC_OscConfig+0x784>)
 8001530:	400a      	ands	r2, r1
 8001532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fa26 	bl	8000984 <HAL_GetTick>
 8001538:	0003      	movs	r3, r0
 800153a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153e:	f7ff fa21 	bl	8000984 <HAL_GetTick>
 8001542:	0002      	movs	r2, r0
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e02a      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_RCC_OscConfig+0x77c>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	049b      	lsls	r3, r3, #18
 8001558:	4013      	ands	r3, r2
 800155a:	d1f0      	bne.n	800153e <HAL_RCC_OscConfig+0x70a>
 800155c:	e022      	b.n	80015a4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e01d      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_RCC_OscConfig+0x77c>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001570:	69fa      	ldr	r2, [r7, #28]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	025b      	lsls	r3, r3, #9
 8001576:	401a      	ands	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	429a      	cmp	r2, r3
 800157e:	d10f      	bne.n	80015a0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	23f0      	movs	r3, #240	; 0xf0
 8001584:	039b      	lsls	r3, r3, #14
 8001586:	401a      	ands	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	23c0      	movs	r3, #192	; 0xc0
 8001594:	041b      	lsls	r3, r3, #16
 8001596:	401a      	ands	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b00a      	add	sp, #40	; 0x28
 80015ac:	bdb0      	pop	{r4, r5, r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	40021000 	.word	0x40021000
 80015b4:	ff02ffff 	.word	0xff02ffff
 80015b8:	feffffff 	.word	0xfeffffff

080015bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015bc:	b5b0      	push	{r4, r5, r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e128      	b.n	8001822 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d0:	4b96      	ldr	r3, [pc, #600]	; (800182c <HAL_RCC_ClockConfig+0x270>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2201      	movs	r2, #1
 80015d6:	4013      	ands	r3, r2
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d91e      	bls.n	800161c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015de:	4b93      	ldr	r3, [pc, #588]	; (800182c <HAL_RCC_ClockConfig+0x270>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2201      	movs	r2, #1
 80015e4:	4393      	bics	r3, r2
 80015e6:	0019      	movs	r1, r3
 80015e8:	4b90      	ldr	r3, [pc, #576]	; (800182c <HAL_RCC_ClockConfig+0x270>)
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015f0:	f7ff f9c8 	bl	8000984 <HAL_GetTick>
 80015f4:	0003      	movs	r3, r0
 80015f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f8:	e009      	b.n	800160e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fa:	f7ff f9c3 	bl	8000984 <HAL_GetTick>
 80015fe:	0002      	movs	r2, r0
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	4a8a      	ldr	r2, [pc, #552]	; (8001830 <HAL_RCC_ClockConfig+0x274>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e109      	b.n	8001822 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800160e:	4b87      	ldr	r3, [pc, #540]	; (800182c <HAL_RCC_ClockConfig+0x270>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2201      	movs	r2, #1
 8001614:	4013      	ands	r3, r2
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d1ee      	bne.n	80015fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2202      	movs	r2, #2
 8001622:	4013      	ands	r3, r2
 8001624:	d009      	beq.n	800163a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001626:	4b83      	ldr	r3, [pc, #524]	; (8001834 <HAL_RCC_ClockConfig+0x278>)
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	22f0      	movs	r2, #240	; 0xf0
 800162c:	4393      	bics	r3, r2
 800162e:	0019      	movs	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	4b7f      	ldr	r3, [pc, #508]	; (8001834 <HAL_RCC_ClockConfig+0x278>)
 8001636:	430a      	orrs	r2, r1
 8001638:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2201      	movs	r2, #1
 8001640:	4013      	ands	r3, r2
 8001642:	d100      	bne.n	8001646 <HAL_RCC_ClockConfig+0x8a>
 8001644:	e089      	b.n	800175a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800164e:	4b79      	ldr	r3, [pc, #484]	; (8001834 <HAL_RCC_ClockConfig+0x278>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	029b      	lsls	r3, r3, #10
 8001656:	4013      	ands	r3, r2
 8001658:	d120      	bne.n	800169c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e0e1      	b.n	8001822 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b03      	cmp	r3, #3
 8001664:	d107      	bne.n	8001676 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001666:	4b73      	ldr	r3, [pc, #460]	; (8001834 <HAL_RCC_ClockConfig+0x278>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	049b      	lsls	r3, r3, #18
 800166e:	4013      	ands	r3, r2
 8001670:	d114      	bne.n	800169c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e0d5      	b.n	8001822 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d106      	bne.n	800168c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800167e:	4b6d      	ldr	r3, [pc, #436]	; (8001834 <HAL_RCC_ClockConfig+0x278>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2204      	movs	r2, #4
 8001684:	4013      	ands	r3, r2
 8001686:	d109      	bne.n	800169c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0ca      	b.n	8001822 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800168c:	4b69      	ldr	r3, [pc, #420]	; (8001834 <HAL_RCC_ClockConfig+0x278>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4013      	ands	r3, r2
 8001696:	d101      	bne.n	800169c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0c2      	b.n	8001822 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800169c:	4b65      	ldr	r3, [pc, #404]	; (8001834 <HAL_RCC_ClockConfig+0x278>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2203      	movs	r2, #3
 80016a2:	4393      	bics	r3, r2
 80016a4:	0019      	movs	r1, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4b62      	ldr	r3, [pc, #392]	; (8001834 <HAL_RCC_ClockConfig+0x278>)
 80016ac:	430a      	orrs	r2, r1
 80016ae:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b0:	f7ff f968 	bl	8000984 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d111      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c0:	e009      	b.n	80016d6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c2:	f7ff f95f 	bl	8000984 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	4a58      	ldr	r2, [pc, #352]	; (8001830 <HAL_RCC_ClockConfig+0x274>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e0a5      	b.n	8001822 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d6:	4b57      	ldr	r3, [pc, #348]	; (8001834 <HAL_RCC_ClockConfig+0x278>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	220c      	movs	r2, #12
 80016dc:	4013      	ands	r3, r2
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d1ef      	bne.n	80016c2 <HAL_RCC_ClockConfig+0x106>
 80016e2:	e03a      	b.n	800175a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d111      	bne.n	8001710 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ec:	e009      	b.n	8001702 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ee:	f7ff f949 	bl	8000984 <HAL_GetTick>
 80016f2:	0002      	movs	r2, r0
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	4a4d      	ldr	r2, [pc, #308]	; (8001830 <HAL_RCC_ClockConfig+0x274>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e08f      	b.n	8001822 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001702:	4b4c      	ldr	r3, [pc, #304]	; (8001834 <HAL_RCC_ClockConfig+0x278>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	220c      	movs	r2, #12
 8001708:	4013      	ands	r3, r2
 800170a:	2b0c      	cmp	r3, #12
 800170c:	d1ef      	bne.n	80016ee <HAL_RCC_ClockConfig+0x132>
 800170e:	e024      	b.n	800175a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d11b      	bne.n	8001750 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001718:	e009      	b.n	800172e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800171a:	f7ff f933 	bl	8000984 <HAL_GetTick>
 800171e:	0002      	movs	r2, r0
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	4a42      	ldr	r2, [pc, #264]	; (8001830 <HAL_RCC_ClockConfig+0x274>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e079      	b.n	8001822 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800172e:	4b41      	ldr	r3, [pc, #260]	; (8001834 <HAL_RCC_ClockConfig+0x278>)
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	220c      	movs	r2, #12
 8001734:	4013      	ands	r3, r2
 8001736:	2b04      	cmp	r3, #4
 8001738:	d1ef      	bne.n	800171a <HAL_RCC_ClockConfig+0x15e>
 800173a:	e00e      	b.n	800175a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800173c:	f7ff f922 	bl	8000984 <HAL_GetTick>
 8001740:	0002      	movs	r2, r0
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	4a3a      	ldr	r2, [pc, #232]	; (8001830 <HAL_RCC_ClockConfig+0x274>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e068      	b.n	8001822 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001750:	4b38      	ldr	r3, [pc, #224]	; (8001834 <HAL_RCC_ClockConfig+0x278>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	220c      	movs	r2, #12
 8001756:	4013      	ands	r3, r2
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800175a:	4b34      	ldr	r3, [pc, #208]	; (800182c <HAL_RCC_ClockConfig+0x270>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2201      	movs	r2, #1
 8001760:	4013      	ands	r3, r2
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d21e      	bcs.n	80017a6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001768:	4b30      	ldr	r3, [pc, #192]	; (800182c <HAL_RCC_ClockConfig+0x270>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2201      	movs	r2, #1
 800176e:	4393      	bics	r3, r2
 8001770:	0019      	movs	r1, r3
 8001772:	4b2e      	ldr	r3, [pc, #184]	; (800182c <HAL_RCC_ClockConfig+0x270>)
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800177a:	f7ff f903 	bl	8000984 <HAL_GetTick>
 800177e:	0003      	movs	r3, r0
 8001780:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001782:	e009      	b.n	8001798 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001784:	f7ff f8fe 	bl	8000984 <HAL_GetTick>
 8001788:	0002      	movs	r2, r0
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	4a28      	ldr	r2, [pc, #160]	; (8001830 <HAL_RCC_ClockConfig+0x274>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e044      	b.n	8001822 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <HAL_RCC_ClockConfig+0x270>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2201      	movs	r2, #1
 800179e:	4013      	ands	r3, r2
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d1ee      	bne.n	8001784 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2204      	movs	r2, #4
 80017ac:	4013      	ands	r3, r2
 80017ae:	d009      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_ClockConfig+0x278>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4a20      	ldr	r2, [pc, #128]	; (8001838 <HAL_RCC_ClockConfig+0x27c>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	0019      	movs	r1, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <HAL_RCC_ClockConfig+0x278>)
 80017c0:	430a      	orrs	r2, r1
 80017c2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2208      	movs	r2, #8
 80017ca:	4013      	ands	r3, r2
 80017cc:	d00a      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_RCC_ClockConfig+0x278>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	4a1a      	ldr	r2, [pc, #104]	; (800183c <HAL_RCC_ClockConfig+0x280>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	00da      	lsls	r2, r3, #3
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_RCC_ClockConfig+0x278>)
 80017e0:	430a      	orrs	r2, r1
 80017e2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017e4:	f000 f832 	bl	800184c <HAL_RCC_GetSysClockFreq>
 80017e8:	0001      	movs	r1, r0
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_RCC_ClockConfig+0x278>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	220f      	movs	r2, #15
 80017f2:	4013      	ands	r3, r2
 80017f4:	4a12      	ldr	r2, [pc, #72]	; (8001840 <HAL_RCC_ClockConfig+0x284>)
 80017f6:	5cd3      	ldrb	r3, [r2, r3]
 80017f8:	000a      	movs	r2, r1
 80017fa:	40da      	lsrs	r2, r3
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_RCC_ClockConfig+0x288>)
 80017fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_RCC_ClockConfig+0x28c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	250b      	movs	r5, #11
 8001806:	197c      	adds	r4, r7, r5
 8001808:	0018      	movs	r0, r3
 800180a:	f7ff f875 	bl	80008f8 <HAL_InitTick>
 800180e:	0003      	movs	r3, r0
 8001810:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001812:	197b      	adds	r3, r7, r5
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800181a:	197b      	adds	r3, r7, r5
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	e000      	b.n	8001822 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	0018      	movs	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	b004      	add	sp, #16
 8001828:	bdb0      	pop	{r4, r5, r7, pc}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	40022000 	.word	0x40022000
 8001830:	00001388 	.word	0x00001388
 8001834:	40021000 	.word	0x40021000
 8001838:	fffff8ff 	.word	0xfffff8ff
 800183c:	ffffc7ff 	.word	0xffffc7ff
 8001840:	08002dfc 	.word	0x08002dfc
 8001844:	20000008 	.word	0x20000008
 8001848:	2000000c 	.word	0x2000000c

0800184c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b08e      	sub	sp, #56	; 0x38
 8001850:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001852:	4b4c      	ldr	r3, [pc, #304]	; (8001984 <HAL_RCC_GetSysClockFreq+0x138>)
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800185a:	230c      	movs	r3, #12
 800185c:	4013      	ands	r3, r2
 800185e:	2b0c      	cmp	r3, #12
 8001860:	d014      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0x40>
 8001862:	d900      	bls.n	8001866 <HAL_RCC_GetSysClockFreq+0x1a>
 8001864:	e07b      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x112>
 8001866:	2b04      	cmp	r3, #4
 8001868:	d002      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x24>
 800186a:	2b08      	cmp	r3, #8
 800186c:	d00b      	beq.n	8001886 <HAL_RCC_GetSysClockFreq+0x3a>
 800186e:	e076      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001870:	4b44      	ldr	r3, [pc, #272]	; (8001984 <HAL_RCC_GetSysClockFreq+0x138>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2210      	movs	r2, #16
 8001876:	4013      	ands	r3, r2
 8001878:	d002      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800187a:	4b43      	ldr	r3, [pc, #268]	; (8001988 <HAL_RCC_GetSysClockFreq+0x13c>)
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800187e:	e07c      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001880:	4b42      	ldr	r3, [pc, #264]	; (800198c <HAL_RCC_GetSysClockFreq+0x140>)
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001884:	e079      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001886:	4b42      	ldr	r3, [pc, #264]	; (8001990 <HAL_RCC_GetSysClockFreq+0x144>)
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800188a:	e076      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188e:	0c9a      	lsrs	r2, r3, #18
 8001890:	230f      	movs	r3, #15
 8001892:	401a      	ands	r2, r3
 8001894:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <HAL_RCC_GetSysClockFreq+0x148>)
 8001896:	5c9b      	ldrb	r3, [r3, r2]
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189c:	0d9a      	lsrs	r2, r3, #22
 800189e:	2303      	movs	r3, #3
 80018a0:	4013      	ands	r3, r2
 80018a2:	3301      	adds	r3, #1
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018a6:	4b37      	ldr	r3, [pc, #220]	; (8001984 <HAL_RCC_GetSysClockFreq+0x138>)
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	025b      	lsls	r3, r3, #9
 80018ae:	4013      	ands	r3, r2
 80018b0:	d01a      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
 80018ba:	4a35      	ldr	r2, [pc, #212]	; (8001990 <HAL_RCC_GetSysClockFreq+0x144>)
 80018bc:	2300      	movs	r3, #0
 80018be:	69b8      	ldr	r0, [r7, #24]
 80018c0:	69f9      	ldr	r1, [r7, #28]
 80018c2:	f7fe fccd 	bl	8000260 <__aeabi_lmul>
 80018c6:	0002      	movs	r2, r0
 80018c8:	000b      	movs	r3, r1
 80018ca:	0010      	movs	r0, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f7fe fca1 	bl	8000220 <__aeabi_uldivmod>
 80018de:	0002      	movs	r2, r0
 80018e0:	000b      	movs	r3, r1
 80018e2:	0013      	movs	r3, r2
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
 80018e6:	e037      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018e8:	4b26      	ldr	r3, [pc, #152]	; (8001984 <HAL_RCC_GetSysClockFreq+0x138>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2210      	movs	r2, #16
 80018ee:	4013      	ands	r3, r2
 80018f0:	d01a      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80018f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4a23      	ldr	r2, [pc, #140]	; (8001988 <HAL_RCC_GetSysClockFreq+0x13c>)
 80018fc:	2300      	movs	r3, #0
 80018fe:	68b8      	ldr	r0, [r7, #8]
 8001900:	68f9      	ldr	r1, [r7, #12]
 8001902:	f7fe fcad 	bl	8000260 <__aeabi_lmul>
 8001906:	0002      	movs	r2, r0
 8001908:	000b      	movs	r3, r1
 800190a:	0010      	movs	r0, r2
 800190c:	0019      	movs	r1, r3
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f7fe fc81 	bl	8000220 <__aeabi_uldivmod>
 800191e:	0002      	movs	r2, r0
 8001920:	000b      	movs	r3, r1
 8001922:	0013      	movs	r3, r2
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
 8001926:	e017      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192a:	0018      	movs	r0, r3
 800192c:	2300      	movs	r3, #0
 800192e:	0019      	movs	r1, r3
 8001930:	4a16      	ldr	r2, [pc, #88]	; (800198c <HAL_RCC_GetSysClockFreq+0x140>)
 8001932:	2300      	movs	r3, #0
 8001934:	f7fe fc94 	bl	8000260 <__aeabi_lmul>
 8001938:	0002      	movs	r2, r0
 800193a:	000b      	movs	r3, r1
 800193c:	0010      	movs	r0, r2
 800193e:	0019      	movs	r1, r3
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	001c      	movs	r4, r3
 8001944:	2300      	movs	r3, #0
 8001946:	001d      	movs	r5, r3
 8001948:	0022      	movs	r2, r4
 800194a:	002b      	movs	r3, r5
 800194c:	f7fe fc68 	bl	8000220 <__aeabi_uldivmod>
 8001950:	0002      	movs	r2, r0
 8001952:	000b      	movs	r3, r1
 8001954:	0013      	movs	r3, r2
 8001956:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800195c:	e00d      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_RCC_GetSysClockFreq+0x138>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	0b5b      	lsrs	r3, r3, #13
 8001964:	2207      	movs	r2, #7
 8001966:	4013      	ands	r3, r2
 8001968:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	3301      	adds	r3, #1
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	0212      	lsls	r2, r2, #8
 8001972:	409a      	lsls	r2, r3
 8001974:	0013      	movs	r3, r2
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001978:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800197a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800197c:	0018      	movs	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	b00e      	add	sp, #56	; 0x38
 8001982:	bdb0      	pop	{r4, r5, r7, pc}
 8001984:	40021000 	.word	0x40021000
 8001988:	003d0900 	.word	0x003d0900
 800198c:	00f42400 	.word	0x00f42400
 8001990:	007a1200 	.word	0x007a1200
 8001994:	08002e14 	.word	0x08002e14

08001998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800199c:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	20000008 	.word	0x20000008

080019ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019b0:	f7ff fff2 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80019b4:	0001      	movs	r1, r0
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	2207      	movs	r2, #7
 80019be:	4013      	ands	r3, r2
 80019c0:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019c2:	5cd3      	ldrb	r3, [r2, r3]
 80019c4:	40d9      	lsrs	r1, r3
 80019c6:	000b      	movs	r3, r1
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	40021000 	.word	0x40021000
 80019d4:	08002e0c 	.word	0x08002e0c

080019d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019dc:	f7ff ffdc 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80019e0:	0001      	movs	r1, r0
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	0adb      	lsrs	r3, r3, #11
 80019e8:	2207      	movs	r2, #7
 80019ea:	4013      	ands	r3, r2
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <HAL_RCC_GetPCLK2Freq+0x28>)
 80019ee:	5cd3      	ldrb	r3, [r2, r3]
 80019f0:	40d9      	lsrs	r1, r3
 80019f2:	000b      	movs	r3, r1
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	40021000 	.word	0x40021000
 8001a00:	08002e0c 	.word	0x08002e0c

08001a04 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001a0c:	2317      	movs	r3, #23
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d106      	bne.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	4013      	ands	r3, r2
 8001a28:	d100      	bne.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001a2a:	e104      	b.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2c:	4bb1      	ldr	r3, [pc, #708]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	055b      	lsls	r3, r3, #21
 8001a34:	4013      	ands	r3, r2
 8001a36:	d10a      	bne.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a38:	4bae      	ldr	r3, [pc, #696]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a3c:	4bad      	ldr	r3, [pc, #692]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a3e:	2180      	movs	r1, #128	; 0x80
 8001a40:	0549      	lsls	r1, r1, #21
 8001a42:	430a      	orrs	r2, r1
 8001a44:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a46:	2317      	movs	r3, #23
 8001a48:	18fb      	adds	r3, r7, r3
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4e:	4baa      	ldr	r3, [pc, #680]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4013      	ands	r3, r2
 8001a58:	d11a      	bne.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a5a:	4ba7      	ldr	r3, [pc, #668]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4ba6      	ldr	r3, [pc, #664]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	0049      	lsls	r1, r1, #1
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a68:	f7fe ff8c 	bl	8000984 <HAL_GetTick>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a70:	e008      	b.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a72:	f7fe ff87 	bl	8000984 <HAL_GetTick>
 8001a76:	0002      	movs	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b64      	cmp	r3, #100	; 0x64
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e133      	b.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a84:	4b9c      	ldr	r3, [pc, #624]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001a90:	4b98      	ldr	r3, [pc, #608]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	23c0      	movs	r3, #192	; 0xc0
 8001a96:	039b      	lsls	r3, r3, #14
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	23c0      	movs	r3, #192	; 0xc0
 8001aa2:	039b      	lsls	r3, r3, #14
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d107      	bne.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	23c0      	movs	r3, #192	; 0xc0
 8001ab2:	039b      	lsls	r3, r3, #14
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d013      	beq.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	23c0      	movs	r3, #192	; 0xc0
 8001ac2:	029b      	lsls	r3, r3, #10
 8001ac4:	401a      	ands	r2, r3
 8001ac6:	23c0      	movs	r3, #192	; 0xc0
 8001ac8:	029b      	lsls	r3, r3, #10
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d10a      	bne.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ace:	4b89      	ldr	r3, [pc, #548]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	029b      	lsls	r3, r3, #10
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	029b      	lsls	r3, r3, #10
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e103      	b.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001ae4:	4b83      	ldr	r3, [pc, #524]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ae6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ae8:	23c0      	movs	r3, #192	; 0xc0
 8001aea:	029b      	lsls	r3, r3, #10
 8001aec:	4013      	ands	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d049      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	23c0      	movs	r3, #192	; 0xc0
 8001afc:	029b      	lsls	r3, r3, #10
 8001afe:	4013      	ands	r3, r2
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d004      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d10d      	bne.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	23c0      	movs	r3, #192	; 0xc0
 8001b16:	029b      	lsls	r3, r3, #10
 8001b18:	4013      	ands	r3, r2
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d034      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d02e      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b2c:	4b71      	ldr	r3, [pc, #452]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b30:	4a72      	ldr	r2, [pc, #456]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b36:	4b6f      	ldr	r3, [pc, #444]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b3a:	4b6e      	ldr	r3, [pc, #440]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b3c:	2180      	movs	r1, #128	; 0x80
 8001b3e:	0309      	lsls	r1, r1, #12
 8001b40:	430a      	orrs	r2, r1
 8001b42:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b44:	4b6b      	ldr	r3, [pc, #428]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b48:	4b6a      	ldr	r3, [pc, #424]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b4a:	496d      	ldr	r1, [pc, #436]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001b50:	4b68      	ldr	r3, [pc, #416]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d014      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7fe ff10 	bl	8000984 <HAL_GetTick>
 8001b64:	0003      	movs	r3, r0
 8001b66:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b68:	e009      	b.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7fe ff0b 	bl	8000984 <HAL_GetTick>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	4a63      	ldr	r2, [pc, #396]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e0b6      	b.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b7e:	4b5d      	ldr	r3, [pc, #372]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	d0ef      	beq.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	4013      	ands	r3, r2
 8001b94:	d01f      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	23c0      	movs	r3, #192	; 0xc0
 8001b9c:	029b      	lsls	r3, r3, #10
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	23c0      	movs	r3, #192	; 0xc0
 8001ba2:	029b      	lsls	r3, r3, #10
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d10c      	bne.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001ba8:	4b52      	ldr	r3, [pc, #328]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a56      	ldr	r2, [pc, #344]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	23c0      	movs	r3, #192	; 0xc0
 8001bb8:	039b      	lsls	r3, r3, #14
 8001bba:	401a      	ands	r2, r3
 8001bbc:	4b4d      	ldr	r3, [pc, #308]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bc4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	23c0      	movs	r3, #192	; 0xc0
 8001bcc:	029b      	lsls	r3, r3, #10
 8001bce:	401a      	ands	r2, r3
 8001bd0:	4b48      	ldr	r3, [pc, #288]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d01f      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	23c0      	movs	r3, #192	; 0xc0
 8001be6:	029b      	lsls	r3, r3, #10
 8001be8:	401a      	ands	r2, r3
 8001bea:	23c0      	movs	r3, #192	; 0xc0
 8001bec:	029b      	lsls	r3, r3, #10
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001bf2:	4b40      	ldr	r3, [pc, #256]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a44      	ldr	r2, [pc, #272]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	23c0      	movs	r3, #192	; 0xc0
 8001c02:	039b      	lsls	r3, r3, #14
 8001c04:	401a      	ands	r2, r3
 8001c06:	4b3b      	ldr	r3, [pc, #236]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	4b39      	ldr	r3, [pc, #228]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c0e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	23c0      	movs	r3, #192	; 0xc0
 8001c16:	029b      	lsls	r3, r3, #10
 8001c18:	401a      	ands	r2, r3
 8001c1a:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c20:	2317      	movs	r3, #23
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d105      	bne.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2a:	4b32      	ldr	r3, [pc, #200]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c2e:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c30:	4936      	ldr	r1, [pc, #216]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001c32:	400a      	ands	r2, r1
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d009      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c40:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c44:	2203      	movs	r2, #3
 8001c46:	4393      	bics	r3, r2
 8001c48:	0019      	movs	r1, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c50:	430a      	orrs	r2, r1
 8001c52:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2202      	movs	r2, #2
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d009      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c5e:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	220c      	movs	r2, #12
 8001c64:	4393      	bics	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2204      	movs	r2, #4
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d009      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	4a23      	ldr	r2, [pc, #140]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695a      	ldr	r2, [r3, #20]
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2208      	movs	r2, #8
 8001c96:	4013      	ands	r3, r2
 8001c98:	d009      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	4a1d      	ldr	r2, [pc, #116]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699a      	ldr	r2, [r3, #24]
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001caa:	430a      	orrs	r2, r1
 8001cac:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2240      	movs	r2, #64	; 0x40
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d009      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbc:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1a      	ldr	r2, [r3, #32]
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2280      	movs	r2, #128	; 0x80
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d009      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001cd6:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cda:	4a10      	ldr	r2, [pc, #64]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	0019      	movs	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69da      	ldr	r2, [r3, #28]
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	0018      	movs	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b006      	add	sp, #24
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40007000 	.word	0x40007000
 8001cfc:	fffcffff 	.word	0xfffcffff
 8001d00:	fff7ffff 	.word	0xfff7ffff
 8001d04:	00001388 	.word	0x00001388
 8001d08:	ffcfffff 	.word	0xffcfffff
 8001d0c:	efffffff 	.word	0xefffffff
 8001d10:	fffff3ff 	.word	0xfffff3ff
 8001d14:	ffffcfff 	.word	0xffffcfff
 8001d18:	fbffffff 	.word	0xfbffffff
 8001d1c:	fff3ffff 	.word	0xfff3ffff

08001d20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e083      	b.n	8001e3a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	2382      	movs	r3, #130	; 0x82
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d009      	beq.n	8001d5a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	61da      	str	r2, [r3, #28]
 8001d4c:	e005      	b.n	8001d5a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2251      	movs	r2, #81	; 0x51
 8001d64:	5c9b      	ldrb	r3, [r3, r2]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d107      	bne.n	8001d7c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2250      	movs	r2, #80	; 0x50
 8001d70:	2100      	movs	r1, #0
 8001d72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	0018      	movs	r0, r3
 8001d78:	f7fe fcce 	bl	8000718 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2251      	movs	r2, #81	; 0x51
 8001d80:	2102      	movs	r1, #2
 8001d82:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2140      	movs	r1, #64	; 0x40
 8001d90:	438a      	bics	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	2382      	movs	r3, #130	; 0x82
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	401a      	ands	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6899      	ldr	r1, [r3, #8]
 8001da2:	2384      	movs	r3, #132	; 0x84
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	400b      	ands	r3, r1
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68d9      	ldr	r1, [r3, #12]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	400b      	ands	r3, r1
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	2102      	movs	r1, #2
 8001dbc:	400b      	ands	r3, r1
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	400b      	ands	r3, r1
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6999      	ldr	r1, [r3, #24]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	400b      	ands	r3, r1
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2138      	movs	r1, #56	; 0x38
 8001ddc:	400b      	ands	r3, r1
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	2180      	movs	r1, #128	; 0x80
 8001de6:	400b      	ands	r3, r1
 8001de8:	431a      	orrs	r2, r3
 8001dea:	0011      	movs	r1, r2
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	019b      	lsls	r3, r3, #6
 8001df4:	401a      	ands	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	0c1b      	lsrs	r3, r3, #16
 8001e04:	2204      	movs	r2, #4
 8001e06:	4013      	ands	r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	2210      	movs	r2, #16
 8001e10:	401a      	ands	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69da      	ldr	r2, [r3, #28]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4907      	ldr	r1, [pc, #28]	; (8001e44 <HAL_SPI_Init+0x124>)
 8001e26:	400a      	ands	r2, r1
 8001e28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2251      	movs	r2, #81	; 0x51
 8001e34:	2101      	movs	r1, #1
 8001e36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b002      	add	sp, #8
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	fffff7ff 	.word	0xfffff7ff

08001e48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	; 0x30
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	001a      	movs	r2, r3
 8001e56:	1cbb      	adds	r3, r7, #2
 8001e58:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e5e:	232b      	movs	r3, #43	; 0x2b
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2250      	movs	r2, #80	; 0x50
 8001e6a:	5c9b      	ldrb	r3, [r3, r2]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_SPI_TransmitReceive+0x2c>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e1b0      	b.n	80021d6 <HAL_SPI_TransmitReceive+0x38e>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2250      	movs	r2, #80	; 0x50
 8001e78:	2101      	movs	r1, #1
 8001e7a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e7c:	f7fe fd82 	bl	8000984 <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e84:	2023      	movs	r0, #35	; 0x23
 8001e86:	183b      	adds	r3, r7, r0
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	2151      	movs	r1, #81	; 0x51
 8001e8c:	5c52      	ldrb	r2, [r2, r1]
 8001e8e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001e96:	231a      	movs	r3, #26
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	1cba      	adds	r2, r7, #2
 8001e9c:	8812      	ldrh	r2, [r2, #0]
 8001e9e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ea0:	183b      	adds	r3, r7, r0
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d011      	beq.n	8001ecc <HAL_SPI_TransmitReceive+0x84>
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	2382      	movs	r3, #130	; 0x82
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d107      	bne.n	8001ec2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d103      	bne.n	8001ec2 <HAL_SPI_TransmitReceive+0x7a>
 8001eba:	183b      	adds	r3, r7, r0
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d004      	beq.n	8001ecc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001ec2:	232b      	movs	r3, #43	; 0x2b
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	701a      	strb	r2, [r3, #0]
    goto error;
 8001eca:	e17d      	b.n	80021c8 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <HAL_SPI_TransmitReceive+0x98>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_SPI_TransmitReceive+0x98>
 8001ed8:	1cbb      	adds	r3, r7, #2
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d104      	bne.n	8001eea <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001ee0:	232b      	movs	r3, #43	; 0x2b
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ee8:	e16e      	b.n	80021c8 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2251      	movs	r2, #81	; 0x51
 8001eee:	5c9b      	ldrb	r3, [r3, r2]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d003      	beq.n	8001efe <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2251      	movs	r2, #81	; 0x51
 8001efa:	2105      	movs	r1, #5
 8001efc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1cba      	adds	r2, r7, #2
 8001f0e:	8812      	ldrh	r2, [r2, #0]
 8001f10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1cba      	adds	r2, r7, #2
 8001f16:	8812      	ldrh	r2, [r2, #0]
 8001f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1cba      	adds	r2, r7, #2
 8001f24:	8812      	ldrh	r2, [r2, #0]
 8001f26:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1cba      	adds	r2, r7, #2
 8001f2c:	8812      	ldrh	r2, [r2, #0]
 8001f2e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2240      	movs	r2, #64	; 0x40
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b40      	cmp	r3, #64	; 0x40
 8001f48:	d007      	beq.n	8001f5a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2140      	movs	r1, #64	; 0x40
 8001f56:	430a      	orrs	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d000      	beq.n	8001f68 <HAL_SPI_TransmitReceive+0x120>
 8001f66:	e07f      	b.n	8002068 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_SPI_TransmitReceive+0x134>
 8001f70:	231a      	movs	r3, #26
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d000      	beq.n	8001f7c <HAL_SPI_TransmitReceive+0x134>
 8001f7a:	e06a      	b.n	8002052 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	881a      	ldrh	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	1c9a      	adds	r2, r3, #2
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fa0:	e057      	b.n	8002052 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d11b      	bne.n	8001fe8 <HAL_SPI_TransmitReceive+0x1a0>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d016      	beq.n	8001fe8 <HAL_SPI_TransmitReceive+0x1a0>
 8001fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d113      	bne.n	8001fe8 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	881a      	ldrh	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	1c9a      	adds	r2, r3, #2
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d119      	bne.n	800202a <HAL_SPI_TransmitReceive+0x1e2>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d014      	beq.n	800202a <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200a:	b292      	uxth	r2, r2
 800200c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002012:	1c9a      	adds	r2, r3, #2
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002026:	2301      	movs	r3, #1
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800202a:	f7fe fcab 	bl	8000984 <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002036:	429a      	cmp	r2, r3
 8002038:	d80b      	bhi.n	8002052 <HAL_SPI_TransmitReceive+0x20a>
 800203a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203c:	3301      	adds	r3, #1
 800203e:	d008      	beq.n	8002052 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8002040:	232b      	movs	r3, #43	; 0x2b
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	2203      	movs	r2, #3
 8002046:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2251      	movs	r2, #81	; 0x51
 800204c:	2101      	movs	r1, #1
 800204e:	5499      	strb	r1, [r3, r2]
        goto error;
 8002050:	e0ba      	b.n	80021c8 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002056:	b29b      	uxth	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1a2      	bne.n	8001fa2 <HAL_SPI_TransmitReceive+0x15a>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d19d      	bne.n	8001fa2 <HAL_SPI_TransmitReceive+0x15a>
 8002066:	e083      	b.n	8002170 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_SPI_TransmitReceive+0x234>
 8002070:	231a      	movs	r3, #26
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d000      	beq.n	800207c <HAL_SPI_TransmitReceive+0x234>
 800207a:	e06f      	b.n	800215c <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	330c      	adds	r3, #12
 8002086:	7812      	ldrb	r2, [r2, #0]
 8002088:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020a2:	e05b      	b.n	800215c <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2202      	movs	r2, #2
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d11c      	bne.n	80020ec <HAL_SPI_TransmitReceive+0x2a4>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d017      	beq.n	80020ec <HAL_SPI_TransmitReceive+0x2a4>
 80020bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d114      	bne.n	80020ec <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	330c      	adds	r3, #12
 80020cc:	7812      	ldrb	r2, [r2, #0]
 80020ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2201      	movs	r2, #1
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d119      	bne.n	800212e <HAL_SPI_TransmitReceive+0x2e6>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d014      	beq.n	800212e <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002120:	b29b      	uxth	r3, r3
 8002122:	3b01      	subs	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800212a:	2301      	movs	r3, #1
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800212e:	f7fe fc29 	bl	8000984 <HAL_GetTick>
 8002132:	0002      	movs	r2, r0
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800213a:	429a      	cmp	r2, r3
 800213c:	d802      	bhi.n	8002144 <HAL_SPI_TransmitReceive+0x2fc>
 800213e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002140:	3301      	adds	r3, #1
 8002142:	d102      	bne.n	800214a <HAL_SPI_TransmitReceive+0x302>
 8002144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002146:	2b00      	cmp	r3, #0
 8002148:	d108      	bne.n	800215c <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 800214a:	232b      	movs	r3, #43	; 0x2b
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	2203      	movs	r2, #3
 8002150:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2251      	movs	r2, #81	; 0x51
 8002156:	2101      	movs	r1, #1
 8002158:	5499      	strb	r1, [r3, r2]
        goto error;
 800215a:	e035      	b.n	80021c8 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d19e      	bne.n	80020a4 <HAL_SPI_TransmitReceive+0x25c>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d199      	bne.n	80020a4 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002172:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	0018      	movs	r0, r3
 8002178:	f000 f8c0 	bl	80022fc <SPI_EndRxTxTransaction>
 800217c:	1e03      	subs	r3, r0, #0
 800217e:	d007      	beq.n	8002190 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8002180:	232b      	movs	r3, #43	; 0x2b
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800218e:	e01b      	b.n	80021c8 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10a      	bne.n	80021ae <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d004      	beq.n	80021c0 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 80021b6:	232b      	movs	r3, #43	; 0x2b
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	2201      	movs	r2, #1
 80021bc:	701a      	strb	r2, [r3, #0]
 80021be:	e003      	b.n	80021c8 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2251      	movs	r2, #81	; 0x51
 80021c4:	2101      	movs	r1, #1
 80021c6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2250      	movs	r2, #80	; 0x50
 80021cc:	2100      	movs	r1, #0
 80021ce:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80021d0:	232b      	movs	r3, #43	; 0x2b
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	781b      	ldrb	r3, [r3, #0]
}
 80021d6:	0018      	movs	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	b00c      	add	sp, #48	; 0x30
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	1dfb      	adds	r3, r7, #7
 80021ee:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80021f0:	f7fe fbc8 	bl	8000984 <HAL_GetTick>
 80021f4:	0002      	movs	r2, r0
 80021f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	18d3      	adds	r3, r2, r3
 80021fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002200:	f7fe fbc0 	bl	8000984 <HAL_GetTick>
 8002204:	0003      	movs	r3, r0
 8002206:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002208:	4b3a      	ldr	r3, [pc, #232]	; (80022f4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	015b      	lsls	r3, r3, #5
 800220e:	0d1b      	lsrs	r3, r3, #20
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	4353      	muls	r3, r2
 8002214:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002216:	e058      	b.n	80022ca <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	3301      	adds	r3, #1
 800221c:	d055      	beq.n	80022ca <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800221e:	f7fe fbb1 	bl	8000984 <HAL_GetTick>
 8002222:	0002      	movs	r2, r0
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	429a      	cmp	r2, r3
 800222c:	d902      	bls.n	8002234 <SPI_WaitFlagStateUntilTimeout+0x54>
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d142      	bne.n	80022ba <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	21e0      	movs	r1, #224	; 0xe0
 8002240:	438a      	bics	r2, r1
 8002242:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	2382      	movs	r3, #130	; 0x82
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	429a      	cmp	r2, r3
 800224e:	d113      	bne.n	8002278 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	021b      	lsls	r3, r3, #8
 8002258:	429a      	cmp	r2, r3
 800225a:	d005      	beq.n	8002268 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	429a      	cmp	r2, r3
 8002266:	d107      	bne.n	8002278 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2140      	movs	r1, #64	; 0x40
 8002274:	438a      	bics	r2, r1
 8002276:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	019b      	lsls	r3, r3, #6
 8002280:	429a      	cmp	r2, r3
 8002282:	d110      	bne.n	80022a6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	491a      	ldr	r1, [pc, #104]	; (80022f8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002290:	400a      	ands	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2180      	movs	r1, #128	; 0x80
 80022a0:	0189      	lsls	r1, r1, #6
 80022a2:	430a      	orrs	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2251      	movs	r2, #81	; 0x51
 80022aa:	2101      	movs	r1, #1
 80022ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2250      	movs	r2, #80	; 0x50
 80022b2:	2100      	movs	r1, #0
 80022b4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e017      	b.n	80022ea <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	4013      	ands	r3, r2
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	425a      	negs	r2, r3
 80022da:	4153      	adcs	r3, r2
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	001a      	movs	r2, r3
 80022e0:	1dfb      	adds	r3, r7, #7
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d197      	bne.n	8002218 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	0018      	movs	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	b008      	add	sp, #32
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	20000008 	.word	0x20000008
 80022f8:	ffffdfff 	.word	0xffffdfff

080022fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <SPI_EndRxTxTransaction+0x84>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	491d      	ldr	r1, [pc, #116]	; (8002384 <SPI_EndRxTxTransaction+0x88>)
 800230e:	0018      	movs	r0, r3
 8002310:	f7fd fefa 	bl	8000108 <__udivsi3>
 8002314:	0003      	movs	r3, r0
 8002316:	001a      	movs	r2, r3
 8002318:	0013      	movs	r3, r2
 800231a:	015b      	lsls	r3, r3, #5
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	189b      	adds	r3, r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	2382      	movs	r3, #130	; 0x82
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	429a      	cmp	r2, r3
 8002330:	d112      	bne.n	8002358 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	0013      	movs	r3, r2
 800233c:	2200      	movs	r2, #0
 800233e:	2180      	movs	r1, #128	; 0x80
 8002340:	f7ff ff4e 	bl	80021e0 <SPI_WaitFlagStateUntilTimeout>
 8002344:	1e03      	subs	r3, r0, #0
 8002346:	d016      	beq.n	8002376 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234c:	2220      	movs	r2, #32
 800234e:	431a      	orrs	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e00f      	b.n	8002378 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3b01      	subs	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2280      	movs	r2, #128	; 0x80
 800236c:	4013      	ands	r3, r2
 800236e:	2b80      	cmp	r3, #128	; 0x80
 8002370:	d0f2      	beq.n	8002358 <SPI_EndRxTxTransaction+0x5c>
 8002372:	e000      	b.n	8002376 <SPI_EndRxTxTransaction+0x7a>
        break;
 8002374:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b006      	add	sp, #24
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000008 	.word	0x20000008
 8002384:	016e3600 	.word	0x016e3600

08002388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e044      	b.n	8002424 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d107      	bne.n	80023b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2278      	movs	r2, #120	; 0x78
 80023a6:	2100      	movs	r1, #0
 80023a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f7fe f9f9 	bl	80007a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2224      	movs	r2, #36	; 0x24
 80023b6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2101      	movs	r1, #1
 80023c4:	438a      	bics	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	0018      	movs	r0, r3
 80023cc:	f000 f830 	bl	8002430 <UART_SetConfig>
 80023d0:	0003      	movs	r3, r0
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e024      	b.n	8002424 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f000 faa7 	bl	8002938 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	490d      	ldr	r1, [pc, #52]	; (800242c <HAL_UART_Init+0xa4>)
 80023f6:	400a      	ands	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	212a      	movs	r1, #42	; 0x2a
 8002406:	438a      	bics	r2, r1
 8002408:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2101      	movs	r1, #1
 8002416:	430a      	orrs	r2, r1
 8002418:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0018      	movs	r0, r3
 800241e:	f000 fb3f 	bl	8002aa0 <UART_CheckIdleState>
 8002422:	0003      	movs	r3, r0
}
 8002424:	0018      	movs	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	b002      	add	sp, #8
 800242a:	bd80      	pop	{r7, pc}
 800242c:	ffffb7ff 	.word	0xffffb7ff

08002430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	b08e      	sub	sp, #56	; 0x38
 8002434:	af00      	add	r7, sp, #0
 8002436:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002438:	231a      	movs	r3, #26
 800243a:	2218      	movs	r2, #24
 800243c:	189b      	adds	r3, r3, r2
 800243e:	19db      	adds	r3, r3, r7
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	431a      	orrs	r2, r3
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	431a      	orrs	r2, r3
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	4313      	orrs	r3, r2
 800245a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4ac6      	ldr	r2, [pc, #792]	; (800277c <UART_SetConfig+0x34c>)
 8002464:	4013      	ands	r3, r2
 8002466:	0019      	movs	r1, r3
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800246e:	430a      	orrs	r2, r1
 8002470:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4ac1      	ldr	r2, [pc, #772]	; (8002780 <UART_SetConfig+0x350>)
 800247a:	4013      	ands	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4abb      	ldr	r2, [pc, #748]	; (8002784 <UART_SetConfig+0x354>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d004      	beq.n	80024a4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024a0:	4313      	orrs	r3, r2
 80024a2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	4ab7      	ldr	r2, [pc, #732]	; (8002788 <UART_SetConfig+0x358>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	0019      	movs	r1, r3
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024b6:	430a      	orrs	r2, r1
 80024b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4ab3      	ldr	r2, [pc, #716]	; (800278c <UART_SetConfig+0x35c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d131      	bne.n	8002528 <UART_SetConfig+0xf8>
 80024c4:	4bb2      	ldr	r3, [pc, #712]	; (8002790 <UART_SetConfig+0x360>)
 80024c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c8:	2203      	movs	r2, #3
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d01d      	beq.n	800250c <UART_SetConfig+0xdc>
 80024d0:	d823      	bhi.n	800251a <UART_SetConfig+0xea>
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d00c      	beq.n	80024f0 <UART_SetConfig+0xc0>
 80024d6:	d820      	bhi.n	800251a <UART_SetConfig+0xea>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <UART_SetConfig+0xb2>
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d00e      	beq.n	80024fe <UART_SetConfig+0xce>
 80024e0:	e01b      	b.n	800251a <UART_SetConfig+0xea>
 80024e2:	231b      	movs	r3, #27
 80024e4:	2218      	movs	r2, #24
 80024e6:	189b      	adds	r3, r3, r2
 80024e8:	19db      	adds	r3, r3, r7
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	e09c      	b.n	800262a <UART_SetConfig+0x1fa>
 80024f0:	231b      	movs	r3, #27
 80024f2:	2218      	movs	r2, #24
 80024f4:	189b      	adds	r3, r3, r2
 80024f6:	19db      	adds	r3, r3, r7
 80024f8:	2202      	movs	r2, #2
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	e095      	b.n	800262a <UART_SetConfig+0x1fa>
 80024fe:	231b      	movs	r3, #27
 8002500:	2218      	movs	r2, #24
 8002502:	189b      	adds	r3, r3, r2
 8002504:	19db      	adds	r3, r3, r7
 8002506:	2204      	movs	r2, #4
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	e08e      	b.n	800262a <UART_SetConfig+0x1fa>
 800250c:	231b      	movs	r3, #27
 800250e:	2218      	movs	r2, #24
 8002510:	189b      	adds	r3, r3, r2
 8002512:	19db      	adds	r3, r3, r7
 8002514:	2208      	movs	r2, #8
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e087      	b.n	800262a <UART_SetConfig+0x1fa>
 800251a:	231b      	movs	r3, #27
 800251c:	2218      	movs	r2, #24
 800251e:	189b      	adds	r3, r3, r2
 8002520:	19db      	adds	r3, r3, r7
 8002522:	2210      	movs	r2, #16
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	e080      	b.n	800262a <UART_SetConfig+0x1fa>
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a99      	ldr	r2, [pc, #612]	; (8002794 <UART_SetConfig+0x364>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d131      	bne.n	8002596 <UART_SetConfig+0x166>
 8002532:	4b97      	ldr	r3, [pc, #604]	; (8002790 <UART_SetConfig+0x360>)
 8002534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002536:	220c      	movs	r2, #12
 8002538:	4013      	ands	r3, r2
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d01d      	beq.n	800257a <UART_SetConfig+0x14a>
 800253e:	d823      	bhi.n	8002588 <UART_SetConfig+0x158>
 8002540:	2b08      	cmp	r3, #8
 8002542:	d00c      	beq.n	800255e <UART_SetConfig+0x12e>
 8002544:	d820      	bhi.n	8002588 <UART_SetConfig+0x158>
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <UART_SetConfig+0x120>
 800254a:	2b04      	cmp	r3, #4
 800254c:	d00e      	beq.n	800256c <UART_SetConfig+0x13c>
 800254e:	e01b      	b.n	8002588 <UART_SetConfig+0x158>
 8002550:	231b      	movs	r3, #27
 8002552:	2218      	movs	r2, #24
 8002554:	189b      	adds	r3, r3, r2
 8002556:	19db      	adds	r3, r3, r7
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
 800255c:	e065      	b.n	800262a <UART_SetConfig+0x1fa>
 800255e:	231b      	movs	r3, #27
 8002560:	2218      	movs	r2, #24
 8002562:	189b      	adds	r3, r3, r2
 8002564:	19db      	adds	r3, r3, r7
 8002566:	2202      	movs	r2, #2
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	e05e      	b.n	800262a <UART_SetConfig+0x1fa>
 800256c:	231b      	movs	r3, #27
 800256e:	2218      	movs	r2, #24
 8002570:	189b      	adds	r3, r3, r2
 8002572:	19db      	adds	r3, r3, r7
 8002574:	2204      	movs	r2, #4
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	e057      	b.n	800262a <UART_SetConfig+0x1fa>
 800257a:	231b      	movs	r3, #27
 800257c:	2218      	movs	r2, #24
 800257e:	189b      	adds	r3, r3, r2
 8002580:	19db      	adds	r3, r3, r7
 8002582:	2208      	movs	r2, #8
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e050      	b.n	800262a <UART_SetConfig+0x1fa>
 8002588:	231b      	movs	r3, #27
 800258a:	2218      	movs	r2, #24
 800258c:	189b      	adds	r3, r3, r2
 800258e:	19db      	adds	r3, r3, r7
 8002590:	2210      	movs	r2, #16
 8002592:	701a      	strb	r2, [r3, #0]
 8002594:	e049      	b.n	800262a <UART_SetConfig+0x1fa>
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a7a      	ldr	r2, [pc, #488]	; (8002784 <UART_SetConfig+0x354>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d13e      	bne.n	800261e <UART_SetConfig+0x1ee>
 80025a0:	4b7b      	ldr	r3, [pc, #492]	; (8002790 <UART_SetConfig+0x360>)
 80025a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025a4:	23c0      	movs	r3, #192	; 0xc0
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	4013      	ands	r3, r2
 80025aa:	22c0      	movs	r2, #192	; 0xc0
 80025ac:	0112      	lsls	r2, r2, #4
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d027      	beq.n	8002602 <UART_SetConfig+0x1d2>
 80025b2:	22c0      	movs	r2, #192	; 0xc0
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d82a      	bhi.n	8002610 <UART_SetConfig+0x1e0>
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	0112      	lsls	r2, r2, #4
 80025be:	4293      	cmp	r3, r2
 80025c0:	d011      	beq.n	80025e6 <UART_SetConfig+0x1b6>
 80025c2:	2280      	movs	r2, #128	; 0x80
 80025c4:	0112      	lsls	r2, r2, #4
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d822      	bhi.n	8002610 <UART_SetConfig+0x1e0>
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d004      	beq.n	80025d8 <UART_SetConfig+0x1a8>
 80025ce:	2280      	movs	r2, #128	; 0x80
 80025d0:	00d2      	lsls	r2, r2, #3
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00e      	beq.n	80025f4 <UART_SetConfig+0x1c4>
 80025d6:	e01b      	b.n	8002610 <UART_SetConfig+0x1e0>
 80025d8:	231b      	movs	r3, #27
 80025da:	2218      	movs	r2, #24
 80025dc:	189b      	adds	r3, r3, r2
 80025de:	19db      	adds	r3, r3, r7
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
 80025e4:	e021      	b.n	800262a <UART_SetConfig+0x1fa>
 80025e6:	231b      	movs	r3, #27
 80025e8:	2218      	movs	r2, #24
 80025ea:	189b      	adds	r3, r3, r2
 80025ec:	19db      	adds	r3, r3, r7
 80025ee:	2202      	movs	r2, #2
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	e01a      	b.n	800262a <UART_SetConfig+0x1fa>
 80025f4:	231b      	movs	r3, #27
 80025f6:	2218      	movs	r2, #24
 80025f8:	189b      	adds	r3, r3, r2
 80025fa:	19db      	adds	r3, r3, r7
 80025fc:	2204      	movs	r2, #4
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e013      	b.n	800262a <UART_SetConfig+0x1fa>
 8002602:	231b      	movs	r3, #27
 8002604:	2218      	movs	r2, #24
 8002606:	189b      	adds	r3, r3, r2
 8002608:	19db      	adds	r3, r3, r7
 800260a:	2208      	movs	r2, #8
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	e00c      	b.n	800262a <UART_SetConfig+0x1fa>
 8002610:	231b      	movs	r3, #27
 8002612:	2218      	movs	r2, #24
 8002614:	189b      	adds	r3, r3, r2
 8002616:	19db      	adds	r3, r3, r7
 8002618:	2210      	movs	r2, #16
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	e005      	b.n	800262a <UART_SetConfig+0x1fa>
 800261e:	231b      	movs	r3, #27
 8002620:	2218      	movs	r2, #24
 8002622:	189b      	adds	r3, r3, r2
 8002624:	19db      	adds	r3, r3, r7
 8002626:	2210      	movs	r2, #16
 8002628:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a55      	ldr	r2, [pc, #340]	; (8002784 <UART_SetConfig+0x354>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d000      	beq.n	8002636 <UART_SetConfig+0x206>
 8002634:	e084      	b.n	8002740 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002636:	231b      	movs	r3, #27
 8002638:	2218      	movs	r2, #24
 800263a:	189b      	adds	r3, r3, r2
 800263c:	19db      	adds	r3, r3, r7
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b08      	cmp	r3, #8
 8002642:	d01d      	beq.n	8002680 <UART_SetConfig+0x250>
 8002644:	dc20      	bgt.n	8002688 <UART_SetConfig+0x258>
 8002646:	2b04      	cmp	r3, #4
 8002648:	d015      	beq.n	8002676 <UART_SetConfig+0x246>
 800264a:	dc1d      	bgt.n	8002688 <UART_SetConfig+0x258>
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <UART_SetConfig+0x226>
 8002650:	2b02      	cmp	r3, #2
 8002652:	d005      	beq.n	8002660 <UART_SetConfig+0x230>
 8002654:	e018      	b.n	8002688 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002656:	f7ff f9a9 	bl	80019ac <HAL_RCC_GetPCLK1Freq>
 800265a:	0003      	movs	r3, r0
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800265e:	e01c      	b.n	800269a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002660:	4b4b      	ldr	r3, [pc, #300]	; (8002790 <UART_SetConfig+0x360>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2210      	movs	r2, #16
 8002666:	4013      	ands	r3, r2
 8002668:	d002      	beq.n	8002670 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800266a:	4b4b      	ldr	r3, [pc, #300]	; (8002798 <UART_SetConfig+0x368>)
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800266e:	e014      	b.n	800269a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002670:	4b4a      	ldr	r3, [pc, #296]	; (800279c <UART_SetConfig+0x36c>)
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002674:	e011      	b.n	800269a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002676:	f7ff f8e9 	bl	800184c <HAL_RCC_GetSysClockFreq>
 800267a:	0003      	movs	r3, r0
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800267e:	e00c      	b.n	800269a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002686:	e008      	b.n	800269a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800268c:	231a      	movs	r3, #26
 800268e:	2218      	movs	r2, #24
 8002690:	189b      	adds	r3, r3, r2
 8002692:	19db      	adds	r3, r3, r7
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
        break;
 8002698:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269c:	2b00      	cmp	r3, #0
 800269e:	d100      	bne.n	80026a2 <UART_SetConfig+0x272>
 80026a0:	e132      	b.n	8002908 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	0013      	movs	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	189b      	adds	r3, r3, r2
 80026ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d305      	bcc.n	80026be <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80026b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d906      	bls.n	80026cc <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80026be:	231a      	movs	r3, #26
 80026c0:	2218      	movs	r2, #24
 80026c2:	189b      	adds	r3, r3, r2
 80026c4:	19db      	adds	r3, r3, r7
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	e11d      	b.n	8002908 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80026cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	6939      	ldr	r1, [r7, #16]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	000b      	movs	r3, r1
 80026da:	0e1b      	lsrs	r3, r3, #24
 80026dc:	0010      	movs	r0, r2
 80026de:	0205      	lsls	r5, r0, #8
 80026e0:	431d      	orrs	r5, r3
 80026e2:	000b      	movs	r3, r1
 80026e4:	021c      	lsls	r4, r3, #8
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	085b      	lsrs	r3, r3, #1
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68b8      	ldr	r0, [r7, #8]
 80026f4:	68f9      	ldr	r1, [r7, #12]
 80026f6:	1900      	adds	r0, r0, r4
 80026f8:	4169      	adcs	r1, r5
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	2300      	movs	r3, #0
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f7fd fd8a 	bl	8000220 <__aeabi_uldivmod>
 800270c:	0002      	movs	r2, r0
 800270e:	000b      	movs	r3, r1
 8002710:	0013      	movs	r3, r2
 8002712:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002716:	23c0      	movs	r3, #192	; 0xc0
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	429a      	cmp	r2, r3
 800271c:	d309      	bcc.n	8002732 <UART_SetConfig+0x302>
 800271e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	035b      	lsls	r3, r3, #13
 8002724:	429a      	cmp	r2, r3
 8002726:	d204      	bcs.n	8002732 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800272e:	60da      	str	r2, [r3, #12]
 8002730:	e0ea      	b.n	8002908 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002732:	231a      	movs	r3, #26
 8002734:	2218      	movs	r2, #24
 8002736:	189b      	adds	r3, r3, r2
 8002738:	19db      	adds	r3, r3, r7
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	e0e3      	b.n	8002908 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	69da      	ldr	r2, [r3, #28]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	429a      	cmp	r2, r3
 800274a:	d000      	beq.n	800274e <UART_SetConfig+0x31e>
 800274c:	e085      	b.n	800285a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800274e:	231b      	movs	r3, #27
 8002750:	2218      	movs	r2, #24
 8002752:	189b      	adds	r3, r3, r2
 8002754:	19db      	adds	r3, r3, r7
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d837      	bhi.n	80027cc <UART_SetConfig+0x39c>
 800275c:	009a      	lsls	r2, r3, #2
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <UART_SetConfig+0x370>)
 8002760:	18d3      	adds	r3, r2, r3
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002766:	f7ff f921 	bl	80019ac <HAL_RCC_GetPCLK1Freq>
 800276a:	0003      	movs	r3, r0
 800276c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800276e:	e036      	b.n	80027de <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002770:	f7ff f932 	bl	80019d8 <HAL_RCC_GetPCLK2Freq>
 8002774:	0003      	movs	r3, r0
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002778:	e031      	b.n	80027de <UART_SetConfig+0x3ae>
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	efff69f3 	.word	0xefff69f3
 8002780:	ffffcfff 	.word	0xffffcfff
 8002784:	40004800 	.word	0x40004800
 8002788:	fffff4ff 	.word	0xfffff4ff
 800278c:	40013800 	.word	0x40013800
 8002790:	40021000 	.word	0x40021000
 8002794:	40004400 	.word	0x40004400
 8002798:	003d0900 	.word	0x003d0900
 800279c:	00f42400 	.word	0x00f42400
 80027a0:	08002e20 	.word	0x08002e20
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027a4:	4b60      	ldr	r3, [pc, #384]	; (8002928 <UART_SetConfig+0x4f8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2210      	movs	r2, #16
 80027aa:	4013      	ands	r3, r2
 80027ac:	d002      	beq.n	80027b4 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80027ae:	4b5f      	ldr	r3, [pc, #380]	; (800292c <UART_SetConfig+0x4fc>)
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80027b2:	e014      	b.n	80027de <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80027b4:	4b5e      	ldr	r3, [pc, #376]	; (8002930 <UART_SetConfig+0x500>)
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027b8:	e011      	b.n	80027de <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027ba:	f7ff f847 	bl	800184c <HAL_RCC_GetSysClockFreq>
 80027be:	0003      	movs	r3, r0
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027c2:	e00c      	b.n	80027de <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027ca:	e008      	b.n	80027de <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80027d0:	231a      	movs	r3, #26
 80027d2:	2218      	movs	r2, #24
 80027d4:	189b      	adds	r3, r3, r2
 80027d6:	19db      	adds	r3, r3, r7
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
        break;
 80027dc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d100      	bne.n	80027e6 <UART_SetConfig+0x3b6>
 80027e4:	e090      	b.n	8002908 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	005a      	lsls	r2, r3, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	18d2      	adds	r2, r2, r3
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	0019      	movs	r1, r3
 80027f8:	0010      	movs	r0, r2
 80027fa:	f7fd fc85 	bl	8000108 <__udivsi3>
 80027fe:	0003      	movs	r3, r0
 8002800:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	2b0f      	cmp	r3, #15
 8002806:	d921      	bls.n	800284c <UART_SetConfig+0x41c>
 8002808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	025b      	lsls	r3, r3, #9
 800280e:	429a      	cmp	r2, r3
 8002810:	d21c      	bcs.n	800284c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	b29a      	uxth	r2, r3
 8002816:	200e      	movs	r0, #14
 8002818:	2418      	movs	r4, #24
 800281a:	1903      	adds	r3, r0, r4
 800281c:	19db      	adds	r3, r3, r7
 800281e:	210f      	movs	r1, #15
 8002820:	438a      	bics	r2, r1
 8002822:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	b29b      	uxth	r3, r3
 800282a:	2207      	movs	r2, #7
 800282c:	4013      	ands	r3, r2
 800282e:	b299      	uxth	r1, r3
 8002830:	1903      	adds	r3, r0, r4
 8002832:	19db      	adds	r3, r3, r7
 8002834:	1902      	adds	r2, r0, r4
 8002836:	19d2      	adds	r2, r2, r7
 8002838:	8812      	ldrh	r2, [r2, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	1902      	adds	r2, r0, r4
 8002844:	19d2      	adds	r2, r2, r7
 8002846:	8812      	ldrh	r2, [r2, #0]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	e05d      	b.n	8002908 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800284c:	231a      	movs	r3, #26
 800284e:	2218      	movs	r2, #24
 8002850:	189b      	adds	r3, r3, r2
 8002852:	19db      	adds	r3, r3, r7
 8002854:	2201      	movs	r2, #1
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	e056      	b.n	8002908 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800285a:	231b      	movs	r3, #27
 800285c:	2218      	movs	r2, #24
 800285e:	189b      	adds	r3, r3, r2
 8002860:	19db      	adds	r3, r3, r7
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b08      	cmp	r3, #8
 8002866:	d822      	bhi.n	80028ae <UART_SetConfig+0x47e>
 8002868:	009a      	lsls	r2, r3, #2
 800286a:	4b32      	ldr	r3, [pc, #200]	; (8002934 <UART_SetConfig+0x504>)
 800286c:	18d3      	adds	r3, r2, r3
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002872:	f7ff f89b 	bl	80019ac <HAL_RCC_GetPCLK1Freq>
 8002876:	0003      	movs	r3, r0
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800287a:	e021      	b.n	80028c0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800287c:	f7ff f8ac 	bl	80019d8 <HAL_RCC_GetPCLK2Freq>
 8002880:	0003      	movs	r3, r0
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002884:	e01c      	b.n	80028c0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002886:	4b28      	ldr	r3, [pc, #160]	; (8002928 <UART_SetConfig+0x4f8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2210      	movs	r2, #16
 800288c:	4013      	ands	r3, r2
 800288e:	d002      	beq.n	8002896 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002890:	4b26      	ldr	r3, [pc, #152]	; (800292c <UART_SetConfig+0x4fc>)
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002894:	e014      	b.n	80028c0 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002896:	4b26      	ldr	r3, [pc, #152]	; (8002930 <UART_SetConfig+0x500>)
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800289a:	e011      	b.n	80028c0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800289c:	f7fe ffd6 	bl	800184c <HAL_RCC_GetSysClockFreq>
 80028a0:	0003      	movs	r3, r0
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028a4:	e00c      	b.n	80028c0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	021b      	lsls	r3, r3, #8
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028ac:	e008      	b.n	80028c0 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80028b2:	231a      	movs	r3, #26
 80028b4:	2218      	movs	r2, #24
 80028b6:	189b      	adds	r3, r3, r2
 80028b8:	19db      	adds	r3, r3, r7
 80028ba:	2201      	movs	r2, #1
 80028bc:	701a      	strb	r2, [r3, #0]
        break;
 80028be:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80028c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d020      	beq.n	8002908 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	085a      	lsrs	r2, r3, #1
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ce:	18d2      	adds	r2, r2, r3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	0019      	movs	r1, r3
 80028d6:	0010      	movs	r0, r2
 80028d8:	f7fd fc16 	bl	8000108 <__udivsi3>
 80028dc:	0003      	movs	r3, r0
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	2b0f      	cmp	r3, #15
 80028e4:	d90a      	bls.n	80028fc <UART_SetConfig+0x4cc>
 80028e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	025b      	lsls	r3, r3, #9
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d205      	bcs.n	80028fc <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	e005      	b.n	8002908 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80028fc:	231a      	movs	r3, #26
 80028fe:	2218      	movs	r2, #24
 8002900:	189b      	adds	r3, r3, r2
 8002902:	19db      	adds	r3, r3, r7
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	2200      	movs	r2, #0
 800290c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	2200      	movs	r2, #0
 8002912:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002914:	231a      	movs	r3, #26
 8002916:	2218      	movs	r2, #24
 8002918:	189b      	adds	r3, r3, r2
 800291a:	19db      	adds	r3, r3, r7
 800291c:	781b      	ldrb	r3, [r3, #0]
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b00e      	add	sp, #56	; 0x38
 8002924:	bdb0      	pop	{r4, r5, r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	40021000 	.word	0x40021000
 800292c:	003d0900 	.word	0x003d0900
 8002930:	00f42400 	.word	0x00f42400
 8002934:	08002e44 	.word	0x08002e44

08002938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	2201      	movs	r2, #1
 8002946:	4013      	ands	r3, r2
 8002948:	d00b      	beq.n	8002962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4a4a      	ldr	r2, [pc, #296]	; (8002a7c <UART_AdvFeatureConfig+0x144>)
 8002952:	4013      	ands	r3, r2
 8002954:	0019      	movs	r1, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	2202      	movs	r2, #2
 8002968:	4013      	ands	r3, r2
 800296a:	d00b      	beq.n	8002984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4a43      	ldr	r2, [pc, #268]	; (8002a80 <UART_AdvFeatureConfig+0x148>)
 8002974:	4013      	ands	r3, r2
 8002976:	0019      	movs	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	2204      	movs	r2, #4
 800298a:	4013      	ands	r3, r2
 800298c:	d00b      	beq.n	80029a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a3b      	ldr	r2, [pc, #236]	; (8002a84 <UART_AdvFeatureConfig+0x14c>)
 8002996:	4013      	ands	r3, r2
 8002998:	0019      	movs	r1, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	2208      	movs	r2, #8
 80029ac:	4013      	ands	r3, r2
 80029ae:	d00b      	beq.n	80029c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4a34      	ldr	r2, [pc, #208]	; (8002a88 <UART_AdvFeatureConfig+0x150>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	0019      	movs	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	2210      	movs	r2, #16
 80029ce:	4013      	ands	r3, r2
 80029d0:	d00b      	beq.n	80029ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4a2c      	ldr	r2, [pc, #176]	; (8002a8c <UART_AdvFeatureConfig+0x154>)
 80029da:	4013      	ands	r3, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	2220      	movs	r2, #32
 80029f0:	4013      	ands	r3, r2
 80029f2:	d00b      	beq.n	8002a0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	4a25      	ldr	r2, [pc, #148]	; (8002a90 <UART_AdvFeatureConfig+0x158>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	0019      	movs	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	2240      	movs	r2, #64	; 0x40
 8002a12:	4013      	ands	r3, r2
 8002a14:	d01d      	beq.n	8002a52 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4a1d      	ldr	r2, [pc, #116]	; (8002a94 <UART_AdvFeatureConfig+0x15c>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	0019      	movs	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	035b      	lsls	r3, r3, #13
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d10b      	bne.n	8002a52 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <UART_AdvFeatureConfig+0x160>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	2280      	movs	r2, #128	; 0x80
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d00b      	beq.n	8002a74 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4a0e      	ldr	r2, [pc, #56]	; (8002a9c <UART_AdvFeatureConfig+0x164>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	0019      	movs	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	605a      	str	r2, [r3, #4]
  }
}
 8002a74:	46c0      	nop			; (mov r8, r8)
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b002      	add	sp, #8
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	fffdffff 	.word	0xfffdffff
 8002a80:	fffeffff 	.word	0xfffeffff
 8002a84:	fffbffff 	.word	0xfffbffff
 8002a88:	ffff7fff 	.word	0xffff7fff
 8002a8c:	ffffefff 	.word	0xffffefff
 8002a90:	ffffdfff 	.word	0xffffdfff
 8002a94:	ffefffff 	.word	0xffefffff
 8002a98:	ff9fffff 	.word	0xff9fffff
 8002a9c:	fff7ffff 	.word	0xfff7ffff

08002aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b092      	sub	sp, #72	; 0x48
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2284      	movs	r2, #132	; 0x84
 8002aac:	2100      	movs	r1, #0
 8002aae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ab0:	f7fd ff68 	bl	8000984 <HAL_GetTick>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2208      	movs	r2, #8
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d12c      	bne.n	8002b20 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ac8:	2280      	movs	r2, #128	; 0x80
 8002aca:	0391      	lsls	r1, r2, #14
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	4a46      	ldr	r2, [pc, #280]	; (8002be8 <UART_CheckIdleState+0x148>)
 8002ad0:	9200      	str	r2, [sp, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f000 f88c 	bl	8002bf0 <UART_WaitOnFlagUntilTimeout>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d021      	beq.n	8002b20 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002adc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002ae4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aec:	f383 8810 	msr	PRIMASK, r3
}
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2180      	movs	r1, #128	; 0x80
 8002afe:	438a      	bics	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b08:	f383 8810 	msr	PRIMASK, r3
}
 8002b0c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2220      	movs	r2, #32
 8002b12:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2278      	movs	r2, #120	; 0x78
 8002b18:	2100      	movs	r1, #0
 8002b1a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e05f      	b.n	8002be0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2204      	movs	r2, #4
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d146      	bne.n	8002bbc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b30:	2280      	movs	r2, #128	; 0x80
 8002b32:	03d1      	lsls	r1, r2, #15
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	4a2c      	ldr	r2, [pc, #176]	; (8002be8 <UART_CheckIdleState+0x148>)
 8002b38:	9200      	str	r2, [sp, #0]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f000 f858 	bl	8002bf0 <UART_WaitOnFlagUntilTimeout>
 8002b40:	1e03      	subs	r3, r0, #0
 8002b42:	d03b      	beq.n	8002bbc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b44:	f3ef 8310 	mrs	r3, PRIMASK
 8002b48:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4e:	2301      	movs	r3, #1
 8002b50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f383 8810 	msr	PRIMASK, r3
}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4921      	ldr	r1, [pc, #132]	; (8002bec <UART_CheckIdleState+0x14c>)
 8002b66:	400a      	ands	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f383 8810 	msr	PRIMASK, r3
}
 8002b74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b76:	f3ef 8310 	mrs	r3, PRIMASK
 8002b7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b7c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b80:	2301      	movs	r3, #1
 8002b82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f383 8810 	msr	PRIMASK, r3
}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2101      	movs	r1, #1
 8002b98:	438a      	bics	r2, r1
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	f383 8810 	msr	PRIMASK, r3
}
 8002ba6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2280      	movs	r2, #128	; 0x80
 8002bac:	2120      	movs	r1, #32
 8002bae:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2278      	movs	r2, #120	; 0x78
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e011      	b.n	8002be0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	2120      	movs	r1, #32
 8002bc8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2278      	movs	r2, #120	; 0x78
 8002bda:	2100      	movs	r1, #0
 8002bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b010      	add	sp, #64	; 0x40
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	01ffffff 	.word	0x01ffffff
 8002bec:	fffffedf 	.word	0xfffffedf

08002bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	1dfb      	adds	r3, r7, #7
 8002bfe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c00:	e04b      	b.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	3301      	adds	r3, #1
 8002c06:	d048      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c08:	f7fd febc 	bl	8000984 <HAL_GetTick>
 8002c0c:	0002      	movs	r2, r0
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d302      	bcc.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e04b      	b.n	8002cba <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2204      	movs	r2, #4
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d035      	beq.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	2208      	movs	r2, #8
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d111      	bne.n	8002c60 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2208      	movs	r2, #8
 8002c42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 f83c 	bl	8002cc4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2284      	movs	r2, #132	; 0x84
 8002c50:	2108      	movs	r1, #8
 8002c52:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2278      	movs	r2, #120	; 0x78
 8002c58:	2100      	movs	r1, #0
 8002c5a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e02c      	b.n	8002cba <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	2380      	movs	r3, #128	; 0x80
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d112      	bne.n	8002c9a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2280      	movs	r2, #128	; 0x80
 8002c7a:	0112      	lsls	r2, r2, #4
 8002c7c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	0018      	movs	r0, r3
 8002c82:	f000 f81f 	bl	8002cc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2284      	movs	r2, #132	; 0x84
 8002c8a:	2120      	movs	r1, #32
 8002c8c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2278      	movs	r2, #120	; 0x78
 8002c92:	2100      	movs	r1, #0
 8002c94:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e00f      	b.n	8002cba <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	425a      	negs	r2, r3
 8002caa:	4153      	adcs	r3, r2
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	001a      	movs	r2, r3
 8002cb0:	1dfb      	adds	r3, r7, #7
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d0a4      	beq.n	8002c02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	0018      	movs	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b004      	add	sp, #16
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08e      	sub	sp, #56	; 0x38
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd0:	617b      	str	r3, [r7, #20]
  return(result);
 8002cd2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	f383 8810 	msr	PRIMASK, r3
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4926      	ldr	r1, [pc, #152]	; (8002d88 <UART_EndRxTransfer+0xc4>)
 8002cee:	400a      	ands	r2, r1
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f383 8810 	msr	PRIMASK, r3
}
 8002cfc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8002d02:	623b      	str	r3, [r7, #32]
  return(result);
 8002d04:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d06:	633b      	str	r3, [r7, #48]	; 0x30
 8002d08:	2301      	movs	r3, #1
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	f383 8810 	msr	PRIMASK, r3
}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2101      	movs	r1, #1
 8002d20:	438a      	bics	r2, r1
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2a:	f383 8810 	msr	PRIMASK, r3
}
 8002d2e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d118      	bne.n	8002d6a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d38:	f3ef 8310 	mrs	r3, PRIMASK
 8002d3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d3e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d42:	2301      	movs	r3, #1
 8002d44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f383 8810 	msr	PRIMASK, r3
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2110      	movs	r1, #16
 8002d5a:	438a      	bics	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f383 8810 	msr	PRIMASK, r3
}
 8002d68:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2280      	movs	r2, #128	; 0x80
 8002d6e:	2120      	movs	r1, #32
 8002d70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b00e      	add	sp, #56	; 0x38
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	fffffedf 	.word	0xfffffedf

08002d8c <memset>:
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	1882      	adds	r2, r0, r2
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d100      	bne.n	8002d96 <memset+0xa>
 8002d94:	4770      	bx	lr
 8002d96:	7019      	strb	r1, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	e7f9      	b.n	8002d90 <memset+0x4>

08002d9c <__libc_init_array>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	2600      	movs	r6, #0
 8002da0:	4c0c      	ldr	r4, [pc, #48]	; (8002dd4 <__libc_init_array+0x38>)
 8002da2:	4d0d      	ldr	r5, [pc, #52]	; (8002dd8 <__libc_init_array+0x3c>)
 8002da4:	1b64      	subs	r4, r4, r5
 8002da6:	10a4      	asrs	r4, r4, #2
 8002da8:	42a6      	cmp	r6, r4
 8002daa:	d109      	bne.n	8002dc0 <__libc_init_array+0x24>
 8002dac:	2600      	movs	r6, #0
 8002dae:	f000 f819 	bl	8002de4 <_init>
 8002db2:	4c0a      	ldr	r4, [pc, #40]	; (8002ddc <__libc_init_array+0x40>)
 8002db4:	4d0a      	ldr	r5, [pc, #40]	; (8002de0 <__libc_init_array+0x44>)
 8002db6:	1b64      	subs	r4, r4, r5
 8002db8:	10a4      	asrs	r4, r4, #2
 8002dba:	42a6      	cmp	r6, r4
 8002dbc:	d105      	bne.n	8002dca <__libc_init_array+0x2e>
 8002dbe:	bd70      	pop	{r4, r5, r6, pc}
 8002dc0:	00b3      	lsls	r3, r6, #2
 8002dc2:	58eb      	ldr	r3, [r5, r3]
 8002dc4:	4798      	blx	r3
 8002dc6:	3601      	adds	r6, #1
 8002dc8:	e7ee      	b.n	8002da8 <__libc_init_array+0xc>
 8002dca:	00b3      	lsls	r3, r6, #2
 8002dcc:	58eb      	ldr	r3, [r5, r3]
 8002dce:	4798      	blx	r3
 8002dd0:	3601      	adds	r6, #1
 8002dd2:	e7f2      	b.n	8002dba <__libc_init_array+0x1e>
 8002dd4:	08002e70 	.word	0x08002e70
 8002dd8:	08002e70 	.word	0x08002e70
 8002ddc:	08002e74 	.word	0x08002e74
 8002de0:	08002e70 	.word	0x08002e70

08002de4 <_init>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dea:	bc08      	pop	{r3}
 8002dec:	469e      	mov	lr, r3
 8002dee:	4770      	bx	lr

08002df0 <_fini>:
 8002df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df6:	bc08      	pop	{r3}
 8002df8:	469e      	mov	lr, r3
 8002dfa:	4770      	bx	lr
