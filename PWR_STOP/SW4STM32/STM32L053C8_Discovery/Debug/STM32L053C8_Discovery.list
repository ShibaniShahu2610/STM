
STM32L053C8_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001320  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080013e0  080013e0  000113e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800140c  0800140c  0001140c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001414  08001414  00011414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001418  08001418  00011418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  20000000  0800141c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000020  20000018  08001434  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000038  08001434  00020038  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 11 .debug_info   000050ab  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000161c  00000000  00000000  0002512e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00000e8b  00000000  00000000  0002674a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b8  00000000  00000000  000275d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000494  00000000  00000000  00027a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000131b1  00000000  00000000  00027f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007522  00000000  00000000  0003b0d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077e39  00000000  00000000  000425f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00000ad8  00000000  00000000  000ba430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000007c  00000000  00000000  000baf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080013c8 	.word	0x080013c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	080013c8 	.word	0x080013c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <BSP_LED_Init+0x58>)
 80004ac:	b088      	sub	sp, #32
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80004ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d11c      	bne.n	80004ee <BSP_LED_Init+0x46>
 80004b4:	2102      	movs	r1, #2
 80004b6:	430a      	orrs	r2, r1
 80004b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004bc:	400b      	ands	r3, r1
 80004be:	9301      	str	r3, [sp, #4]
 80004c0:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <BSP_LED_Init+0x5c>)
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	5ad6      	ldrh	r6, [r2, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c8:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80004ca:	4d0f      	ldr	r5, [pc, #60]	; (8000508 <BSP_LED_Init+0x60>)
 80004cc:	0084      	lsls	r4, r0, #2
 80004ce:	5960      	ldr	r0, [r4, r5]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004d2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80004d4:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d6:	18db      	adds	r3, r3, r3
 80004d8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80004da:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80004dc:	f000 f912 	bl	8000704 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80004e0:	2200      	movs	r2, #0
 80004e2:	0031      	movs	r1, r6
 80004e4:	5960      	ldr	r0, [r4, r5]
 80004e6:	f000 f9cf 	bl	8000888 <HAL_GPIO_WritePin>
}
 80004ea:	b008      	add	sp, #32
 80004ec:	bd70      	pop	{r4, r5, r6, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 80004ee:	2101      	movs	r1, #1
 80004f0:	430a      	orrs	r2, r1
 80004f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80004f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f6:	400b      	ands	r3, r1
 80004f8:	9302      	str	r3, [sp, #8]
 80004fa:	9b02      	ldr	r3, [sp, #8]
 80004fc:	e7e1      	b.n	80004c2 <BSP_LED_Init+0x1a>
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	40021000 	.word	0x40021000
 8000504:	080013e0 	.word	0x080013e0
 8000508:	20000000 	.word	0x20000000

0800050c <BSP_LED_On>:
  *     @arg LED4
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <BSP_LED_On+0x18>)
{
 800050e:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	5ad1      	ldrh	r1, [r2, r3]
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <BSP_LED_On+0x1c>)
 8000516:	0080      	lsls	r0, r0, #2
 8000518:	2201      	movs	r2, #1
 800051a:	58c0      	ldr	r0, [r0, r3]
 800051c:	f000 f9b4 	bl	8000888 <HAL_GPIO_WritePin>
}
 8000520:	bd10      	pop	{r4, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	080013e0 	.word	0x080013e0
 8000528:	20000000 	.word	0x20000000

0800052c <BSP_PB_Init>:
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800052c:	2301      	movs	r3, #1
 800052e:	4a19      	ldr	r2, [pc, #100]	; (8000594 <BSP_PB_Init+0x68>)
{
 8000530:	b510      	push	{r4, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000532:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
{
 8000534:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000536:	431c      	orrs	r4, r3
 8000538:	62d4      	str	r4, [r2, #44]	; 0x2c
 800053a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800053c:	401a      	ands	r2, r3
 800053e:	9200      	str	r2, [sp, #0]
 8000540:	9a00      	ldr	r2, [sp, #0]
  
  if (ButtonMode == BUTTON_MODE_GPIO)
 8000542:	2900      	cmp	r1, #0
 8000544:	d10d      	bne.n	8000562 <BSP_PB_Init+0x36>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000546:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000548:	18db      	adds	r3, r3, r3
 800054a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <BSP_PB_Init+0x6c>)
 8000550:	0082      	lsls	r2, r0, #2
 8000552:	1898      	adds	r0, r3, r2
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000554:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000556:	6880      	ldr	r0, [r0, #8]
 8000558:	a901      	add	r1, sp, #4
 800055a:	f000 f8d3 	bl	8000704 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 3, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 800055e:	b006      	add	sp, #24
 8000560:	bd10      	pop	{r4, pc}
  if (ButtonMode == BUTTON_MODE_EXTI)
 8000562:	2901      	cmp	r1, #1
 8000564:	d1fb      	bne.n	800055e <BSP_PB_Init+0x32>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000566:	2384      	movs	r3, #132	; 0x84
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800056a:	039b      	lsls	r3, r3, #14
 800056c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <BSP_PB_Init+0x6c>)
 8000570:	0082      	lsls	r2, r0, #2
 8000572:	1898      	adds	r0, r3, r2
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000574:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000576:	6880      	ldr	r0, [r0, #8]
 8000578:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800057c:	f000 f8c2 	bl	8000704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 3, 0);
 8000580:	0022      	movs	r2, r4
 8000582:	2103      	movs	r1, #3
 8000584:	2005      	movs	r0, #5
 8000586:	f000 f869 	bl	800065c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800058a:	2005      	movs	r0, #5
 800058c:	f000 f890 	bl	80006b0 <HAL_NVIC_EnableIRQ>
}
 8000590:	e7e5      	b.n	800055e <BSP_PB_Init+0x32>
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	40021000 	.word	0x40021000
 8000598:	20000000 	.word	0x20000000

0800059c <SystemInit>:
{    
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800059c:	4770      	bx	lr

0800059e <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800059e:	4770      	bx	lr

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a4:	20fa      	movs	r0, #250	; 0xfa
 80005a6:	4e0d      	ldr	r6, [pc, #52]	; (80005dc <HAL_InitTick+0x3c>)
 80005a8:	0080      	lsls	r0, r0, #2
 80005aa:	7831      	ldrb	r1, [r6, #0]
 80005ac:	f7ff fdac 	bl	8000108 <__udivsi3>
 80005b0:	4c0b      	ldr	r4, [pc, #44]	; (80005e0 <HAL_InitTick+0x40>)
 80005b2:	0001      	movs	r1, r0
 80005b4:	6820      	ldr	r0, [r4, #0]
 80005b6:	f7ff fda7 	bl	8000108 <__udivsi3>
 80005ba:	f000 f885 	bl	80006c8 <HAL_SYSTICK_Config>
 80005be:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80005c0:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c2:	2c00      	cmp	r4, #0
 80005c4:	d108      	bne.n	80005d8 <HAL_InitTick+0x38>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c6:	2d03      	cmp	r5, #3
 80005c8:	d806      	bhi.n	80005d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ca:	3802      	subs	r0, #2
 80005cc:	0022      	movs	r2, r4
 80005ce:	0029      	movs	r1, r5
 80005d0:	f000 f844 	bl	800065c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d4:	0020      	movs	r0, r4
 80005d6:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005d8:	bd70      	pop	{r4, r5, r6, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	20000010 	.word	0x20000010
 80005e0:	2000000c 	.word	0x2000000c

080005e4 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80005e4:	2240      	movs	r2, #64	; 0x40
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <HAL_Init+0x2c>)
{
 80005e8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80005ea:	6819      	ldr	r1, [r3, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ec:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80005ee:	430a      	orrs	r2, r1
 80005f0:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f2:	2202      	movs	r2, #2
 80005f4:	6819      	ldr	r1, [r3, #0]
 80005f6:	430a      	orrs	r2, r1
 80005f8:	601a      	str	r2, [r3, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005fa:	f7ff ffd1 	bl	80005a0 <HAL_InitTick>
 80005fe:	1e04      	subs	r4, r0, #0
 8000600:	d103      	bne.n	800060a <HAL_Init+0x26>
    HAL_MspInit();
 8000602:	f7ff ffcc 	bl	800059e <HAL_MspInit>
}
 8000606:	0020      	movs	r0, r4
 8000608:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800060a:	2401      	movs	r4, #1
 800060c:	e7fb      	b.n	8000606 <HAL_Init+0x22>
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	40022000 	.word	0x40022000

08000614 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000614:	4a03      	ldr	r2, [pc, #12]	; (8000624 <HAL_IncTick+0x10>)
 8000616:	4b04      	ldr	r3, [pc, #16]	; (8000628 <HAL_IncTick+0x14>)
 8000618:	6811      	ldr	r1, [r2, #0]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	185b      	adds	r3, r3, r1
 800061e:	6013      	str	r3, [r2, #0]
}
 8000620:	4770      	bx	lr
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	20000034 	.word	0x20000034
 8000628:	20000010 	.word	0x20000010

0800062c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800062c:	4b01      	ldr	r3, [pc, #4]	; (8000634 <HAL_GetTick+0x8>)
 800062e:	6818      	ldr	r0, [r3, #0]
}
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	20000034 	.word	0x20000034

08000638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800063c:	f7ff fff6 	bl	800062c <HAL_GetTick>
 8000640:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000642:	1c63      	adds	r3, r4, #1
 8000644:	d002      	beq.n	800064c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000646:	4b04      	ldr	r3, [pc, #16]	; (8000658 <HAL_Delay+0x20>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800064c:	f7ff ffee 	bl	800062c <HAL_GetTick>
 8000650:	1b40      	subs	r0, r0, r5
 8000652:	42a0      	cmp	r0, r4
 8000654:	d3fa      	bcc.n	800064c <HAL_Delay+0x14>
  {
  }
}
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	20000010 	.word	0x20000010

0800065c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800065c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800065e:	25ff      	movs	r5, #255	; 0xff
 8000660:	2403      	movs	r4, #3
 8000662:	002a      	movs	r2, r5
 8000664:	4004      	ands	r4, r0
 8000666:	00e4      	lsls	r4, r4, #3
 8000668:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800066a:	0189      	lsls	r1, r1, #6
 800066c:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800066e:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000670:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000672:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8000674:	2800      	cmp	r0, #0
 8000676:	db0a      	blt.n	800068e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000678:	24c0      	movs	r4, #192	; 0xc0
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <HAL_NVIC_SetPriority+0x4c>)
 800067c:	0880      	lsrs	r0, r0, #2
 800067e:	0080      	lsls	r0, r0, #2
 8000680:	18c0      	adds	r0, r0, r3
 8000682:	00a4      	lsls	r4, r4, #2
 8000684:	5903      	ldr	r3, [r0, r4]
 8000686:	4013      	ands	r3, r2
 8000688:	430b      	orrs	r3, r1
 800068a:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800068c:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800068e:	200f      	movs	r0, #15
 8000690:	4003      	ands	r3, r0
 8000692:	3b08      	subs	r3, #8
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <HAL_NVIC_SetPriority+0x50>)
 8000696:	089b      	lsrs	r3, r3, #2
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	181b      	adds	r3, r3, r0
 800069c:	69d8      	ldr	r0, [r3, #28]
 800069e:	4002      	ands	r2, r0
 80006a0:	430a      	orrs	r2, r1
 80006a2:	61da      	str	r2, [r3, #28]
 80006a4:	e7f2      	b.n	800068c <HAL_NVIC_SetPriority+0x30>
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	e000e100 	.word	0xe000e100
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006b0:	2800      	cmp	r0, #0
 80006b2:	db05      	blt.n	80006c0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b4:	231f      	movs	r3, #31
 80006b6:	4018      	ands	r0, r3
 80006b8:	3b1e      	subs	r3, #30
 80006ba:	4083      	lsls	r3, r0
 80006bc:	4a01      	ldr	r2, [pc, #4]	; (80006c4 <HAL_NVIC_EnableIRQ+0x14>)
 80006be:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80006c0:	4770      	bx	lr
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	e000e100 	.word	0xe000e100

080006c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	1e43      	subs	r3, r0, #1
 80006cc:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ce:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d20d      	bcs.n	80006f0 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006d4:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d6:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006d8:	4807      	ldr	r0, [pc, #28]	; (80006f8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006da:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006dc:	6a03      	ldr	r3, [r0, #32]
 80006de:	0609      	lsls	r1, r1, #24
 80006e0:	021b      	lsls	r3, r3, #8
 80006e2:	0a1b      	lsrs	r3, r3, #8
 80006e4:	430b      	orrs	r3, r1
 80006e6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ea:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ec:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ee:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006f0:	4770      	bx	lr
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	e000e010 	.word	0xe000e010
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80006fc:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80006fe:	f000 fe2d 	bl	800135c <HAL_SYSTICK_Callback>
}
 8000702:	bd10      	pop	{r4, pc}

08000704 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000704:	4a59      	ldr	r2, [pc, #356]	; (800086c <HAL_GPIO_Init+0x168>)
{
 8000706:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000708:	1882      	adds	r2, r0, r2
 800070a:	1e54      	subs	r4, r2, #1
 800070c:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800070e:	2300      	movs	r3, #0
{
 8000710:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000712:	3205      	adds	r2, #5
 8000714:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000716:	680a      	ldr	r2, [r1, #0]
 8000718:	0014      	movs	r4, r2
 800071a:	40dc      	lsrs	r4, r3
 800071c:	d101      	bne.n	8000722 <HAL_GPIO_Init+0x1e>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 800071e:	b007      	add	sp, #28
 8000720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000722:	2401      	movs	r4, #1
 8000724:	0025      	movs	r5, r4
 8000726:	46a4      	mov	ip, r4
 8000728:	409d      	lsls	r5, r3
 800072a:	0014      	movs	r4, r2
 800072c:	402c      	ands	r4, r5
 800072e:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 8000730:	422a      	tst	r2, r5
 8000732:	d100      	bne.n	8000736 <HAL_GPIO_Init+0x32>
 8000734:	e098      	b.n	8000868 <HAL_GPIO_Init+0x164>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000736:	2403      	movs	r4, #3
 8000738:	684a      	ldr	r2, [r1, #4]
 800073a:	005f      	lsls	r7, r3, #1
 800073c:	9201      	str	r2, [sp, #4]
 800073e:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000740:	40bc      	lsls	r4, r7
 8000742:	43e4      	mvns	r4, r4
 8000744:	9403      	str	r4, [sp, #12]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000746:	1e54      	subs	r4, r2, #1
 8000748:	4564      	cmp	r4, ip
 800074a:	d82f      	bhi.n	80007ac <HAL_GPIO_Init+0xa8>
        temp = GPIOx->OSPEEDR;
 800074c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800074e:	9c03      	ldr	r4, [sp, #12]
 8000750:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000752:	68cc      	ldr	r4, [r1, #12]
 8000754:	40bc      	lsls	r4, r7
 8000756:	4334      	orrs	r4, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000758:	4666      	mov	r6, ip
        GPIOx->OSPEEDR = temp;
 800075a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800075c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800075e:	43ac      	bics	r4, r5
 8000760:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000762:	9c01      	ldr	r4, [sp, #4]
 8000764:	0924      	lsrs	r4, r4, #4
 8000766:	4034      	ands	r4, r6
 8000768:	409c      	lsls	r4, r3
 800076a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800076c:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800076e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000770:	9c03      	ldr	r4, [sp, #12]
 8000772:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000774:	688c      	ldr	r4, [r1, #8]
 8000776:	40bc      	lsls	r4, r7
 8000778:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800077a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800077c:	2a02      	cmp	r2, #2
 800077e:	d117      	bne.n	80007b0 <HAL_GPIO_Init+0xac>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000780:	2507      	movs	r5, #7
 8000782:	260f      	movs	r6, #15
 8000784:	401d      	ands	r5, r3
 8000786:	00ad      	lsls	r5, r5, #2
 8000788:	40ae      	lsls	r6, r5
 800078a:	46b4      	mov	ip, r6
        temp = GPIOx->AFR[position >> 3U];
 800078c:	08dc      	lsrs	r4, r3, #3
 800078e:	00a4      	lsls	r4, r4, #2
 8000790:	1904      	adds	r4, r0, r4
 8000792:	9404      	str	r4, [sp, #16]
 8000794:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000796:	0026      	movs	r6, r4
 8000798:	4664      	mov	r4, ip
 800079a:	43a6      	bics	r6, r4
 800079c:	46b4      	mov	ip, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800079e:	690e      	ldr	r6, [r1, #16]
 80007a0:	4664      	mov	r4, ip
 80007a2:	40ae      	lsls	r6, r5
 80007a4:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 80007a6:	9c04      	ldr	r4, [sp, #16]
 80007a8:	6226      	str	r6, [r4, #32]
 80007aa:	e001      	b.n	80007b0 <HAL_GPIO_Init+0xac>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80007ac:	2a03      	cmp	r2, #3
 80007ae:	d1de      	bne.n	800076e <HAL_GPIO_Init+0x6a>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007b0:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80007b2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80007b4:	9d03      	ldr	r5, [sp, #12]
 80007b6:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007b8:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 80007ba:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80007bc:	22c0      	movs	r2, #192	; 0xc0
 80007be:	9c01      	ldr	r4, [sp, #4]
 80007c0:	0292      	lsls	r2, r2, #10
 80007c2:	4214      	tst	r4, r2
 80007c4:	d050      	beq.n	8000868 <HAL_GPIO_Init+0x164>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	2701      	movs	r7, #1
 80007c8:	4c29      	ldr	r4, [pc, #164]	; (8000870 <HAL_GPIO_Init+0x16c>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80007ca:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007cc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80007ce:	433a      	orrs	r2, r7
 80007d0:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80007d2:	4a28      	ldr	r2, [pc, #160]	; (8000874 <HAL_GPIO_Init+0x170>)
 80007d4:	089c      	lsrs	r4, r3, #2
 80007d6:	00a4      	lsls	r4, r4, #2
 80007d8:	18a4      	adds	r4, r4, r2
 80007da:	68a2      	ldr	r2, [r4, #8]
 80007dc:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80007de:	2203      	movs	r2, #3
 80007e0:	4015      	ands	r5, r2
 80007e2:	00ad      	lsls	r5, r5, #2
 80007e4:	320c      	adds	r2, #12
 80007e6:	40aa      	lsls	r2, r5
 80007e8:	4666      	mov	r6, ip
 80007ea:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80007ec:	22a0      	movs	r2, #160	; 0xa0
 80007ee:	05d2      	lsls	r2, r2, #23
 80007f0:	4694      	mov	ip, r2
 80007f2:	2200      	movs	r2, #0
 80007f4:	4560      	cmp	r0, ip
 80007f6:	d00d      	beq.n	8000814 <HAL_GPIO_Init+0x110>
 80007f8:	4a1f      	ldr	r2, [pc, #124]	; (8000878 <HAL_GPIO_Init+0x174>)
 80007fa:	4694      	mov	ip, r2
 80007fc:	003a      	movs	r2, r7
 80007fe:	4560      	cmp	r0, ip
 8000800:	d008      	beq.n	8000814 <HAL_GPIO_Init+0x110>
 8000802:	4f1e      	ldr	r7, [pc, #120]	; (800087c <HAL_GPIO_Init+0x178>)
 8000804:	1892      	adds	r2, r2, r2
 8000806:	42b8      	cmp	r0, r7
 8000808:	d004      	beq.n	8000814 <HAL_GPIO_Init+0x110>
 800080a:	4f1d      	ldr	r7, [pc, #116]	; (8000880 <HAL_GPIO_Init+0x17c>)
 800080c:	3201      	adds	r2, #1
 800080e:	42b8      	cmp	r0, r7
 8000810:	d000      	beq.n	8000814 <HAL_GPIO_Init+0x110>
 8000812:	9a05      	ldr	r2, [sp, #20]
 8000814:	40aa      	lsls	r2, r5
 8000816:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000818:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 800081a:	4a1a      	ldr	r2, [pc, #104]	; (8000884 <HAL_GPIO_Init+0x180>)
        temp &= ~((uint32_t)iocurrent);
 800081c:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->RTSR;
 800081e:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000820:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000822:	9f01      	ldr	r7, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 8000824:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000826:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000828:	02ff      	lsls	r7, r7, #11
 800082a:	d401      	bmi.n	8000830 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 800082c:	0035      	movs	r5, r6
 800082e:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8000830:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000832:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8000834:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000836:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8000838:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800083a:	02bf      	lsls	r7, r7, #10
 800083c:	d401      	bmi.n	8000842 <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 800083e:	0035      	movs	r5, r6
 8000840:	4025      	ands	r5, r4
        EXTI->FTSR = temp;
 8000842:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8000844:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000846:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000848:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 800084a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800084c:	03bf      	lsls	r7, r7, #14
 800084e:	d401      	bmi.n	8000854 <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 8000850:	0035      	movs	r5, r6
 8000852:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8000854:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8000856:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8000858:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800085a:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 800085c:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800085e:	03ff      	lsls	r7, r7, #15
 8000860:	d401      	bmi.n	8000866 <HAL_GPIO_Init+0x162>
        temp &= ~((uint32_t)iocurrent);
 8000862:	4025      	ands	r5, r4
 8000864:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8000866:	6016      	str	r6, [r2, #0]
    position++;
 8000868:	3301      	adds	r3, #1
 800086a:	e754      	b.n	8000716 <HAL_GPIO_Init+0x12>
 800086c:	afffe400 	.word	0xafffe400
 8000870:	40021000 	.word	0x40021000
 8000874:	40010000 	.word	0x40010000
 8000878:	50000400 	.word	0x50000400
 800087c:	50000800 	.word	0x50000800
 8000880:	50000c00 	.word	0x50000c00
 8000884:	40010400 	.word	0x40010400

08000888 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000888:	2a00      	cmp	r2, #0
 800088a:	d001      	beq.n	8000890 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800088c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800088e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000890:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000892:	e7fc      	b.n	800088e <HAL_GPIO_WritePin+0x6>

08000894 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8000896:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000898:	695a      	ldr	r2, [r3, #20]
 800089a:	4210      	tst	r0, r2
 800089c:	d002      	beq.n	80008a4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800089e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80008a0:	f000 fd54 	bl	800134c <HAL_GPIO_EXTI_Callback>
  }
}
 80008a4:	bd10      	pop	{r4, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40010400 	.word	0x40010400

080008ac <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <HAL_PWR_EnterSTOPMode+0x68>)
{
 80008ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80008b0:	681e      	ldr	r6, [r3, #0]
{
 80008b2:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80008b4:	2080      	movs	r0, #128	; 0x80
 80008b6:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80008b8:	2701      	movs	r7, #1
 80008ba:	4a17      	ldr	r2, [pc, #92]	; (8000918 <HAL_PWR_EnterSTOPMode+0x6c>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80008bc:	0080      	lsls	r0, r0, #2
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80008be:	6a12      	ldr	r2, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80008c0:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80008c2:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 80008c4:	4206      	tst	r6, r0
 80008c6:	d005      	beq.n	80008d4 <HAL_PWR_EnterSTOPMode+0x28>
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	d003      	beq.n	80008d4 <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	4e13      	ldr	r6, [pc, #76]	; (800091c <HAL_PWR_EnterSTOPMode+0x70>)
 80008d0:	4030      	ands	r0, r6
 80008d2:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80008d4:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 80008d6:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80008d8:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80008da:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80008dc:	2504      	movs	r5, #4
  PWR->CR = tmpreg;
 80008de:	6018      	str	r0, [r3, #0]
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80008e0:	480f      	ldr	r0, [pc, #60]	; (8000920 <HAL_PWR_EnterSTOPMode+0x74>)
 80008e2:	6906      	ldr	r6, [r0, #16]
 80008e4:	4335      	orrs	r5, r6
 80008e6:	6105      	str	r5, [r0, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80008e8:	2901      	cmp	r1, #1
 80008ea:	d10e      	bne.n	800090a <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80008ec:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80008ee:	2504      	movs	r5, #4
 80008f0:	6901      	ldr	r1, [r0, #16]
 80008f2:	43a9      	bics	r1, r5
 80008f4:	6101      	str	r1, [r0, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d006      	beq.n	8000908 <HAL_PWR_EnterSTOPMode+0x5c>
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	d004      	beq.n	8000908 <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	6819      	ldr	r1, [r3, #0]
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	430a      	orrs	r2, r1
 8000906:	601a      	str	r2, [r3, #0]
  }
}
 8000908:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 800090a:	bf40      	sev
    __WFE();
 800090c:	bf20      	wfe
    __WFE();
 800090e:	bf20      	wfe
 8000910:	e7ed      	b.n	80008ee <HAL_PWR_EnterSTOPMode+0x42>
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	40007000 	.word	0x40007000
 8000918:	40010000 	.word	0x40010000
 800091c:	fffffdff 	.word	0xfffffdff
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	4a03      	ldr	r2, [pc, #12]	; (8000934 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	6811      	ldr	r1, [r2, #0]
 800092c:	430b      	orrs	r3, r1
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	4770      	bx	lr
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	40007000 	.word	0x40007000

08000938 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	4a03      	ldr	r2, [pc, #12]	; (8000948 <HAL_PWREx_EnableUltraLowPower+0x10>)
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	6811      	ldr	r1, [r2, #0]
 8000940:	430b      	orrs	r3, r1
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	4770      	bx	lr
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	40007000 	.word	0x40007000

0800094c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800094c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800094e:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8000950:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8000952:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000954:	4022      	ands	r2, r4
 8000956:	2a08      	cmp	r2, #8
 8000958:	d031      	beq.n	80009be <HAL_RCC_GetSysClockFreq+0x72>
 800095a:	2a0c      	cmp	r2, #12
 800095c:	d009      	beq.n	8000972 <HAL_RCC_GetSysClockFreq+0x26>
 800095e:	2a04      	cmp	r2, #4
 8000960:	d125      	bne.n	80009ae <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000962:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000966:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8000968:	17c0      	asrs	r0, r0, #31
 800096a:	4018      	ands	r0, r3
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <HAL_RCC_GetSysClockFreq+0x80>)
 800096e:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8000970:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000972:	02a2      	lsls	r2, r4, #10
 8000974:	4816      	ldr	r0, [pc, #88]	; (80009d0 <HAL_RCC_GetSysClockFreq+0x84>)
 8000976:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000978:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800097a:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800097c:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800097e:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000980:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000982:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000984:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000986:	4211      	tst	r1, r2
 8000988:	d009      	beq.n	800099e <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <HAL_RCC_GetSysClockFreq+0x88>)
 800098c:	2300      	movs	r3, #0
 800098e:	2100      	movs	r1, #0
 8000990:	f7ff fc66 	bl	8000260 <__aeabi_lmul>
 8000994:	0022      	movs	r2, r4
 8000996:	2300      	movs	r3, #0
 8000998:	f7ff fc42 	bl	8000220 <__aeabi_uldivmod>
 800099c:	e7e8      	b.n	8000970 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	2310      	movs	r3, #16
 80009a2:	421a      	tst	r2, r3
 80009a4:	d001      	beq.n	80009aa <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80009a6:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <HAL_RCC_GetSysClockFreq+0x8c>)
 80009a8:	e7f0      	b.n	800098c <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_RCC_GetSysClockFreq+0x80>)
 80009ac:	e7ee      	b.n	800098c <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80009ae:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80009b0:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80009b2:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80009b4:	041b      	lsls	r3, r3, #16
 80009b6:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80009b8:	3301      	adds	r3, #1
 80009ba:	4098      	lsls	r0, r3
      break;
 80009bc:	e7d8      	b.n	8000970 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <HAL_RCC_GetSysClockFreq+0x88>)
 80009c0:	e7d6      	b.n	8000970 <HAL_RCC_GetSysClockFreq+0x24>
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	40021000 	.word	0x40021000
 80009c8:	ff48e500 	.word	0xff48e500
 80009cc:	00f42400 	.word	0x00f42400
 80009d0:	080013e8 	.word	0x080013e8
 80009d4:	007a1200 	.word	0x007a1200
 80009d8:	003d0900 	.word	0x003d0900

080009dc <HAL_RCC_OscConfig>:
{
 80009dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009de:	0005      	movs	r5, r0
 80009e0:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 80009e2:	2800      	cmp	r0, #0
 80009e4:	d059      	beq.n	8000a9a <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009e6:	230c      	movs	r3, #12
 80009e8:	4cbe      	ldr	r4, [pc, #760]	; (8000ce4 <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009ea:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009ec:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009ee:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009f0:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009f2:	2380      	movs	r3, #128	; 0x80
 80009f4:	025b      	lsls	r3, r3, #9
 80009f6:	0019      	movs	r1, r3
 80009f8:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009fa:	07d2      	lsls	r2, r2, #31
 80009fc:	d441      	bmi.n	8000a82 <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009fe:	682b      	ldr	r3, [r5, #0]
 8000a00:	079b      	lsls	r3, r3, #30
 8000a02:	d500      	bpl.n	8000a06 <HAL_RCC_OscConfig+0x2a>
 8000a04:	e08a      	b.n	8000b1c <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a06:	682b      	ldr	r3, [r5, #0]
 8000a08:	06db      	lsls	r3, r3, #27
 8000a0a:	d528      	bpl.n	8000a5e <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d000      	beq.n	8000a12 <HAL_RCC_OscConfig+0x36>
 8000a10:	e0db      	b.n	8000bca <HAL_RCC_OscConfig+0x1ee>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000a12:	6823      	ldr	r3, [r4, #0]
 8000a14:	059b      	lsls	r3, r3, #22
 8000a16:	d502      	bpl.n	8000a1e <HAL_RCC_OscConfig+0x42>
 8000a18:	69eb      	ldr	r3, [r5, #28]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d03d      	beq.n	8000a9a <HAL_RCC_OscConfig+0xbe>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000a1e:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a20:	6862      	ldr	r2, [r4, #4]
 8000a22:	49b1      	ldr	r1, [pc, #708]	; (8000ce8 <HAL_RCC_OscConfig+0x30c>)
 8000a24:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000a26:	400a      	ands	r2, r1
 8000a28:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000a2a:	0b5b      	lsrs	r3, r3, #13
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	023f      	lsls	r7, r7, #8
 8000a30:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a32:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a34:	6861      	ldr	r1, [r4, #4]
 8000a36:	6a2a      	ldr	r2, [r5, #32]
 8000a38:	0209      	lsls	r1, r1, #8
 8000a3a:	0a09      	lsrs	r1, r1, #8
 8000a3c:	0612      	lsls	r2, r2, #24
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000a42:	68e1      	ldr	r1, [r4, #12]
 8000a44:	48a9      	ldr	r0, [pc, #676]	; (8000cec <HAL_RCC_OscConfig+0x310>)
 8000a46:	060b      	lsls	r3, r1, #24
 8000a48:	0f1b      	lsrs	r3, r3, #28
 8000a4a:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000a4c:	4aa8      	ldr	r2, [pc, #672]	; (8000cf0 <HAL_RCC_OscConfig+0x314>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000a4e:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 8000a50:	4ba8      	ldr	r3, [pc, #672]	; (8000cf4 <HAL_RCC_OscConfig+0x318>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000a52:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8000a54:	6818      	ldr	r0, [r3, #0]
 8000a56:	f7ff fda3 	bl	80005a0 <HAL_InitTick>
        if(status != HAL_OK)
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	d134      	bne.n	8000ac8 <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a5e:	682b      	ldr	r3, [r5, #0]
 8000a60:	071b      	lsls	r3, r3, #28
 8000a62:	d500      	bpl.n	8000a66 <HAL_RCC_OscConfig+0x8a>
 8000a64:	e0e8      	b.n	8000c38 <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a66:	682b      	ldr	r3, [r5, #0]
 8000a68:	075b      	lsls	r3, r3, #29
 8000a6a:	d500      	bpl.n	8000a6e <HAL_RCC_OscConfig+0x92>
 8000a6c:	e10a      	b.n	8000c84 <HAL_RCC_OscConfig+0x2a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000a6e:	682b      	ldr	r3, [r5, #0]
 8000a70:	069b      	lsls	r3, r3, #26
 8000a72:	d500      	bpl.n	8000a76 <HAL_RCC_OscConfig+0x9a>
 8000a74:	e18f      	b.n	8000d96 <HAL_RCC_OscConfig+0x3ba>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a76:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d000      	beq.n	8000a7e <HAL_RCC_OscConfig+0xa2>
 8000a7c:	e1be      	b.n	8000dfc <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8000a7e:	2000      	movs	r0, #0
 8000a80:	e022      	b.n	8000ac8 <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a82:	2e08      	cmp	r6, #8
 8000a84:	d003      	beq.n	8000a8e <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000a86:	2e0c      	cmp	r6, #12
 8000a88:	d109      	bne.n	8000a9e <HAL_RCC_OscConfig+0xc2>
 8000a8a:	2f00      	cmp	r7, #0
 8000a8c:	d007      	beq.n	8000a9e <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a8e:	6823      	ldr	r3, [r4, #0]
 8000a90:	039b      	lsls	r3, r3, #14
 8000a92:	d5b4      	bpl.n	80009fe <HAL_RCC_OscConfig+0x22>
 8000a94:	686b      	ldr	r3, [r5, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d1b1      	bne.n	80009fe <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	e014      	b.n	8000ac8 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a9e:	686a      	ldr	r2, [r5, #4]
 8000aa0:	428a      	cmp	r2, r1
 8000aa2:	d113      	bne.n	8000acc <HAL_RCC_OscConfig+0xf0>
 8000aa4:	6822      	ldr	r2, [r4, #0]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000aaa:	f7ff fdbf 	bl	800062c <HAL_GetTick>
 8000aae:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	6823      	ldr	r3, [r4, #0]
 8000ab4:	0292      	lsls	r2, r2, #10
 8000ab6:	4213      	tst	r3, r2
 8000ab8:	d1a1      	bne.n	80009fe <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aba:	f7ff fdb7 	bl	800062c <HAL_GetTick>
 8000abe:	9b00      	ldr	r3, [sp, #0]
 8000ac0:	1ac0      	subs	r0, r0, r3
 8000ac2:	2864      	cmp	r0, #100	; 0x64
 8000ac4:	d9f4      	bls.n	8000ab0 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 8000ac6:	2003      	movs	r0, #3
}
 8000ac8:	b005      	add	sp, #20
 8000aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000acc:	21a0      	movs	r1, #160	; 0xa0
 8000ace:	02c9      	lsls	r1, r1, #11
 8000ad0:	428a      	cmp	r2, r1
 8000ad2:	d105      	bne.n	8000ae0 <HAL_RCC_OscConfig+0x104>
 8000ad4:	2280      	movs	r2, #128	; 0x80
 8000ad6:	6821      	ldr	r1, [r4, #0]
 8000ad8:	02d2      	lsls	r2, r2, #11
 8000ada:	430a      	orrs	r2, r1
 8000adc:	6022      	str	r2, [r4, #0]
 8000ade:	e7e1      	b.n	8000aa4 <HAL_RCC_OscConfig+0xc8>
 8000ae0:	6821      	ldr	r1, [r4, #0]
 8000ae2:	4885      	ldr	r0, [pc, #532]	; (8000cf8 <HAL_RCC_OscConfig+0x31c>)
 8000ae4:	4001      	ands	r1, r0
 8000ae6:	6021      	str	r1, [r4, #0]
 8000ae8:	6821      	ldr	r1, [r4, #0]
 8000aea:	400b      	ands	r3, r1
 8000aec:	9303      	str	r3, [sp, #12]
 8000aee:	9b03      	ldr	r3, [sp, #12]
 8000af0:	4982      	ldr	r1, [pc, #520]	; (8000cfc <HAL_RCC_OscConfig+0x320>)
 8000af2:	6823      	ldr	r3, [r4, #0]
 8000af4:	400b      	ands	r3, r1
 8000af6:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000af8:	2a00      	cmp	r2, #0
 8000afa:	d1d6      	bne.n	8000aaa <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 8000afc:	f7ff fd96 	bl	800062c <HAL_GetTick>
 8000b00:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b02:	2280      	movs	r2, #128	; 0x80
 8000b04:	6823      	ldr	r3, [r4, #0]
 8000b06:	0292      	lsls	r2, r2, #10
 8000b08:	4213      	tst	r3, r2
 8000b0a:	d100      	bne.n	8000b0e <HAL_RCC_OscConfig+0x132>
 8000b0c:	e777      	b.n	80009fe <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b0e:	f7ff fd8d 	bl	800062c <HAL_GetTick>
 8000b12:	9b00      	ldr	r3, [sp, #0]
 8000b14:	1ac0      	subs	r0, r0, r3
 8000b16:	2864      	cmp	r0, #100	; 0x64
 8000b18:	d9f3      	bls.n	8000b02 <HAL_RCC_OscConfig+0x126>
 8000b1a:	e7d4      	b.n	8000ac6 <HAL_RCC_OscConfig+0xea>
    hsi_state = RCC_OscInitStruct->HSIState;
 8000b1c:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b1e:	2e04      	cmp	r6, #4
 8000b20:	d003      	beq.n	8000b2a <HAL_RCC_OscConfig+0x14e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000b22:	2e0c      	cmp	r6, #12
 8000b24:	d124      	bne.n	8000b70 <HAL_RCC_OscConfig+0x194>
 8000b26:	2f00      	cmp	r7, #0
 8000b28:	d122      	bne.n	8000b70 <HAL_RCC_OscConfig+0x194>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000b2a:	6823      	ldr	r3, [r4, #0]
 8000b2c:	075b      	lsls	r3, r3, #29
 8000b2e:	d501      	bpl.n	8000b34 <HAL_RCC_OscConfig+0x158>
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	d0b2      	beq.n	8000a9a <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b34:	6861      	ldr	r1, [r4, #4]
 8000b36:	692b      	ldr	r3, [r5, #16]
 8000b38:	4871      	ldr	r0, [pc, #452]	; (8000d00 <HAL_RCC_OscConfig+0x324>)
 8000b3a:	021b      	lsls	r3, r3, #8
 8000b3c:	4001      	ands	r1, r0
 8000b3e:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b40:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b42:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	438b      	bics	r3, r1
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b4c:	f7ff fefe 	bl	800094c <HAL_RCC_GetSysClockFreq>
 8000b50:	68e3      	ldr	r3, [r4, #12]
 8000b52:	4a66      	ldr	r2, [pc, #408]	; (8000cec <HAL_RCC_OscConfig+0x310>)
 8000b54:	061b      	lsls	r3, r3, #24
 8000b56:	0f1b      	lsrs	r3, r3, #28
 8000b58:	5cd3      	ldrb	r3, [r2, r3]
 8000b5a:	4965      	ldr	r1, [pc, #404]	; (8000cf0 <HAL_RCC_OscConfig+0x314>)
 8000b5c:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 8000b5e:	4b65      	ldr	r3, [pc, #404]	; (8000cf4 <HAL_RCC_OscConfig+0x318>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b60:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f7ff fd1c 	bl	80005a0 <HAL_InitTick>
      if(status != HAL_OK)
 8000b68:	2800      	cmp	r0, #0
 8000b6a:	d100      	bne.n	8000b6e <HAL_RCC_OscConfig+0x192>
 8000b6c:	e74b      	b.n	8000a06 <HAL_RCC_OscConfig+0x2a>
 8000b6e:	e7ab      	b.n	8000ac8 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b70:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8000b72:	2a00      	cmp	r2, #0
 8000b74:	d018      	beq.n	8000ba8 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b76:	2109      	movs	r1, #9
 8000b78:	438b      	bics	r3, r1
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b7e:	f7ff fd55 	bl	800062c <HAL_GetTick>
 8000b82:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b84:	2204      	movs	r2, #4
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	4213      	tst	r3, r2
 8000b8a:	d007      	beq.n	8000b9c <HAL_RCC_OscConfig+0x1c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b8c:	6862      	ldr	r2, [r4, #4]
 8000b8e:	692b      	ldr	r3, [r5, #16]
 8000b90:	495b      	ldr	r1, [pc, #364]	; (8000d00 <HAL_RCC_OscConfig+0x324>)
 8000b92:	021b      	lsls	r3, r3, #8
 8000b94:	400a      	ands	r2, r1
 8000b96:	4313      	orrs	r3, r2
 8000b98:	6063      	str	r3, [r4, #4]
 8000b9a:	e734      	b.n	8000a06 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b9c:	f7ff fd46 	bl	800062c <HAL_GetTick>
 8000ba0:	1bc0      	subs	r0, r0, r7
 8000ba2:	2802      	cmp	r0, #2
 8000ba4:	d9ee      	bls.n	8000b84 <HAL_RCC_OscConfig+0x1a8>
 8000ba6:	e78e      	b.n	8000ac6 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4393      	bics	r3, r2
 8000bac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bae:	f7ff fd3d 	bl	800062c <HAL_GetTick>
 8000bb2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	6823      	ldr	r3, [r4, #0]
 8000bb8:	4213      	tst	r3, r2
 8000bba:	d100      	bne.n	8000bbe <HAL_RCC_OscConfig+0x1e2>
 8000bbc:	e723      	b.n	8000a06 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bbe:	f7ff fd35 	bl	800062c <HAL_GetTick>
 8000bc2:	1bc0      	subs	r0, r0, r7
 8000bc4:	2802      	cmp	r0, #2
 8000bc6:	d9f5      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x1d8>
 8000bc8:	e77d      	b.n	8000ac6 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000bca:	69eb      	ldr	r3, [r5, #28]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d020      	beq.n	8000c12 <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_MSI_ENABLE();
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	6822      	ldr	r2, [r4, #0]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bda:	f7ff fd27 	bl	800062c <HAL_GetTick>
 8000bde:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000be0:	2280      	movs	r2, #128	; 0x80
 8000be2:	6823      	ldr	r3, [r4, #0]
 8000be4:	0092      	lsls	r2, r2, #2
 8000be6:	4213      	tst	r3, r2
 8000be8:	d00d      	beq.n	8000c06 <HAL_RCC_OscConfig+0x22a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bea:	6863      	ldr	r3, [r4, #4]
 8000bec:	4a3e      	ldr	r2, [pc, #248]	; (8000ce8 <HAL_RCC_OscConfig+0x30c>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bf6:	6862      	ldr	r2, [r4, #4]
 8000bf8:	6a2b      	ldr	r3, [r5, #32]
 8000bfa:	0212      	lsls	r2, r2, #8
 8000bfc:	061b      	lsls	r3, r3, #24
 8000bfe:	0a12      	lsrs	r2, r2, #8
 8000c00:	4313      	orrs	r3, r2
 8000c02:	6063      	str	r3, [r4, #4]
 8000c04:	e72b      	b.n	8000a5e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c06:	f7ff fd11 	bl	800062c <HAL_GetTick>
 8000c0a:	1bc0      	subs	r0, r0, r7
 8000c0c:	2802      	cmp	r0, #2
 8000c0e:	d9e7      	bls.n	8000be0 <HAL_RCC_OscConfig+0x204>
 8000c10:	e759      	b.n	8000ac6 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 8000c12:	6823      	ldr	r3, [r4, #0]
 8000c14:	4a3b      	ldr	r2, [pc, #236]	; (8000d04 <HAL_RCC_OscConfig+0x328>)
 8000c16:	4013      	ands	r3, r2
 8000c18:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c1a:	f7ff fd07 	bl	800062c <HAL_GetTick>
 8000c1e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000c20:	2280      	movs	r2, #128	; 0x80
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	0092      	lsls	r2, r2, #2
 8000c26:	4213      	tst	r3, r2
 8000c28:	d100      	bne.n	8000c2c <HAL_RCC_OscConfig+0x250>
 8000c2a:	e718      	b.n	8000a5e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c2c:	f7ff fcfe 	bl	800062c <HAL_GetTick>
 8000c30:	1bc0      	subs	r0, r0, r7
 8000c32:	2802      	cmp	r0, #2
 8000c34:	d9f4      	bls.n	8000c20 <HAL_RCC_OscConfig+0x244>
 8000c36:	e746      	b.n	8000ac6 <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c38:	696a      	ldr	r2, [r5, #20]
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	d010      	beq.n	8000c62 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8000c40:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000c42:	4313      	orrs	r3, r2
 8000c44:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000c46:	f7ff fcf1 	bl	800062c <HAL_GetTick>
 8000c4a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c50:	4213      	tst	r3, r2
 8000c52:	d000      	beq.n	8000c56 <HAL_RCC_OscConfig+0x27a>
 8000c54:	e707      	b.n	8000a66 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c56:	f7ff fce9 	bl	800062c <HAL_GetTick>
 8000c5a:	1bc0      	subs	r0, r0, r7
 8000c5c:	2802      	cmp	r0, #2
 8000c5e:	d9f5      	bls.n	8000c4c <HAL_RCC_OscConfig+0x270>
 8000c60:	e731      	b.n	8000ac6 <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 8000c62:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000c64:	439a      	bics	r2, r3
 8000c66:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000c68:	f7ff fce0 	bl	800062c <HAL_GetTick>
 8000c6c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000c6e:	2202      	movs	r2, #2
 8000c70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c72:	4213      	tst	r3, r2
 8000c74:	d100      	bne.n	8000c78 <HAL_RCC_OscConfig+0x29c>
 8000c76:	e6f6      	b.n	8000a66 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c78:	f7ff fcd8 	bl	800062c <HAL_GetTick>
 8000c7c:	1bc0      	subs	r0, r0, r7
 8000c7e:	2802      	cmp	r0, #2
 8000c80:	d9f5      	bls.n	8000c6e <HAL_RCC_OscConfig+0x292>
 8000c82:	e720      	b.n	8000ac6 <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c84:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000c86:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000c8a:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8000c8c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c8e:	421a      	tst	r2, r3
 8000c90:	d104      	bne.n	8000c9c <HAL_RCC_OscConfig+0x2c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000c94:	4313      	orrs	r3, r2
 8000c96:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	4f1a      	ldr	r7, [pc, #104]	; (8000d08 <HAL_RCC_OscConfig+0x32c>)
 8000ca0:	0052      	lsls	r2, r2, #1
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	4213      	tst	r3, r2
 8000ca6:	d008      	beq.n	8000cba <HAL_RCC_OscConfig+0x2de>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ca8:	2280      	movs	r2, #128	; 0x80
 8000caa:	68ab      	ldr	r3, [r5, #8]
 8000cac:	0052      	lsls	r2, r2, #1
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d12c      	bne.n	8000d0c <HAL_RCC_OscConfig+0x330>
 8000cb2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	6523      	str	r3, [r4, #80]	; 0x50
 8000cb8:	e04d      	b.n	8000d56 <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cba:	2280      	movs	r2, #128	; 0x80
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	0052      	lsls	r2, r2, #1
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000cc4:	f7ff fcb2 	bl	800062c <HAL_GetTick>
 8000cc8:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	0052      	lsls	r2, r2, #1
 8000cd0:	4213      	tst	r3, r2
 8000cd2:	d1e9      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x2cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cd4:	f7ff fcaa 	bl	800062c <HAL_GetTick>
 8000cd8:	9b01      	ldr	r3, [sp, #4]
 8000cda:	1ac0      	subs	r0, r0, r3
 8000cdc:	2864      	cmp	r0, #100	; 0x64
 8000cde:	d9f4      	bls.n	8000cca <HAL_RCC_OscConfig+0x2ee>
 8000ce0:	e6f1      	b.n	8000ac6 <HAL_RCC_OscConfig+0xea>
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	ffff1fff 	.word	0xffff1fff
 8000cec:	080013f1 	.word	0x080013f1
 8000cf0:	2000000c 	.word	0x2000000c
 8000cf4:	20000014 	.word	0x20000014
 8000cf8:	fffeffff 	.word	0xfffeffff
 8000cfc:	fffbffff 	.word	0xfffbffff
 8000d00:	ffffe0ff 	.word	0xffffe0ff
 8000d04:	fffffeff 	.word	0xfffffeff
 8000d08:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d116      	bne.n	8000d3e <HAL_RCC_OscConfig+0x362>
 8000d10:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000d12:	4a6b      	ldr	r2, [pc, #428]	; (8000ec0 <HAL_RCC_OscConfig+0x4e4>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	6523      	str	r3, [r4, #80]	; 0x50
 8000d18:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000d1a:	4a6a      	ldr	r2, [pc, #424]	; (8000ec4 <HAL_RCC_OscConfig+0x4e8>)
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000d20:	f7ff fc84 	bl	800062c <HAL_GetTick>
 8000d24:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000d2a:	0092      	lsls	r2, r2, #2
 8000d2c:	4213      	tst	r3, r2
 8000d2e:	d01a      	beq.n	8000d66 <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d30:	f7ff fc7c 	bl	800062c <HAL_GetTick>
 8000d34:	4b64      	ldr	r3, [pc, #400]	; (8000ec8 <HAL_RCC_OscConfig+0x4ec>)
 8000d36:	1bc0      	subs	r0, r0, r7
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	d9f4      	bls.n	8000d26 <HAL_RCC_OscConfig+0x34a>
 8000d3c:	e6c3      	b.n	8000ac6 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d3e:	21a0      	movs	r1, #160	; 0xa0
 8000d40:	00c9      	lsls	r1, r1, #3
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d118      	bne.n	8000d78 <HAL_RCC_OscConfig+0x39c>
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	430b      	orrs	r3, r1
 8000d4e:	6523      	str	r3, [r4, #80]	; 0x50
 8000d50:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000d52:	431a      	orrs	r2, r3
 8000d54:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000d56:	f7ff fc69 	bl	800062c <HAL_GetTick>
 8000d5a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000d60:	0092      	lsls	r2, r2, #2
 8000d62:	4213      	tst	r3, r2
 8000d64:	d010      	beq.n	8000d88 <HAL_RCC_OscConfig+0x3ac>
    if(pwrclkchanged == SET)
 8000d66:	9b00      	ldr	r3, [sp, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d000      	beq.n	8000d6e <HAL_RCC_OscConfig+0x392>
 8000d6c:	e67f      	b.n	8000a6e <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d70:	4a56      	ldr	r2, [pc, #344]	; (8000ecc <HAL_RCC_OscConfig+0x4f0>)
 8000d72:	4013      	ands	r3, r2
 8000d74:	63a3      	str	r3, [r4, #56]	; 0x38
 8000d76:	e67a      	b.n	8000a6e <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d78:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000d7a:	4a51      	ldr	r2, [pc, #324]	; (8000ec0 <HAL_RCC_OscConfig+0x4e4>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	6523      	str	r3, [r4, #80]	; 0x50
 8000d80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000d82:	4a50      	ldr	r2, [pc, #320]	; (8000ec4 <HAL_RCC_OscConfig+0x4e8>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	e796      	b.n	8000cb6 <HAL_RCC_OscConfig+0x2da>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d88:	f7ff fc50 	bl	800062c <HAL_GetTick>
 8000d8c:	4b4e      	ldr	r3, [pc, #312]	; (8000ec8 <HAL_RCC_OscConfig+0x4ec>)
 8000d8e:	1bc0      	subs	r0, r0, r7
 8000d90:	4298      	cmp	r0, r3
 8000d92:	d9e3      	bls.n	8000d5c <HAL_RCC_OscConfig+0x380>
 8000d94:	e697      	b.n	8000ac6 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000d96:	69aa      	ldr	r2, [r5, #24]
 8000d98:	2101      	movs	r1, #1
 8000d9a:	4b4d      	ldr	r3, [pc, #308]	; (8000ed0 <HAL_RCC_OscConfig+0x4f4>)
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	d018      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI48_ENABLE();
 8000da0:	68a2      	ldr	r2, [r4, #8]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	60a2      	str	r2, [r4, #8]
 8000da6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000da8:	430a      	orrs	r2, r1
 8000daa:	6362      	str	r2, [r4, #52]	; 0x34
 8000dac:	2280      	movs	r2, #128	; 0x80
 8000dae:	6a19      	ldr	r1, [r3, #32]
 8000db0:	0192      	lsls	r2, r2, #6
 8000db2:	430a      	orrs	r2, r1
 8000db4:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8000db6:	f7ff fc39 	bl	800062c <HAL_GetTick>
 8000dba:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	68a3      	ldr	r3, [r4, #8]
 8000dc0:	4213      	tst	r3, r2
 8000dc2:	d000      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x3ea>
 8000dc4:	e657      	b.n	8000a76 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000dc6:	f7ff fc31 	bl	800062c <HAL_GetTick>
 8000dca:	1bc0      	subs	r0, r0, r7
 8000dcc:	2802      	cmp	r0, #2
 8000dce:	d9f5      	bls.n	8000dbc <HAL_RCC_OscConfig+0x3e0>
 8000dd0:	e679      	b.n	8000ac6 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 8000dd2:	68a2      	ldr	r2, [r4, #8]
 8000dd4:	438a      	bics	r2, r1
 8000dd6:	60a2      	str	r2, [r4, #8]
 8000dd8:	6a1a      	ldr	r2, [r3, #32]
 8000dda:	493e      	ldr	r1, [pc, #248]	; (8000ed4 <HAL_RCC_OscConfig+0x4f8>)
 8000ddc:	400a      	ands	r2, r1
 8000dde:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8000de0:	f7ff fc24 	bl	800062c <HAL_GetTick>
 8000de4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000de6:	2202      	movs	r2, #2
 8000de8:	68a3      	ldr	r3, [r4, #8]
 8000dea:	4213      	tst	r3, r2
 8000dec:	d100      	bne.n	8000df0 <HAL_RCC_OscConfig+0x414>
 8000dee:	e642      	b.n	8000a76 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000df0:	f7ff fc1c 	bl	800062c <HAL_GetTick>
 8000df4:	1bc0      	subs	r0, r0, r7
 8000df6:	2802      	cmp	r0, #2
 8000df8:	d9f5      	bls.n	8000de6 <HAL_RCC_OscConfig+0x40a>
 8000dfa:	e664      	b.n	8000ac6 <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dfc:	2e0c      	cmp	r6, #12
 8000dfe:	d043      	beq.n	8000e88 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e00:	4a35      	ldr	r2, [pc, #212]	; (8000ed8 <HAL_RCC_OscConfig+0x4fc>)
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d12e      	bne.n	8000e64 <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 8000e06:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000e08:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e0e:	f7ff fc0d 	bl	800062c <HAL_GetTick>
 8000e12:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000e14:	04bf      	lsls	r7, r7, #18
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	423b      	tst	r3, r7
 8000e1a:	d11d      	bne.n	8000e58 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e1c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000e1e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000e20:	68e2      	ldr	r2, [r4, #12]
 8000e22:	430b      	orrs	r3, r1
 8000e24:	492d      	ldr	r1, [pc, #180]	; (8000edc <HAL_RCC_OscConfig+0x500>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000e26:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e28:	400a      	ands	r2, r1
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000e2e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e30:	4313      	orrs	r3, r2
 8000e32:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	6822      	ldr	r2, [r4, #0]
 8000e38:	045b      	lsls	r3, r3, #17
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e3e:	f7ff fbf5 	bl	800062c <HAL_GetTick>
 8000e42:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	4233      	tst	r3, r6
 8000e48:	d000      	beq.n	8000e4c <HAL_RCC_OscConfig+0x470>
 8000e4a:	e618      	b.n	8000a7e <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e4c:	f7ff fbee 	bl	800062c <HAL_GetTick>
 8000e50:	1b40      	subs	r0, r0, r5
 8000e52:	2802      	cmp	r0, #2
 8000e54:	d9f6      	bls.n	8000e44 <HAL_RCC_OscConfig+0x468>
 8000e56:	e636      	b.n	8000ac6 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e58:	f7ff fbe8 	bl	800062c <HAL_GetTick>
 8000e5c:	1b80      	subs	r0, r0, r6
 8000e5e:	2802      	cmp	r0, #2
 8000e60:	d9d9      	bls.n	8000e16 <HAL_RCC_OscConfig+0x43a>
 8000e62:	e630      	b.n	8000ac6 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 8000e64:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000e66:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000e68:	4013      	ands	r3, r2
 8000e6a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fbde 	bl	800062c <HAL_GetTick>
 8000e70:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000e72:	04b6      	lsls	r6, r6, #18
 8000e74:	6823      	ldr	r3, [r4, #0]
 8000e76:	4233      	tst	r3, r6
 8000e78:	d100      	bne.n	8000e7c <HAL_RCC_OscConfig+0x4a0>
 8000e7a:	e600      	b.n	8000a7e <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e7c:	f7ff fbd6 	bl	800062c <HAL_GetTick>
 8000e80:	1b40      	subs	r0, r0, r5
 8000e82:	2802      	cmp	r0, #2
 8000e84:	d9f6      	bls.n	8000e74 <HAL_RCC_OscConfig+0x498>
 8000e86:	e61e      	b.n	8000ac6 <HAL_RCC_OscConfig+0xea>
        return HAL_ERROR;
 8000e88:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d100      	bne.n	8000e90 <HAL_RCC_OscConfig+0x4b4>
 8000e8e:	e61b      	b.n	8000ac8 <HAL_RCC_OscConfig+0xec>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e90:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8000e92:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e94:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000e96:	0252      	lsls	r2, r2, #9
 8000e98:	401a      	ands	r2, r3
 8000e9a:	428a      	cmp	r2, r1
 8000e9c:	d000      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x4c4>
 8000e9e:	e5fc      	b.n	8000a9a <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000ea0:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ea2:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000ea4:	0392      	lsls	r2, r2, #14
 8000ea6:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ea8:	428a      	cmp	r2, r1
 8000eaa:	d000      	beq.n	8000eae <HAL_RCC_OscConfig+0x4d2>
 8000eac:	e5f5      	b.n	8000a9a <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000eae:	22c0      	movs	r2, #192	; 0xc0
 8000eb0:	0412      	lsls	r2, r2, #16
 8000eb2:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000eb4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d100      	bne.n	8000ebc <HAL_RCC_OscConfig+0x4e0>
 8000eba:	e5e0      	b.n	8000a7e <HAL_RCC_OscConfig+0xa2>
 8000ebc:	e5ed      	b.n	8000a9a <HAL_RCC_OscConfig+0xbe>
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	fffffeff 	.word	0xfffffeff
 8000ec4:	fffffbff 	.word	0xfffffbff
 8000ec8:	00001388 	.word	0x00001388
 8000ecc:	efffffff 	.word	0xefffffff
 8000ed0:	40010000 	.word	0x40010000
 8000ed4:	ffffdfff 	.word	0xffffdfff
 8000ed8:	feffffff 	.word	0xfeffffff
 8000edc:	ff02ffff 	.word	0xff02ffff

08000ee0 <HAL_RCC_ClockConfig>:
{
 8000ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ee2:	1e04      	subs	r4, r0, #0
 8000ee4:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8000ee6:	d101      	bne.n	8000eec <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000ee8:	2001      	movs	r0, #1
}
 8000eea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000eec:	2501      	movs	r5, #1
 8000eee:	4e5b      	ldr	r6, [pc, #364]	; (800105c <HAL_RCC_ClockConfig+0x17c>)
 8000ef0:	9a01      	ldr	r2, [sp, #4]
 8000ef2:	6833      	ldr	r3, [r6, #0]
 8000ef4:	402b      	ands	r3, r5
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d331      	bcc.n	8000f5e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000efa:	6822      	ldr	r2, [r4, #0]
 8000efc:	0793      	lsls	r3, r2, #30
 8000efe:	d443      	bmi.n	8000f88 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f00:	07d2      	lsls	r2, r2, #31
 8000f02:	d449      	bmi.n	8000f98 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f04:	2501      	movs	r5, #1
 8000f06:	6833      	ldr	r3, [r6, #0]
 8000f08:	9a01      	ldr	r2, [sp, #4]
 8000f0a:	402b      	ands	r3, r5
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d909      	bls.n	8000f24 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f10:	6833      	ldr	r3, [r6, #0]
 8000f12:	43ab      	bics	r3, r5
 8000f14:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8000f16:	f7ff fb89 	bl	800062c <HAL_GetTick>
 8000f1a:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f1c:	6833      	ldr	r3, [r6, #0]
 8000f1e:	422b      	tst	r3, r5
 8000f20:	d000      	beq.n	8000f24 <HAL_RCC_ClockConfig+0x44>
 8000f22:	e08c      	b.n	800103e <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f24:	6822      	ldr	r2, [r4, #0]
 8000f26:	4d4e      	ldr	r5, [pc, #312]	; (8001060 <HAL_RCC_ClockConfig+0x180>)
 8000f28:	0753      	lsls	r3, r2, #29
 8000f2a:	d500      	bpl.n	8000f2e <HAL_RCC_ClockConfig+0x4e>
 8000f2c:	e08f      	b.n	800104e <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f2e:	0712      	lsls	r2, r2, #28
 8000f30:	d506      	bpl.n	8000f40 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f32:	68ea      	ldr	r2, [r5, #12]
 8000f34:	6923      	ldr	r3, [r4, #16]
 8000f36:	494b      	ldr	r1, [pc, #300]	; (8001064 <HAL_RCC_ClockConfig+0x184>)
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	400a      	ands	r2, r1
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f40:	f7ff fd04 	bl	800094c <HAL_RCC_GetSysClockFreq>
 8000f44:	68eb      	ldr	r3, [r5, #12]
 8000f46:	4a48      	ldr	r2, [pc, #288]	; (8001068 <HAL_RCC_ClockConfig+0x188>)
 8000f48:	061b      	lsls	r3, r3, #24
 8000f4a:	0f1b      	lsrs	r3, r3, #28
 8000f4c:	5cd3      	ldrb	r3, [r2, r3]
 8000f4e:	4947      	ldr	r1, [pc, #284]	; (800106c <HAL_RCC_ClockConfig+0x18c>)
 8000f50:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 8000f52:	4b47      	ldr	r3, [pc, #284]	; (8001070 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f54:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	f7ff fb22 	bl	80005a0 <HAL_InitTick>
  if(status != HAL_OK)
 8000f5c:	e7c5      	b.n	8000eea <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f5e:	6833      	ldr	r3, [r6, #0]
 8000f60:	9a01      	ldr	r2, [sp, #4]
 8000f62:	43ab      	bics	r3, r5
 8000f64:	4313      	orrs	r3, r2
 8000f66:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8000f68:	f7ff fb60 	bl	800062c <HAL_GetTick>
 8000f6c:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f6e:	6833      	ldr	r3, [r6, #0]
 8000f70:	9a01      	ldr	r2, [sp, #4]
 8000f72:	402b      	ands	r3, r5
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d0c0      	beq.n	8000efa <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f78:	f7ff fb58 	bl	800062c <HAL_GetTick>
 8000f7c:	4b3d      	ldr	r3, [pc, #244]	; (8001074 <HAL_RCC_ClockConfig+0x194>)
 8000f7e:	1bc0      	subs	r0, r0, r7
 8000f80:	4298      	cmp	r0, r3
 8000f82:	d9f4      	bls.n	8000f6e <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8000f84:	2003      	movs	r0, #3
 8000f86:	e7b0      	b.n	8000eea <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f88:	20f0      	movs	r0, #240	; 0xf0
 8000f8a:	4935      	ldr	r1, [pc, #212]	; (8001060 <HAL_RCC_ClockConfig+0x180>)
 8000f8c:	68cb      	ldr	r3, [r1, #12]
 8000f8e:	4383      	bics	r3, r0
 8000f90:	68a0      	ldr	r0, [r4, #8]
 8000f92:	4303      	orrs	r3, r0
 8000f94:	60cb      	str	r3, [r1, #12]
 8000f96:	e7b3      	b.n	8000f00 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f98:	4d31      	ldr	r5, [pc, #196]	; (8001060 <HAL_RCC_ClockConfig+0x180>)
 8000f9a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f9c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f9e:	2a02      	cmp	r2, #2
 8000fa0:	d118      	bne.n	8000fd4 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fa2:	039b      	lsls	r3, r3, #14
 8000fa4:	d5a0      	bpl.n	8000ee8 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	68eb      	ldr	r3, [r5, #12]
 8000faa:	438b      	bics	r3, r1
 8000fac:	4313      	orrs	r3, r2
 8000fae:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000fb0:	f7ff fb3c 	bl	800062c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb4:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000fb6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d118      	bne.n	8000fee <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fbc:	220c      	movs	r2, #12
 8000fbe:	68eb      	ldr	r3, [r5, #12]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d09e      	beq.n	8000f04 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fc6:	f7ff fb31 	bl	800062c <HAL_GetTick>
 8000fca:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <HAL_RCC_ClockConfig+0x194>)
 8000fcc:	1bc0      	subs	r0, r0, r7
 8000fce:	4298      	cmp	r0, r3
 8000fd0:	d9f4      	bls.n	8000fbc <HAL_RCC_ClockConfig+0xdc>
 8000fd2:	e7d7      	b.n	8000f84 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fd4:	2a03      	cmp	r2, #3
 8000fd6:	d102      	bne.n	8000fde <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000fd8:	019b      	lsls	r3, r3, #6
 8000fda:	d4e4      	bmi.n	8000fa6 <HAL_RCC_ClockConfig+0xc6>
 8000fdc:	e784      	b.n	8000ee8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000fde:	2a01      	cmp	r2, #1
 8000fe0:	d102      	bne.n	8000fe8 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fe2:	075b      	lsls	r3, r3, #29
 8000fe4:	d4df      	bmi.n	8000fa6 <HAL_RCC_ClockConfig+0xc6>
 8000fe6:	e77f      	b.n	8000ee8 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000fe8:	059b      	lsls	r3, r3, #22
 8000fea:	d4dc      	bmi.n	8000fa6 <HAL_RCC_ClockConfig+0xc6>
 8000fec:	e77c      	b.n	8000ee8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d10b      	bne.n	800100a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	68eb      	ldr	r3, [r5, #12]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d083      	beq.n	8000f04 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ffc:	f7ff fb16 	bl	800062c <HAL_GetTick>
 8001000:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <HAL_RCC_ClockConfig+0x194>)
 8001002:	1bc0      	subs	r0, r0, r7
 8001004:	4298      	cmp	r0, r3
 8001006:	d9f4      	bls.n	8000ff2 <HAL_RCC_ClockConfig+0x112>
 8001008:	e7bc      	b.n	8000f84 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800100a:	2b01      	cmp	r3, #1
 800100c:	d011      	beq.n	8001032 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800100e:	220c      	movs	r2, #12
 8001010:	68eb      	ldr	r3, [r5, #12]
 8001012:	4213      	tst	r3, r2
 8001014:	d100      	bne.n	8001018 <HAL_RCC_ClockConfig+0x138>
 8001016:	e775      	b.n	8000f04 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001018:	f7ff fb08 	bl	800062c <HAL_GetTick>
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_RCC_ClockConfig+0x194>)
 800101e:	1bc0      	subs	r0, r0, r7
 8001020:	4298      	cmp	r0, r3
 8001022:	d9f4      	bls.n	800100e <HAL_RCC_ClockConfig+0x12e>
 8001024:	e7ae      	b.n	8000f84 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001026:	f7ff fb01 	bl	800062c <HAL_GetTick>
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_RCC_ClockConfig+0x194>)
 800102c:	1bc0      	subs	r0, r0, r7
 800102e:	4298      	cmp	r0, r3
 8001030:	d8a8      	bhi.n	8000f84 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001032:	220c      	movs	r2, #12
 8001034:	68eb      	ldr	r3, [r5, #12]
 8001036:	4013      	ands	r3, r2
 8001038:	2b04      	cmp	r3, #4
 800103a:	d1f4      	bne.n	8001026 <HAL_RCC_ClockConfig+0x146>
 800103c:	e762      	b.n	8000f04 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800103e:	f7ff faf5 	bl	800062c <HAL_GetTick>
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_RCC_ClockConfig+0x194>)
 8001044:	1bc0      	subs	r0, r0, r7
 8001046:	4298      	cmp	r0, r3
 8001048:	d800      	bhi.n	800104c <HAL_RCC_ClockConfig+0x16c>
 800104a:	e767      	b.n	8000f1c <HAL_RCC_ClockConfig+0x3c>
 800104c:	e79a      	b.n	8000f84 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800104e:	68eb      	ldr	r3, [r5, #12]
 8001050:	4909      	ldr	r1, [pc, #36]	; (8001078 <HAL_RCC_ClockConfig+0x198>)
 8001052:	400b      	ands	r3, r1
 8001054:	68e1      	ldr	r1, [r4, #12]
 8001056:	430b      	orrs	r3, r1
 8001058:	60eb      	str	r3, [r5, #12]
 800105a:	e768      	b.n	8000f2e <HAL_RCC_ClockConfig+0x4e>
 800105c:	40022000 	.word	0x40022000
 8001060:	40021000 	.word	0x40021000
 8001064:	ffffc7ff 	.word	0xffffc7ff
 8001068:	080013f1 	.word	0x080013f1
 800106c:	2000000c 	.word	0x2000000c
 8001070:	20000014 	.word	0x20000014
 8001074:	00001388 	.word	0x00001388
 8001078:	fffff8ff 	.word	0xfffff8ff

0800107c <HAL_RCC_GetOscConfig>:

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
                  | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_MSI;
#if defined(RCC_HSI48_SUPPORT)
  RCC_OscInitStruct->OscillatorType |= RCC_OSCILLATORTYPE_HSI48;
 800107c:	233f      	movs	r3, #63	; 0x3f
 800107e:	6003      	str	r3, [r0, #0]
#endif /* RCC_HSI48_SUPPORT */


  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8001080:	4b23      	ldr	r3, [pc, #140]	; (8001110 <HAL_RCC_GetOscConfig+0x94>)
{
 8001082:	b510      	push	{r4, lr}
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	0352      	lsls	r2, r2, #13
 8001088:	d43c      	bmi.n	8001104 <HAL_RCC_GetOscConfig+0x88>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	0249      	lsls	r1, r1, #9
 8001090:	400a      	ands	r2, r1
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8001092:	2101      	movs	r1, #1
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
  }

  RCC_OscInitStruct->MSICalibrationValue = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos);
  RCC_OscInitStruct->MSIClockRange = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSIRANGE));
 8001094:	24e0      	movs	r4, #224	; 0xe0
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8001096:	6042      	str	r2, [r0, #4]
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8001098:	681a      	ldr	r2, [r3, #0]
  RCC_OscInitStruct->MSIClockRange = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSIRANGE));
 800109a:	0224      	lsls	r4, r4, #8
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 800109c:	400a      	ands	r2, r1
 800109e:	60c2      	str	r2, [r0, #12]
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->ICSCR & RCC_ICSCR_HSITRIM) >> 8);
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	04d2      	lsls	r2, r2, #19
 80010a4:	0ed2      	lsrs	r2, r2, #27
 80010a6:	6102      	str	r2, [r0, #16]
  if((RCC->CR &RCC_CR_MSION) == RCC_CR_MSION)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	0a12      	lsrs	r2, r2, #8
 80010ac:	400a      	ands	r2, r1
 80010ae:	61c2      	str	r2, [r0, #28]
  RCC_OscInitStruct->MSICalibrationValue = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos);
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	0e12      	lsrs	r2, r2, #24
 80010b4:	6202      	str	r2, [r0, #32]
  RCC_OscInitStruct->MSIClockRange = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSIRANGE));
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	4022      	ands	r2, r4
 80010ba:	6242      	str	r2, [r0, #36]	; 0x24

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSEBYP) == RCC_CSR_LSEBYP)
 80010bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010be:	0552      	lsls	r2, r2, #21
 80010c0:	d423      	bmi.n	800110a <HAL_RCC_GetOscConfig+0x8e>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
  }
  else if((RCC->CSR &RCC_CSR_LSEON) == RCC_CSR_LSEON)
 80010c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010c4:	0a12      	lsrs	r2, r2, #8
 80010c6:	400a      	ands	r2, r1
 80010c8:	0212      	lsls	r2, r2, #8
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 80010ca:	2101      	movs	r1, #1
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80010cc:	6082      	str	r2, [r0, #8]
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 80010ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010d0:	400a      	ands	r2, r1
 80010d2:	6142      	str	r2, [r0, #20]
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
  }

#if defined(RCC_HSI48_SUPPORT)
  /* Get the HSI48 configuration if any-----------------------------------------*/
  RCC_OscInitStruct->HSI48State = __HAL_RCC_GET_HSI48_STATE();
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	400a      	ands	r2, r1
 80010d8:	6182      	str	r2, [r0, #24]
#endif /* RCC_HSI48_SUPPORT */

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	01d2      	lsls	r2, r2, #7
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 80010de:	0fd2      	lsrs	r2, r2, #31
 80010e0:	1852      	adds	r2, r2, r1
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	6282      	str	r2, [r0, #40]	; 0x28
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	0249      	lsls	r1, r1, #9
 80010ea:	400a      	ands	r2, r1
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMUL);
 80010ec:	21f0      	movs	r1, #240	; 0xf0
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 80010ee:	62c2      	str	r2, [r0, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMUL);
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	0389      	lsls	r1, r1, #14
 80010f4:	400a      	ands	r2, r1
 80010f6:	6302      	str	r2, [r0, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLDIV = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLDIV);
 80010f8:	22c0      	movs	r2, #192	; 0xc0
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	0412      	lsls	r2, r2, #16
 80010fe:	4013      	ands	r3, r2
 8001100:	6343      	str	r3, [r0, #52]	; 0x34
}
 8001102:	bd10      	pop	{r4, pc}
 8001104:	22a0      	movs	r2, #160	; 0xa0
 8001106:	02d2      	lsls	r2, r2, #11
 8001108:	e7c3      	b.n	8001092 <HAL_RCC_GetOscConfig+0x16>
 800110a:	22a0      	movs	r2, #160	; 0xa0
 800110c:	00d2      	lsls	r2, r2, #3
 800110e:	e7dc      	b.n	80010ca <HAL_RCC_GetOscConfig+0x4e>
 8001110:	40021000 	.word	0x40021000

08001114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001116:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001118:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800111a:	e003      	b.n	8001124 <LoopCopyDataInit>

0800111c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800111e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001120:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001122:	3104      	adds	r1, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001124:	480b      	ldr	r0, [pc, #44]	; (8001154 <LoopForever+0xa>)
  ldr  r3, =_edata
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <LoopForever+0xe>)
  adds  r2, r0, r1
 8001128:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800112a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800112c:	d3f6      	bcc.n	800111c <CopyDataInit>
  ldr  r2, =_sbss
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <LoopForever+0x12>)
  b  LoopFillZerobss
 8001130:	e002      	b.n	8001138 <LoopFillZerobss>

08001132 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001132:	2300      	movs	r3, #0
  str  r3, [r2]
 8001134:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001136:	3204      	adds	r2, #4

08001138 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <LoopForever+0x16>)
  cmp  r2, r3
 800113a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800113c:	d3f9      	bcc.n	8001132 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800113e:	f7ff fa2d 	bl	800059c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001142:	f000 f91d 	bl	8001380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001146:	f000 f80f 	bl	8001168 <main>

0800114a <LoopForever>:

LoopForever:
    b LoopForever
 800114a:	e7fe      	b.n	800114a <LoopForever>
  ldr   r0, =_estack
 800114c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8001150:	0800141c 	.word	0x0800141c
  ldr  r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001158:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 800115c:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8001160:	20000038 	.word	0x20000038

08001164 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC1_COMP_IRQHandler>
	...

08001168 <main>:
* @brief  Main program
* @param  None
* @retval None
*/
int main(void)
{
 8001168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116a:	b09b      	sub	sp, #108	; 0x6c
             timer for example or other time source), keeping in mind that Time base 
             duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
             handled in milliseconds basis.
       - Low Level Initialization
     */
  HAL_Init();
 800116c:	f7ff fa3a 	bl	80005e4 <HAL_Init>

  /* Configure LED3 */
  BSP_LED_Init(LED3);
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff f999 	bl	80004a8 <BSP_LED_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	4c6b      	ldr	r4, [pc, #428]	; (8001328 <main+0x1c0>)
 800117a:	055b      	lsls	r3, r3, #21
 800117c:	6ba2      	ldr	r2, [r4, #56]	; 0x38

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800117e:	4f6b      	ldr	r7, [pc, #428]	; (800132c <main+0x1c4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001180:	4313      	orrs	r3, r2
 8001182:	63a3      	str	r3, [r4, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	4b6a      	ldr	r3, [pc, #424]	; (8001330 <main+0x1c8>)

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001188:	2602      	movs	r6, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800118a:	401a      	ands	r2, r3
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	4313      	orrs	r3, r2
 8001192:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8001194:	2300      	movs	r3, #0
 8001196:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001198:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	02db      	lsls	r3, r3, #11
 800119e:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	03db      	lsls	r3, r3, #15
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a4:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80011a6:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 80011a8:	2310      	movs	r3, #16
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011aa:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ac:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ae:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b0:	9616      	str	r6, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 80011b2:	9310      	str	r3, [sp, #64]	; 0x40
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f7ff fc12 	bl	80009dc <HAL_RCC_OscConfig>
 80011b8:	2800      	cmp	r0, #0
 80011ba:	d003      	beq.n	80011c4 <main+0x5c>
static void Error_Handler(void)
{
  while(1)
  {
    /* Turn on the LED3 */
    BSP_LED_On(LED3);
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff f9a5 	bl	800050c <BSP_LED_On>
  while(1)
 80011c2:	e7fb      	b.n	80011bc <main+0x54>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80011c4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c6:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80011c8:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 80011ca:	900a      	str	r0, [sp, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	3b0c      	subs	r3, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 80011ce:	900b      	str	r0, [sp, #44]	; 0x2c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011d0:	0029      	movs	r1, r5
 80011d2:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d4:	9308      	str	r3, [sp, #32]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011d6:	f7ff fe83 	bl	8000ee0 <HAL_RCC_ClockConfig>
 80011da:	9001      	str	r0, [sp, #4]
 80011dc:	2800      	cmp	r0, #0
 80011de:	d003      	beq.n	80011e8 <main+0x80>
    BSP_LED_On(LED3);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff f993 	bl	800050c <BSP_LED_On>
  while(1)
 80011e6:	e7fb      	b.n	80011e0 <main+0x78>
  HAL_PWREx_EnableUltraLowPower();
 80011e8:	f7ff fba6 	bl	8000938 <HAL_PWREx_EnableUltraLowPower>
  HAL_PWREx_EnableFastWakeUp();
 80011ec:	f7ff fb9a 	bl	8000924 <HAL_PWREx_EnableFastWakeUp>
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_HSI);
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	68e2      	ldr	r2, [r4, #12]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	4313      	orrs	r3, r2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f8:	2204      	movs	r2, #4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fa:	2108      	movs	r1, #8
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_HSI);
 80011fc:	60e3      	str	r3, [r4, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001200:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	432b      	orrs	r3, r5
 8001204:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001206:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001208:	402b      	ands	r3, r5
 800120a:	9302      	str	r3, [sp, #8]
 800120c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001210:	4333      	orrs	r3, r6
 8001212:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001214:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001216:	4033      	ands	r3, r6
 8001218:	9303      	str	r3, [sp, #12]
 800121a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800121e:	4313      	orrs	r3, r2
 8001220:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001222:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001224:	4013      	ands	r3, r2
 8001226:	9304      	str	r3, [sp, #16]
 8001228:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800122c:	430b      	orrs	r3, r1
 800122e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001230:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001232:	400b      	ands	r3, r1
 8001234:	9305      	str	r3, [sp, #20]
 8001236:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001238:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800123a:	4303      	orrs	r3, r0
 800123c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800123e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001240:	4003      	ands	r3, r0
 8001242:	9306      	str	r3, [sp, #24]
 8001244:	9b06      	ldr	r3, [sp, #24]
  GPIO_InitStructure.Pin = GPIO_PIN_All;
 8001246:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <main+0x1cc>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure); 
 8001248:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStructure.Pin = GPIO_PIN_All;
 800124a:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 800124c:	2303      	movs	r3, #3
 800124e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001250:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure); 
 8001252:	05c0      	lsls	r0, r0, #23
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001254:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure); 
 8001256:	ab0c      	add	r3, sp, #48	; 0x30
 8001258:	0019      	movs	r1, r3
 800125a:	f7ff fa53 	bl	8000704 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800125e:	ab0c      	add	r3, sp, #48	; 0x30
 8001260:	0019      	movs	r1, r3
 8001262:	4835      	ldr	r0, [pc, #212]	; (8001338 <main+0x1d0>)
 8001264:	f7ff fa4e 	bl	8000704 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001268:	ab0c      	add	r3, sp, #48	; 0x30
 800126a:	0019      	movs	r1, r3
 800126c:	4833      	ldr	r0, [pc, #204]	; (800133c <main+0x1d4>)
 800126e:	f7ff fa49 	bl	8000704 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001272:	ab0c      	add	r3, sp, #48	; 0x30
 8001274:	0019      	movs	r1, r3
 8001276:	4832      	ldr	r0, [pc, #200]	; (8001340 <main+0x1d8>)
 8001278:	f7ff fa44 	bl	8000704 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStructure);
 800127c:	ab0c      	add	r3, sp, #48	; 0x30
 800127e:	0019      	movs	r1, r3
 8001280:	4830      	ldr	r0, [pc, #192]	; (8001344 <main+0x1dc>)
 8001282:	f7ff fa3f 	bl	8000704 <HAL_GPIO_Init>
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8001286:	2204      	movs	r2, #4
  __HAL_RCC_GPIOD_CLK_DISABLE();
 8001288:	2108      	movs	r1, #8
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800128a:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 800128c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800128e:	43ab      	bics	r3, r5
 8001290:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8001292:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001294:	43b3      	bics	r3, r6
 8001296:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8001298:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800129a:	4393      	bics	r3, r2
 800129c:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOD_CLK_DISABLE();
 800129e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012a0:	438b      	bics	r3, r1
 80012a2:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 80012a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012a6:	4383      	bics	r3, r0
 80012a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    HAL_Delay(5000);
 80012aa:	4827      	ldr	r0, [pc, #156]	; (8001348 <main+0x1e0>)
 80012ac:	f7ff f9c4 	bl	8000638 <HAL_Delay>
    BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80012b0:	0029      	movs	r1, r5
 80012b2:	2000      	movs	r0, #0
 80012b4:	f7ff f93a 	bl	800052c <BSP_PB_Init>
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80012b8:	0029      	movs	r1, r5
 80012ba:	0028      	movs	r0, r5
 80012bc:	f7ff faf6 	bl	80008ac <HAL_PWR_EnterSTOPMode>
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80012c4:	055b      	lsls	r3, r3, #21
 80012c6:	4313      	orrs	r3, r2
 80012c8:	63a3      	str	r3, [r4, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <main+0x1c8>)
  HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
 80012ce:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d0:	401a      	ands	r2, r3
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	011b      	lsls	r3, r3, #4
 80012d6:	4313      	orrs	r3, r2
 80012d8:	603b      	str	r3, [r7, #0]
  HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
 80012da:	f7ff fecf 	bl	800107c <HAL_RCC_GetOscConfig>
  RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 80012de:	2300      	movs	r3, #0
 80012e0:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e2:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	02db      	lsls	r3, r3, #11
 80012e8:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	03db      	lsls	r3, r3, #15
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ee:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80012f0:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 80012f2:	2310      	movs	r3, #16
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f4:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f6:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f8:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fa:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 80012fc:	9310      	str	r3, [sp, #64]	; 0x40
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fe:	f7ff fb6d 	bl	80009dc <HAL_RCC_OscConfig>
 8001302:	2800      	cmp	r0, #0
 8001304:	d003      	beq.n	800130e <main+0x1a6>
    BSP_LED_On(LED3);
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff f900 	bl	800050c <BSP_LED_On>
  while(1)
 800130c:	e7fb      	b.n	8001306 <main+0x19e>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130e:	2303      	movs	r3, #3
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001310:	0029      	movs	r1, r5
 8001312:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8001314:	9507      	str	r5, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001316:	9308      	str	r3, [sp, #32]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001318:	f7ff fde2 	bl	8000ee0 <HAL_RCC_ClockConfig>
 800131c:	2800      	cmp	r0, #0
 800131e:	d0c4      	beq.n	80012aa <main+0x142>
    BSP_LED_On(LED3);
 8001320:	2000      	movs	r0, #0
 8001322:	f7ff f8f3 	bl	800050c <BSP_LED_On>
  while(1)
 8001326:	e7fb      	b.n	8001320 <main+0x1b8>
 8001328:	40021000 	.word	0x40021000
 800132c:	40007000 	.word	0x40007000
 8001330:	ffffe7ff 	.word	0xffffe7ff
 8001334:	0000ffff 	.word	0x0000ffff
 8001338:	50000400 	.word	0x50000400
 800133c:	50000800 	.word	0x50000800
 8001340:	50000c00 	.word	0x50000c00
 8001344:	50001c00 	.word	0x50001c00
 8001348:	00001388 	.word	0x00001388

0800134c <HAL_GPIO_EXTI_Callback>:
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  /* Clear Wake Up Flag */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800134c:	2304      	movs	r3, #4
 800134e:	4a02      	ldr	r2, [pc, #8]	; (8001358 <HAL_GPIO_EXTI_Callback+0xc>)
 8001350:	6811      	ldr	r1, [r2, #0]
 8001352:	430b      	orrs	r3, r1
 8001354:	6013      	str	r3, [r2, #0]
}
 8001356:	4770      	bx	lr
 8001358:	40007000 	.word	0x40007000

0800135c <HAL_SYSTICK_Callback>:
  * @brief SYSTICK callback
  * @param None
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 800135c:	b510      	push	{r4, lr}
  HAL_IncTick();
 800135e:	f7ff f959 	bl	8000614 <HAL_IncTick>
}
 8001362:	bd10      	pop	{r4, pc}

08001364 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001364:	4770      	bx	lr

08001366 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler>

08001368 <SVC_Handler>:
 8001368:	4770      	bx	lr

0800136a <PendSV_Handler>:
 800136a:	4770      	bx	lr

0800136c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800136c:	b510      	push	{r4, lr}
  HAL_SYSTICK_IRQHandler();
 800136e:	f7ff f9c5 	bl	80006fc <HAL_SYSTICK_IRQHandler>
}
 8001372:	bd10      	pop	{r4, pc}

08001374 <EXTI0_1_IRQHandler>:
  * @brief  This function handles External lines 4 to 15 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_1_IRQHandler(void)
{
 8001374:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_EXTI_LINE);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff fa8c 	bl	8000894 <HAL_GPIO_EXTI_IRQHandler>
}
 800137c:	bd10      	pop	{r4, pc}
	...

08001380 <__libc_init_array>:
 8001380:	b570      	push	{r4, r5, r6, lr}
 8001382:	2600      	movs	r6, #0
 8001384:	4c0c      	ldr	r4, [pc, #48]	; (80013b8 <__libc_init_array+0x38>)
 8001386:	4d0d      	ldr	r5, [pc, #52]	; (80013bc <__libc_init_array+0x3c>)
 8001388:	1b64      	subs	r4, r4, r5
 800138a:	10a4      	asrs	r4, r4, #2
 800138c:	42a6      	cmp	r6, r4
 800138e:	d109      	bne.n	80013a4 <__libc_init_array+0x24>
 8001390:	2600      	movs	r6, #0
 8001392:	f000 f819 	bl	80013c8 <_init>
 8001396:	4c0a      	ldr	r4, [pc, #40]	; (80013c0 <__libc_init_array+0x40>)
 8001398:	4d0a      	ldr	r5, [pc, #40]	; (80013c4 <__libc_init_array+0x44>)
 800139a:	1b64      	subs	r4, r4, r5
 800139c:	10a4      	asrs	r4, r4, #2
 800139e:	42a6      	cmp	r6, r4
 80013a0:	d105      	bne.n	80013ae <__libc_init_array+0x2e>
 80013a2:	bd70      	pop	{r4, r5, r6, pc}
 80013a4:	00b3      	lsls	r3, r6, #2
 80013a6:	58eb      	ldr	r3, [r5, r3]
 80013a8:	4798      	blx	r3
 80013aa:	3601      	adds	r6, #1
 80013ac:	e7ee      	b.n	800138c <__libc_init_array+0xc>
 80013ae:	00b3      	lsls	r3, r6, #2
 80013b0:	58eb      	ldr	r3, [r5, r3]
 80013b2:	4798      	blx	r3
 80013b4:	3601      	adds	r6, #1
 80013b6:	e7f2      	b.n	800139e <__libc_init_array+0x1e>
 80013b8:	08001414 	.word	0x08001414
 80013bc:	08001414 	.word	0x08001414
 80013c0:	08001418 	.word	0x08001418
 80013c4:	08001414 	.word	0x08001414

080013c8 <_init>:
 80013c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ce:	bc08      	pop	{r3}
 80013d0:	469e      	mov	lr, r3
 80013d2:	4770      	bx	lr

080013d4 <_fini>:
 80013d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013da:	bc08      	pop	{r3}
 80013dc:	469e      	mov	lr, r3
 80013de:	4770      	bx	lr
